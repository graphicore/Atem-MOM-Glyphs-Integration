/** vim: et:ts=4:sw=4:sts=4
 * @license RequireJS 2.2.0 Copyright jQuery Foundation and other contributors.
 * Released under MIT license, http://github.com/requirejs/requirejs/LICENSE
 */
//Not using strict: uneven strict support in browsers, #392, and causes
//problems with requirejs.exec()/transpiler plugins that may not be strict.
/*jslint regexp: true, nomen: true, sloppy: true */
/*global window, navigator, document, importScripts, setTimeout, opera */

var requirejs, require, define;
(function (global) {
    var req, s, head, baseElement, dataMain, src,
        interactiveScript, currentlyAddingScript, mainScript, subPath,
        version = '2.2.0',
        commentRegExp = /(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/mg,
        cjsRequireRegExp = /[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g,
        jsSuffixRegExp = /\.js$/,
        currDirRegExp = /^\.\//,
        op = Object.prototype,
        ostring = op.toString,
        hasOwn = op.hasOwnProperty,
        isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document),
        isWebWorker = !isBrowser && typeof importScripts !== 'undefined',
        //PS3 indicates loaded and complete, but need to wait for complete
        //specifically. Sequence is 'loading', 'loaded', execution,
        // then 'complete'. The UA check is unfortunate, but not sure how
        //to feature test w/o causing perf issues.
        readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ?
                      /^complete$/ : /^(complete|loaded)$/,
        defContextName = '_',
        //Oh the tragedy, detecting opera. See the usage of isOpera for reason.
        isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',
        contexts = {},
        cfg = {},
        globalDefQueue = [],
        useInteractive = false;

    //Could match something like ')//comment', do not lose the prefix to comment.
    function commentReplace(match, multi, multiText, singlePrefix) {
        return singlePrefix || '';
    }

    function isFunction(it) {
        return ostring.call(it) === '[object Function]';
    }

    function isArray(it) {
        return ostring.call(it) === '[object Array]';
    }

    /**
     * Helper function for iterating over an array. If the func returns
     * a true value, it will break out of the loop.
     */
    function each(ary, func) {
        if (ary) {
            var i;
            for (i = 0; i < ary.length; i += 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    /**
     * Helper function for iterating over an array backwards. If the func
     * returns a true value, it will break out of the loop.
     */
    function eachReverse(ary, func) {
        if (ary) {
            var i;
            for (i = ary.length - 1; i > -1; i -= 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    function getOwn(obj, prop) {
        return hasProp(obj, prop) && obj[prop];
    }

    /**
     * Cycles over properties in an object and calls a function for each
     * property value. If the function returns a truthy value, then the
     * iteration is stopped.
     */
    function eachProp(obj, func) {
        var prop;
        for (prop in obj) {
            if (hasProp(obj, prop)) {
                if (func(obj[prop], prop)) {
                    break;
                }
            }
        }
    }

    /**
     * Simple function to mix in properties from source into target,
     * but only if target does not already have a property of the same name.
     */
    function mixin(target, source, force, deepStringMixin) {
        if (source) {
            eachProp(source, function (value, prop) {
                if (force || !hasProp(target, prop)) {
                    if (deepStringMixin && typeof value === 'object' && value &&
                        !isArray(value) && !isFunction(value) &&
                        !(value instanceof RegExp)) {

                        if (!target[prop]) {
                            target[prop] = {};
                        }
                        mixin(target[prop], value, force, deepStringMixin);
                    } else {
                        target[prop] = value;
                    }
                }
            });
        }
        return target;
    }

    //Similar to Function.prototype.bind, but the 'this' object is specified
    //first, since it is easier to read/figure out what 'this' will be.
    function bind(obj, fn) {
        return function () {
            return fn.apply(obj, arguments);
        };
    }

    function scripts() {
        return document.getElementsByTagName('script');
    }

    function defaultOnError(err) {
        throw err;
    }

    //Allow getting a global that is expressed in
    //dot notation, like 'a.b.c'.
    function getGlobal(value) {
        if (!value) {
            return value;
        }
        var g = global;
        each(value.split('.'), function (part) {
            g = g[part];
        });
        return g;
    }

    /**
     * Constructs an error with a pointer to an URL with more information.
     * @param {String} id the error ID that maps to an ID on a web page.
     * @param {String} message human readable error.
     * @param {Error} [err] the original error, if there is one.
     *
     * @returns {Error}
     */
    function makeError(id, msg, err, requireModules) {
        var e = new Error(msg + '\nhttp://requirejs.org/docs/errors.html#' + id);
        e.requireType = id;
        e.requireModules = requireModules;
        if (err) {
            e.originalError = err;
        }
        return e;
    }

    if (typeof define !== 'undefined') {
        //If a define is already in play via another AMD loader,
        //do not overwrite.
        return;
    }

    if (typeof requirejs !== 'undefined') {
        if (isFunction(requirejs)) {
            //Do not overwrite an existing requirejs instance.
            return;
        }
        cfg = requirejs;
        requirejs = undefined;
    }

    //Allow for a require config object
    if (typeof require !== 'undefined' && !isFunction(require)) {
        //assume it is a config object.
        cfg = require;
        require = undefined;
    }

    function newContext(contextName) {
        var inCheckLoaded, Module, context, handlers,
            checkLoadedTimeoutId,
            config = {
                //Defaults. Do not set a default for map
                //config to speed up normalize(), which
                //will run faster if there is no default.
                waitSeconds: 7,
                baseUrl: './',
                paths: {},
                bundles: {},
                pkgs: {},
                shim: {},
                config: {}
            },
            registry = {},
            //registry of just enabled modules, to speed
            //cycle breaking code when lots of modules
            //are registered, but not activated.
            enabledRegistry = {},
            undefEvents = {},
            defQueue = [],
            defined = {},
            urlFetched = {},
            bundlesMap = {},
            requireCounter = 1,
            unnormalizedCounter = 1;

        /**
         * Trims the . and .. from an array of path segments.
         * It will keep a leading path segment if a .. will become
         * the first path segment, to help with module name lookups,
         * which act like paths, but can be remapped. But the end result,
         * all paths that use this function should look normalized.
         * NOTE: this method MODIFIES the input array.
         * @param {Array} ary the array of path segments.
         */
        function trimDots(ary) {
            var i, part;
            for (i = 0; i < ary.length; i++) {
                part = ary[i];
                if (part === '.') {
                    ary.splice(i, 1);
                    i -= 1;
                } else if (part === '..') {
                    // If at the start, or previous value is still ..,
                    // keep them so that when converted to a path it may
                    // still work when converted to a path, even though
                    // as an ID it is less than ideal. In larger point
                    // releases, may be better to just kick out an error.
                    if (i === 0 || (i === 1 && ary[2] === '..') || ary[i - 1] === '..') {
                        continue;
                    } else if (i > 0) {
                        ary.splice(i - 1, 2);
                        i -= 2;
                    }
                }
            }
        }

        /**
         * Given a relative module name, like ./something, normalize it to
         * a real name that can be mapped to a path.
         * @param {String} name the relative name
         * @param {String} baseName a real name that the name arg is relative
         * to.
         * @param {Boolean} applyMap apply the map config to the value. Should
         * only be done if this normalization is for a dependency ID.
         * @returns {String} normalized name
         */
        function normalize(name, baseName, applyMap) {
            var pkgMain, mapValue, nameParts, i, j, nameSegment, lastIndex,
                foundMap, foundI, foundStarMap, starI, normalizedBaseParts,
                baseParts = (baseName && baseName.split('/')),
                map = config.map,
                starMap = map && map['*'];

            //Adjust any relative paths.
            if (name) {
                name = name.split('/');
                lastIndex = name.length - 1;

                // If wanting node ID compatibility, strip .js from end
                // of IDs. Have to do this here, and not in nameToUrl
                // because node allows either .js or non .js to map
                // to same file.
                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                }

                // Starts with a '.' so need the baseName
                if (name[0].charAt(0) === '.' && baseParts) {
                    //Convert baseName to array, and lop off the last part,
                    //so that . matches that 'directory' and not name of the baseName's
                    //module. For instance, baseName of 'one/two/three', maps to
                    //'one/two/three.js', but we want the directory, 'one/two' for
                    //this normalization.
                    normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                    name = normalizedBaseParts.concat(name);
                }

                trimDots(name);
                name = name.join('/');
            }

            //Apply map config if available.
            if (applyMap && map && (baseParts || starMap)) {
                nameParts = name.split('/');

                outerLoop: for (i = nameParts.length; i > 0; i -= 1) {
                    nameSegment = nameParts.slice(0, i).join('/');

                    if (baseParts) {
                        //Find the longest baseName segment match in the config.
                        //So, do joins on the biggest to smallest lengths of baseParts.
                        for (j = baseParts.length; j > 0; j -= 1) {
                            mapValue = getOwn(map, baseParts.slice(0, j).join('/'));

                            //baseName segment has config, find if it has one for
                            //this name.
                            if (mapValue) {
                                mapValue = getOwn(mapValue, nameSegment);
                                if (mapValue) {
                                    //Match, update name to the new value.
                                    foundMap = mapValue;
                                    foundI = i;
                                    break outerLoop;
                                }
                            }
                        }
                    }

                    //Check for a star map match, but just hold on to it,
                    //if there is a shorter segment match later in a matching
                    //config, then favor over this star map.
                    if (!foundStarMap && starMap && getOwn(starMap, nameSegment)) {
                        foundStarMap = getOwn(starMap, nameSegment);
                        starI = i;
                    }
                }

                if (!foundMap && foundStarMap) {
                    foundMap = foundStarMap;
                    foundI = starI;
                }

                if (foundMap) {
                    nameParts.splice(0, foundI, foundMap);
                    name = nameParts.join('/');
                }
            }

            // If the name points to a package's name, use
            // the package main instead.
            pkgMain = getOwn(config.pkgs, name);

            return pkgMain ? pkgMain : name;
        }

        function removeScript(name) {
            if (isBrowser) {
                each(scripts(), function (scriptNode) {
                    if (scriptNode.getAttribute('data-requiremodule') === name &&
                            scriptNode.getAttribute('data-requirecontext') === context.contextName) {
                        scriptNode.parentNode.removeChild(scriptNode);
                        return true;
                    }
                });
            }
        }

        function hasPathFallback(id) {
            var pathConfig = getOwn(config.paths, id);
            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {
                //Pop off the first array value, since it failed, and
                //retry
                pathConfig.shift();
                context.require.undef(id);

                //Custom require that does not do map translation, since
                //ID is "absolute", already mapped/resolved.
                context.makeRequire(null, {
                    skipMap: true
                })([id]);

                return true;
            }
        }

        //Turns a plugin!resource to [plugin, resource]
        //with the plugin being undefined if the name
        //did not have a plugin prefix.
        function splitPrefix(name) {
            var prefix,
                index = name ? name.indexOf('!') : -1;
            if (index > -1) {
                prefix = name.substring(0, index);
                name = name.substring(index + 1, name.length);
            }
            return [prefix, name];
        }

        /**
         * Creates a module mapping that includes plugin prefix, module
         * name, and path. If parentModuleMap is provided it will
         * also normalize the name via require.normalize()
         *
         * @param {String} name the module name
         * @param {String} [parentModuleMap] parent module map
         * for the module name, used to resolve relative names.
         * @param {Boolean} isNormalized: is the ID already normalized.
         * This is true if this call is done for a define() module ID.
         * @param {Boolean} applyMap: apply the map config to the ID.
         * Should only be true if this map is for a dependency.
         *
         * @returns {Object}
         */
        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {
            var url, pluginModule, suffix, nameParts,
                prefix = null,
                parentName = parentModuleMap ? parentModuleMap.name : null,
                originalName = name,
                isDefine = true,
                normalizedName = '';

            //If no name, then it means it is a require call, generate an
            //internal name.
            if (!name) {
                isDefine = false;
                name = '_@r' + (requireCounter += 1);
            }

            nameParts = splitPrefix(name);
            prefix = nameParts[0];
            name = nameParts[1];

            if (prefix) {
                prefix = normalize(prefix, parentName, applyMap);
                pluginModule = getOwn(defined, prefix);
            }

            //Account for relative paths if there is a base name.
            if (name) {
                if (prefix) {
                    if (pluginModule && pluginModule.normalize) {
                        //Plugin is loaded, use its normalize method.
                        normalizedName = pluginModule.normalize(name, function (name) {
                            return normalize(name, parentName, applyMap);
                        });
                    } else {
                        // If nested plugin references, then do not try to
                        // normalize, as it will not normalize correctly. This
                        // places a restriction on resourceIds, and the longer
                        // term solution is not to normalize until plugins are
                        // loaded and all normalizations to allow for async
                        // loading of a loader plugin. But for now, fixes the
                        // common uses. Details in #1131
                        normalizedName = name.indexOf('!') === -1 ?
                                         normalize(name, parentName, applyMap) :
                                         name;
                    }
                } else {
                    //A regular module.
                    normalizedName = normalize(name, parentName, applyMap);

                    //Normalized name may be a plugin ID due to map config
                    //application in normalize. The map config values must
                    //already be normalized, so do not need to redo that part.
                    nameParts = splitPrefix(normalizedName);
                    prefix = nameParts[0];
                    normalizedName = nameParts[1];
                    isNormalized = true;

                    url = context.nameToUrl(normalizedName);
                }
            }

            //If the id is a plugin id that cannot be determined if it needs
            //normalization, stamp it with a unique ID so two matching relative
            //ids that may conflict can be separate.
            suffix = prefix && !pluginModule && !isNormalized ?
                     '_unnormalized' + (unnormalizedCounter += 1) :
                     '';

            return {
                prefix: prefix,
                name: normalizedName,
                parentMap: parentModuleMap,
                unnormalized: !!suffix,
                url: url,
                originalName: originalName,
                isDefine: isDefine,
                id: (prefix ?
                        prefix + '!' + normalizedName :
                        normalizedName) + suffix
            };
        }

        function getModule(depMap) {
            var id = depMap.id,
                mod = getOwn(registry, id);

            if (!mod) {
                mod = registry[id] = new context.Module(depMap);
            }

            return mod;
        }

        function on(depMap, name, fn) {
            var id = depMap.id,
                mod = getOwn(registry, id);

            if (hasProp(defined, id) &&
                    (!mod || mod.defineEmitComplete)) {
                if (name === 'defined') {
                    fn(defined[id]);
                }
            } else {
                mod = getModule(depMap);
                if (mod.error && name === 'error') {
                    fn(mod.error);
                } else {
                    mod.on(name, fn);
                }
            }
        }

        function onError(err, errback) {
            var ids = err.requireModules,
                notified = false;

            if (errback) {
                errback(err);
            } else {
                each(ids, function (id) {
                    var mod = getOwn(registry, id);
                    if (mod) {
                        //Set error on module, so it skips timeout checks.
                        mod.error = err;
                        if (mod.events.error) {
                            notified = true;
                            mod.emit('error', err);
                        }
                    }
                });

                if (!notified) {
                    req.onError(err);
                }
            }
        }

        /**
         * Internal method to transfer globalQueue items to this context's
         * defQueue.
         */
        function takeGlobalQueue() {
            //Push all the globalDefQueue items into the context's defQueue
            if (globalDefQueue.length) {
                each(globalDefQueue, function(queueItem) {
                    var id = queueItem[0];
                    if (typeof id === 'string') {
                        context.defQueueMap[id] = true;
                    }
                    defQueue.push(queueItem);
                });
                globalDefQueue = [];
            }
        }

        handlers = {
            'require': function (mod) {
                if (mod.require) {
                    return mod.require;
                } else {
                    return (mod.require = context.makeRequire(mod.map));
                }
            },
            'exports': function (mod) {
                mod.usingExports = true;
                if (mod.map.isDefine) {
                    if (mod.exports) {
                        return (defined[mod.map.id] = mod.exports);
                    } else {
                        return (mod.exports = defined[mod.map.id] = {});
                    }
                }
            },
            'module': function (mod) {
                if (mod.module) {
                    return mod.module;
                } else {
                    return (mod.module = {
                        id: mod.map.id,
                        uri: mod.map.url,
                        config: function () {
                            return getOwn(config.config, mod.map.id) || {};
                        },
                        exports: mod.exports || (mod.exports = {})
                    });
                }
            }
        };

        function cleanRegistry(id) {
            //Clean up machinery used for waiting modules.
            delete registry[id];
            delete enabledRegistry[id];
        }

        function breakCycle(mod, traced, processed) {
            var id = mod.map.id;

            if (mod.error) {
                mod.emit('error', mod.error);
            } else {
                traced[id] = true;
                each(mod.depMaps, function (depMap, i) {
                    var depId = depMap.id,
                        dep = getOwn(registry, depId);

                    //Only force things that have not completed
                    //being defined, so still in the registry,
                    //and only if it has not been matched up
                    //in the module already.
                    if (dep && !mod.depMatched[i] && !processed[depId]) {
                        if (getOwn(traced, depId)) {
                            mod.defineDep(i, defined[depId]);
                            mod.check(); //pass false?
                        } else {
                            breakCycle(dep, traced, processed);
                        }
                    }
                });
                processed[id] = true;
            }
        }

        function checkLoaded() {
            var err, usingPathFallback,
                waitInterval = config.waitSeconds * 1000,
                //It is possible to disable the wait interval by using waitSeconds of 0.
                expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(),
                noLoads = [],
                reqCalls = [],
                stillLoading = false,
                needCycleCheck = true;

            //Do not bother if this call was a result of a cycle break.
            if (inCheckLoaded) {
                return;
            }

            inCheckLoaded = true;

            //Figure out the state of all the modules.
            eachProp(enabledRegistry, function (mod) {
                var map = mod.map,
                    modId = map.id;

                //Skip things that are not enabled or in error state.
                if (!mod.enabled) {
                    return;
                }

                if (!map.isDefine) {
                    reqCalls.push(mod);
                }

                if (!mod.error) {
                    //If the module should be executed, and it has not
                    //been inited and time is up, remember it.
                    if (!mod.inited && expired) {
                        if (hasPathFallback(modId)) {
                            usingPathFallback = true;
                            stillLoading = true;
                        } else {
                            noLoads.push(modId);
                            removeScript(modId);
                        }
                    } else if (!mod.inited && mod.fetched && map.isDefine) {
                        stillLoading = true;
                        if (!map.prefix) {
                            //No reason to keep looking for unfinished
                            //loading. If the only stillLoading is a
                            //plugin resource though, keep going,
                            //because it may be that a plugin resource
                            //is waiting on a non-plugin cycle.
                            return (needCycleCheck = false);
                        }
                    }
                }
            });

            if (expired && noLoads.length) {
                //If wait time expired, throw error of unloaded modules.
                err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);
                err.contextName = context.contextName;
                return onError(err);
            }

            //Not expired, check for a cycle.
            if (needCycleCheck) {
                each(reqCalls, function (mod) {
                    breakCycle(mod, {}, {});
                });
            }

            //If still waiting on loads, and the waiting load is something
            //other than a plugin resource, or there are still outstanding
            //scripts, then just try back later.
            if ((!expired || usingPathFallback) && stillLoading) {
                //Something is still waiting to load. Wait for it, but only
                //if a timeout is not already in effect.
                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {
                    checkLoadedTimeoutId = setTimeout(function () {
                        checkLoadedTimeoutId = 0;
                        checkLoaded();
                    }, 50);
                }
            }

            inCheckLoaded = false;
        }

        Module = function (map) {
            this.events = getOwn(undefEvents, map.id) || {};
            this.map = map;
            this.shim = getOwn(config.shim, map.id);
            this.depExports = [];
            this.depMaps = [];
            this.depMatched = [];
            this.pluginMaps = {};
            this.depCount = 0;

            /* this.exports this.factory
               this.depMaps = [],
               this.enabled, this.fetched
            */
        };

        Module.prototype = {
            init: function (depMaps, factory, errback, options) {
                options = options || {};

                //Do not do more inits if already done. Can happen if there
                //are multiple define calls for the same module. That is not
                //a normal, common case, but it is also not unexpected.
                if (this.inited) {
                    return;
                }

                this.factory = factory;

                if (errback) {
                    //Register for errors on this module.
                    this.on('error', errback);
                } else if (this.events.error) {
                    //If no errback already, but there are error listeners
                    //on this module, set up an errback to pass to the deps.
                    errback = bind(this, function (err) {
                        this.emit('error', err);
                    });
                }

                //Do a copy of the dependency array, so that
                //source inputs are not modified. For example
                //"shim" deps are passed in here directly, and
                //doing a direct modification of the depMaps array
                //would affect that config.
                this.depMaps = depMaps && depMaps.slice(0);

                this.errback = errback;

                //Indicate this module has be initialized
                this.inited = true;

                this.ignore = options.ignore;

                //Could have option to init this module in enabled mode,
                //or could have been previously marked as enabled. However,
                //the dependencies are not known until init is called. So
                //if enabled previously, now trigger dependencies as enabled.
                if (options.enabled || this.enabled) {
                    //Enable this module and dependencies.
                    //Will call this.check()
                    this.enable();
                } else {
                    this.check();
                }
            },

            defineDep: function (i, depExports) {
                //Because of cycles, defined callback for a given
                //export can be called more than once.
                if (!this.depMatched[i]) {
                    this.depMatched[i] = true;
                    this.depCount -= 1;
                    this.depExports[i] = depExports;
                }
            },

            fetch: function () {
                if (this.fetched) {
                    return;
                }
                this.fetched = true;

                context.startTime = (new Date()).getTime();

                var map = this.map;

                //If the manager is for a plugin managed resource,
                //ask the plugin to load it now.
                if (this.shim) {
                    context.makeRequire(this.map, {
                        enableBuildCallback: true
                    })(this.shim.deps || [], bind(this, function () {
                        return map.prefix ? this.callPlugin() : this.load();
                    }));
                } else {
                    //Regular dependency.
                    return map.prefix ? this.callPlugin() : this.load();
                }
            },

            load: function () {
                var url = this.map.url;

                //Regular dependency.
                if (!urlFetched[url]) {
                    urlFetched[url] = true;
                    context.load(this.map.id, url);
                }
            },

            /**
             * Checks if the module is ready to define itself, and if so,
             * define it.
             */
            check: function () {
                if (!this.enabled || this.enabling) {
                    return;
                }

                var err, cjsModule,
                    id = this.map.id,
                    depExports = this.depExports,
                    exports = this.exports,
                    factory = this.factory;

                if (!this.inited) {
                    // Only fetch if not already in the defQueue.
                    if (!hasProp(context.defQueueMap, id)) {
                        this.fetch();
                    }
                } else if (this.error) {
                    this.emit('error', this.error);
                } else if (!this.defining) {
                    //The factory could trigger another require call
                    //that would result in checking this module to
                    //define itself again. If already in the process
                    //of doing that, skip this work.
                    this.defining = true;

                    if (this.depCount < 1 && !this.defined) {
                        if (isFunction(factory)) {
                            //If there is an error listener, favor passing
                            //to that instead of throwing an error. However,
                            //only do it for define()'d  modules. require
                            //errbacks should not be called for failures in
                            //their callbacks (#699). However if a global
                            //onError is set, use that.
                            if ((this.events.error && this.map.isDefine) ||
                                req.onError !== defaultOnError) {
                                try {
                                    exports = context.execCb(id, factory, depExports, exports);
                                } catch (e) {
                                    err = e;
                                }
                            } else {
                                exports = context.execCb(id, factory, depExports, exports);
                            }

                            // Favor return value over exports. If node/cjs in play,
                            // then will not have a return value anyway. Favor
                            // module.exports assignment over exports object.
                            if (this.map.isDefine && exports === undefined) {
                                cjsModule = this.module;
                                if (cjsModule) {
                                    exports = cjsModule.exports;
                                } else if (this.usingExports) {
                                    //exports already set the defined value.
                                    exports = this.exports;
                                }
                            }

                            if (err) {
                                err.requireMap = this.map;
                                err.requireModules = this.map.isDefine ? [this.map.id] : null;
                                err.requireType = this.map.isDefine ? 'define' : 'require';
                                return onError((this.error = err));
                            }

                        } else {
                            //Just a literal value
                            exports = factory;
                        }

                        this.exports = exports;

                        if (this.map.isDefine && !this.ignore) {
                            defined[id] = exports;

                            if (req.onResourceLoad) {
                                var resLoadMaps = [];
                                each(this.depMaps, function (depMap) {
                                    resLoadMaps.push(depMap.normalizedMap || depMap);
                                });
                                req.onResourceLoad(context, this.map, resLoadMaps);
                            }
                        }

                        //Clean up
                        cleanRegistry(id);

                        this.defined = true;
                    }

                    //Finished the define stage. Allow calling check again
                    //to allow define notifications below in the case of a
                    //cycle.
                    this.defining = false;

                    if (this.defined && !this.defineEmitted) {
                        this.defineEmitted = true;
                        this.emit('defined', this.exports);
                        this.defineEmitComplete = true;
                    }

                }
            },

            callPlugin: function () {
                var map = this.map,
                    id = map.id,
                    //Map already normalized the prefix.
                    pluginMap = makeModuleMap(map.prefix);

                //Mark this as a dependency for this plugin, so it
                //can be traced for cycles.
                this.depMaps.push(pluginMap);

                on(pluginMap, 'defined', bind(this, function (plugin) {
                    var load, normalizedMap, normalizedMod,
                        bundleId = getOwn(bundlesMap, this.map.id),
                        name = this.map.name,
                        parentName = this.map.parentMap ? this.map.parentMap.name : null,
                        localRequire = context.makeRequire(map.parentMap, {
                            enableBuildCallback: true
                        });

                    //If current map is not normalized, wait for that
                    //normalized name to load instead of continuing.
                    if (this.map.unnormalized) {
                        //Normalize the ID if the plugin allows it.
                        if (plugin.normalize) {
                            name = plugin.normalize(name, function (name) {
                                return normalize(name, parentName, true);
                            }) || '';
                        }

                        //prefix and name should already be normalized, no need
                        //for applying map config again either.
                        normalizedMap = makeModuleMap(map.prefix + '!' + name,
                                                      this.map.parentMap);
                        on(normalizedMap,
                            'defined', bind(this, function (value) {
                                this.map.normalizedMap = normalizedMap;
                                this.init([], function () { return value; }, null, {
                                    enabled: true,
                                    ignore: true
                                });
                            }));

                        normalizedMod = getOwn(registry, normalizedMap.id);
                        if (normalizedMod) {
                            //Mark this as a dependency for this plugin, so it
                            //can be traced for cycles.
                            this.depMaps.push(normalizedMap);

                            if (this.events.error) {
                                normalizedMod.on('error', bind(this, function (err) {
                                    this.emit('error', err);
                                }));
                            }
                            normalizedMod.enable();
                        }

                        return;
                    }

                    //If a paths config, then just load that file instead to
                    //resolve the plugin, as it is built into that paths layer.
                    if (bundleId) {
                        this.map.url = context.nameToUrl(bundleId);
                        this.load();
                        return;
                    }

                    load = bind(this, function (value) {
                        this.init([], function () { return value; }, null, {
                            enabled: true
                        });
                    });

                    load.error = bind(this, function (err) {
                        this.inited = true;
                        this.error = err;
                        err.requireModules = [id];

                        //Remove temp unnormalized modules for this module,
                        //since they will never be resolved otherwise now.
                        eachProp(registry, function (mod) {
                            if (mod.map.id.indexOf(id + '_unnormalized') === 0) {
                                cleanRegistry(mod.map.id);
                            }
                        });

                        onError(err);
                    });

                    //Allow plugins to load other code without having to know the
                    //context or how to 'complete' the load.
                    load.fromText = bind(this, function (text, textAlt) {
                        /*jslint evil: true */
                        var moduleName = map.name,
                            moduleMap = makeModuleMap(moduleName),
                            hasInteractive = useInteractive;

                        //As of 2.1.0, support just passing the text, to reinforce
                        //fromText only being called once per resource. Still
                        //support old style of passing moduleName but discard
                        //that moduleName in favor of the internal ref.
                        if (textAlt) {
                            text = textAlt;
                        }

                        //Turn off interactive script matching for IE for any define
                        //calls in the text, then turn it back on at the end.
                        if (hasInteractive) {
                            useInteractive = false;
                        }

                        //Prime the system by creating a module instance for
                        //it.
                        getModule(moduleMap);

                        //Transfer any config to this other module.
                        if (hasProp(config.config, id)) {
                            config.config[moduleName] = config.config[id];
                        }

                        try {
                            req.exec(text);
                        } catch (e) {
                            return onError(makeError('fromtexteval',
                                             'fromText eval for ' + id +
                                            ' failed: ' + e,
                                             e,
                                             [id]));
                        }

                        if (hasInteractive) {
                            useInteractive = true;
                        }

                        //Mark this as a dependency for the plugin
                        //resource
                        this.depMaps.push(moduleMap);

                        //Support anonymous modules.
                        context.completeLoad(moduleName);

                        //Bind the value of that module to the value for this
                        //resource ID.
                        localRequire([moduleName], load);
                    });

                    //Use parentName here since the plugin's name is not reliable,
                    //could be some weird string with no path that actually wants to
                    //reference the parentName's path.
                    plugin.load(map.name, localRequire, load, config);
                }));

                context.enable(pluginMap, this);
                this.pluginMaps[pluginMap.id] = pluginMap;
            },

            enable: function () {
                enabledRegistry[this.map.id] = this;
                this.enabled = true;

                //Set flag mentioning that the module is enabling,
                //so that immediate calls to the defined callbacks
                //for dependencies do not trigger inadvertent load
                //with the depCount still being zero.
                this.enabling = true;

                //Enable each dependency
                each(this.depMaps, bind(this, function (depMap, i) {
                    var id, mod, handler;

                    if (typeof depMap === 'string') {
                        //Dependency needs to be converted to a depMap
                        //and wired up to this module.
                        depMap = makeModuleMap(depMap,
                                               (this.map.isDefine ? this.map : this.map.parentMap),
                                               false,
                                               !this.skipMap);
                        this.depMaps[i] = depMap;

                        handler = getOwn(handlers, depMap.id);

                        if (handler) {
                            this.depExports[i] = handler(this);
                            return;
                        }

                        this.depCount += 1;

                        on(depMap, 'defined', bind(this, function (depExports) {
                            if (this.undefed) {
                                return;
                            }
                            this.defineDep(i, depExports);
                            this.check();
                        }));

                        if (this.errback) {
                            on(depMap, 'error', bind(this, this.errback));
                        } else if (this.events.error) {
                            // No direct errback on this module, but something
                            // else is listening for errors, so be sure to
                            // propagate the error correctly.
                            on(depMap, 'error', bind(this, function(err) {
                                this.emit('error', err);
                            }));
                        }
                    }

                    id = depMap.id;
                    mod = registry[id];

                    //Skip special modules like 'require', 'exports', 'module'
                    //Also, don't call enable if it is already enabled,
                    //important in circular dependency cases.
                    if (!hasProp(handlers, id) && mod && !mod.enabled) {
                        context.enable(depMap, this);
                    }
                }));

                //Enable each plugin that is used in
                //a dependency
                eachProp(this.pluginMaps, bind(this, function (pluginMap) {
                    var mod = getOwn(registry, pluginMap.id);
                    if (mod && !mod.enabled) {
                        context.enable(pluginMap, this);
                    }
                }));

                this.enabling = false;

                this.check();
            },

            on: function (name, cb) {
                var cbs = this.events[name];
                if (!cbs) {
                    cbs = this.events[name] = [];
                }
                cbs.push(cb);
            },

            emit: function (name, evt) {
                each(this.events[name], function (cb) {
                    cb(evt);
                });
                if (name === 'error') {
                    //Now that the error handler was triggered, remove
                    //the listeners, since this broken Module instance
                    //can stay around for a while in the registry.
                    delete this.events[name];
                }
            }
        };

        function callGetModule(args) {
            //Skip modules already defined.
            if (!hasProp(defined, args[0])) {
                getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);
            }
        }

        function removeListener(node, func, name, ieName) {
            //Favor detachEvent because of IE9
            //issue, see attachEvent/addEventListener comment elsewhere
            //in this file.
            if (node.detachEvent && !isOpera) {
                //Probably IE. If not it will throw an error, which will be
                //useful to know.
                if (ieName) {
                    node.detachEvent(ieName, func);
                }
            } else {
                node.removeEventListener(name, func, false);
            }
        }

        /**
         * Given an event from a script node, get the requirejs info from it,
         * and then removes the event listeners on the node.
         * @param {Event} evt
         * @returns {Object}
         */
        function getScriptData(evt) {
            //Using currentTarget instead of target for Firefox 2.0's sake. Not
            //all old browsers will be supported, but this one was easy enough
            //to support and still makes sense.
            var node = evt.currentTarget || evt.srcElement;

            //Remove the listeners once here.
            removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');
            removeListener(node, context.onScriptError, 'error');

            return {
                node: node,
                id: node && node.getAttribute('data-requiremodule')
            };
        }

        function intakeDefines() {
            var args;

            //Any defined modules in the global queue, intake them now.
            takeGlobalQueue();

            //Make sure any remaining defQueue items get properly processed.
            while (defQueue.length) {
                args = defQueue.shift();
                if (args[0] === null) {
                    return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' +
                        args[args.length - 1]));
                } else {
                    //args are id, deps, factory. Should be normalized by the
                    //define() function.
                    callGetModule(args);
                }
            }
            context.defQueueMap = {};
        }

        context = {
            config: config,
            contextName: contextName,
            registry: registry,
            defined: defined,
            urlFetched: urlFetched,
            defQueue: defQueue,
            defQueueMap: {},
            Module: Module,
            makeModuleMap: makeModuleMap,
            nextTick: req.nextTick,
            onError: onError,

            /**
             * Set a configuration for the context.
             * @param {Object} cfg config object to integrate.
             */
            configure: function (cfg) {
                //Make sure the baseUrl ends in a slash.
                if (cfg.baseUrl) {
                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {
                        cfg.baseUrl += '/';
                    }
                }

                // Convert old style urlArgs string to a function.
                if (typeof cfg.urlArgs === 'string') {
                    var urlArgs = cfg.urlArgs;
                    cfg.urlArgs = function(id, url) {
                        return (url.indexOf('?') === -1 ? '?' : '&') + urlArgs;
                    };
                }

                //Save off the paths since they require special processing,
                //they are additive.
                var shim = config.shim,
                    objs = {
                        paths: true,
                        bundles: true,
                        config: true,
                        map: true
                    };

                eachProp(cfg, function (value, prop) {
                    if (objs[prop]) {
                        if (!config[prop]) {
                            config[prop] = {};
                        }
                        mixin(config[prop], value, true, true);
                    } else {
                        config[prop] = value;
                    }
                });

                //Reverse map the bundles
                if (cfg.bundles) {
                    eachProp(cfg.bundles, function (value, prop) {
                        each(value, function (v) {
                            if (v !== prop) {
                                bundlesMap[v] = prop;
                            }
                        });
                    });
                }

                //Merge shim
                if (cfg.shim) {
                    eachProp(cfg.shim, function (value, id) {
                        //Normalize the structure
                        if (isArray(value)) {
                            value = {
                                deps: value
                            };
                        }
                        if ((value.exports || value.init) && !value.exportsFn) {
                            value.exportsFn = context.makeShimExports(value);
                        }
                        shim[id] = value;
                    });
                    config.shim = shim;
                }

                //Adjust packages if necessary.
                if (cfg.packages) {
                    each(cfg.packages, function (pkgObj) {
                        var location, name;

                        pkgObj = typeof pkgObj === 'string' ? {name: pkgObj} : pkgObj;

                        name = pkgObj.name;
                        location = pkgObj.location;
                        if (location) {
                            config.paths[name] = pkgObj.location;
                        }

                        //Save pointer to main module ID for pkg name.
                        //Remove leading dot in main, so main paths are normalized,
                        //and remove any trailing .js, since different package
                        //envs have different conventions: some use a module name,
                        //some use a file name.
                        config.pkgs[name] = pkgObj.name + '/' + (pkgObj.main || 'main')
                                     .replace(currDirRegExp, '')
                                     .replace(jsSuffixRegExp, '');
                    });
                }

                //If there are any "waiting to execute" modules in the registry,
                //update the maps for them, since their info, like URLs to load,
                //may have changed.
                eachProp(registry, function (mod, id) {
                    //If module already has init called, since it is too
                    //late to modify them, and ignore unnormalized ones
                    //since they are transient.
                    if (!mod.inited && !mod.map.unnormalized) {
                        mod.map = makeModuleMap(id, null, true);
                    }
                });

                //If a deps array or a config callback is specified, then call
                //require with those args. This is useful when require is defined as a
                //config object before require.js is loaded.
                if (cfg.deps || cfg.callback) {
                    context.require(cfg.deps || [], cfg.callback);
                }
            },

            makeShimExports: function (value) {
                function fn() {
                    var ret;
                    if (value.init) {
                        ret = value.init.apply(global, arguments);
                    }
                    return ret || (value.exports && getGlobal(value.exports));
                }
                return fn;
            },

            makeRequire: function (relMap, options) {
                options = options || {};

                function localRequire(deps, callback, errback) {
                    var id, map, requireMod;

                    if (options.enableBuildCallback && callback && isFunction(callback)) {
                        callback.__requireJsBuild = true;
                    }

                    if (typeof deps === 'string') {
                        if (isFunction(callback)) {
                            //Invalid call
                            return onError(makeError('requireargs', 'Invalid require call'), errback);
                        }

                        //If require|exports|module are requested, get the
                        //value for them from the special handlers. Caveat:
                        //this only works while module is being defined.
                        if (relMap && hasProp(handlers, deps)) {
                            return handlers[deps](registry[relMap.id]);
                        }

                        //Synchronous access to one module. If require.get is
                        //available (as in the Node adapter), prefer that.
                        if (req.get) {
                            return req.get(context, deps, relMap, localRequire);
                        }

                        //Normalize module name, if it contains . or ..
                        map = makeModuleMap(deps, relMap, false, true);
                        id = map.id;

                        if (!hasProp(defined, id)) {
                            return onError(makeError('notloaded', 'Module name "' +
                                        id +
                                        '" has not been loaded yet for context: ' +
                                        contextName +
                                        (relMap ? '' : '. Use require([])')));
                        }
                        return defined[id];
                    }

                    //Grab defines waiting in the global queue.
                    intakeDefines();

                    //Mark all the dependencies as needing to be loaded.
                    context.nextTick(function () {
                        //Some defines could have been added since the
                        //require call, collect them.
                        intakeDefines();

                        requireMod = getModule(makeModuleMap(null, relMap));

                        //Store if map config should be applied to this require
                        //call for dependencies.
                        requireMod.skipMap = options.skipMap;

                        requireMod.init(deps, callback, errback, {
                            enabled: true
                        });

                        checkLoaded();
                    });

                    return localRequire;
                }

                mixin(localRequire, {
                    isBrowser: isBrowser,

                    /**
                     * Converts a module name + .extension into an URL path.
                     * *Requires* the use of a module name. It does not support using
                     * plain URLs like nameToUrl.
                     */
                    toUrl: function (moduleNamePlusExt) {
                        var ext,
                            index = moduleNamePlusExt.lastIndexOf('.'),
                            segment = moduleNamePlusExt.split('/')[0],
                            isRelative = segment === '.' || segment === '..';

                        //Have a file extension alias, and it is not the
                        //dots from a relative path.
                        if (index !== -1 && (!isRelative || index > 1)) {
                            ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);
                            moduleNamePlusExt = moduleNamePlusExt.substring(0, index);
                        }

                        return context.nameToUrl(normalize(moduleNamePlusExt,
                                                relMap && relMap.id, true), ext,  true);
                    },

                    defined: function (id) {
                        return hasProp(defined, makeModuleMap(id, relMap, false, true).id);
                    },

                    specified: function (id) {
                        id = makeModuleMap(id, relMap, false, true).id;
                        return hasProp(defined, id) || hasProp(registry, id);
                    }
                });

                //Only allow undef on top level require calls
                if (!relMap) {
                    localRequire.undef = function (id) {
                        //Bind any waiting define() calls to this context,
                        //fix for #408
                        takeGlobalQueue();

                        var map = makeModuleMap(id, relMap, true),
                            mod = getOwn(registry, id);

                        mod.undefed = true;
                        removeScript(id);

                        delete defined[id];
                        delete urlFetched[map.url];
                        delete undefEvents[id];

                        //Clean queued defines too. Go backwards
                        //in array so that the splices do not
                        //mess up the iteration.
                        eachReverse(defQueue, function(args, i) {
                            if (args[0] === id) {
                                defQueue.splice(i, 1);
                            }
                        });
                        delete context.defQueueMap[id];

                        if (mod) {
                            //Hold on to listeners in case the
                            //module will be attempted to be reloaded
                            //using a different config.
                            if (mod.events.defined) {
                                undefEvents[id] = mod.events;
                            }

                            cleanRegistry(id);
                        }
                    };
                }

                return localRequire;
            },

            /**
             * Called to enable a module if it is still in the registry
             * awaiting enablement. A second arg, parent, the parent module,
             * is passed in for context, when this method is overridden by
             * the optimizer. Not shown here to keep code compact.
             */
            enable: function (depMap) {
                var mod = getOwn(registry, depMap.id);
                if (mod) {
                    getModule(depMap).enable();
                }
            },

            /**
             * Internal method used by environment adapters to complete a load event.
             * A load event could be a script load or just a load pass from a synchronous
             * load call.
             * @param {String} moduleName the name of the module to potentially complete.
             */
            completeLoad: function (moduleName) {
                var found, args, mod,
                    shim = getOwn(config.shim, moduleName) || {},
                    shExports = shim.exports;

                takeGlobalQueue();

                while (defQueue.length) {
                    args = defQueue.shift();
                    if (args[0] === null) {
                        args[0] = moduleName;
                        //If already found an anonymous module and bound it
                        //to this name, then this is some other anon module
                        //waiting for its completeLoad to fire.
                        if (found) {
                            break;
                        }
                        found = true;
                    } else if (args[0] === moduleName) {
                        //Found matching define call for this script!
                        found = true;
                    }

                    callGetModule(args);
                }
                context.defQueueMap = {};

                //Do this after the cycle of callGetModule in case the result
                //of those calls/init calls changes the registry.
                mod = getOwn(registry, moduleName);

                if (!found && !hasProp(defined, moduleName) && mod && !mod.inited) {
                    if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {
                        if (hasPathFallback(moduleName)) {
                            return;
                        } else {
                            return onError(makeError('nodefine',
                                             'No define call for ' + moduleName,
                                             null,
                                             [moduleName]));
                        }
                    } else {
                        //A script that does not call define(), so just simulate
                        //the call for it.
                        callGetModule([moduleName, (shim.deps || []), shim.exportsFn]);
                    }
                }

                checkLoaded();
            },

            /**
             * Converts a module name to a file path. Supports cases where
             * moduleName may actually be just an URL.
             * Note that it **does not** call normalize on the moduleName,
             * it is assumed to have already been normalized. This is an
             * internal API, not a public one. Use toUrl for the public API.
             */
            nameToUrl: function (moduleName, ext, skipExt) {
                var paths, syms, i, parentModule, url,
                    parentPath, bundleId,
                    pkgMain = getOwn(config.pkgs, moduleName);

                if (pkgMain) {
                    moduleName = pkgMain;
                }

                bundleId = getOwn(bundlesMap, moduleName);

                if (bundleId) {
                    return context.nameToUrl(bundleId, ext, skipExt);
                }

                //If a colon is in the URL, it indicates a protocol is used and it is just
                //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)
                //or ends with .js, then assume the user meant to use an url and not a module id.
                //The slash is important for protocol-less URLs as well as full paths.
                if (req.jsExtRegExp.test(moduleName)) {
                    //Just a plain path, not module name lookup, so just return it.
                    //Add extension if it is included. This is a bit wonky, only non-.js things pass
                    //an extension, this method probably needs to be reworked.
                    url = moduleName + (ext || '');
                } else {
                    //A module that needs to be converted to a path.
                    paths = config.paths;

                    syms = moduleName.split('/');
                    //For each module name segment, see if there is a path
                    //registered for it. Start with most specific name
                    //and work up from it.
                    for (i = syms.length; i > 0; i -= 1) {
                        parentModule = syms.slice(0, i).join('/');

                        parentPath = getOwn(paths, parentModule);
                        if (parentPath) {
                            //If an array, it means there are a few choices,
                            //Choose the one that is desired
                            if (isArray(parentPath)) {
                                parentPath = parentPath[0];
                            }
                            syms.splice(0, i, parentPath);
                            break;
                        }
                    }

                    //Join the path parts together, then figure out if baseUrl is needed.
                    url = syms.join('/');
                    url += (ext || (/^data\:|^blob\:|\?/.test(url) || skipExt ? '' : '.js'));
                    url = (url.charAt(0) === '/' || url.match(/^[\w\+\.\-]+:/) ? '' : config.baseUrl) + url;
                }

                return config.urlArgs && !/^blob\:/.test(url) ?
                       url + config.urlArgs(moduleName, url) : url;
            },

            //Delegates to req.load. Broken out as a separate function to
            //allow overriding in the optimizer.
            load: function (id, url) {
                req.load(context, id, url);
            },

            /**
             * Executes a module callback function. Broken out as a separate function
             * solely to allow the build system to sequence the files in the built
             * layer in the right sequence.
             *
             * @private
             */
            execCb: function (name, callback, args, exports) {
                return callback.apply(exports, args);
            },

            /**
             * callback for script loads, used to check status of loading.
             *
             * @param {Event} evt the event from the browser for the script
             * that was loaded.
             */
            onScriptLoad: function (evt) {
                //Using currentTarget instead of target for Firefox 2.0's sake. Not
                //all old browsers will be supported, but this one was easy enough
                //to support and still makes sense.
                if (evt.type === 'load' ||
                        (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {
                    //Reset interactive script so a script node is not held onto for
                    //to long.
                    interactiveScript = null;

                    //Pull out the name of the module and the context.
                    var data = getScriptData(evt);
                    context.completeLoad(data.id);
                }
            },

            /**
             * Callback for script errors.
             */
            onScriptError: function (evt) {
                var data = getScriptData(evt);
                if (!hasPathFallback(data.id)) {
                    var parents = [];
                    eachProp(registry, function(value, key) {
                        if (key.indexOf('_@r') !== 0) {
                            each(value.depMaps, function(depMap) {
                                if (depMap.id === data.id) {
                                    parents.push(key);
                                    return true;
                                }
                            });
                        }
                    });
                    return onError(makeError('scripterror', 'Script error for "' + data.id +
                                             (parents.length ?
                                             '", needed by: ' + parents.join(', ') :
                                             '"'), evt, [data.id]));
                }
            }
        };

        context.require = context.makeRequire();
        return context;
    }

    /**
     * Main entry point.
     *
     * If the only argument to require is a string, then the module that
     * is represented by that string is fetched for the appropriate context.
     *
     * If the first argument is an array, then it will be treated as an array
     * of dependency string names to fetch. An optional function callback can
     * be specified to execute when all of those dependencies are available.
     *
     * Make a local req variable to help Caja compliance (it assumes things
     * on a require that are not standardized), and to give a short
     * name for minification/local scope use.
     */
    req = requirejs = function (deps, callback, errback, optional) {

        //Find the right context, use default
        var context, config,
            contextName = defContextName;

        // Determine if have config object in the call.
        if (!isArray(deps) && typeof deps !== 'string') {
            // deps is a config object
            config = deps;
            if (isArray(callback)) {
                // Adjust args if there are dependencies
                deps = callback;
                callback = errback;
                errback = optional;
            } else {
                deps = [];
            }
        }

        if (config && config.context) {
            contextName = config.context;
        }

        context = getOwn(contexts, contextName);
        if (!context) {
            context = contexts[contextName] = req.s.newContext(contextName);
        }

        if (config) {
            context.configure(config);
        }

        return context.require(deps, callback, errback);
    };

    /**
     * Support require.config() to make it easier to cooperate with other
     * AMD loaders on globally agreed names.
     */
    req.config = function (config) {
        return req(config);
    };

    /**
     * Execute something after the current tick
     * of the event loop. Override for other envs
     * that have a better solution than setTimeout.
     * @param  {Function} fn function to execute later.
     */
    req.nextTick = typeof setTimeout !== 'undefined' ? function (fn) {
        setTimeout(fn, 4);
    } : function (fn) { fn(); };

    /**
     * Export require as a global, but only if it does not already exist.
     */
    if (!require) {
        require = req;
    }

    req.version = version;

    //Used to filter out dependencies that are already paths.
    req.jsExtRegExp = /^\/|:|\?|\.js$/;
    req.isBrowser = isBrowser;
    s = req.s = {
        contexts: contexts,
        newContext: newContext
    };

    //Create default context.
    req({});

    //Exports some context-sensitive methods on global require.
    each([
        'toUrl',
        'undef',
        'defined',
        'specified'
    ], function (prop) {
        //Reference from contexts instead of early binding to default context,
        //so that during builds, the latest instance of the default context
        //with its config gets used.
        req[prop] = function () {
            var ctx = contexts[defContextName];
            return ctx.require[prop].apply(ctx, arguments);
        };
    });

    if (isBrowser) {
        head = s.head = document.getElementsByTagName('head')[0];
        //If BASE tag is in play, using appendChild is a problem for IE6.
        //When that browser dies, this can be removed. Details in this jQuery bug:
        //http://dev.jquery.com/ticket/2709
        baseElement = document.getElementsByTagName('base')[0];
        if (baseElement) {
            head = s.head = baseElement.parentNode;
        }
    }

    /**
     * Any errors that require explicitly generates will be passed to this
     * function. Intercept/override it if you want custom error handling.
     * @param {Error} err the error object.
     */
    req.onError = defaultOnError;

    /**
     * Creates the node for the load command. Only used in browser envs.
     */
    req.createNode = function (config, moduleName, url) {
        var node = config.xhtml ?
                document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') :
                document.createElement('script');
        node.type = config.scriptType || 'text/javascript';
        node.charset = 'utf-8';
        node.async = true;
        return node;
    };

    /**
     * Does the request to load a module for the browser case.
     * Make this a separate function to allow other environments
     * to override it.
     *
     * @param {Object} context the require context to find state.
     * @param {String} moduleName the name of the module.
     * @param {Object} url the URL to the module.
     */
    req.load = function (context, moduleName, url) {
        var config = (context && context.config) || {},
            node;
        if (isBrowser) {
            //In the browser so use a script tag
            node = req.createNode(config, moduleName, url);

            node.setAttribute('data-requirecontext', context.contextName);
            node.setAttribute('data-requiremodule', moduleName);

            //Set up load listener. Test attachEvent first because IE9 has
            //a subtle issue in its addEventListener and script onload firings
            //that do not match the behavior of all other browsers with
            //addEventListener support, which fire the onload event for a
            //script right after the script execution. See:
            //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution
            //UNFORTUNATELY Opera implements attachEvent but does not follow the script
            //script execution mode.
            if (node.attachEvent &&
                    //Check if node.attachEvent is artificially added by custom script or
                    //natively supported by browser
                    //read https://github.com/requirejs/requirejs/issues/187
                    //if we can NOT find [native code] then it must NOT natively supported.
                    //in IE8, node.attachEvent does not have toString()
                    //Note the test for "[native code" with no closing brace, see:
                    //https://github.com/requirejs/requirejs/issues/273
                    !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) &&
                    !isOpera) {
                //Probably IE. IE (at least 6-8) do not fire
                //script onload right after executing the script, so
                //we cannot tie the anonymous define call to a name.
                //However, IE reports the script as being in 'interactive'
                //readyState at the time of the define call.
                useInteractive = true;

                node.attachEvent('onreadystatechange', context.onScriptLoad);
                //It would be great to add an error handler here to catch
                //404s in IE9+. However, onreadystatechange will fire before
                //the error handler, so that does not help. If addEventListener
                //is used, then IE will fire error before load, but we cannot
                //use that pathway given the connect.microsoft.com issue
                //mentioned above about not doing the 'script execute,
                //then fire the script load event listener before execute
                //next script' that other browsers do.
                //Best hope: IE10 fixes the issues,
                //and then destroys all installs of IE 6-9.
                //node.attachEvent('onerror', context.onScriptError);
            } else {
                node.addEventListener('load', context.onScriptLoad, false);
                node.addEventListener('error', context.onScriptError, false);
            }
            node.src = url;

            //Calling onNodeCreated after all properties on the node have been
            //set, but before it is placed in the DOM.
            if (config.onNodeCreated) {
                config.onNodeCreated(node, config, moduleName, url);
            }

            //For some cache cases in IE 6-8, the script executes before the end
            //of the appendChild execution, so to tie an anonymous define
            //call to the module name (which is stored on the node), hold on
            //to a reference to this node, but clear after the DOM insertion.
            currentlyAddingScript = node;
            if (baseElement) {
                head.insertBefore(node, baseElement);
            } else {
                head.appendChild(node);
            }
            currentlyAddingScript = null;

            return node;
        } else if (isWebWorker) {
            try {
                //In a web worker, use importScripts. This is not a very
                //efficient use of importScripts, importScripts will block until
                //its script is downloaded and evaluated. However, if web workers
                //are in play, the expectation is that a build has been done so
                //that only one script needs to be loaded anyway. This may need
                //to be reevaluated if other use cases become common.

                // Post a task to the event loop to work around a bug in WebKit
                // where the worker gets garbage-collected after calling
                // importScripts(): https://webkit.org/b/153317
                setTimeout(function() {}, 0);
                importScripts(url);

                //Account for anonymous modules
                context.completeLoad(moduleName);
            } catch (e) {
                context.onError(makeError('importscripts',
                                'importScripts failed for ' +
                                    moduleName + ' at ' + url,
                                e,
                                [moduleName]));
            }
        }
    };

    function getInteractiveScript() {
        if (interactiveScript && interactiveScript.readyState === 'interactive') {
            return interactiveScript;
        }

        eachReverse(scripts(), function (script) {
            if (script.readyState === 'interactive') {
                return (interactiveScript = script);
            }
        });
        return interactiveScript;
    }

    //Look for a data-main script attribute, which could also adjust the baseUrl.
    if (isBrowser && !cfg.skipDataMain) {
        //Figure out baseUrl. Get it from the script tag with require.js in it.
        eachReverse(scripts(), function (script) {
            //Set the 'head' where we can append children by
            //using the script's parent.
            if (!head) {
                head = script.parentNode;
            }

            //Look for a data-main attribute to set main script for the page
            //to load. If it is there, the path to data main becomes the
            //baseUrl, if it is not already set.
            dataMain = script.getAttribute('data-main');
            if (dataMain) {
                //Preserve dataMain in case it is a path (i.e. contains '?')
                mainScript = dataMain;

                //Set final baseUrl if there is not already an explicit one,
                //but only do so if the data-main value is not a loader plugin
                //module ID.
                if (!cfg.baseUrl && mainScript.indexOf('!') === -1) {
                    //Pull off the directory of data-main for use as the
                    //baseUrl.
                    src = mainScript.split('/');
                    mainScript = src.pop();
                    subPath = src.length ? src.join('/')  + '/' : './';

                    cfg.baseUrl = subPath;
                }

                //Strip off any trailing .js since mainScript is now
                //like a module name.
                mainScript = mainScript.replace(jsSuffixRegExp, '');

                //If mainScript is still a path, fall back to dataMain
                if (req.jsExtRegExp.test(mainScript)) {
                    mainScript = dataMain;
                }

                //Put the data-main script in the files to load.
                cfg.deps = cfg.deps ? cfg.deps.concat(mainScript) : [mainScript];

                return true;
            }
        });
    }

    /**
     * The function that handles definitions of modules. Differs from
     * require() in that a string for the module should be the first argument,
     * and the function to execute after dependencies are loaded should
     * return a value to define the module corresponding to the first argument's
     * name.
     */
    define = function (name, deps, callback) {
        var node, context;

        //Allow for anonymous modules
        if (typeof name !== 'string') {
            //Adjust args appropriately
            callback = deps;
            deps = name;
            name = null;
        }

        //This module may not have dependencies
        if (!isArray(deps)) {
            callback = deps;
            deps = null;
        }

        //If no name, and callback is a function, then figure out if it a
        //CommonJS thing with dependencies.
        if (!deps && isFunction(callback)) {
            deps = [];
            //Remove comments from the callback string,
            //look for require calls, and pull them into the dependencies,
            //but only if there are function args.
            if (callback.length) {
                callback
                    .toString()
                    .replace(commentRegExp, commentReplace)
                    .replace(cjsRequireRegExp, function (match, dep) {
                        deps.push(dep);
                    });

                //May be a CommonJS thing even without require calls, but still
                //could use exports, and module. Avoid doing exports and module
                //work though if it just needs require.
                //REQUIRES the function to expect the CommonJS variables in the
                //order listed below.
                deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);
            }
        }

        //If in IE 6-8 and hit an anonymous define() call, do the interactive
        //work.
        if (useInteractive) {
            node = currentlyAddingScript || getInteractiveScript();
            if (node) {
                if (!name) {
                    name = node.getAttribute('data-requiremodule');
                }
                context = contexts[node.getAttribute('data-requirecontext')];
            }
        }

        //Always save off evaluating the def call until the script onload handler.
        //This allows multiple modules to be in a file without prematurely
        //tracing dependencies, and allows for anonymous module support,
        //where the module name is not known until the script onload event
        //occurs. If no context, use the global queue, and get it processed
        //in the onscript load callback.
        if (context) {
            context.defQueue.push([name, deps, callback]);
            context.defQueueMap[name] = true;
        } else {
            globalDefQueue.push([name, deps, callback]);
        }
    };

    define.amd = {
        jQuery: true
    };

    /**
     * Executes the text. Normally just uses eval, but can be modified
     * to use a better, environment-specific call. Only used for transpiling
     * loader plugins, not for plain JS modules.
     * @param {String} text the text to execute/evaluate.
     */
    req.exec = function (text) {
        /*jslint evil: true */
        return eval(text);
    };

    //Set up with config info.
    req(cfg);
}(this));

define("requireLib", function(){});

define('bower_components/Atem-RequireJS-Config/tools',[], function(){
    "use strict";

    function copyItems(from, to) {
        var keys = Object.keys(from)
          , i, l, k
          ;
        for(i=0,l=keys.length;i<l;i++) {
            k = keys[i];
            to[k] = from[k];
        }
    }


    /**
     * This is no deep cloning, but it clones so deep that the "bowerPrefix"
     * string manipulation doesn't change the "defaults"  object, and that
     * a efault "excludeShallow" array is not extended by its counterpart
     * in setup.
     */
    function copySetup(from, to, skip) {
        var k;
        for(k in from) {
            if( skip && k in skip )
                continue;

            if(from[k] instanceof Array && to[k] instanceof Array)
                // append to "to"
                Array.prototype.push.apply(to[k], from[k]);
            else if(typeof from[k] === 'object' && typeof to[k] === 'object')
                copyItems(from[k], to[k]);
            else if(from[k] instanceof Array)
                to[k] = from[k].slice();
            else if(typeof from[k] === 'object') {
                to[k] = {};
                copyItems(from[k], to[k]);
            }
            else
                to[k] = from[k];
        }
    }

    var hasGenerators = false;
    try {
        /*jshint evil:true*/
        eval("(function *(){})()");
        hasGenerators = true;
    } catch(err) {/* No generators (or some silly typo above)*/}

    function configure(defaults, setup, require) {
        var result = {}, k, i, l, v;
        copySetup(defaults, result);
        copySetup(setup, result, {'bowerPrefix': 1});

        if('bowerPrefix' in setup && 'paths' in result)
            for(k in result.paths)
                result.paths[k] = result.paths[k]
                                    .replace(/%bower%/g, setup.bowerPrefix);

        if(hasGenerators && 'es6Variants' in result) {
            for(i=0,l=result.es6Variants.length;i<l;i++) {
                k = result.es6Variants[i];
                if(k in result.paths)
                    throw new Error('es6Variant "' + k + '" is already key in'
                                                   + ' requirejs config.path.');
                v = k.split('/');
                if(v[0] in result.paths)
                    v[0] = result.paths[v[0]];
                v = v.join('/') + '.es6';
                result.paths[k] = v;
            }
            delete result.es6Variants;
        }

        require.config(result);
    }
    return {
        configure: configure
      , copyItems: copyItems
      , copySetup: copySetup
    };
});

define('bower_components/Atem-RequireJS-Config/genericConfig',[], function(){
    "use strict";

    // this is configuration that is shared between all configuration
    // targets. I.e. Node.js and Browsers at the moment
    var config = {
        paths: {
            'Atem-CPS': '%bower%/Atem-CPS/lib'
          , 'Atem-CPS-whitelisting': '%bower%/Atem-CPS-whitelisting/lib'
          , 'Atem-CPS-Toolkit': '%bower%/Atem-CPS-Toolkit/lib'
          , 'Atem-Errors': '%bower%/Atem-Errors/lib'
          , 'Atem-IO': '%bower%/Atem-IO/lib'
          , 'Atem-Math-Tools': '%bower%/Atem-Math-Tools/lib'
          , 'Atem-Pen-Case': '%bower%/Atem-Pen-Case/lib'
          , 'Atem-Property-Language': '%bower%/Atem-Property-Language/lib'
          , 'Atem-Logging': '%bower%/Atem-Logging/lib'
          , 'Atem-MOM': '%bower%/Atem-MOM/lib'
          , 'Atem-MOM-Toolkit': '%bower%/Atem-MOM-Toolkit/lib'
          , 'obtain': '%bower%/obtainjs/lib'
          , 'complex': '%bower%/complex/lib'
          , 'gonzales': '%bower%/gonzales/amd'
          , 'bloomfilter': '%bower%/bloomfilter.js/bloomfilter'
          , 'ufojs': '%bower%/ufoJS/lib'
          , 'util-logging': '%bower%/util-logging-amd/lib'
          , 'metapolator-cpsLib': '%bower%/metapolator-cpsLib/lib'

          , 'requireLib': '%bower%/requirejs/require'
          , 'require/text': '%bower%/requirejs-text/text'
          , 'yaml': '%bower%/js-yaml/dist/js-yaml.min'
          , 'jszip': '%bower%/jszip/dist/jszip'
          , 'EventEmitter': '%bower%/event-emitter.js/dist/event-emitter'
          , 'opentype': '%bower%/opentype.js/dist/opentype.min'
          , 'marked': '%bower%/marked/lib/marked'
          , 'mustache': '%bower%/mustache.js/mustache'

            // Atem applications must override their own path in their own setup
          , 'metapolator': '%bower%/metapolator/app/lib'
          , 'BEF': '%bower%/Bauhaus-Emblem-Font/app/lib'
          , 'Atem-CPS-Developer-Tool': '%bower%/Atem-CPS-Developer-Tool/app/lib'

        }
      , es6Variants: [
            'Atem-MOM/rendering/basics'
          , 'Atem-MOM/export/UFOExporter'
          , 'Atem-MOM/export/OTFExporter'
          , 'Atem-MOM/import/UFOImporter'
        ]
    };
    return config;
});

define('bower_components/Atem-RequireJS-Config/browserConfig',[
    './tools'
  , './genericConfig'
], function(
    tools
  , genericConfig
){
    "use strict";

    var copyItems = tools.copyItems
      , configure = tools.configure
      , copySetup = tools.copySetup
      , defaults = Object.create(null)
      , browserConfig
      ;

    copySetup(genericConfig, defaults);

    // browser specific configuration goes here
    browserConfig = {
        paths: {
            'require/domReady': '%bower%/requirejs-domReady/domReady'
          , 'angular': '%bower%/angular/angular'
          , 'filesaver': '%bower%/file-saver.js/FileSaver'
          , 'jquery': '%bower%/jquery/dist/jquery.min'
          , 'd3': '%bower%/d3/d3.min'
          , 'jquery-ui': '%bower%/jquery.ui/ui'
          , 'angular-ui-sortable': 'bower_components/angular-ui-sortable/sortable.min'
          // browserify-converted versions of node modules
          , 'path': '%bower%/path/path'
          , 'util': '%bower%/util/util'
          // this is a bit special!
          , 'socketio': '../socket.io/socket.io'
        }
        // exclude on build
        // TODO: is this probably just metapolator specific at the moment
      // can we just use babel for this?
      , excludeShallow: [
            // the optimizer can't read es6 generators
            // NOTE: for dependency tracing the genereated es5 version is used
            // by the optimizer. The feature detection will swaps the paths
            // to load the right module
            'Atem-MOM/rendering/basics'
          , 'Atem-MOM/export/UFOExporter'
          , 'Atem-MOM/export/OTFExporter'
          , 'Atem-MOM/import/UFOImporter'
        ]
      , shim: {
      // this created a dependency to jquery that is not true just
      // for angular. If a module has a hard dependency on jquery
      // it should be defined for that module directly.
      // I'm not a friend of having jquery as such a low level dependency
      // for all of atem. Especially because we hardly need it.
            angular: {
      //        deps: ['jquery'],
              exports: 'angular'
            }
          , 'angular-ui-sortable': {
                deps: ['jquery-ui/sortable', 'angular']
            }
          , yaml: {
                exports: 'jsyaml'
            }
          , 'socketio': {
                exports: 'io'
            }
        }
    };

    copySetup(browserConfig, defaults);
    return configure.bind(null, defaults);
});

define('bootstrap',[
    'bower_components/Atem-RequireJS-Config/browserConfig'
], function(
    configure
) {
    "use strict";
    var setup = {
        baseUrl: 'lib'
      , bowerPrefix: 'bower_components'
      , paths: {
            'Atem-MOM-Glyphs-Integration': './'
        }
    }
    configure(setup, require);
    return require;
});

require(["bootstrap"], function(require) {require(["main"], function(main){main(window);});});
define("init", function(){});

define('Atem-Errors/errors',[],function() {
    "use strict";
    //metapolator errors
    var errors = Object.create(null);

    /**
     * save three lines of coding for each error with this factory
     *
     * and observe that extending Error is uncool
     */
    var makeError = function(namespace, name, Constructor, Parent)
    {
        if(Parent === undefined)
            Parent = Error;

        if(Constructor === undefined) {
            Constructor = function(message, stack) {
                if(message !== undefined) {
                    this.name = name + 'Error';
                    this.message = message || "(no error message)";
                }

                if(!stack && typeof Error.captureStackTrace === 'function')
                    Error.captureStackTrace(this, Constructor);
                else {
                    this.stack = stack || (new Error()).stack || '(no stack available)';
                }
            };
        }
        Constructor.prototype = Object.create(Parent.prototype);
        Constructor.prototype.constructor = Constructor;

        namespace[name] = Constructor;
    };
    errors.makeError = makeError;

    /**
     * Some generally useful errors
     */
    makeError(errors, 'Error');
    makeError(errors, 'Unhandled');
    makeError(errors, 'Type', undefined, TypeError);
    makeError(errors, 'Assertion', undefined, errors.Error);
    makeError(errors, 'Value', undefined, errors.Error);
    makeError(errors, 'Key', undefined, errors.Error);
    makeError(errors, 'NotImplemented', undefined, errors.Error);
    makeError(errors, 'Deprecated', undefined, errors.Error);
    makeError(errors, 'AbstractInterface', undefined, errors.Error);
    makeError(errors, 'Event', undefined, errors.Error);
    makeError(errors, 'Emitter', undefined, errors.Event);
    makeError(errors, 'Receiver', undefined, errors.Event);


    /**
     * if expression is false, throw an Assertion
     * pass a message to explain yourself
     **/
    errors.assert = function(exp, message) {
        if (!exp) {
            throw new errors.Assertion(message);
        }
    };
    errors.warn = function(message) {
        if(typeof console !== 'undefined' && console.warn)
            console.warn('WARNING: ' + message);
    };

    /**
     * ES6/Promises have the fundamental flaw, that, if there is no
     * Error handler attached, an unhandled error stays unnoticed and
     * just disappears.
     * Because handling all Errors always correctly is not possible at
     * any given time e.g. a program may still be under construction for
     * example, this is a default handler to mark a promise as unhandled.
     *
     * Using this error-handler at the very end of the promise chain
     * ensures that the unhandled Proxy exception is not just disappearing
     * unnoticed by the main program.
     */
    function unhandledPromise(originalError) {
        var error = new errors.Unhandled(originalError+'\n'+originalError.stack);
        error.originalError = originalError;
        // use setTimout to escape the catch all that es6/Promise applies
        // and that silences unhandled errors
        setTimeout(function unhandledError(){throw error;}, 0);
    }
    errors.unhandledPromise = unhandledPromise;

    Object.freeze(errors)
    return errors;
});

define('Atem-CPS/errors',[
    'Atem-Errors/errors'
], function(
    atemErrors
) {
    var errors = Object.create(atemErrors)
      , makeError = atemErrors.makeError.bind(null, errors)
      ;

    makeError('CPS', undefined, errors.Error);
    makeError('CPSKey', undefined, errors.Error);
    makeError('OMA', undefined, errors.CPS);
    makeError('OMAId', undefined, errors.CPS);
    makeError('CPSRecursion', undefined, errors.CPS);
    makeError('CPSRecursionKey', undefined, errors.CPSKey);
    makeError('CPSFormula', undefined, errors.CPS);
    makeError('Project', undefined, errors.CPS);
    makeError('PointPen', undefined, errors.CPS);
    makeError('CPSParser', undefined, errors.CPS);

    return errors;
});

define('Atem-MOM/errors',[
    'Atem-CPS/errors'
], function(
    atemErrors
) {
    var errors = Object.create(atemErrors)
      , makeError = atemErrors.makeError.bind(null, errors)
      ;

    makeError('MOM', undefined, errors.OMA);
    makeError('Import', undefined, errors.MOM);
    makeError('ImportPenstroke', undefined, errors.Import);
    makeError('ImportContour', undefined, errors.Import);
    makeError('CommandLine', undefined, errors.Import);

    return errors;
});

define('Atem-IO/errors',[
    'Atem-Errors/errors'
], function(
    atemErrors
) {
    var errors = Object.create(atemErrors)
      , makeError = atemErrors.makeError.bind(null, errors)
      ;

    makeError('IO', undefined , errors.Error);
    makeError('IONoEntry', undefined, errors.IO);
    makeError('IOEntryExists', undefined, errors.IO);
    makeError('IONotDir', undefined, errors.IO);
    makeError('IOIsDir', undefined, errors.IO);
    makeError('IONotEmpty', undefined, errors.IO);
    makeError('IOMaxRecursion', undefined, errors.IOMaxRecursion);

    return errors;
});

define('obtain/Promise',[], function() {
    "use strict";
    /**
     * This is a module to pull in an Ecmascript 6 compatible Promise
     * implementation for NodeJS. For browsers: only decent/current browsers
     * are supported. Older firefox may have Promise by setting in
     * "dom.promise.enabled" in about:config to true.
     */
    if(typeof window !== 'undefined')
        if(window.Promise)
            return window.Promise
        else
            throw new Error('Your Browser doesn\'t support promises yet')
    else
    // expect node.js and expect the AMD Loader to provide the original node require
        return require.nodeRequire('lie')
});

define('obtain/obtain',['./Promise'], function(Promise) {
    "use strict";
    function NotImplementedError(){}

    function Expectation(name) {
        Object.defineProperty(this, 'name', {
            get: function() {return name;}
        });
    }
    Expectation.prototype = Object.create(Error.prototype)
    Expectation.prototype.toString = function expectationString() {
        return '<Expectation ' + this.name +'>'
    }


    function Argument(value) {
        Object.defineProperty(this, 'value', {
            get: function() { return value; }
        });
    }
    Argument.prototype.toString = function argumentString() {
        return '<Argument ' + this.value +'>'
    }

    /**
     *
     * args may be an empty list, if this is the definition of an callerArgument.
     * That is a dependency that gets injected when calling the method.
     *
     */
    function Dependency(name, async,
                        args/* [argumentNames, ... , function getter] */) {
        var args = args.slice(0) // make a copy and so don't change the outer world
          , getter = args.pop()
          , dependencies = []
          , skip = async ? {_callback: null, _errback: null} : {}
          , i = 0
          ;

        // Dependencies of this Dependency (Expectations) are everything
        // where typeof x === 'string' e.G. strings created with the string
        // literal. To pass a string as string argument use: new String('value')
        // So typeof x will be 'object' or use the Argument constructor of
        // this package: new Argument('value')

        // Exclude all args that are no Expectations but the value to be
        // passed itself.


        // dependencies are cleaned args: no doubles, no specials,
        // no curried values. Specials are '_callback' and '_errback',
        // although this api may change soon!
        for(;i<args.length; i++) {
            // this is a "curried" argument, not an Expectation
            if(typeof args[i] !== 'string' || args[i] in skip)
                continue;
            skip[args[i]] = null
            dependencies.push(args[i])
        }

        Object.defineProperty(this, 'name', {
            get: function() { return name; }
        });

        Object.defineProperty(this, 'async', {
            get: function() { return !!async; }
        });

        Object.defineProperty(this, 'getter', {
            get: function() { return getter; }
        });

        Object.defineProperty(this, 'args', {
            get: function() { return args.slice(0); }
        });

        Object.defineProperty(this, 'hasDependencies', {
            get: function() { return !!dependencies.length; }
        });

        Object.defineProperty(this, 'dependencyCount', {
            get: function() { return dependencies.length; }
        });

        Object.defineProperty(this, 'dependencies', {
            get: function() { return dependencies.slice(0); }
        });
    }
    var _Dp = Dependency.prototype;

    _Dp.toString = function dependencyString() {
        return '<Dependency ' + this.name +'>'
    }

    _Dp._getArg = function(getValue, item) {
        if(typeof item === 'string')
            // may throw an Expectation
            return getValue(item);
        return item instanceof Argument ? item.value : item;
    }

    _Dp.getArgs = function(getValue/* a function*/,
            callback /* if this.async */, errback /* if this.async */) {

        // depending on the arguments and callback style of this method
        // we need to figure out how to call it:
        var i=0
          , args = this.args
          , values = []
          , specialIndexes = {_callback: [], _errback: []}
          , unified_callback
          ;

        if(!this.async) {
            for(;i<args.length;i++)
                values.push(this._getArg(getValue, args[i]))
        }
        else {

            for(;i<args.length;i++) {
                if(args[i] in specialIndexes) {
                    specialIndexes[args[i]].push(i)
                    values.push(null) // will be filled below
                }
                else
                    values.push(this._getArg(getValue, args[i]))
            }

            // figure out the callback style
            if(!specialIndexes._errback.length)
                // define
                unified_callback = function(error, result) {
                    if(error !== null && error !== undefined)
                        errback(error)
                    else
                        callback(result);
                };
            else
                for(i=0; i<specialIndexes._errback.length; i++)
                    values[specialIndexes._errback[i]] = errback;

            for(i=0; i<specialIndexes._callback.length; i++)
                values[specialIndexes._callback[i]] = unified_callback || callback;
            // if neither _callback nor _errback where defined it's still
            // possible for the method to return a promise
        }
        return values
    }


    function DependencyFrame(dependency) {
        this.name = dependency.name;
        this.visitDependencies = dependency.hasDependencies;
        this.dependency = dependency;
        this.dependencyCount = dependency.dependencyCount;
    }

    function AsyncExecutionException(){}

    function AssertionFailed(message) {
        this.message = message;
        this.name = "AssertionFailed";
        if(typeof Error.captureStackTrace === 'function')
            Error.captureStackTrace(this, AssertionFailed);
        else
            this.stack = new Error().stack
    }
    AssertionFailed.prototype = Object.create(Error.prototype)

    function assert(test, message) {
        if(!test)
            throw new AssertionFailed(message);
    }

    function DependencyGraphError(message) {
        this.message = message;
        this.name = "DependencyGraphError";
        if(typeof Error.captureStackTrace === 'function')
            Error.captureStackTrace(this, AssertionFailed);
        else
            this.stack = new Error().stack
    }
    DependencyGraphError.prototype = Object.create(Error.prototype)

    function DependencyGraph(
            syncGetters, asyncGetters, callerArguments, job) {
        this.asyncGetters = asyncGetters;
        this.syncGetters = syncGetters;

        this._cache = {
          // caches the results of getDependency
            _asyncDependencies: {}
          , _syncDependencies: {}
          , _callerArgumentsDependencies: {}
          // caches the results of _getEvaluationOrder
          , asyncEvaluation: {}
          , syncEvaluation: {}
        }

        // list of argument names of the 'job'
        this.callerArguments = callerArguments instanceof Array
            ? callerArguments
            : [];

        this.job = job;
    }

    var _DGp = DependencyGraph.prototype;

    _DGp._nameIsCallerArg = function(name) {
        var i=0;
        for(;i<this.callerArguments.length;i++)
            if(this.callerArguments[i] === name)
                return true;
        return false;
    }

    /**
     * Get the Dependency instance for name.
     * If mayBeAsync is true and an asyncGetter for name is defined,
     * the Dependency will resolve asynchronous. Otherwise it will be
     * synchronous.
     *
     * caches created Dependency instances, these are reuseable
     */
    _DGp.getDependency = function(mayBeAsync, name) {
        var isAsync = false
          , isArgument = false
          , cache
          , getterDef
          , nameIsCallerArg
          , i=0
          ;
        if(this._nameIsCallerArg(name)) {
            // caller arguments are sync, one could say
            isArgument = true
            cache = this._cache._callerArgumentsDependencies
        }
        else if(mayBeAsync && name in this.asyncGetters) {
            isAsync = true;
            cache = this._cache._asyncDependencies;
        }
        else if(!(name in this.syncGetters))
            throw new DependencyGraphError(['Name "',name, '" not found '
                                      +'in DependencyGraph.'].join(''));
        else
            cache = this._cache._syncDependencies;

        if(!(name in cache)) {
            getterDef = !isArgument
                // pick the right implementation
                ? (isAsync ? this.asyncGetters : this.syncGetters)[name]
                // an argument has no definition
                : [];

            cache[name] = new Dependency(name, isAsync, getterDef)
        }
        return cache[name];
    }

    /**
     * prepare evaluation
     */
    _DGp._getEvaluationOrder = function (async, startNode) {
        var stack = []
        , dependencyCount = {} // return value
        , dependents = {} // return value
        , visiting = {} // detect circles
        , visited = {} // detect circles
        , path = [] // only needed for good error reporting
        , frame, length, i, dependency, getFrame
        ;

        // factory and currying the async away
        getFrame = function(name) {
            return new DependencyFrame(this.getDependency(async, name));
        }.bind(this);

        stack.push(getFrame(startNode));
        dependents[startNode] = [];
        while(stack.length) {
            frame = stack[stack.length-1];

            if(frame.name in visited) {
                stack.pop(); // clear frame
                continue;
            }

            if(frame.visitDependencies && (frame.name in visiting))
                // I think a direct error is better here. However, we could
                // collect all found strongly connected components and return
                // these. That might ease debugging or make it harder.
                throw new DependencyGraphError(['Circle detected but the '
                            , 'graph must be acyclic!'
                            , 'Current frame.name:', frame.name
                            , 'Path:', path.join('->')
                            , 'strongly connected component:'
                            , path.slice(path.indexOf(frame.name)).concat([frame.name]).join('->')
                            ].join(' '));

            // path is only used for the error message above
            path.push(frame.name);

            dependencyCount[frame.name] = frame.dependencyCount;
            if(frame.visitDependencies) {
                // entering the frames dependencies
                visiting[frame.name] = null;
                frame.visitDependencies = false;

                for(i=0; i<frame.dependencyCount; i++) {
                    dependency = frame.dependency.dependencies[i];

                    // create the transpose graph
                    if(!(dependency in dependents))
                        dependents[dependency] = [];
                    // frame.name is a dependent of dependency
                    dependents[dependency].push(frame.name);

                    if(dependency in visited)
                        // shortcut: this will be detected at the beginning of
                        // the while loop anyways, so we save us from creating,
                        // pushing and then popping the frame
                        continue;

                    // create a new frame
                    // Frame.visitDependencies is true when the dependency has any dependencies
                    stack.push(getFrame(dependency));
                }
            }
            else {
                // leaving the frame
                visited[frame.name] = null;
                path.pop();
                stack.pop();
            }
        }
        return [dependencyCount, dependents]
    }

    /**
     * Return the result of _getEvaluationOrder (with underscore).
     * The result will be cached for later possible executions.
     */
    _DGp.getEvaluationOrder = function(async, startNode) {
        var cache = async
            ? this._cache.asyncEvaluation
            : this._cache.syncEvaluation
          , cacheItem
          , copy = [{}, {}]
          , k
          ;
        if(!(startNode in cache))
            cache[startNode] = this._getEvaluationOrder(async, startNode)
        cacheItem = cache[startNode];
        for(k in cacheItem[0])
            copy[0][k] = cacheItem[0][k];
        for(k in cacheItem[1])
            copy[1][k] = cacheItem[1][k].slice();
        return copy;
    }

    function State(host, graph /* instanceof DependencyGraph */,
            args /* array: [async [, arguments ... ]] */) {
        var i=0, callbackPromise;

        this._host = host;
        this._graph = graph;

        this._async = args[0];
        this._args = args.slice(1);

        if(!this._async) {
            this.promise = undefined;
            this._resolvePromise = undefined;
            this._rejectPromise = undefined;
        }
        else {
            // just store these methods, to resolve or reject later
            this.promise = new Promise(function(resolve, reject) {
                this._resolvePromise = resolve;
                this._rejectPromise = reject;
            }.bind(this))
            // The user can opt-in to use callback and errback or a unified callback
            if(typeof this._async === 'object') {
                // we allow unfied style and callback/errback style at the
                // same time, although it's not really useful
                if(this._async.unified)
                    // unified style: unified_callback(error, result)
                    // convert it to divided style
                    callbackPromise = this.promise.then(
                        function(result){ this.unified(undefined, result)}.bind(this._async)
                      , function(error){ this.unified(error)}.bind(this._async)
                    )
                if(this._async.callback || this._async.errback)
                    callbackPromise = this.promise.then(this._async.callback || undefined,
                                      this._async.errback || undefined)

                if(callbackPromise) {
                    // Handle errors inside of the callbacks.
                    // FIXME: is there a better way to handle errors that
                    // happen inside of the callbacks?
                    // How to react on an error within an errorhandler,
                    // when the calling code has no way to get noticed? :-(
                    callbackPromise.then(undefined, function(err) {
                        console.log('unhandled error in callback', err, err.stack)
                        throw err;
                    })
                    callbackPromise = this.promise;
                }
            }
        }

        this._obtained = {};

        // callerArguments are already obtained
        for(;i<this._graph.callerArguments.length; i++)
            this._obtained[this._graph.callerArguments[i]] = this._args[i];
        this._args.unshift(this._obtainAPI.bind(this));

        this._waitingFor = {}
        this._waitingCount = 0

        this._dependencyCounters = null;
        this._dependents = null;

        this._isShutDown = false
    }

    // State.prototype = Object.create(null);
    var p = State.prototype;

    /**
     * keep track of tasks we are waiting for
     */
    p.addWaitingAsync = function(dependency) {
        assert(!(dependency in this._waitingFor), 'Already waiting for '
                                                  + dependency)
        // Useful? Add a time when waiting started, or a setTimeout for
        // timeout control or such?
        this._waitingFor[dependency] = null;
        this._waitingCount += 1;
        return this._waitingCount
    }

    /**
     * clean up when the task finishes
     */
    p.removeWaitingAsync = function(dependency) {
        assert(dependency in this._waitingFor, 'Not waiting for '
                                                  + dependency)
        delete this._waitingFor[dependency];
        this._waitingCount -= 1;
        return this._waitingCount;
    }

    Object.defineProperty(p, 'waitingAsyncCount', {
        get: function() { return this._waitingCount; }
    });

    p.getDependency = function(name) {
        return this._graph.getDependency(this._async, name);
    }

    p._removeDependency = function(dependency) {
        var dependents = this._dependents[dependency.name] || []
          , dependencyCounters = this._dependencyCounters
          , i=0
          , cleaned = []
          , dependent
          ;
        // substract 1 from each  dependencyCounters[dependent] (because
        // dependency is resolved)
        // if a dependencyCounter is 0 the dependent can be executed
        for(;i<dependents.length;i++) {
            dependent = this.getDependency(dependents[i])
            dependencyCounters[dependent.name] -= 1;
            if (dependencyCounters[dependent.name] === 0)
                cleaned.push(dependent)
        }
        return cleaned;
    }

    p.getValue = function(name) {
        if(!(name in this._obtained))
            throw new Expectation(name)
        return this._obtained[name]
    }

    /**
     * use: this._dependencyCallback.bind(this, dependency)
     */
    p._dependencyCallback = function(dependency, result) {
        var cleaned;
        if(this._isShutDown)
            // FIXME: start logging or provide a status otherwise
            return;
        this.removeWaitingAsync(dependency)
        this._obtained[dependency.name] = result
        cleaned = this._removeDependency(dependency)
        try {
            this._resolve.apply(this, cleaned)
        }
        catch (error) {
            this._errorShutdown();
            this._rejectPromise(error);
            return;
        }
        if(!this.waitingAsyncCount)
            // that's it, nothing to do anymore
            this.execute();
    }

    p._errorShutdown = function() {
        this._isShutDown = true;
        // TODO: log all dependencies that callback or errback after shutdown
        // TODO: .abort() all async dependencies we are waiting for
        // and don't execute()/_resolve() further!
        // see: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#abort%28%29
        // as an example abort API
    }

    /**
     * use: this._dependencyErrback.bind(this, dependency)
     */
    p._dependencyErrback = function(dependency, error) {
        if(this._isShutDown)
            // FIXME: start logging or provide a status otherwise
            return;
        this.removeWaitingAsync(dependency);
        this._errorShutdown()
        this._rejectPromise(error)
    }


    p._call = function(dependency) {
        var namedArgs = {}
          , i=0
          , args
          , getValue = this.getValue.bind(this)
          , callback, errback, promise
          ;

        if(!dependency.getter)
                throw new TypeError('The ' + (dependency.async
                                                ? 'asynchronous'
                                                : 'synchronous')
                                    +' getter function of "'
                                    + dependency.name + '" is missing.');
        if(dependency.async) {
            callback = this._dependencyCallback.bind(this, dependency);
            errback = this._dependencyErrback.bind(this, dependency);
            args = dependency.getArgs(getValue, callback, errback)

            this.addWaitingAsync(dependency)
            promise = dependency.getter.apply(this._host, args)
            // ducktyping
            if(promise && typeof promise.then === 'function')
                // from: https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Promise
                // Note: If the onFulfill callback throws an exception,
                // the onReject callback is not invoked. You can register
                // a rejection callback on the returned promise instead,
                // to process any exception occurred in either of the callbacks
                // registered on this promise.
                promise.then(callback).then(null, errback)

        }
        else {
            args = dependency.getArgs(getValue);
            return dependency.getter.apply(this._host, args)
        }
    }

    /**
     * Executes all dependencies given by the arguments.
     * First execute all asynchronous dependencies, as these probably
     * dispatch to a server or such and run nonblocking (hopefully,
     * where is the point otherwise?)
     */
    p._resolve = function(/* dependency, ... */) {
        var resolved = Array.prototype.slice.call(arguments)
          , sosd = [] // stack of synchconous dependencies
          , dependency
          , cleaned
          ;


        // IMPORTANT! The logical or || will execute dependency = sosd.pop()
        // only if the first expression returns something false.
        // so we first we _call all async dependencies and then the sync
        // ones. This is done, because we want to dispatch the async requests
        // ASAP.
        while((dependency = resolved.pop()) || (dependency = sosd.pop())) {
            if(dependency.name in this._obtained)
                continue
            else if(dependency.async)
                this._call(dependency)
            else if(resolved.length !== 0)
                // execute after all async dependencies have been called
                sosd.push(dependency)
            else {
                // execute the sync dependency
                this._obtained[dependency.name] = this._call(dependency);
                cleaned = this._removeDependency(dependency)
                resolved.push.apply(resolved, cleaned)
            }
        }
    }

    p._obtain =  function _obtain(key) {
        assert(!(key in this._obtained), 'Key "'+ key +'" must not be '
                                        + 'in this._obtained, but it is.')

        // order is a topological sorting as a starting point
        var order = this._graph.getEvaluationOrder(this._async, key)
          , resolved = []
          , k
          , dependencyCounters = this._dependencyCounters = order[0]
          , dependents = this._dependents = order[1]
        ;
        // Some values are already known, from callerArguments or previous
        // calls to _obtainAPI
        for(k in this._obtained)
            // Don't use the return value here, as the next step covers that.
            this._removeDependency(this.getDependency(k))
        // Every dependency with a count of 0 can be executed now
        for(k in dependencyCounters) {
            if (dependencyCounters[k] === 0)
                resolved.push(this.getDependency(k));
        }

        this._resolve.apply(this, resolved)
        if(this.waitingAsyncCount)
            // interrupt here, the callback will restart the thread
            throw new AsyncExecutionException()
        // if there wasn't any async dependency we should have a result
        // it has to be in this._obtained at this point

        assert(key in this._obtained, 'Key "'+ key +'" must be in '
                                    + 'this._obtained, but it isn\'t.')
    }

    p._obtainAPI = function _obtainAPI(key) {
        if (!(key in this._obtained))
            // will raise AsyncExecutionException when needed
            this._obtain(key);
        // This will only be executed when the value is already there.
        // If we have to wait AsyncExecutionException did interrupt already.
        return this._obtained[key];
    }

    p.execute = function execute () {
        var result;
        try {
            // job is expected to call _obtainAPI zero or more times
            result = this._graph.job.apply(this._host, this._args);
        }
        catch(e) {
            if(e instanceof AsyncExecutionException) {
                // the receiver will call execute again
                return;
            }

            if(!this._async){
                throw e;
            }
            this._errorShutdown();
            this._rejectPromise(e);
            return;
        }

        // got a result
        if(!this._async)
            return result;
        this._resolvePromise(result);
    }

    function executionEnvironmentFactory(syncGetters, asyncGetters,
            callerArguments, job) {
        var graph = new DependencyGraph(syncGetters, asyncGetters,
                                        callerArguments, job);
        return function runner( /* async, [ ... arguments, ]*/) {
            // 'this' is the host
            var state = new State(this, graph, Array.prototype.slice.call(arguments))
              , async = arguments[0]
              ;
            // There needs to be an assurance that an async job is
            // deferred (asynchronously) at least once! Theoretically,
            // since a developer might not expect stuff like an immediate
            // execution when calling an async method and since we have
            // side effects in javascript ASAP is just right.
            // Without side effects it would be better to wait and see
            // if an extra decoupling is needed (when there was no async
            // execution after resolving)
            // FIXME: Think about doing this smarter.
            if (!async)
                return state.execute();
            setTimeout(state.execute.bind(state), 0)
            return state.promise;
        }
    }
    return {
        factory: executionEnvironmentFactory
      , Argument: Argument
      , DependencyGraphError: DependencyGraphError
    }
});

/**
 * Copyright (c) 2012, Lasse Fister lasse@graphicore.de, http://graphicore.de
 *
 * You should have received a copy of the MIT License along with this program.
 * If not, see http://www.opensource.org/licenses/mit-license.php
 *
 * This is a port of the constants of glifLib defined in robofab/branches/ufo3k/Lib/ufoLib/gliflib.py
 *
 */
define(
    'ufojs/ufoLib/constants',[],
    function()
{
    "use strict";
    // -------------------------
    // Reading and Writing Modes
    // -------------------------

    // this is javascript ... do we need this?

    // if os.name == "mac":
    //     WRITE_MODE = "wb"  # use unix line endings, even with Classic MacPython
    //     READ_MODE = "rb"
    // else:
    //     WRITE_MODE = "w"
    //     READ_MODE = "r"

    // ---------
    // Constants
    //---------

    return {
        DEFAULT_GLYPHS_DIRNAME: "glyphs",
        DATA_DIRNAME: "data",
        IMAGES_DIRNAME: "images",
        METAINFO_FILENAME: "metainfo.plist",
        FONTINFO_FILENAME: "fontinfo.plist",
        LIB_FILENAME: "lib.plist",
        GROUPS_FILENAME: "groups.plist",
        KERNING_FILENAME: "kerning.plist",
        FEATURES_FILENAME: "features.fea",
        LAYERCONTENTS_FILENAME: "layercontents.plist",
        LAYERINFO_FILENAME: "layerinfo.plist",
        DEFAULT_LAYER_NAME: "public.default",
        supportedUFOFormatVersions: {1:true, 2:true, 3:true},
        supportedGLIFFormatVersions: {1:true, 2:true},
        transformationInfo: [
            // field name, default value
            ["xScale", 1],
            ["xyScale", 0],
            ["yxScale", 0],
            ["yScale", 1],
            ["xOffset", 0],
            ["yOffset", 0],
        ]
    };
});

/**
 * Copyright (c) 2011, Lasse Fister lasse@graphicore.de, http://graphicore.de
 *
 * You should have received a copy of the MIT License along with this program.
 * If not, see http://www.opensource.org/licenses/mit-license.php
 *
 */

define('ufojs/errors',[
    'Atem-Errors/errors'
], function(
    atemErrors
) {
    "use strict";
    var errors = Object.create(atemErrors)
      , makeError = atemErrors.makeError.bind(null, errors)
      ;

    makeError('UFO', undefined , errors.Error);
    makeError('Dependency', undefined , errors.UFO);
    makeError('Parser', undefined , errors.UFO);
    makeError('NameTranslation', undefined , errors.UFO);
    makeError('UFOLib', undefined , errors.UFO);
    makeError('GlifLib', undefined , errors.UFO);

    return errors;
});

/**
 * Copyright (c) 2011, Lasse Fister lasse@graphicore.de, http://graphicore.de
 *
 * You should have received a copy of the MIT License along with this program.
 * If not, see http://www.opensource.org/licenses/mit-license.php
 *
 */

define('ufojs/main',['./errors'], function(errors) {
    "use strict";
    var ValueError = errors.Value,
        TypeError = errors.Type;

    /**
     * enhance helps with class building
     * FIXME: put description in here
     */
    var enhance =  function(constructor, blueprint)
    {
        for(var i in blueprint)
        {
            //TODO:
            // use Object.getOwnPropertyDescriptor and Object.defineProperty
            // instead of __lookup(S/G)etter__ and __define(S/G)etter__
            // its the future
            var getter = blueprint.__lookupGetter__(i),
                setter = blueprint.__lookupSetter__(i);
            if ( getter || setter ) {
                if ( getter )
                    constructor.prototype.__defineGetter__(i, getter);
                if ( setter )
                    constructor.prototype.__defineSetter__(i, setter);
            } else
                constructor.prototype[i] = blueprint[i];
        };
    };

    /**
     * check whether val is a number and not NaN
     */
    function isNumber(n) {
        return typeof n === 'number' && isFinite(n);
    };

    /**
     * check whether val is an integer
     */
    function isInt (n) {
        // n === n NaN will return false
        // n|0 rounds
        return typeof n === 'number' && n === n && n === (n|0);
    }

    /**
     * check whether val is a float
     */
    function isFloat (n) {
        // n === n NaN will return false
        // n|0 rounds
        return typeof n === 'number' && isFinite(n) && n !== (n|0);
    }

    /**
     * check whether the string is made out of digits only
     */
    var _isDigitsTest = /^[0-9]+$/;
    function isDigits(str){
        if( typeof str != 'string') return false;
        return _isDigitsTest.test(str);
    }
    /**
     * check whether the string is formatted like a propper int
     */
    var _isIntStringTest = /^[+-]?[0-9]+$/;
    function isIntString(str){
        if( typeof str != 'string') return false;
        return _isIntStringTest.test(str);
    }

    /**
     * check whether the string is formatted like a propper float
     */
    var _isFloatStringTest = /^([+-]?(((\d+(\.)?)|(\d*\.\d+))([eE][+-]?\d+)?))$/;
    function isFloatString(str) {
        if( typeof str != 'string') return false;
        return _isFloatStringTest.test(str);
    }


   /**
    * this is used like the python range method
    *
    * examples:
    * for(var i in range(10)){
    *     console.log(i)
    *     //0 1 2 3 4 5 6 7 8 9
    * }
    * for(var i in range(10)){
    *     console.log(i)
    *     //0 1 2 3 4 5 6 7 8 9
    * }
    * for(var i in range(5, 15, 3)) {
    *     console.log(i)
    *     //5 8 11 14
    * }
    **/
    var range = function (/*[start], stop, [step]*/)
    {
        //here comes alot of input validation
        //to mimic what python does
        var start = 0,
            step = 1,
            stop, condition;
        if (arguments.length < 1) {
            throw new TypeError(
                'range() expected at least 1 arguments, got 0 '
                + arguments.length
            );
        } else if (arguments.length > 3) {
            throw new TypeError(
                'range() expected at most 3 arguments, got '
                + arguments.length
            );
        } else if (arguments.length == 1) {
            stop = arguments[0];
        } else if(arguments.length >= 2 ) {
            start = arguments[0];
            stop = arguments[1];
            if(arguments.length == 3)
                step = arguments[2];
        }
        var vals = [ ['start', start], ['stop', stop], ['step', step] ];
        for (var i in vals) {
            var val = vals[i];
            if (!isInt(val[1])) {
                var type = typeof val[1];
                if(type === 'number') type = 'float';
                throw new TypeError(
                    'range() integer ' + val[0]
                    + ' argument expected, got ' + type);
            }
        }
        if(step === 0)
            throw new ValueError('range() step argument must not be zero');

        //now the important stuff
        if (step > 0)
            condition = function(i) { return i < stop };
        else
            condition = function(i) { return i > stop };

        var list = {};//list is an object because the array prototype might be extended
        for (var i = start; condition(i); i += step) {
            //yield i;//oh future looking forward to hearing from you
            list[i] = i;
        }
        return list;
    }

    /**
     * Decimal adjustment of a number.
     *
     * @param   {String}    type    The type of adjustment: "round" | "ceil" | "floor"
     * @param   {Number}    value   The number.
     * @param   {Integer}   exp     The exponent (the 10 logarithm of the adjustment base).
     * @returns {Number}            The adjusted value.
     *
     * Note: to have a precision of 2 decimal places exp should be -2
     *
     * This is the implementation of decimal rounding found at mdn:
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round#Example%3a_Decimal_rounding
     */
    function decimalAdjust(type, value, exp) {
        // If the exp is undefined or zero...
        if (typeof exp === 'undefined' || +exp === 0) {
            return Math[type](value);
        }
        value = +value;
        exp = +exp;
        // If the value is not a number or the exp is not an integer...
        if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {
            return NaN;
        }
        // Shift
        value = value.toString().split('e');
        value = Math[type](+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));
        // Shift back
        value = value.toString().split('e');
        return +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));
    }

    // Decimal round
    /**
     * Rounds val.
     *
     * Use the 'decimalPlaces' argument to round to a specific decimal
     * position. To have a precision of 2 decimal places decimalPlaces
     * should be 2
     *
     * Fontforge defines a similar method.
     * Its good to compare values that potentially have some floating
     * point rounding errors
     */
    function round(value, decimalPlaces) {
        return decimalAdjust('round', value,
            typeof decimalPlaces === 'number'
                ? -decimalPlaces
                : decimalPlaces
        );
    };

    // Decimal floor
    /**
     * Rounds val down.
     *
     * Use the 'decimalPlaces' argument to round to a specific decimal
     * position. To have a precision of 2 decimal places decimalPlaces
     * should be 2
     */
    function floor(value, decimalPlaces) {
        return decimalAdjust('floor', value,
            typeof decimalPlaces === 'number'
                ? -decimalPlaces
                : decimalPlaces
        );
    };

    // Decimal ceil
    /**
     * Rounds val up.
     *
     * Use the 'decimalPlaces' argument to round to a specific decimal
     * position. To have a precision of 2 decimal places decimalPlaces
     * should be 2
     */
    function ceil(value, decimalPlaces) {
        return decimalAdjust('ceil', value,
            typeof decimalPlaces === 'number'
                ? -decimalPlaces
                : decimalPlaces
        );
    };

    /**
     * Returns a function that rounds to a decimal precision recursively
     * all items of type number in all items that are instances of array
     * and returns the result
     *
     * Use the 'decimalPlaces' argument to round to a specific decimal
     * position. To have a precision of 2 decimal places decimalPlaces
     * should be 2
     */
    var roundRecursiveFunc = function(decimalPlaces) {
        // the function existing in this closure is important, so the
        // function can call itself. just saying that we can't return the
        // function directly
        var roundRecursive = function(item) {
            if(item instanceof Array)
                return item.map(roundRecursive);
            if(typeof item === 'number')
                return round(item, decimalPlaces);
            return item;
        };
        return roundRecursive;
    }

    /**
     * Rounds to a decimal precision recursively all items of type
     * number in all items that are instances of array and returns the
     * result.
     *
     * Use the 'decimalPlaces' argument to round to a specific decimal
     * position. To have a precision of 2 decimal places decimalPlaces
     * should be 2
     */
    var roundRecursive = function(item, decimalPlaces) {
        var roundRecursive = roundRecursiveFunc(decimalPlaces);
        return roundRecursive(item);
    };


    /**
    * parseDate came with the following header. I just tailored it in here.
    * it returns a timestamp indicating the milliseconds since the Unix Epoch
    *
    * Date.parse with progressive enhancement for ISO 8601 <https://github.com/csnover/js-iso8601>
    * © 2011 Colin Snover <http://zetafleet.com>
    * Released under MIT license.
    */
    var origParse = Date.parse, numericKeys = [ 1, 4, 5, 6, 7, 10, 11 ],
        parseDate = function (date) {
        var timestamp, struct, minutesOffset = 0;
        // ES5 §15.9.4.2 states that the string should attempt to be parsed as a Date Time String Format string
        // before falling back to any implementation-specific date parsing, so that’s what we do, even if native
        // implementations could be faster
        // 1 YYYY 2 MM 3 DD 4 HH 5 mm 6 ss 7 msec 8 Z 9 ± 10 tzHH 11 tzmm
        if ((struct = /^(\d{4}|[+\-]\d{6})(?:-(\d{2})(?:-(\d{2}))?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/.exec(date))) {
            // avoid NaN timestamps caused by “undefined” values being passed to Date.UTC
            for (var i = 0, k; (k = numericKeys[i]); ++i) {
                struct[k] = +struct[k] || 0;
            }

            // allow undefined days and months
            struct[2] = (+struct[2] || 1) - 1;
            struct[3] = +struct[3] || 1;

            if (struct[8] !== 'Z' && struct[9] !== undefined) {
                minutesOffset = struct[10] * 60 + struct[11];

                if (struct[9] === '+') {
                    minutesOffset = 0 - minutesOffset;
                }
            }

            timestamp = Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7]);
        } else {
            timestamp = origParse ? origParse(date) : NaN;
        }

        return timestamp;
    };

    /**
     * This is a wrapper around typeof and instanceof
     * it's there to make me type less and loosely inspired by the python
     * builtin instanceof.
     */
    var isInstance = function(
        value,
        types /* function or typeof string or a list of these */
    ) {
        if(arguments.length < 2)
            throw new TypeError(
                'isInstance() expects 2 arguments, got ' + arguments.length
            );
        var types = (types instanceof Array) ? types : [types],
            typeOfType, i;
        for(i = 0; i < types.length; i++) {
            typeOfType = typeof types[i];
            if( typeOfType === 'function' && value instanceof types[i]
                || types[i] === 'int' && isInt(value)
                || types[i] === 'float' && isFloat(value)
                || types[i] === 'NaN' && value !== value
                || types[i] === 'null' && value === null
                || types[i] === 'Infinity' && value === Number.POSITIVE_INFINITY
                || types[i] === '-Infinity' && value === Number.NEGATIVE_INFINITY
                // this will test strings like 'number', 'undefined', string
                || typeOfType === 'string'
                    && typeof value === types[i]
                    && value === value /*not true for NaN*/
            )
                return true;
        }
        return false;
    };


    /**
     * String.prototype.charCodeAt is broken , so mdn provides fixes.
     * https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/charCodeAt
     *
     * Example 2: Fixing charCodeAt to handle non-Basic-Multilingual-Plane
     * characters if their presence earlier in the string is unknown
     *
     * this version might be used in for loops and the like when it is
     * unknown whether non-BMP characters exist before the specified index
     * position.
     */
    function fixedCharCodeAt (str, idx) {
        // ex. fixedCharCodeAt ('\uD800\uDC00', 0); // 65536
        // ex. fixedCharCodeAt ('\uD800\uDC00', 1); // 65536
        idx = idx || 0;
        var code = str.charCodeAt(idx);
        var hi, low;
        if (0xD800 <= code && code <= 0xDBFF) { // High surrogate (could change last hex to 0xDB7F to treat high private surrogates as single characters)
            hi = code;
            low = str.charCodeAt(idx+1);
            if (isNaN(low)) {
                throw 'High surrogate not followed by low surrogate in fixedCharCodeAt()';
            }
            return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;
        }
        if (0xDC00 <= code && code <= 0xDFFF) { // Low surrogate
            // We return false to allow loops to skip this iteration since should have already handled high surrogate above in the previous iteration
            return false;
            /*hi = str.charCodeAt(idx-1);
            low = code;
            return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;*/
        }
        return code;
    }

    // make out of a list of strings an object with those strings as keys
    // for easy membership testing with the "in" keyword
    function setLike(list, fill /* default true*/) {
        if(fill === undefined) fill = true;
        var setLike = Object.create(null);
        for(var i=0; i<list.length; i++)
            setLike[list[i]] = fill;
        return setLike;
    }


    return {
        enhance: enhance,
        range: range,
        round: round,
        roundRecursiveFunc: roundRecursiveFunc,
        roundRecursive: roundRecursive,
        isNumber: isNumber,
        isInt: isInt,
        isFloat: isFloat,
        isDigits: isDigits,
        isIntString: isIntString,
        isFloatString: isFloatString,
        parseDate: parseDate,
        isInstance: isInstance,
        fixedCharCodeAt: fixedCharCodeAt,
        setLike: setLike
    }
});

/**
 * Copyright (c) 2011, Lasse Fister lasse@graphicore.de, http://graphicore.de
 *
 * You should have received a copy of the MIT License along with this program.
 * If not, see http://www.opensource.org/licenses/mit-license.php
 *
 * This returns the browsers xml tools or if in nodejs a mapping to the
 * libxmljs api so that it can be used like the w3c tools.
 *
 * IMPORTANT for nodejs with libxmljs: As the need of this project regarding
 * xml tools is not so big, there will likely be no full DOM w3c api
 * available. Thus, things like running jQuery on a libxmljs element won't
 * work.
 * As it appears the jsdom people are making exactly that possible, so the
 * notice above might become outdated.
 */

define('ufojs/xml/main',[
    'ufojs/errors'
], function(
    errors
) {
    "use strict";
    var DependencyError = errors.Dependency
      , TypeError = errors.Type
      , NotImplementedError = errors.NotImplemented
      , ParserError = errors.Parser
      , xmlDeclaration = '<?xml version="1.0" encoding="UTF-8"?>'
      , xml, implementation
      , Node
      ;

    // from https://developer.mozilla.org/en-US/docs/Using_XPath
    // Evaluate an XPath expression aExpression against a given DOM node
    // or Document object (aNode), returning the results as an array
    function evaluateXPath(aNode, aExpr) {
        var xpe = new xml.XPathEvaluator()
          , nsResolver = xpe.createNSResolver(
                !aNode.ownerDocument
                    ? aNode.documentElement
                    : aNode.ownerDocument.documentElement
            )
          , result = xpe.evaluate(aExpr, aNode, nsResolver, 0, null)
          , found = []
          , res
          ;
        while ((res = result.iterateNext()))
            found.push(res);
        return found;
    }

    if(typeof DOMParser !== 'undefined') {

        var Parser = function() {
                this._parser = new DOMParser();
            }
          , Serializer = function() {
                this._serializer = new XMLSerializer();
            }
          ;
        implementation = 'w3c';
        Node = window.Node;
        //this is straightforward, we just map the apis that are there
        xml = {
            xmlDeclaration: xmlDeclaration,
            get implementation() {
                return implementation;
            },
            /**
             * This strange sort of extending is done because:
             * a) native objects can't be extended by the ussual prototype
             *    mechanism.
             * b) The browser parsers fail at throwing Errors when parsing
             *    fails, and we need a common api.
             */
            Parser: Parser,
            Serializer: Serializer,
            XPathEvaluator: XPathEvaluator,
            XPathResult: XPathResult,
        // XPathException is undefined in Firefox
        //    XPathException: XPathException,
            XSLTProcessor: XSLTProcessor,
            Node: Node,
            createDocument: function() {
                var args = [].slice.call(arguments)
                  , defaults = [null, null, null];

                if(args.length !== defaults.length)
                    args.push.apply(args, defaults.slice(args.length));
                return document.implementation.createDocument.apply(
                    document.implementation, args);
            },
            createDocumentType: function() {
                var args = [].slice.call(arguments);
                return document.implementation.createDocumentType.apply(
                    document.implementation, args);
            },
            parseXMLString: function(string) {
                var parser = new Parser();
                return parser.parseFromString(string, 'text/xml');
            },
            toString: function(doc) {
                return (new Serializer()).serializeToString(doc);
            },
            evaluateXPath: evaluateXPath
        };

        //TODO: implement more of the parser interfaces if needed
        Parser.prototype.parseFromString = function(markup, type) {
            var result = this._parser.parseFromString(markup, type);

            // in case of an error chrome returns an html document where
            // somwhere is a <parsererror> element embedded:
            // <html xmlns="http://www.w3.org/1999/xhtml"><body><parsererror style=" ... "><h3> ...
            // sometimes its not html :/
            //
            // firefox returns a document like this:
            // <?xml-stylesheet href="chrome://global/locale/intl.css" type="text/css"?>
            // <parsererror xmlns="http://www.mozilla.org/newlayout/xml/parsererror.xml">
            // ...

            if(result.documentElement.tagName === 'parsererror')
                // this works in firefox
                throw new ParserError('XML DOMParser: ' + result.documentElement.textContent);
            // maybe, if we're going to parse xhtml we should try to find
            // more indicators. Right now html as root element is just fine,
            // because there is no other case for an html result in ufoJS.
            // cmon, sometimes its not html in webkit :-|
            // else if(result.documentElement.tagName === 'html') {
            else {
               // handle the webkit error if it is there
               // this is from: https://bugs.webkit.org/show_bug.cgi?id=13057

                var nsResolverWebkit = function (prefix) {
                        if (prefix == "x")
                            return "http://www.w3.org/1999/xhtml";
                        return null;
                    }
                  , expression = "//x:parsererror//x:div"
                  , errorNode = (new XPathEvaluator())
                        .evaluate(expression, result, nsResolverWebkit, 0, null)
                        .iterateNext()
                  ;
               if (errorNode)
                   throw new ParserError('XML DOMParser: ' + errorNode.textContent);
            }
            return result;
        };

        Serializer.prototype.serializeToString = function(node) {
            var result = this._serializer.serializeToString(node);

            if(Node.DOCUMENT_NODE === node.nodeType
                        && result.indexOf('<?xml') !== 0)
                result = [xmlDeclaration, result].join('\n');
            return result;
        };
    }
    else {
        /**
        * this is for the nodejs environment
        *
        * The impementation is not complete but enough for my purposes.
        * If there is a better W3C DOM environment for nodeJS please let me
        * know.
        * caveats:
        * The sax parser does not mention things that would be interesting
        * for xsl/xslt/dtd parsing
        * especially the Doctype of your document won't be recognized
        *
        * The Serializer throws NotImplementedError on:
        * ENTITY_REFERENCE_NODE, ENTITY_NODE, NOTATION_NODE
        */


        // the files libs are loaded syncronously with requireJS handing over
        // the call to nodes commomJS require mechanism

        var r = require.nodeRequire
          , path = r('path')
          , jsdom = r('jsdom')
          //dunno why i need to force node like this to load the files
          , jsdomPath = path.dirname(r.resolve('jsdom')) + '/jsdom/'
          , dom = r(jsdomPath+ 'living')
          // from: https://github.com/inikulin/parse5/blob/be6fb7ab939b810dd4dd2c46a726834eb931afa7/lib/serializer/index.js#L39
          //Escaping regexes
          , AMP_REGEX = /&/g
          , NBSP_REGEX = /\u00a0/g
          , DOUBLE_QUOTE_REGEX = /"/g
          , LT_REGEX = /</g
          , GT_REGEX = />/g
          , escapeString =  function (str, attrMode) {
                str = str
                    .replace(AMP_REGEX, '&amp;')
                    .replace(NBSP_REGEX, '&nbsp;');

                if (attrMode)
                    str = str.replace(DOUBLE_QUOTE_REGEX, '&quot;');

                else {
                    str = str
                        .replace(LT_REGEX, '&lt;')
                        .replace(GT_REGEX, '&gt;');
                }

                return str;
            }
            // https://github.com/polotek/libxmljs
            // another sax parser is https://github.com/robrighter/node-xml
          , xmlparser = r('libxmljs')
          , Parser = function(){}
          , Serializer = function(){}
          ;
        if(!dom)
            throw new DependencyError('No XML api available.');


        implementation = 'jsdom';
        Node  = dom.Node;
        xml = {
            xmlDeclaration: xmlDeclaration,
            Parser: Parser,
            Serializer: Serializer,
            XPathEvaluator: dom.XPathEvaluator,
            XPathResult: dom.XPathResult,
        //    XPathException: dom.XPathException,
            Node: Node,
            createDocument: function() {
                var args = [].slice.call(arguments),
                    implementation = jsdom.jsdom().implementation;
                return implementation.createDocument.apply(implementation, args);
            },
            createDocumentType: function() {
                var args = [].slice.call(arguments),
                    implementation =  jsdom.jsdom().implementation;
                return implementation.createDocumentType.apply(implementation, args);
            },
            get implementation() {
                return implementation;
            },
            parseXMLString: function(string) {
                var parser = new Parser();
                return parser.parseFromString(string, 'text/xml');
            },
            toString: function(doc) {
                return (new xml.Serializer()).serializeToString(doc);
            },
            evaluateXPath: evaluateXPath
        };
        //FIXME: How would we get the doctype for our document?
        Parser.prototype.parseFromString = function(string, mimeType) {
            if(!(mimeType in {'text/xml': true, 'application/xml': true}))
                //so it's clear that we don't support html here
                throw new TypeError('MIME-Type must be an XML type like '
                    + '"text/xml" or "application/xml".');

            var options = {parsingMode: 'xml', contentType: mimeType},
                doc = new dom.Document(options),
                currentElement = doc,
                totalElements = 0,
                parser,
                error;

            parser = new xmlparser.SaxParser({
                endDocument: function() {
                    var counted = doc.getElementsByTagName("*").length;
                    //errors.assert(
                    //    doc.getElementsByTagName("*").length === totalElements,
                    //    ['Expected', totalElements,
                    //        'elements but found', counted].join(' ')
                    //);
                },
                startElementNS: function(elem, attrs, prefix, uri, namespaces) {
                    totalElements++;
                    var element;
                    if(uri)
                        element = doc.createElementNS(uri, prefix+':'+elem);
                    else
                        element = doc.createElement(elem);
                    //attrs - an array of arrays: [[key, prefix, uri, value]]
                    attrs.map(function(attr){
                        var key = attr[0],
                            prefix = attr[1],
                            uri = attr[2],
                            value = attr[3];
                        if(uri)
                            element.setAttributeNS(
                                uri,
                                (prefix) ? prefix + ':' + key : key,
                                value
                            );
                        else
                            element.setAttribute(key, value);
                    });
                    namespaces.map(function(attr){
                        var name = attr[0],
                            value = attr[1];
                        element.setAttribute('xmlns:' + name, value || '');
                    });

                    currentElement.appendChild(element);
                    currentElement = element;
                },
                endElementNS: function(elem, prefix, uri) {
                    currentElement = currentElement.parentNode;
                },
                characters: function(chars) {
                    var node = doc.createTextNode(chars);
                    currentElement.appendChild(node);
                },
                cdata: function(cdata) {
                    var node = doc.createCDATASection(cdata);
                    currentElement.appendChild(node);
                },
                comment: function(comment) {
                    var node = doc.createComment(comment);
                    currentElement.appendChild(node);
                },
                warning: function(message) {
                    errors.warn('XML SAX2 Parser: ' + message);
                },
                error: function(message) {
                    error = new ParserError('XML SAX2 Parser: ' + message);
                }
            });
            parser.parseString(string);
            if(error)
                throw error;
            return doc;
        };

        var _serializer = {
            dispatch: function(node) {
                _serializer.renderer[node.nodeType].call(this, node);
            },
            renderer: {}
        };
        _serializer.renderer[dom.Node.ELEMENT_NODE] = function(node) {
            var empty = (node.childNodes.length === 0)
                , attributes = []
                , children = []
                , end = empty
                    ? ['/>']
                    : ['</', node.tagName, '>']
                ;

            this.push('<', node.tagName);
            Array.prototype.slice.call(node.attributes)
                                    .map(_serializer.dispatch, this);

            if(node.childNodes.length) {
                this.push('>');
                Array.prototype.slice.call(node.childNodes)
                                        .map(_serializer.dispatch, this);
                this.push('</', node.tagName, '>');
            }
            else
                this.push('/>');
        };
        _serializer.renderer[dom.Node.ATTRIBUTE_NODE] = function(node){
            //prepending a space before every attribute
            this.push(' ', node.name, '="', escapeString(node.nodeValue, true), '"');
        };
        _serializer.renderer[dom.Node.TEXT_NODE] = function(node){
            this.push(escapeString(node.nodeValue));
        };
        _serializer.renderer[dom.Node.CDATA_SECTION_NODE] = function(node) {
            this.push('<![CDATA[', node.nodeValue, ']]>');
        };
        _serializer.renderer[dom.Node.ENTITY_REFERENCE_NODE] = function(node) {
            throw new NotImplementedError('Rendering the node type ENTITY_REFERENCE_NODE.');
        };
        _serializer.renderer[dom.Node.ENTITY_NODE] = function(node) {
            throw new NotImplementedError('Rendering the node type ENTITY_NODE.');
        };
        _serializer.renderer[dom.Node.PROCESSING_INSTRUCTION_NODE] = function(node){
            this.push('<?', node.target, ' ', node.nodeValue,'?>');
        };
        _serializer.renderer[dom.Node.COMMENT_NODE] = function(node) {
            this.push('<!--', node.nodeValue, '-->');
        };
        _serializer.renderer[dom.Node.DOCUMENT_NODE] = function(node) {
            Array.prototype.slice.call(node.childNodes).map(_serializer.dispatch, this);
        };
        _serializer.renderer[dom.Node.DOCUMENT_TYPE_NODE] = function(node) {
            var quote;

            this.push('<!DOCTYPE ', node.name);

            if (node.publicId)
                // Public ID may never contain double quotes, so this is always safe.
                this.push(' PUBLIC "', node.publicId,'" ');
            if (node.systemId) {
                if (!node.publicId)
                    this.push(' SYSTEM ');
                // System ID may contain double quotes OR single quotes, never both.
                quote = (node.systemId.indexOf('"') > -1)
                    ? '\''
                    : '"';
                this.push(quote, node.systemId, quote);
            }
            this.push('>');
        };
        _serializer.renderer[dom.Node.DOCUMENT_FRAGMENT_NODE] = function(node) {
            return Array.prototype.slice.call(node.childNodes)
                                        .map(_serializer.dispatch, this);
        };
        _serializer.renderer[dom.Node.NOTATION_NODE] = function(node) {
            throw new NotImplementedError('Rendering the node type NOTATION_NODE.');
        };

        Serializer.prototype.serializeToString = function(node) {
            var tokens = [];
            if(Node.DOCUMENT_NODE === node.nodeType)
                tokens.push(xmlDeclaration, '\n');
            _serializer.dispatch.call(tokens, node);
            return tokens.join('');
        };
    }
    return xml;
});

/**
 * Copyright (c) 2011, Lasse Fister lasse@graphicore.de, http://graphicore.de
 * 
 * You should have received a copy of the MIT License along with this program.
 * If not, see http://www.opensource.org/licenses/mit-license.php
 * 
 * This Object is to store the "data" object of a plist file.
 * 
 * Since there is currently no case where I need the decoding/encoding
 * feature and since the window.btoa/atob are not available everywhere
 * this object is nothing more than a marker that the data came-from/should-end-in
 * a "data" Object of a plist file. Handling of decoding encoding is delayed.
 * See the commented out code if is helpful for the task.
 */
define('ufojs/plistLib/DataObject',[],function() {
    "use strict";
    function DataObject(data) {
        this._data = data;
    }
    DataObject.prototype.valueOf = DataObject.prototype.toString = function(){return this._data;};
    return DataObject;
   /**
    * Do we need base64 encode/decode here?
    * 
    * This uses window.btoa and window.atob which are not available everywhere
    * so a common interface to this tasks would be nice.
    * from: https://developer.mozilla.org/en/DOM/window.btoa#Unicode_Strings
    *    "Unicode Strings:
    *     In most browsers, calling window.btoa on a Unicode string will
    *     cause a Character Out Of Range exception."
    * anyways, there is a workaround in the same article encoding strings to
    * utf-8
    
    function DataObject(base64Encoded){
        this.data = window.atob(base64Encoded);
    }
    
    enhance(DataObject, {
        toString: function(){
            return window.btoa(this.data)
        }
    });
    */
});

/**
 * Copyright (c) 2011, Lasse Fister lasse@graphicore.de, http://graphicore.de
 * 
 * You should have received a copy of the MIT License along with this program.
 * If not, see http://www.opensource.org/licenses/mit-license.php
 * 
 * This Object is to store the "integer" object of a plist file. Its needed
 * because the number object of javascript is always like a float.
 * 
 * note that doing things like
 * var i = IntObject(12);
 * i++;
 * makes it a number, no longer an IntObject
 */
define('ufojs/plistLib/IntObject',[],function() {
    "use strict";
    
    function IntObject(val) {
        this.value = parseInt(val, 10);
    }
    
    IntObject.prototype = new Number();
    IntObject.prototype.valueOf = function(){ return parseInt(this.value, 10); };
    IntObject.prototype.toString = function(){ return this-0; };
    
    IntObject.constructor = IntObject;
    return IntObject;
});

/**
 * Copyright (c) 2011, Lasse Fister lasse@graphicore.de, http://graphicore.de
 *
 * You should have received a copy of the MIT License along with this program.
 * If not, see http://www.opensource.org/licenses/mit-license.php
 *
 * just in case your need the definition of a plist and your internet died,
 * this are the contents of http://www.apple.com/DTDs/PropertyList-1.0.dtd:
<!ENTITY % plistObject "(array | data | date | dict | real | integer | string | true | false )" >
<!ELEMENT plist %plistObject;>
<!ATTLIST plist version CDATA "1.0" >

<!-- Collections -->
<!ELEMENT array (%plistObject;)*>
<!ELEMENT dict (key, %plistObject;)*>
<!ELEMENT key (#PCDATA)>

<!--- Primitive types -->
<!ELEMENT string (#PCDATA)>
<!ELEMENT data (#PCDATA)> <!-- Contents interpreted as Base-64 encoded -->
<!ELEMENT date (#PCDATA)> <!-- Contents should conform to a subset of ISO 8601 (in particular, YYYY '-' MM '-' DD 'T' HH ':' MM ':' SS 'Z'.  Smaller units may be omitted with a loss of precision) -->

<!-- Numerical primitives -->
<!ELEMENT true EMPTY>  <!-- Boolean constant true -->
<!ELEMENT false EMPTY> <!-- Boolean constant false -->
<!ELEMENT real (#PCDATA)> <!-- Contents should represent a floating point number matching ("+" | "-")? d+ ("."d*)? ("E" ("+" | "-") d+)? where d is a digit 0-9.  -->
<!ELEMENT integer (#PCDATA)> <!-- Contents should represent a (possibly signed) integer number in base 10 -->
 */

define('ufojs/plistLib/main',[
    'ufojs/main'
  , 'ufojs/errors'
  , 'ufojs/xml/main'
  , './DataObject'
  , './IntObject'
], function(
    main
  , errors
  , xml
  , DataObject
  , IntObject
) {
    "use strict";
    //shortcuts
    var TypeError = errors.Type,
        ValueError = errors.Value,
        parseDate = main.parseDate;

    var PlistQualifiedNameStr = 'plist',//this is going to be the documentElement
        PlistPublicId = '-//Apple//DTD PLIST 1.0//EN',
        PlistSystemId = 'http://www.apple.com/DTDs/PropertyList-1.0.dtd';

    /*definition*/
    var plistLib = {
        types: {
            Data: DataObject,
            Int: IntObject
        },
        readPlistFromString: function(plistString) {
            var plistDoc = xml.parseXMLString(plistString);
            return plistLib.readPlistFromDocument(plistDoc);
        },
        readPlistFromDocument: function(plistDoc) {
            var root = plistDoc.documentElement;
            if(root.nodeName !== 'plist')
                throw new TypeError('The documentElement is expected to be '
                    + '"plist", but it is "' + root.nodeName + '"');
            // A plist has exactly one child element.
            // .children[0] is a synonym for .firstElementChild supported by
            // jsdom, used for environments without native DOM.
            // Chromium/Google Chrome has no children list :-/
            if(!root.firstElementChild && !root.children.length)
                return null;
            return plistLib.readPlistElement(root.firstElementChild || root.children[0]);
        },
        createPlistDocument: function(value) {
            var doc = plistLib._createPlistDOMDocument();
            var child = this.createPlistElement(doc, value);
            if(!child)
                return false;
            doc.documentElement.appendChild(child);
            return doc;
        },
        createPlistElement: function(doc /* DOM Document */, value) {
            return plistLib._createElement(doc, value) || false;
        },
        /**
         * returns a value serialized as plist xml string.
         *
         * This seems to work so far, but the browsers have still some
         * quirks, especially if you are looking for pretty printed xml.
         * For further processing the output is ok.
         */
        createPlistString: function(value) {
            var doc = plistLib.createPlistDocument(value);
            /* maybe useful when pretty printing gets interesting,
             * now it seems that browsers do not really make the xslt part
             * good. firefox 7 had problems with the indent="yes" part,
             * what makes the xslt solution half baked. Chromium, however,
             * did well.
            if(prettyPrint) {
                var xslt = xml.parseXMLString([
                    '<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">',
                        '<xsl:output method="xml" indent="yes" doctype-public="' + PlistPublicId + '" doctype-system="'+PlistSystemId+'"/>',
                        '<xsl:template match="node()|@*">',
                            '<xsl:copy>',
                            '<xsl:apply-templates select="node()|@*"/>',
                            '</xsl:copy>',
                        '</xsl:template>',
                    '</xsl:stylesheet>'].join(''), 'text/xml'),
                    processor = new xml.XSLTProcessor();
                processor.importStylesheet(xslt);
                var doc = processor.transformToDocument(doc);
            }
            */
            return xml.toString(doc);
        },
        _createPlistDOMDocument: function() {
            var namespaceURI = null,
                documentType = xml.createDocumentType(
                    PlistQualifiedNameStr, PlistPublicId, PlistSystemId),
                doc = xml.createDocument(
                    namespaceURI, PlistQualifiedNameStr, documentType);
            doc.documentElement.setAttribute('version', '1.0');
            return doc;
        },
        getType: function(value) {
            if(value instanceof IntObject
                    || typeof value === 'number' && value === (value|0))
                return 'integer';
            else if(value instanceof Number || typeof value === 'number')
                return 'real';
            else if(value instanceof Date)
                return 'date';
            else if(value instanceof DataObject)
                return 'data';
            else if(value instanceof Array)
                return 'array';
            else if(value instanceof Boolean || typeof value === 'boolean')
                return value ? 'true' : 'false';
            else if(value instanceof String || typeof value === 'string')
                return 'string';
            else if(typeof value === 'object')
                return 'dict';
            throw new ValueError('Can\'t figure out the PLIST type of ' + typeof value);
        },
        _createElement: function(doc, value) {
            var type, element, content;
            type = plistLib.getType(value);
            if(!type) return false;
            element = doc.createElement(type);
            content = plistLib._plistElementWriters[type](doc, value);
            if(content !== null)
                element.appendChild(content);
            return element;
        },
        readPlistElement: function(plistElement) {
            var type = plistElement.nodeName;
            if(!(type in plistLib._plistElementReaders))
                throw new TypeError(['A PlistElement of type "' , type, '" is not supported.'].join(''));
            return plistLib._plistElementReaders[type](plistElement);
        },
         /**
         * return a list of childNodes that are DOM-elements discard the others
         */
        _getChildElements: function(elem) {
            var list =
                // make a real array out of the nodeList
                [].slice.call(elem.childNodes)
                // remove all nodes that are not elements -- textnodes
                // (for formatting) and comments etc.
                .filter(function(node){return node.nodeType === node.ELEMENT_NODE;});
            return list;
        },
        _getText: function(elem) {
            return elem.textContent;
        },
        _plistElementReaders: {
            array: function(elem){
                return plistLib._getChildElements(elem)
                    //read the values of the elements
                    .map(plistLib.readPlistElement);
            },
            data: function(elem) {
                // FIXME: maybe a rather a Buffer?
                return new DataObject(plistLib._getText(elem));
            },
            date: function(elem){
                return new Date(parseDate(plistLib._getText(elem)));
            },
            /**
             * It seems like the robofab plistParser would just ignore
             * subsequent key elements, always the last key is the one
             * that will be used (once of course). But when there is no
             * key for a value, the parser will fail. I'm doing the same
             * here. However, the dtd forces one plistObject after each key
             * <!ELEMENT dict (key, %plistObject;)*>
             **/
            dict: function(elem) {
                var dict = {},
                    childElements = plistLib._getChildElements(elem),
                    key;
                for(var i=0; i<childElements.length; i++) {
                    if(childElements[i].nodeName === 'key') {
                        //if key !== undefined this is an error, but we skip this
                        key = plistLib._getText(childElements[i]);
                    } else if(key === undefined || key === null) {
                        throw new ValueError('Dict has a value without a key.');
                    } else {
                        dict[key] = plistLib.readPlistElement(childElements[i]);
                        key = undefined;
                    }
                }
                return dict;
            },
            real: function(elem) {
                return parseFloat(plistLib._getText(elem));
            },
            integer: function(elem) {
                //return new IntObject(plistLib._getText(elem));
                return parseInt(plistLib._getText(elem), 10);
            },
            string: function(elem) {
                return plistLib._getText(elem);
            },
            'true': function(elem) {
                // jshint unused: vars
                return true;
            },
            'false': function(elem) {
                // jshint unused: vars
                return false;
            }
        },
        _plistElementWriters: {
            array: function(doc, list) {
                var fragment = doc.createDocumentFragment(),
                    elem;
                for(var i=0; i<list.length; i++) {
                    elem = plistLib._createElement(doc, list[i]);
                    if(!elem) continue;
                    fragment.appendChild(elem);
                }
                return fragment;
            },
            data: function(doc, elem) {
                return doc.createTextNode(elem);
            },
            date: function(doc, date) {
                return doc.createTextNode(date.toISOString());
            },
            dict: function(doc, dict) {
                var fragment = doc.createDocumentFragment(),
                    key, value, keyElement;
                for(key in dict) {
                    if(dict instanceof Object && !dict.hasOwnProperty(key))
                        // Otherwise this is considered an object as a map
                        // where the object that is the first prototype in
                        // in the prototype chain—might be just the dict
                        // itself—is created with Object.create(null).
                        // Then, all keys are considered data entries.
                        continue;
                    if(dict[key] === undefined || dict[key] === null)
                        //there is no notation for empty things in plist
                        continue;
                    value = plistLib._createElement(doc, dict[key]);
                    if(!value) continue;
                    keyElement = doc.createElement('key');
                    keyElement.appendChild(doc.createTextNode(key));
                    fragment.appendChild(keyElement);
                    fragment.appendChild(value);
                }
                return fragment;
            },
            real: function(doc, number) {
                return doc.createTextNode(number.toString());
            },
            integer: function(doc, number) {
                return doc.createTextNode(number);
            },
            string: function(doc, string) {
                return doc.createTextNode(string);
            },
            'true': function(doc, elem) {
                // jshint unused: vars
                return null;
            },
            'false': function(doc, elem) {
                // jshint unused: vars
                return null;
            }
        },
        /**
         * this method is a Tool considered for testing the plist parsing
         * and thus not 'public'.
         * When there's a real need for this thing we should make a
         * specification for it. There is a lot of stuff to take into account
         * when figuring out whether two javascript objects look the same.
         *
         * This does not check if the keys of a and b are in the same order.
         * I consider plist dicts as 'unordered'. That means their value
         * doesn't change when changing just the order of key-value pairs.
         **/
        _comparePlists: function(a, b, verbose) {
            var compare = function(a, b, path, recursive) {
                var i, l, key;
                if(a === b) return true;//allows syncronous recursion i.e the same object is a an b
                if(typeof a !== 'object') return false;//this is the point, we want to compare similar objects
                if(a instanceof Date)
                   return b instanceof Date && a.getTime()===b.getTime();
                for(i=0, l=recursive.length; i<l; i++) {
                    if(recursive[i] === a)
                        throw new ValueError([path.join('.'),'async recursion detected'].join(' '));
                }
                recursive.push(a);
                for(key in a) {
                    path.push(key);
                    if(!(key in b)) return false;
                    if(!Object.prototype.hasOwnProperty.call(a, key)) {
                        if(b.hasOwnProperty(key)) return false;
                        //don't walk down the prototype
                        if(a[key] === b[key]) continue;
                        return false;
                    }
                    if(!compare(a[key], b[key], path, recursive)) return false;
                    path.pop();
                }
                for(key in b)//maybe b had more keys than a
                    if(!(key in a)) return false;
                recursive.pop();
                return true;
            }, path = ['root>>'], recursive = [];
            if(!compare(a, b, path, recursive)) {
                /*global console: true*/
                if(verbose) console.warn(path.join('.'), 'looks not the same ');
                return false;
            }
            return true;
        }
    };
    return plistLib;
});

/**
 * Copyright (c) 2012, Lasse Fister lasse@graphicore.de, http://graphicore.de
 * 
 * You should have received a copy of the MIT License along with this program.
 * If not, see http://www.opensource.org/licenses/mit-license.php
 * 
 * This is a port of the validators defined in robofab/branches/ufo3k/Lib/ufoLib/validators.py
 * The svn revision of the source file was 576 from 2012-05-11 20:00:18 +0200
 * 
 * There are blocking functions in here:
 *    pngValidator
 *    layerContentsValidator
 * for these non-blocking counterparts exist
 *    pngValidatorAsync
 *    layerContentsValidatorAsync
 * 
 * todo:
 *    pngValidator throws NotImplementedError when 'fileObj' as Input
 *    it might be nice to have a fileObj api as seen in python
 */
 
define(
    'ufojs/ufoLib/validators',[
        'ufojs/main'
      , 'ufojs/errors'
      , 'ufojs/plistLib/main'
      , 'obtain/obtain'
    ],
    function(
        main
      , errors
      , plistLib
      , obtain
) {
    "use strict";
    var enhance = main.enhance,
        isInstance = main.isInstance,
        isInt = main.isInt,
        range = main.range,
        isIntString = main.isIntString,
        isDigits = main.isDigits,
        fixedCharCodeAt = main.fixedCharCodeAt,
        assert = errors.assert,
        NotImplementedError = errors.NotImplemented,
        ValueError = errors.Value,
        //we'll return module when all public functions are assigned to it
        module = {};
    
    // -------
    // Generic
    // -------

    /**
     * This looks very different in javascript than in python. I assume
     * in javascript a type of 'object' isDictEnough. This is implemented
     * for completeness
     * 
     * Some objects will likely come in that aren't
     * dicts but are dict-ish enough.
     */
    function isDictEnough(value) {
        return typeof value === 'object';
    }
    module.isDictEnough = isDictEnough;
    
    /**
     * Generic. (Added at version 2.)
     */
    //function genericTypeValidator(value, typ) {
    //    return isInstance(value, typ);
    //}
    //module.genericTypeValidator = genericTypeValidator;
    module.genericTypeValidator = isInstance;
    
    /**
     * Generic. (Added at version 2.)
     */
    function genericIntListValidator(values, validValues) {
        if(!(validValues instanceof Array))
            throw new TypeError('genericIntListValidator expects'+
                ' validValues to be an Array');
        if(!(values instanceof Array))
            return false;
        var validValuesDict = {}, i;
        
        for(i = 0; i<validValues.length; i++)
            // must not be int just number is enough because the values
            // will be checked for being int. However, it might be a reason
            // to throw a TypeError
            if(typeof validValues[i] === 'number')
                validValuesDict[validValues[i]] = true;
        
        for(i = 0; i<values.length; i++) {
            if(!isInt(values[i]))
                return false;
            if(!(values[i] in validValuesDict))
                return false;
        }
        return true
    }
    module.genericIntListValidator = genericIntListValidator;
    
    /**
     * Generic. (Added at version 3.)
     */
    function genericNonNegativeIntValidator(value){
        if(!isInt(value) || value < 0)
            return false;
        return true;
    }
    module.genericNonNegativeIntValidator = genericNonNegativeIntValidator;
    
    /**
     * Generic. (Added at version 3.)
     */
    function genericNonNegativeNumberValidator(value) {
        if( typeof value !== 'number' || value < 0)
            return false;
        return true;
    }
    module.genericNonNegativeNumberValidator = genericNonNegativeNumberValidator;
    
    /**
     * Generic. (Added at version 3.)
     */
    function genericDictValidator(value, prototype) {
        var key, val, prototypeType, required;
        
        if(typeof prototype !== 'object')
            throw new TypeError('genericDictValidator expects  prototype'+
                ' to be type of object');
        
        // not a dict
        if(typeof value !== 'object')
            return false;
        
        // missing required keys
        for(key in prototype) {
            // prototype[key][0] is prototypeType
            // prototype[key][1] is required
            if(!prototype[key][1])
                continue;
            if(!(key in value))
                return false;
        }
        
        // unknown keys
        for(key in value)
            if( !(key in prototype) )
                return false;
        
        // incorrect types
        for(key in value) {
            val = value[key];
            prototypeType = prototype[key][0];
            required = prototype[key][1];
            // don't know if I like this continue here. the key is there
            // so the type must be correct. not?
            if( (val === undefined || val === null) && !required)
                continue;
            if(!isInstance(val, prototypeType))
                return false;
        }
        return true;
    }
    module.genericDictValidator = genericDictValidator
    
    
    // --------------
    // fontinfo.plist
    // --------------

    // Data Validators
    
    /**
     * Version 2+.
     */
    function fontInfoStyleMapStyleNameValidator(value) {
        var options = {
                "regular": true,
                "italic": true,
                "bold": true,
                "bold italic": true
            };
        return value in options;
    }
    module.fontInfoStyleMapStyleNameValidator = fontInfoStyleMapStyleNameValidator;
    
    /**
     * Version 3+.
     */
    function fontInfoOpenTypeGaspRangeRecordsValidator(value) {
        if(!(value instanceof Array))
            return false
        if(value.length === 0)
            return true
        var validBehaviors = [0, 1, 2, 3],
            dictPrototype = {
                rangeMaxPPEM:['int', true],
                rangeGaspBehavior: [Array, true]
            },
            ppemOrder = [], ppemOrderSorted, ppem, behavior, ppemValidity,
            behaviorValidity, rangeRecord, k, i;
        for(k in value) {
            rangeRecord = value[k];
            if(!genericDictValidator(rangeRecord, dictPrototype))
                return false;
            ppem = rangeRecord.rangeMaxPPEM;
            behavior = rangeRecord.rangeGaspBehavior;
            ppemValidity = genericNonNegativeIntValidator(ppem);
            if(!ppemValidity)
                return false;
            behaviorValidity = genericIntListValidator(
                behavior,
                validBehaviors
            );
            if(!behaviorValidity)
                return false;
            ppemOrder.push(ppem);
        }
        ppemOrderSorted = [].slice.call(ppemOrder).sort();
        for(var i = 0; i<ppemOrder.length; i++)
            if(ppemOrder[i] !== ppemOrderSorted[i])
                return false;
        return true;
    }
    module.fontInfoOpenTypeGaspRangeRecordsValidator = fontInfoOpenTypeGaspRangeRecordsValidator;
    
    /**
     * Version 2+.
     */
    function fontInfoOpenTypeHeadCreatedValidator(value) {
        // format: 0000/00/00 00:00:00
        
        var dateTime, date, time, year, month, day, hour, minute, second;
        
        if(typeof value !== 'string') return false;
        
        //basic formatting
        if(value.length !== 19) return false;
        
        dateTime = value.split(" ");
        if(dateTime.length !== 2) return false;
        
        date = dateTime[0].split('/');
        if(date.length !== 3) return false;
        
        time = dateTime[1].split(':');
        if(time.length !== 3) return false;
            
        // date
        year = date[0];
        month = date[1];
        day = date[2];
        
        if(year.length != 4) return false;
            
        if(month.length != 2) return false;
            
        if(day.length != 2) return false;
        
        if(!isIntString(year))return false;
        year = parseInt(year, 10);
        if(!isFinite(year)) return false;
        
        if(!isIntString(month))return false;
        month = parseInt(month, 10);
        if(!isFinite(month)) return false;
        
        if(!isIntString(day))return false;
        day = parseInt(day, 10);
        if(!isFinite(day)) return false;
        
        if(month < 1 || month > 12) return false;
        
        var monthMaxDay = new Date(year, month, 0).getDate();
        if(day < 1 || day > monthMaxDay) return false;
        
        //time
        hour = time[0];
        minute = time[1];
        second = time[2];
        
        if (hour.length != 2) return false;
        
        if (minute.length != 2) return false;
        // this will never happen as everything else is in place and has
        // the right length
        if (second.length != 2) return false;
        
        if(!isIntString(hour))return false;
        hour = parseInt(hour, 10);
        if(!isFinite(hour)) return false;
        
        if(!isIntString(minute))return false;
        minute = parseInt(minute, 10);
        if(!isFinite(minute)) return false;
        
        if(!isIntString(second))return false;
        second = parseInt(second, 10);
        if(!isFinite(second)) return false;
        
        if(hour < 0 || hour > 23) return false;
        
        if(minute < 0 || minute > 59) return false;
        
        if(second < 0 || second > 59) return false;
        
        // fallback
        return true
    }
    module.fontInfoOpenTypeHeadCreatedValidator = fontInfoOpenTypeHeadCreatedValidator;
    
    /**
     * Version 3+.
     */
    function fontInfoOpenTypeNameRecordsValidator(value) {
        if(!(value instanceof Array))
            return false;
        var dictPrototype = {
            nameID: ['int', true],
            platformID: ['int', true],
            encodingID: ['int', true],
            languageID: ['int', true],
            string: ['string', true]
        };
        for(var i=0; i<value.length; i++)
            if(!genericDictValidator(value[i], dictPrototype))
                return false;
        return true;
    }
    module.fontInfoOpenTypeNameRecordsValidator = fontInfoOpenTypeNameRecordsValidator;
    
    /**
     * Version 2+.
     */
    function fontInfoOpenTypeOS2WeightClassValidator(value) {
        if(!isInt(value)) return false;
        if(value < 0) return false;
        return true;
    }
    module.fontInfoOpenTypeOS2WeightClassValidator = fontInfoOpenTypeOS2WeightClassValidator;
    
    /**
     * Version 2+.
     */
    function fontInfoOpenTypeOS2WidthClassValidator(value) {
        if(!isInt(value))
            return false;
        if(value < 1)
            return false;
        if(value > 9)
            return false;
        return true;
    }
    module.fontInfoOpenTypeOS2WidthClassValidator = fontInfoOpenTypeOS2WidthClassValidator;
    
    /**
     * Version 2.
     */
    function fontInfoVersion2OpenTypeOS2PanoseValidator(values) {
        if(!(values instanceof Array))
            return false;
        if(values.length !== 10)
            return false;
        for(var i=0; i<values.length; i++)
            if(!isInt(values[i]))
                return false;
        // XXX further validation?
        return true;
    }
    module.fontInfoVersion2OpenTypeOS2PanoseValidator = fontInfoVersion2OpenTypeOS2PanoseValidator;
    
    /**
     * Version 3+.
     */
    function fontInfoVersion3OpenTypeOS2PanoseValidator(values) {
        if(!(values instanceof Array))
            return false;
        
        if(values.length !== 10)
            return false;
        
        for(var i=0; i<values.length; i++) {
            if(!isInt(values[i]))
                return false;
        
            if(values[i] < 0)
                return false;
        }
        // XXX further validation?
        return true;
    }
    module.fontInfoVersion3OpenTypeOS2PanoseValidator = fontInfoVersion3OpenTypeOS2PanoseValidator;
    
    /**
     * Version 2+.
     */
    function fontInfoOpenTypeOS2FamilyClassValidator(values) {
        if(!(values instanceof Array))
            return false;
        if (values.length !== 2)
            return false;
        for(var i=0; i<values.length; i++)
            if(!isInt(values[i]))
                return false
        var classID = values[0],
            subclassID = values[1];
        
        if(classID < 0 || classID > 14)
            return false;
        if(subclassID < 0 || subclassID > 15)
            return false
        return true;
    }
    module.fontInfoOpenTypeOS2FamilyClassValidator = fontInfoOpenTypeOS2FamilyClassValidator;
    
    /**
     * Version 2+.
     */
    function fontInfoPostscriptBluesValidator(values) {
        if(!(values instanceof Array))
            return false;
        if(values.length > 14)
            return false;
        if(values.length % 2)
            return false;
        for(var i=0; i<values.length; i++)
            if(!isInstance(values[i], 'number'))
                return false;
        return true;
    }
    module.fontInfoPostscriptBluesValidator = fontInfoPostscriptBluesValidator;
    
    /**
     * Version 2+.
     */
    function fontInfoPostscriptOtherBluesValidator(values){
        if(!(values instanceof Array))
            return false;
        if(values.length > 10)
            return false;
        if(values.length % 2)
            return false;
        for(var i=0; i<values.length; i++)
            if(!isInstance(values[i], 'number'))
                return false;
        return true;
    }
    module.fontInfoPostscriptOtherBluesValidator = fontInfoPostscriptOtherBluesValidator;
    
    /**
     * Version 2+.
     */
    function fontInfoPostscriptStemsValidator(values) {
        if(!(values instanceof Array))
            return false;
        if(values.length > 12)
            return false;
        for(var i=0; i<values.length; i++)
            if(!isInstance(values[i], 'number'))
                return false;
        return true;
    }
    module.fontInfoPostscriptStemsValidator = fontInfoPostscriptStemsValidator
    
    /**
     * Version 2+.
     */
    function fontInfoPostscriptWindowsCharacterSetValidator(value) {
        if(!isInt(value))
            return false;
        if(value < 1 || value > 20)
            return false;
        return true;
    }
    module.fontInfoPostscriptWindowsCharacterSetValidator = fontInfoPostscriptWindowsCharacterSetValidator;
    
    /**
     * Version 3+.
     */
    function fontInfoWOFFMetadataUniqueIDValidator(value) {
        var dictPrototype = {id: ['string', true]};
        if(!genericDictValidator(value, dictPrototype))
            return false;
        return true;
    }
    module.fontInfoWOFFMetadataUniqueIDValidator = fontInfoWOFFMetadataUniqueIDValidator;
    
    /**
     * Version 3+.
     */
    function fontInfoWOFFMetadataVendorValidator(value) {
        var dictPrototype = {
            name: ['string', true],
            url: ['string', false],
            dir: ['string', false],
            'class': ['string', false]
        };
        if(!genericDictValidator(value, dictPrototype))
            return false;
        if('dir' in value && !(value['dir'] in {'ltr': true, 'rtl' : true}))
            return false;
        return true;
    }
    module.fontInfoWOFFMetadataVendorValidator = fontInfoWOFFMetadataVendorValidator;
    
    /**
     * Version 3+.
     */
    function fontInfoWOFFMetadataCreditsValidator(value) {
        var dictPrototype = {credits: [Array, true]},
            i, credit;
        if(!genericDictValidator(value, dictPrototype))
            return false;
        if(!value["credits"].length)
            return false;
        dictPrototype = {
            name: ['string', true],
            url: ['string', false],
            role: ['string', false],
            dir: ['string', false],
            'class' : ['string', false]
        };
        for(i=0; i<value["credits"].length; i++) {
            credit = value["credits"][i];
            if(!genericDictValidator(credit, dictPrototype))
                return false;
            if('dir' in credit && !(credit['dir'] in {'ltr': true, 'rtl' : true}))
                return false;
        }
        return true;
    }
    module.fontInfoWOFFMetadataCreditsValidator = fontInfoWOFFMetadataCreditsValidator;
    
    /**
     * Version 3+.
     */
    function fontInfoWOFFMetadataDescriptionValidator(value) {
        var dictPrototype = {
            url: ['string', false],
            text: [Array, true]
        };
        if(!genericDictValidator(value, dictPrototype))
            return false;
        for(var i=0; i<value.text.length; i++)
            if(!fontInfoWOFFMetadataTextValue(value.text[i]))
                return false;
        return true;
    }
    module.fontInfoWOFFMetadataDescriptionValidator = fontInfoWOFFMetadataDescriptionValidator;
    
    /**
     * Version 3+.
     */
    function fontInfoWOFFMetadataLicenseValidator(value) {
        var dictPrototype = {
            url: ['string', false],
            text: [Array, false],
            id: ['string', false]
        };
        if(!genericDictValidator(value, dictPrototype))
            return false;
        if('text' in value)
            for(var i=0; i<value.text.length; i++)
                if(!fontInfoWOFFMetadataTextValue(value.text[i]))
                    return false;
        return true;
    }
    module.fontInfoWOFFMetadataLicenseValidator = fontInfoWOFFMetadataLicenseValidator;
    
    /**
     * Version 3+.
     */
    function fontInfoWOFFMetadataTrademarkValidator(value) {
        var dictPrototype = {text: [Array, true]};
        if(!genericDictValidator(value, dictPrototype))
            return false;
        for(var i=0; i<value.text.length; i++)
            if(!fontInfoWOFFMetadataTextValue(value.text[i]))
                return false;
        return true;
    }
    module.fontInfoWOFFMetadataTrademarkValidator = fontInfoWOFFMetadataTrademarkValidator;
    
    /**
     * Version 3+.
     */
    function fontInfoWOFFMetadataCopyrightValidator(value) {
        var dictPrototype = {text: [Array, true]};
        if(!genericDictValidator(value, dictPrototype))
            return false;
        for(var i=0; i< value.text.length; i++)
            if(!fontInfoWOFFMetadataTextValue(value.text[i]))
                return false;
        return true;
    }
    module.fontInfoWOFFMetadataCopyrightValidator = fontInfoWOFFMetadataCopyrightValidator;
    
    /**
     * Version 3+.
     */
    function fontInfoWOFFMetadataLicenseeValidator(value){
        var dictPrototype = {
            name: ['string', true],
            dir: ['string', false],
            'class' : ['string', false]
        };
        if(!genericDictValidator(value, dictPrototype))
            return false;
        if('dir' in value && !(value.dir in {'ltr': true, 'rtl': true}))
            return false;
        return true;
    }
    module.fontInfoWOFFMetadataLicenseeValidator = fontInfoWOFFMetadataLicenseeValidator;
    
    /**
     * Version 3+.
     */
    function fontInfoWOFFMetadataTextValue(value){
        var dictPrototype = {
            text: ['string', true],
            language: ['string', false],
            dir: ['string', false],
            'class' : ['string', false]
        };
        if(!genericDictValidator(value, dictPrototype))
            return false;
        if('dir' in value && !(value.dir in {'ltr': true, 'rtl': true}))
            return false;
        return true;
    }
    module.fontInfoWOFFMetadataTextValue = fontInfoWOFFMetadataTextValue;
    
    /**
     * Version 3+.
     */
    function fontInfoWOFFMetadataExtensionsValidator(value) {
        if(!(value instanceof Array))
            return false;
        if(!value.length)
            return false;
        for(var i=0; i<value.length; i++)
            if(!fontInfoWOFFMetadataExtensionValidator(value[i]))
                return false;
        return true;
    }
    module.fontInfoWOFFMetadataExtensionsValidator = fontInfoWOFFMetadataExtensionsValidator;
    
    /**
     * Version 3+.
     */
    function fontInfoWOFFMetadataExtensionValidator(value) {
        var dictPrototype = {
            names: [Array, false],
            items: [Array, true],
            id: ['string', false]
        }
        if(!genericDictValidator(value, dictPrototype))
            return false;
        if('names' in value)
            for(var i=0; i<value.names.length; i++)
                if(!fontInfoWOFFMetadataExtensionNameValidator(value.names[i]))
                    return false;
        for(var i=0; i<value.items.length; i++)
            if(!fontInfoWOFFMetadataExtensionItemValidator(value.items[i]))
                return false;
        return true;
    }
    module.fontInfoWOFFMetadataExtensionValidator = fontInfoWOFFMetadataExtensionValidator;
    
    /**
     * Version 3+.
     */
    function fontInfoWOFFMetadataExtensionItemValidator(value) {
        var dictPrototype = {
            id: ['string', false],
            names: [Array, true],
            values: [Array, true]
        };
        if(!genericDictValidator(value, dictPrototype))
            return false;
        for(var i=0; i<value.names.length; i++)
            if(!fontInfoWOFFMetadataExtensionNameValidator(value.names[i]))
                return false;
        for(var i=0; i<value.values.length; i++)
            if(!fontInfoWOFFMetadataExtensionValueValidator(value.values[i]))
                return false;
        return true;
    }
    module.fontInfoWOFFMetadataExtensionItemValidator = fontInfoWOFFMetadataExtensionItemValidator;
    
    /**
     * Version 3+.
     */
    function fontInfoWOFFMetadataExtensionNameValidator(value) {
        var dictPrototype = {
            text: ['string', true],
            language: ['string', false],
            dir: ['string', false],
            class: ['string', false]
        };
        if(!genericDictValidator(value, dictPrototype))
            return false;
        if('dir' in value && !(value.dir in {'ltr': true, 'rtl': true}))
            return false;
        return true;
    }
    module.fontInfoWOFFMetadataExtensionNameValidator = fontInfoWOFFMetadataExtensionNameValidator;
    
    /**
     * Version 3+.
     */
    function fontInfoWOFFMetadataExtensionValueValidator(value) {
        var dictPrototype = {
            text: ['string', true],
            language: ['string', false],
            dir: ['string', false],
            class: ['string', false]
        };
        if(!genericDictValidator(value, dictPrototype))
            return false;
        if('dir' in value && !(value.dir in {'ltr': true, 'rtl': true}))
            return false;
        return true;
    }
    module.fontInfoWOFFMetadataExtensionValueValidator = fontInfoWOFFMetadataExtensionValueValidator;
    
    
    // ----------
    // Guidelines
    // ----------
    
    /**
     * Version 3+.
     */
    function guidelinesValidator(value, identifiers/* default = object */) {
        if(!(value instanceof Array))
            return false;
        if(identifiers === undefined)
            identifiers = {};
        for(var i=0; i<value.length; i++) {
            var guide = value[i];
            if(!guidelineValidator(guide))
                return false;
            var identifier = guide.identifier;
            if(identifier !== undefined) {
                if(identifier in identifiers)
                    return false;
                identifiers[identifier] = true;
            }
        }
        return true
    }
    module.guidelinesValidator = guidelinesValidator;
    
    /**
     * Version 3+.
     */
    function guidelineValidator(value) {
        var dictPrototype = {
            x: ['number', false],
            y: ['number', false],
            angle: ['number', false],
            name: ['string', false],
            color: ['string', false],
            identifier: ['string', false]
        }, x, y, angle, identifier, color;
        if(!genericDictValidator(value, dictPrototype))
            return false;
        x = value.x;
        y = value.y;
        angle = value.angle;
        // x or y must be present
        if(x === undefined && y === undefined)
            return false;
        // if x or y are None, angle must not be present
        if((x === undefined || y === undefined) && angle !== undefined)
            return false;
        // if x and y are defined, angle must be defined
        if(x !== undefined && y !== undefined && angle === undefined)
            return false;
        // angle must be between 0 and 360
        if(angle !== undefined && (angle < 0 || angle > 360))
                return false;
        // identifier must be 1 or more characters
        identifier = value.identifier;
        if(identifier !== undefined && !identifierValidator(identifier))
            return false;
        // color must follow the proper format
        color = value.color;
        if(color !== undefined && !colorValidator(color))
            return false;
        return true;
    }
    module.guidelineValidator = guidelineValidator;
    
    
    // -------
    // Anchors
    // -------
    
    /**
     * Version 3+.
     */
    function anchorsValidator(value, identifiers/* default: object */) {
        if(!(value instanceof Array))
            return false;
        if(identifiers === undefined)
            identifiers = {};
        var anchor;
        for(var i=0; i<value.length; i++) {
            anchor = value[i];
            if(!anchorValidator(anchor))
                return false;
            var identifier = anchor.identifier;
            if(identifier !== undefined){
                if(identifier in identifiers)
                    return false
                identifiers[identifier] = true;
            }
        }
        return true;
    }
    module.anchorsValidator = anchorsValidator;
    
    
    /**
     * Version 3+.
     */
    function anchorValidator(value) {
        var dictPrototype = {
            x: ['number', true],
            y: ['number', true],
            name: ['string', false],
            color: ['string', false],
            identifier: ['string', false]
        }, identifier, color;
        if(!genericDictValidator(value, dictPrototype))
            return false;
        // identifier must be 1 or more characters
        identifier = value.identifier;
        if(identifier !== undefined && !identifierValidator(identifier))
            return false;
        // color must follow the proper format
        color = value.color;
        if(color !== undefined && !colorValidator(color))
            return false;
        return true;
    }
    module.anchorValidator = anchorValidator;
    
    
    // ----------
    // Identifier
    // ----------
    
    /**
     * Version 3+.
     * 
     * Valid Chars 0x20 to 0x7E:
     *      ! " # $ % & ' ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ; < = >
     *      ? @ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \
     *      ] ^ _ ` a b c d e f g h i j k l m n o p q r s t u v w x y z
     *      { | } ~
     * 
     * Python doctest
     * >>> identifierValidator("a")
     * True
     * >>> identifierValidator("")
     * False
     * >>> identifierValidator("a" * 101)
     * False
     */
    function identifierValidator(value) {
        var validCharactersMin = 0x20,
         validCharactersMax = 0x7E,
         c;
        if (typeof value !== 'string')
            return false;
        if(value.length === 0 || value.length > 100)
            return false;
        for(var i=0; i<value.length; i++) {
            c = fixedCharCodeAt(value, i);
            if(c === false)
                //was handled in the iteration before
                continue;
            if(c < validCharactersMin || c > validCharactersMax)
                return false;
        }
        return true;
    }
    module.identifierValidator = identifierValidator;
    
    
    // -----
    // Color
    // -----
    
    /**
     * Version 3+.
     *
     *  Python doctest
     *  >>> colorValidator("0,0,0,0")
     *  True
     *  >>> colorValidator(".5,.5,.5,.5")
     *  True
     *  >>> colorValidator("0.5,0.5,0.5,0.5")
     *  True
     *  >>> colorValidator("1,1,1,1")
     *  True
     *
     *  >>> colorValidator("2,0,0,0")
     *  False
     *  >>> colorValidator("0,2,0,0")
     *  False
     *  >>> colorValidator("0,0,2,0")
     *  False
     *  >>> colorValidator("0,0,0,2")
     *  False
     *
     *  >>> colorValidator("1r,1,1,1")
     *  False
     *  >>> colorValidator("1,1g,1,1")
     *  False
     *  >>> colorValidator("1,1,1b,1")
     *  False
     *  >>> colorValidator("1,1,1,1a")
     *  False
     *
     *  >>> colorValidator("1 1 1 1")
     *  False
     *  >>> colorValidator("1 1,1,1")
     *  False
     *  >>> colorValidator("1,1 1,1")
     *  False
     *  >>> colorValidator("1,1,1 1")
     *  False
     *
     *  >>> colorValidator("1, 1, 1, 1")
     *  True
     */
    function colorValidator(value) {
        if(typeof value !== 'string')
            return false;
        var parts = value.split(","),
            // this will allow things like
            // '1' '.1' '.' '31.5' '0.' '2323' '123.' '14' '12.1234' '12.1234'
            numberFormat = /^[0-9]*[.]?[0-9]*$/,
            i, part, number;
        if(parts.length != 4)
            return false;
        for(i=0; i<parts.length; i++) {
            part = parts[i].trim();
            if(!numberFormat.test(part))
                return false;
            if (  !isFinite(number = parseFloat(part))
               && !isFinite(number = parseInt(part, 10)))
                return false;
            else if (number < 0)
                return false;
            else if( number > 1 )
                return false;
        }
        return true;
    }
    module.colorValidator = colorValidator;
    
    
    // -----
    // image
    // -----
    
    /**
     * Version 3+.
     */
    function imageValidator(value) {
        var dictPrototype = {
            fileName: ['string', true],
            xScale: ['number', false],
            xyScale: ['number', false],
            yxScale: ['number', false],
            yScale: ['number', false],
            xOffset: ['number', false],
            yOffset: ['number', false],
            color: ['string', false]
        };
        if(!genericDictValidator(value, dictPrototype))
            return false;
        // fileName must be one or more characters
        if(!value.fileName.length)
            return false;
        // color must follow the proper format
        if(value.color !== undefined && !colorValidator(value.color))
            return false;
        return true
    }
    module.imageValidator = imageValidator;
    
    /**
     * Version 3+.
     *
     * This checks the signature of the image data.
     * 
     * pngValidatorSync is a blocking api like the one in python
     * pngValidatorAsync is a non-blocking api and takes a nodeJS like
     * callback as second argument
     * pngValidator uses obtainJS-like syntax: pngValidator(switch (a)sync, arg)
     */
    
    function _pngValidator(signature) {
        if(signature !== "\x89PNG\r\n\x1a\n")
            return [false, 'Image does not begin with the PNG signature.'];
        return [true, undefined];
    }
    
    function _readBytes(obtainSwitch, ioAPI, path, bytes) {
        return ioAPI.readBytes(obtainSwitch, path, bytes)
    }
    
    var pngValidator = obtain.factory(
        {// sync getters
            signature: [false, 'io', 'argPath', 8, _readBytes]
          , argPath: ['arg', function(arg) {
                assert(arg.path !== undefined, 'arg.path must be defined')
                return arg.path
            }]
        },
        {// async getters
            signature: [true, 'io', 'argPath', 8, _readBytes]
        },
        ['io', 'arg'],
        function(obtain, io, arg) {
            var signature;
            assert(
                arg !== undefined
                && (arg.path !== undefined
                || arg.data !== undefined
                || arg.fileObj !== undefined),
                'Either "path" or "data" or "fileObj" must be defined.'
            );
            if(arg.path !== undefined)
                signature = obtain('signature');
            else if (arg.data !== undefined)
                signature = arg.data.slice(0, 8);
            else if (arg.fileObj !== undefined) {
                // this depends on a proper FileObject Implementation!
                // implement this explicitly when there is a FileObject API
                throw new NotImplementedError('There\'s no FileObject available yet');
                var pos = arg.fileObj.tell();
                signature = arg.fileObj.read(8);
                arg.fileObj.seek(pos);//reset
            }
            return _pngValidator(signature);
        }
    )
    
    /**
     * synchronous pngValidator
     */
    function pngValidatorSync(io, arg) {
        return pngValidator(false, io, arg)
    }
    
    /**
     * asynchronous pngValidator
     * callback takes (error || result [bool validates, string message])
     * message is most likeley undefined when validates is true and vice versa
     */
    function pngValidatorAsync(io, arg, callback) {
        return pngValidator({unified:callback}, io, arg);
    }
    
    
    
    
    module.pngValidator = pngValidator;
    module.pngValidatorSync = pngValidatorSync;
    module.pngValidatorAsync = pngValidatorAsync;
    
    // -------------------
    // layercontents.plist
    // -------------------
    
    /**
     * Check the validity of layercontents.plist.
     * Version 3+.
     * 
     * layerContentsValidator is a blocking api like the one in python
     * layerContentsValidatorAsync is a non blocking api and takes a callback as
     * third argument
     */
    function _layerContentsValidator(value) {
        var bogusFileMessage = 'layercontents.plist in not in the correct'
                             + ' format.',
            // did we find the default layer (where directoryName === 'glyphs')
            foundDefault = false,
            usedLayerNames, usedDirectories, entry, i, j, layerName,
            directoryName, p;
        // file isn't in the right format
        if(!(value instanceof Array))
            return [false, bogusFileMessage];
        // work through each entry
        usedLayerNames = {};
        usedDirectories = {};
        for(i=0; i<value.length; i++){
            entry = value[i];
            // layer entry in the incorrect format
            if(!(entry instanceof Array))
                return [false, bogusFileMessage];
            if(entry.length !== 2)
                return [false, bogusFileMessage];
            for(j=0; j<entry.length; j++)
                if(typeof entry[j] !== 'string')
                    return [false, bogusFileMessage];
            layerName = entry[0];
            directoryName = entry[1];
            // check directory naming
            if(directoryName !== 'glyphs') {
                if(directoryName.indexOf('glyphs.') !== 0)
                    return [false, [ 'Invalid directory name (', directoryName,
                        ') in layercontents.plist.'].join('')];
            } else
                //we found the default layer
                foundDefault = true;
            if(layerName.length === 0)
                return [false, 'Empty layer name in layercontents.plist.'];
            // default layer name
            if(layerName === 'public.default' && directoryName !== 'glyphs')
                return [false, 'The name public.default is being used by'
                    +' a layer that is not the default.'];
            // check usage
            if(layerName in usedLayerNames)
                return [false, ['The layer name ', layerName,
                        ' is used by more than one layer.'].join('')];
            usedLayerNames[layerName] = true;
            if(directoryName in usedDirectories)
                return [false, [ 'The directory ', directoryName,
                    ' is used by more than one layer.'].join('')];
            usedDirectories[directoryName] = true;
        }
        // did we find the default layer (where directoryName === 'glyphs')
        if(!foundDefault)
            // missing default layer
            return [false, 'The required default glyph set is not in the UFO.'];
        return [true, undefined];
    }
    
    
    /**
     * layerContentsValidator uses obtainJS-like syntax:
     *      layerContentsValidator(switch (a)sync, value, ufoPath)
     */
    var layerContentsValidator = obtain.factory(
        { // sync
            listOfPathsExists: ['io', 'directoryNames', 'ufoPath',
            function(io, directoryNames, ufoPath) {
                var i=0
                , directoryName
                , path;
                
                for(i=0; i<directoryNames.length; i++) {
                    directoryName = directoryNames[i];
                    path = [ufoPath, directoryName].join('/');
                    if(!io.pathExists(false, path))
                        return [false, 'A glyphset does not exist at '
                            + directoryName];
                }
                return [true, undefined];
            }]
          , directoryNames: ['value', function(value) {
                return value.map(function(item){return item[1]});
            }]
        }
      , { // async
            listOfPathsExists: ['io', 'directoryNames', 'ufoPath', '_callback'
                              , '_errback', function(io, directoryNames
                                            , ufoPath, callback, errback) {
                var i = 0
                  , requested = 0 // we'll use this to determine if the test passed
                  , failed = false // ioCallback will change this
                  , directoryName
                  , path
                  , success = [true, undefined]
                  , ioCallback = function(directoryName, boolExists) {
                        requested -= 1;
                        // if it failed once we won't have to use the
                        // callbacks anymore, although it may be an option 
                        // to write this to the logs in the future
                        if(failed)
                            return;
                        if(!boolExists) {
                            failed = true;
                            callback([false, 'A glyphset does not exist at '
                                            + directoryName])
                            return;
                        }
                        if(requested === 0)
                            // all requested files where found
                            callback(success);
                    }
                  ;
                // if there was no dir in directoryNames
                if(directoryNames.length === 0) {
                    setTimeout(function(){callback(success)}, 0)
                    return;
                }
                // we just fire all now. the idea is that the io module
                // will have to throttle stuff like this in the future
                // (and should provide an api to cancel the already fired
                // requests, when possible)
                for(;i<directoryNames.length; i++) {
                    directoryName = directoryNames[i];
                    path = [ufoPath, directoryName].join('/');
                    requested += 1;
                    io.pathExists(true, path).then(ioCallback.bind(null, directoryName));
                }
            }]
        }
      , ['io', 'value', 'ufoPath']
      , function(obtain, io, value, ufoPath) {
            var result = _layerContentsValidator(value);
            if(!result[0])
                return result;
            return obtain('listOfPathsExists');
        }
    )
    
    /**
     * synchronous layerContentsValidator
     */
    function layerContentsValidatorSync(io, value, ufoPath) {
        return layerContentsValidator(false, io, value, ufoPath);
        
    }
    /**
     * asynchronous layerContentsValidator
     * callback takes (error, [bool validates,  message string || undefined])
     * message is most likeley undefined when validates is true and vice versa
     */
    function layerContentsValidatorAsync(io, value, ufoPath, callback) {
        return layerContentsValidator({unified: callback}, io, value, ufoPath)
    }
    module.layerContentsValidator = layerContentsValidator;
    module.layerContentsValidatorSync = layerContentsValidatorSync;
    module.layerContentsValidatorAsync = layerContentsValidatorAsync;
    
    
    // ------------
    // groups.plist
    // ------------
    
    /**
     * Check the validity of the groups.
     * Version 3+ (though it's backwards compatible with UFO 1 and UFO 2).
     * 
     * Python doctest
     * >>> groups = {"A" : ["A", "A"], "A2" : ["A"]}
     * >>> groupsValidator(groups)
     * (True, None)
     *
     * >>> groups = {"" : ["A"]}
     * >>> groupsValidator(groups)
     * (False, 'A group has an empty name.')
     *
     * >>> groups = {"public.awesome" : ["A"]}
     * >>> groupsValidator(groups)
     * (True, None)
     *
     * >>> groups = {"public.kern1." : ["A"]}
     * >>> groupsValidator(groups)
     * (False, 'The group data contains a kerning group with an incomplete name.')
     * >>> groups = {"public.kern2." : ["A"]}
     * >>> groupsValidator(groups)
     * (False, 'The group data contains a kerning group with an incomplete name.')
     *
     * >>> groups = {"public.kern1.A" : ["A"], "public.kern2.A" : ["A"]}
     * >>> groupsValidator(groups)
     * (True, None)
     *
     * >>> groups = {"public.kern1.A1" : ["A"], "public.kern1.A2" : ["A"]}
     * >>> groupsValidator(groups)
     * (False, 'The glyph "A" occurs in too many kerning groups.')
     */
    function groupsValidator(value) {
        var bogusFormatMessage = 'The group data is not in the correct format.',
            firstSideMapping, secondSideMapping, groupName, glyphList, d,
            i, glyphName;
        
        if(typeof value !== 'object')
            return [false, bogusFormatMessage];
        firstSideMapping = {};
        secondSideMapping = {};
        for(groupName in value) {
            glyphList = value[groupName];
            // there used to be a check for groupName beeing string
            // but with javascript groupName will always be string
            // when we iterate over the keys of an object like this
            if(!(glyphList instanceof Array))
                return [false, bogusFormatMessage];
            if(groupName.length === 0)
                return [false, 'A group has an empty name.'];
            if(groupName.indexOf('public.') === 0) {
                if(groupName.indexOf('public.kern1.') !== 0
                    && groupName.indexOf('public.kern2.') !== 0)
                    // unknown pubic.* name. silently skip.
                    continue;
                else if('public.kernN.'.length === groupName.length)
                    return [false, 'The group data contains a kerning '
                        +'group with an incomplete name.'];
                
                d = (groupName.indexOf('public.kern1.') === 0)
                    ? firstSideMapping : secondSideMapping;
                for(i=0; i<glyphList.length; i++) {
                    glyphName = glyphList[i];
                    if(typeof glyphName !== 'string')
                        return [false, ['The group data ', groupName,
                            'contains an invalid member.'].join('')];
                    if(glyphName in d)
                        return [false, ['The glyph "', glyphName,
                            '" occurs in too many kerning groups.'].join('')];
                    d[glyphName] = groupName;
                }
            }
        }
        return [true, undefined];
    }
    module.groupsValidator = groupsValidator;
    
    
    // -------------
    // kerning.plist
    // -------------
    
    /**
     * join a and b to astring that is unique for the combination of
     * a and b
     */
    var _kerningNamesHash_escapeEscape = /\\/g,
        _kerningNamesHash_escapeKomma = /,/g;
    function _kerningNamesHash_escaper(str) {
        return str.replace(
                _kerningNamesHash_escapeEscape, '\\\\'
            ).replace(
                _kerningNamesHash_escapeKomma, '\\,'
            );
    }
    function _kerningNamesHash(a, b) {
        if(typeof a !== 'string' || typeof b !== 'string')
            throw new errors.Type('Both arguments of _kerningNamesHash'
                +' must be string');
        return([a, b].map(_kerningNamesHash_escaper).join(','));
    }
    
    /**
     * This validates a passed kerning dictionary
     * using the provided groups. The validation
     * checks to make sure that there are no conflicting
     * glyph + group and group + glyph exceptions.
     * 
     * problem:
     * in python the kern dict contains keys as tuples like: kerning[left, right]
     * where left and right are group names
     * so
     * kerning= {
     *  (left, right): data,
     *  (left2, right2): data2
     * }
     * 
     * I assume for javascript that a list like the following will work out:
     * kerning = [
     *  [[left, right], data],
     *  [[left2, right2], data2]
     * ]
     * I use a helper to make a lookup object :(  _kerningNamesHash
     * 
     * Python doctest
     * >>> groups = {
     * ...     "public.kern1.O" : ["O", "D", "Q"],
     * ...     "public.kern2.E" : ["E", "F"]
     * ... }
     * >>> kerning = {
     * ...     ("public.kern1.O", "public.kern2.E") : -100,
     * ...     ("public.kern1.O", "F") : -200,
     * ...     ("D", "F") : -300,
     * ... }
     * >>> kerningValidator(kerning, groups)
     * True
     * >>> kerning = {
     * ...     ("public.kern1.O", "public.kern2.E") : -100,
     * ...     ("public.kern1.O", "F") : -200,
     * ...     ("Q", "public.kern2.E") : -250,
     * ...     ("D", "F") : -300,
     * ... }
     * >>> kerningValidator(kerning, groups)
     * False
     */
    function kerningValidator(kerning, groups) {
        if(!(kerning instanceof Array))
            throw new errors.Type('kerningValidator expects kerning to be'
            + ' an Array');
        if(typeof groups !== 'object')
            throw new errors.Type('kerningValidator expects groups to be'
            + ' typeof object');
        
        var flatFirstGroups = {},
            flatSecondGroups = {},
            groupName, glyphList, d, i, glyphName, first, second,
            firstIsGroup, secondIsGroup, firstOptions, firstGroup, glyph,
            j, secondOptions, firstGroup, kerningLookup = {}, hash, secondGroup;
        
        //make a lookup to check fast if the groups exist alredy
        for(i=0; i<kerning.length; i++) {
            first = kerning[i][0][0];
            second = kerning[i][0][1];
            // throws a ValueError when either argument is not a string
            kerningLookup[_kerningNamesHash(first, second)] = true;
        }
        // flatten the groups
        for(groupName in groups) {
            glyphList = groups[groupName];
            if(groupName.indexOf('public.kern1.') !== 0
                && groupName.indexOf('public.kern2.') !== 0)
                continue;
            if(groupName.indexOf('public.kern1.') === 0)
                d = flatFirstGroups;
            else if(groupName.indexOf('public.kern2.') === 0)
                d = flatSecondGroups;
            for(i=0; i<glyphList.length; i++){
                glyphName = glyphList[i];
                d[glyphName] = groupName;
            }
        }
        // search for conflicts
        for(i=0; i<kerning.length; i++) {
            first = kerning[i][0][0];
            second = kerning[i][0][1];
            firstIsGroup = first.indexOf('public.kern1.') === 0;
            secondIsGroup = second.indexOf('public.kern2.') === 0;
            // skip anything other than glyph + group and group + glyph
            if(firstIsGroup && secondIsGroup)
                continue;
            if (!firstIsGroup && !secondIsGroup)
                continue;
            // if the first is a glyph and it isn't in a group, skip
            if(!firstIsGroup && !(first in flatFirstGroups))
                continue;
            // if the second is a glyph and it isn't in a group, skip
            if (!secondIsGroup && !(second in flatSecondGroups))
                    continue;
            // skip unknown things
            if(firstIsGroup && !(first in groups))
                continue;
            if(firstIsGroup && !(second in flatSecondGroups))
                continue;
            if(secondIsGroup && !(second in groups))
                continue;
            if(secondIsGroup && !(first in flatFirstGroups))
                continue;
            // validate group + glyph
            if(firstIsGroup) {
                firstOptions = groups[first];
                secondGroup = flatSecondGroups[second];
                for(j=0; j<firstOptions.length; j++) {
                    glyph = firstOptions[j];
                    hash = _kerningNamesHash(glyph, secondGroup);
                    if(hash in kerningLookup)
                        return false;
                }
            }
            // validate glyph + group
            if(secondIsGroup) {
                secondOptions = groups[second];
                firstGroup = flatFirstGroups[first];
                for(j=0; j<secondOptions.length; j++) {
                    glyph = secondOptions[j];
                    hash = _kerningNamesHash(firstGroup, glyph);
                    if(hash in kerningLookup)
                        return false;
                }
            }
        }
        // fallback
        return true;
    }
    module.kerningValidator = kerningValidator;
    
    // -------------
    // lib.plist/lib
    // -------------
    
    /**
     * Check the validity of the lib.
     * Version 3+ (though it's backwards compatible with UFO 1 and UFO 2).
     *
     * Python doctest
     * >>> lib = {"foo" : "bar"}
     * >>> fontLibValidator(lib)
     * (True, None)
     *
     * >>> lib = {"public.awesome" : "hello"}
     * >>> fontLibValidator(lib)
     * (True, None)
     *
     * >>> lib = {"public.glyphOrder" : ["A", "C", "B"]}
     * >>> fontLibValidator(lib)
     * (True, None)
     *
     * >>> lib = {"public.glyphOrder" : "hello"}
     * >>> fontLibValidator(lib)
     * (False, 'public.glyphOrder is not properly formatted.')
     *
     * >>> lib = {"public.glyphOrder" : ["A", 1, "B"]}
     * >>> fontLibValidator(lib)
     * (False, 'public.glyphOrder is not properly formatted.')
     */
    function fontLibValidator(value) {
        var bogusFormatMessage = 'The lib data is not in the correct format.',
            bogusGlyphOrderMessage = 'public.glyphOrder is not properly formatted.',
            key, val, i, glyphName;
        if(plistLib.getType(value) !== 'dict')
            return [false, bogusFormatMessage];
        for(key in value) {
            val = value[key];
            // key is always string in javascript this way
            // if(typeof key !== 'string')
            //    return [false, bogusFormatMessage];
            
            // public.glyphOrder
            if(key === 'public.glyphOrder') {
                if(!(val instanceof Array))
                    return [false, bogusGlyphOrderMessage];
                for(i=0; i<val.length; i++){
                    glyphName = val[i];
                    if(typeof glyphName !== 'string')
                        return [false, bogusGlyphOrderMessage];
                }
            }
        }
        return [true, undefined];
    }
    module.fontLibValidator = fontLibValidator;
    // --------
    // GLIF lib
    // --------
    
    /**
     * Check the validity of the lib.
     * Version 3+ (though it's backwards compatible with UFO 1 and UFO 2).
     * 
     * Python doctest
     * >>> lib = {"foo" : "bar"}
     * >>> glyphLibValidator(lib)
     * (True, None)
     * 
     * >>> lib = {"public.awesome" : "hello"}
     * >>> glyphLibValidator(lib)
     * (True, None)
     * 
     * >>> lib = {"public.markColor" : "1,0,0,0.5"}
     * >>> glyphLibValidator(lib)
     * (True, None)
     * 
     * >>> lib = {"public.markColor" : 1}
     * >>> glyphLibValidator(lib)
     * (False, 'public.markColor is not properly formatted.')
     */
    function glyphLibValidator(value) {
        var bogusFormatMessage = 'The lib data is not in the correct format.',
            bogusColorMessage = 'public.markColor is not properly formatted.',
            key, val;
        if(plistLib.getType(value) !== 'dict')
            return [false, bogusFormatMessage];
            
        // the keys of value are always string in javascript, no need to check
            
        if(
            value['public.markColor'] !== undefined
            && !colorValidator(value['public.markColor'])
        )
            return [false, bogusColorMessage];
        return [true, undefined];
    }
    module.glyphLibValidator = glyphLibValidator;
    
    //export the validators
    return module;
});

define('ufojs/ufoLib/_UFOBase',[
    'ufojs/errors'
  , 'Atem-IO/errors'
  , 'obtain/obtain'
  , 'ufojs/plistLib/main'
  , './constants'
  , './validators'
], function(
    errors
  , ioErrors
  , obtain
  , plistLib
  , constants
  , validators
) {
    "use strict";


    var UFOLibError = errors.UFOLib
      , IONoEntryError = ioErrors.IONoEntry
      , LAYERCONTENTS_FILENAME = constants.LAYERCONTENTS_FILENAME
      , layerContentsValidator = validators.layerContentsValidator
      ;

    /**
     * code sharing for UFOReader and UFOWriter
     */
    function _UFOBase(io, path) {
        //jshint validthis:true
        this._io = io;
        this._path = path;

    }
    var _p = _UFOBase.prototype;

    /**
     * Read a property list relative to the path argument of
     * UFOReader/UFOWriter. If the file is missing and default is None a
     * UFOLibError will be raised otherwise default is returned. The errors
     * that could be raised during the reading of a plist are unpredictable
     * and/or too large to list, so, a blind try: except: is done. If an
     * exception occurs, a UFOLibError will be raised.
     */
    _p._getPlist = obtain.factory(
        {
            path: ['fileName', function(fileName){
                    return [this._path, fileName].join('/');
                }]
          , data: ['path', 'default', function(path, defaultVal) {
                try {
                    return this._io.readFile(false, path);
                }
                catch(e) {
                    if(e instanceof IONoEntryError) {
                        if(defaultVal)
                            return false;
                        throw new UFOLibError('The file "' + path + '" is missing. '
                                                    + 'This file is required.');
                    }
                    throw new UFOLibError('The file "' + path + '" '
                                    + 'could not be read. ' + e, e.stack);
                }
            }]
          , plist: ['data', 'path', 'default', function(data, path, defaultVal) {
                if(data === false)
                    return defaultVal;
                try {
                    return plistLib.readPlistFromString(data);
                }
                catch(e) {
                    throw new UFOLibError('The file "' + path + '" '
                                    + 'could not be read. ' + e, e.stack);
                }

            }]
        }
      , {
            data: ['path', 'default', function(path, defaultVal) {
                function onError(e) {
                    if(e instanceof IONoEntryError) {
                        if(defaultVal)
                            return false;
                        throw new UFOLibError('The file "' + path + '" is missing. '
                                                    + 'This file is required.');
                    }
                    throw new UFOLibError('The file "' + path + '" '
                                    + 'could not be read. ' + e, e.stack);
                }
                return this._io.readFile(true, path)
                           .then(null, onError);
            }]
        }
      , ['fileName', 'default']
      , function(obtain) { return obtain('plist');}
    );

    _p._readRawLayerContents = obtain.factory(
        {
            contents: [false, new obtain.Argument(LAYERCONTENTS_FILENAME), _p._getPlist]
          , validation: ['contents', function(contents) {
                return layerContentsValidator(false, this._io, contents, this._path);
            }]
          , data: ['validation', 'contents', function(result, contents) {
                if(!result[0])
                    throw new UFOLibError(result[1]);
                return contents;
            }]
        }
      , {
            contents: [true, new obtain.Argument(LAYERCONTENTS_FILENAME), _p._getPlist]
          , validation: ['contents', function(contents) {
                return layerContentsValidator(true, this._io, contents, this._path);
            }]
        }
      , []
      , function(obtain) {
            return obtain('data');
        }
    );

    return _UFOBase;
});

/**
 * Ported from github.com/unified-font-object/ufoLib
 * Lib/ufoLib/converters.py at 337ef3202b49a9a4848aab1f93248823c2757d61
 */
define('ufojs/ufoLib/converters',[
    'ufojs/errors'
  , 'ufojs/main'
  , './validators'
], function(
    errors
  , main
  , validators
) {
    "use strict";

    var UFOLibError = errors.UFOLib
      , setLike = main.setLike
      , genericTypeValidator = validators.genericTypeValidator
      , fontInfoStyleMapStyleNameValidator = validators.fontInfoStyleMapStyleNameValidator
      , fontInfoOpenTypeHeadCreatedValidator = validators.fontInfoOpenTypeHeadCreatedValidator
      , genericIntListValidator = validators.genericIntListValidator
      , fontInfoOpenTypeOS2WidthClassValidator = validators.fontInfoOpenTypeOS2WidthClassValidator
      , fontInfoOpenTypeOS2WeightClassValidator = validators.fontInfoOpenTypeOS2WeightClassValidator
      , fontInfoVersion2OpenTypeOS2PanoseValidator = validators.fontInfoVersion2OpenTypeOS2PanoseValidator
      , fontInfoOpenTypeOS2FamilyClassValidator = validators.fontInfoOpenTypeOS2FamilyClassValidator
      , fontInfoPostscriptBluesValidator = validators.fontInfoPostscriptBluesValidator
      , fontInfoPostscriptOtherBluesValidator = validators.fontInfoPostscriptOtherBluesValidator
      , fontInfoPostscriptStemsValidator = validators.fontInfoPostscriptStemsValidator
      , fontInfoPostscriptWindowsCharacterSetValidator = validators.fontInfoPostscriptWindowsCharacterSetValidator
      , genericNonNegativeIntValidator = validators.genericNonNegativeIntValidator
      , genericNonNegativeNumberValidator = validators.genericNonNegativeNumberValidator
      , fontInfoVersion3OpenTypeOS2PanoseValidator = validators.fontInfoVersion3OpenTypeOS2PanoseValidator
      , fontInfoOpenTypeGaspRangeRecordsValidator = validators.fontInfoOpenTypeGaspRangeRecordsValidator
      , fontInfoOpenTypeNameRecordsValidator = validators.fontInfoOpenTypeNameRecordsValidator
      , fontInfoWOFFMetadataUniqueIDValidator = validators.fontInfoWOFFMetadataUniqueIDValidator
      , fontInfoWOFFMetadataVendorValidator = validators.fontInfoWOFFMetadataVendorValidator
      , fontInfoWOFFMetadataCreditsValidator = validators.fontInfoWOFFMetadataCreditsValidator
      , fontInfoWOFFMetadataDescriptionValidator = validators.fontInfoWOFFMetadataDescriptionValidator
      , fontInfoWOFFMetadataLicenseValidator = validators.fontInfoWOFFMetadataLicenseValidator
      , fontInfoWOFFMetadataCopyrightValidator = validators.fontInfoWOFFMetadataCopyrightValidator
      , fontInfoWOFFMetadataTrademarkValidator = validators.fontInfoWOFFMetadataTrademarkValidator
      , fontInfoWOFFMetadataLicenseeValidator = validators.fontInfoWOFFMetadataLicenseeValidator
      , fontInfoWOFFMetadataExtensionsValidator = validators.fontInfoWOFFMetadataExtensionsValidator
      , guidelinesValidator = validators.guidelinesValidator
      ;
    /**
     * This will find kerning groups with known prefixes.
     * In some cases not all kerning groups will be referenced
     * by the kerning pairs. The algorithm for locating groups
     * in convertUFO1OrUFO2KerningToUFO3Kerning will miss these
     * unreferenced groups. By scanning for known prefixes
     * this function will catch all of the prefixed groups.
     *
     * These are the prefixes and sides that are handled:
     * @MMK_L_ - side 1
     * @MMK_R_ - side 2
     *
     * >>> testGroups = {
     * ...     "@MMK_L_1" : None,
     * ...     "@MMK_L_2" : None,
     * ...     "@MMK_L_3" : None,
     * ...     "@MMK_R_1" : None,
     * ...     "@MMK_R_2" : None,
     * ...     "@MMK_R_3" : None,
     * ...     "@MMK_l_1" : None,
     * ...     "@MMK_r_1" : None,
     * ...     "@MMK_X_1" : None,
     * ...     "foo" : None,
     * ... }
     * >>> first, second = findKnownKerningGroups(testGroups)
     * >>> sorted(first)
     * ['@MMK_L_1', '@MMK_L_2', '@MMK_L_3']
     * >>> sorted(second)
     * ['@MMK_R_1', '@MMK_R_2', '@MMK_R_3']
     */
    function findKnownKerningGroups(groups) {
        var prefixes = {
                first: ['@MMK_L_']
              , second: ['@MMK_R_']
            }
          , result = {first: new Set(), second: new Set()}
          , groupName, side, groupPrefixes, i, l, prefix
          ;

        groupsLoop:
        for(groupName in groups) {
            for(side in prefixes) {
                groupPrefixes = prefixes[side];
                for(i=0,l=groupPrefixes.length;i<l;i++) {
                    prefix = groupPrefixes[i];
                    if(groupName.indexOf(prefix) === 0) {
                        result[side].add(groupName);
                        continue groupsLoop;
                    }
                }
            }
        }
        return [result.first, result.second];
    }

    function makeUniqueGroupName(existingNames, name) {
        // Add a number to the name
        var newName = name
          , counter = 0
          ;

        while(existingNames.has(newName)) {
            counter += 1;
            newName = newName + counter;
        }
        return newName;
    }

    function _renameGroups(existingNames, prefix, name) {
        //jshint validthis:true
        var newName = makeUniqueGroupName(existingNames, prefix + name);
        existingNames.add(newName);
        this[name] = newName;
    }

    //adapted from the UFO spec
    function convertUFO1OrUFO2KerningToUFO3Kerning(kerning, groups) {
        // gather known kerning groups based on the prefixes
        var referencedGroups = findKnownKerningGroups(groups)
          , firstReferencedGroups = referencedGroups[0]
          , secondReferencedGroups = referencedGroups[1]
          , first, seconds, second
          , firstRenamedGroups = Object.create(null)
          , secondRenamedGroups = Object.create(null)
          , existingNames
          , newKerning = Object.create(null)
          , newSeconds, value, oldName
          , newGroups, k
          ;
        // Make lists of groups referenced in kerning pairs.
        for(first in kerning) {
            seconds = kerning[first];
            if(first in groups && first.indexOf('public.kern1.') !== 0)
                firstReferencedGroups.add(first);

            for(second in seconds)
                if(second in groups && second.indexOf('public.kern2.') !== 0)
                    secondReferencedGroups.add(second);
        }

        // Create new names for these groups.
        existingNames = new Set(Object.keys(groups));
        firstReferencedGroups.forEach(_renameGroups.bind(
                        firstRenamedGroups, existingNames, 'public.kern1.'));
        existingNames = new Set(Object.keys(groups));
        secondReferencedGroups.forEach(_renameGroups.bind(
                        secondRenamedGroups, existingNames, 'public.kern2.'));


        // Populate the new group names into the kerning dictionary as needed.
        for(first in kerning) {
            seconds = kerning[first];
            first = firstRenamedGroups[first] || first;
            newSeconds = Object.create(null);
            for(second in seconds) {
                value = seconds[second];
                second = secondRenamedGroups[second] || second;
                newSeconds[second] = value;
            }
            newKerning[first] = newSeconds;
        }

        // Make copies of the referenced groups and store them
        // under the new names in the overall groups dictionary.
        newGroups = Object.create(null);
        for(k in groups)
            newGroups[k] = Array.prototype.slice.call(groups[k]);

        for(oldName in firstRenamedGroups)
            newGroups[firstRenamedGroups[oldName]] = Array.prototype.slice.call(groups[oldName]);
        for(oldName in secondRenamedGroups)
            newGroups[secondRenamedGroups[oldName]] = Array.prototype.slice.call(groups[oldName]);

        // Return the kerning and the groups.
        return [newKerning, newGroups, {side1:firstRenamedGroups, side2:secondRenamedGroups}];
    }

    // ------------------------------------
    // fontinfo.plist Conversion Functions
    // ------------------------------------

    // Version Validators

    // There is no version 1 validator and there shouldn't be.
    // The version 1 spec was very loose and there were numerous
    // cases of invalid values.


    function _validateFontInfoAttribue(valueData, attr, value){
        var setup = valueData[attr]
          , valueType = setup.type
          , validator = setup.valueValidator || genericTypeValidator
          , valueOptions = setup.valueOptions
          ;
        // have specific options for the validator
        if(valueOptions)
            return validator(value, valueOptions);
        // no specific options
        if(validator === genericTypeValidator)
            return validator(value, valueType);
        return validator(value);
    }

    function _validateInfoData(validateFontInfoAttribue, infoData) {
        var validInfoData = Object.create(null)
          , attr, value
          ;
        for(attr in infoData) {
            value = infoData[attr];
            if(!validateFontInfoAttribue(attr, value))
                throw new UFOLibError('Invalid value for attribute "'
                                        + attr + '" (' + value + ')');
            else
                validInfoData[attr] = value;
        }
        return validInfoData;
    }

    // Value Options

    function _intList(i, l){
        var result = [];
        for(;i<l;i++) result.push(i);
        return result;
    }

    function _flipDict(d, keysAsInt) {
        var flipped = Object.create(null), k;
        for(k in d)
            flipped[d[k]] = keysAsInt ? parseInt(k, 10) : k;
        return flipped;
    }

    var fontInfoOpenTypeHeadFlagsOptions = _intList(0, 15)
      , fontInfoOpenTypeOS2SelectionOptions = _intList(1, 10)
      , fontInfoOpenTypeOS2UnicodeRangesOptions = _intList(0, 128)
      , fontInfoOpenTypeOS2CodePageRangesOptions = _intList(0, 64)
      , fontInfoOpenTypeOS2TypeOptions = _intList(0, 10)
        // Version Attribute Definitions
        // This defines the attributes, types and, in some
        // cases the possible values, that can exist is
        // fontinfo.plist.
      , fontInfoAttributesVersion1 = setLike([
            'familyName',
            'styleName',
            'fullName',
            'fontName',
            'menuName',
            'fontStyle',
            'note',
            'versionMajor',
            'versionMinor',
            'year',
            'copyright',
            'notice',
            'trademark',
            'license',
            'licenseURL',
            'createdBy',
            'designer',
            'designerURL',
            'vendorURL',
            'unitsPerEm',
            'ascender',
            'descender',
            'capHeight',
            'xHeight',
            'defaultWidth',
            'slantAngle',
            'italicAngle',
            'widthName',
            'weightName',
            'weightValue',
            'fondName',
            'otFamilyName',
            'otStyleName',
            'otMacName',
            'msCharSet',
            'fondID',
            'uniqueID',
            'ttVendor',
            'ttUniqueID',
            'ttVersion',
        ])
      , fontInfoAttributesVersion2ValueData = {
            'familyName': {type: 'string'},
            'styleName': {type: 'string'},
            'styleMapFamilyName': {type: 'string'},
            'styleMapStyleName': {type: 'string', valueValidator:fontInfoStyleMapStyleNameValidator},
            'versionMajor': {type: 'int'},
            'versionMinor': {type: 'int'},
            'year': {type: 'int'},
            'copyright': {type: 'string'},
            'trademark': {type: 'string'},
            'unitsPerEm': {type: ['int', 'float']},
            'descender': {type: ['int', 'float']},
            'xHeight': {type: ['int', 'float']},
            'capHeight': {type: ['int', 'float']},
            'ascender': {type: ['int', 'float']},
            'italicAngle': {type: ['float', 'int']},
            'note': {type: 'string'},
            'openTypeHeadCreated': {type: 'string', valueValidator:fontInfoOpenTypeHeadCreatedValidator},
            'openTypeHeadLowestRecPPEM': {type: ['int', 'float']},
            'openTypeHeadFlags': {type: 'integerList', valueValidator:genericIntListValidator, valueOptions:fontInfoOpenTypeHeadFlagsOptions},
            'openTypeHheaAscender': {type: ['int', 'float']},
            'openTypeHheaDescender': {type: ['int', 'float']},
            'openTypeHheaLineGap': {type: ['int', 'float']},
            'openTypeHheaCaretSlopeRise': {type: 'int'},
            'openTypeHheaCaretSlopeRun': {type: 'int'},
            'openTypeHheaCaretOffset': {type: ['int', 'float']},
            'openTypeNameDesigner': {type: 'string'},
            'openTypeNameDesignerURL': {type: 'string'},
            'openTypeNameManufacturer': {type: 'string'},
            'openTypeNameManufacturerURL': {type: 'string'},
            'openTypeNameLicense': {type: 'string'},
            'openTypeNameLicenseURL': {type: 'string'},
            'openTypeNameVersion': {type: 'string'},
            'openTypeNameUniqueID': {type: 'string'},
            'openTypeNameDescription': {type: 'string'},
            'openTypeNamePreferredFamilyName': {type: 'string'},
            'openTypeNamePreferredSubfamilyName': {type: 'string'},
            'openTypeNameCompatibleFullName': {type: 'string'},
            'openTypeNameSampleText': {type: 'string'},
            'openTypeNameWWSFamilyName': {type: 'string'},
            'openTypeNameWWSSubfamilyName': {type: 'string'},
            'openTypeOS2WidthClass': {type: 'int', valueValidator:fontInfoOpenTypeOS2WidthClassValidator},
            'openTypeOS2WeightClass': {type: 'int', valueValidator:fontInfoOpenTypeOS2WeightClassValidator},
            'openTypeOS2Selection': {type: 'integerList', valueValidator:genericIntListValidator, valueOptions:fontInfoOpenTypeOS2SelectionOptions},
            'openTypeOS2VendorID': {type: 'string'},
            'openTypeOS2Panose': {type: 'integerList', valueValidator:fontInfoVersion2OpenTypeOS2PanoseValidator},
            'openTypeOS2FamilyClass': {type: 'integerList', valueValidator:fontInfoOpenTypeOS2FamilyClassValidator},
            'openTypeOS2UnicodeRanges': {type: 'integerList', valueValidator:genericIntListValidator, valueOptions:fontInfoOpenTypeOS2UnicodeRangesOptions},
            'openTypeOS2CodePageRanges': {type: 'integerList', valueValidator:genericIntListValidator, valueOptions:fontInfoOpenTypeOS2CodePageRangesOptions},
            'openTypeOS2TypoAscender': {type: ['int', 'float']},
            'openTypeOS2TypoDescender': {type: ['int', 'float']},
            'openTypeOS2TypoLineGap': {type: ['int', 'float']},
            'openTypeOS2WinAscent': {type: ['int', 'float']},
            'openTypeOS2WinDescent': {type: ['int', 'float']},
            'openTypeOS2Type': {type: 'integerList', valueValidator:genericIntListValidator, valueOptions:fontInfoOpenTypeOS2TypeOptions},
            'openTypeOS2SubscriptXSize': {type: ['int', 'float']},
            'openTypeOS2SubscriptYSize': {type: ['int', 'float']},
            'openTypeOS2SubscriptXOffset': {type: ['int', 'float']},
            'openTypeOS2SubscriptYOffset': {type: ['int', 'float']},
            'openTypeOS2SuperscriptXSize': {type: ['int', 'float']},
            'openTypeOS2SuperscriptYSize': {type: ['int', 'float']},
            'openTypeOS2SuperscriptXOffset': {type: ['int', 'float']},
            'openTypeOS2SuperscriptYOffset': {type: ['int', 'float']},
            'openTypeOS2StrikeoutSize': {type: ['int', 'float']},
            'openTypeOS2StrikeoutPosition': {type: ['int', 'float']},
            'openTypeVheaVertTypoAscender': {type: ['int', 'float']},
            'openTypeVheaVertTypoDescender': {type: ['int', 'float']},
            'openTypeVheaVertTypoLineGap': {type: ['int', 'float']},
            'openTypeVheaCaretSlopeRise': {type: 'int'},
            'openTypeVheaCaretSlopeRun': {type: 'int'},
            'openTypeVheaCaretOffset': {type: ['int', 'float']},
            'postscriptFontName': {type: 'string'},
            'postscriptFullName': {type: 'string'},
            'postscriptSlantAngle': {type: ['float', 'int']},
            'postscriptUniqueID': {type: 'int'},
            'postscriptUnderlineThickness': {type: ['int', 'float']},
            'postscriptUnderlinePosition': {type: ['int', 'float']},
            'postscriptIsFixedPitch': {type: 'boolean'},
            'postscriptBlueValues': {type: 'integerList', valueValidator:fontInfoPostscriptBluesValidator},
            'postscriptOtherBlues': {type: 'integerList', valueValidator:fontInfoPostscriptOtherBluesValidator},
            'postscriptFamilyBlues': {type: 'integerList', valueValidator:fontInfoPostscriptBluesValidator},
            'postscriptFamilyOtherBlues': {type: 'integerList', valueValidator:fontInfoPostscriptOtherBluesValidator},
            'postscriptStemSnapH': {type: 'integerList', valueValidator:fontInfoPostscriptStemsValidator},
            'postscriptStemSnapV': {type: 'integerList', valueValidator:fontInfoPostscriptStemsValidator},
            'postscriptBlueFuzz': {type: ['int', 'float']},
            'postscriptBlueShift': {type: ['int', 'float']},
            'postscriptBlueScale': {type: ['float', 'int']},
            'postscriptForceBold': {type: 'boolean'},
            'postscriptDefaultWidthX': {type: ['int', 'float']},
            'postscriptNominalWidthX': {type: ['int', 'float']},
            'postscriptWeightName': {type: 'string'},
            'postscriptDefaultCharacter': {type: 'string'},
            'postscriptWindowsCharacterSet': {type: 'int', valueValidator:fontInfoPostscriptWindowsCharacterSetValidator},
            'macintoshFONDFamilyID': {type: 'int'},
            'macintoshFONDName': {type: 'string'},
        }
      , fontInfoAttributesVersion2 = setLike(Object.keys(fontInfoAttributesVersion2ValueData))
      , fontInfoAttributesVersion3ValueData = (function(/*arguments*/) {
            var result = Object.create(null), source, k, i, l;
            for(i=0,l=arguments.length;i<l;i++) {
                source=arguments[i];
                for(k in source)
                    // don't do that deepcopy like thing that the python ufoLib does here
                    result[k] = source[k];
            }
            return result;
        })(fontInfoAttributesVersion2ValueData, {
            'versionMinor': {type: 'int', valueValidator: genericNonNegativeIntValidator},
            'unitsPerEm': {type: ['int', 'float'], valueValidator: genericNonNegativeNumberValidator},
            'openTypeHeadLowestRecPPEM': {type: 'int', valueValidator: genericNonNegativeNumberValidator},
            'openTypeHheaAscender': {type: 'int'},
            'openTypeHheaDescender': {type: 'int'},
            'openTypeHheaLineGap': {type: 'int'},
            'openTypeHheaCaretOffset': {type: 'int'},
            'openTypeOS2Panose': {type: 'integerList', valueValidator: fontInfoVersion3OpenTypeOS2PanoseValidator},
            'openTypeOS2TypoAscender': {type: 'int'},
            'openTypeOS2TypoDescender': {type: 'int'},
            'openTypeOS2TypoLineGap': {type: 'int'},
            'openTypeOS2WinAscent': {type: 'int', valueValidator: genericNonNegativeNumberValidator},
            'openTypeOS2WinDescent': {type: 'int', valueValidator: genericNonNegativeNumberValidator},
            'openTypeOS2SubscriptXSize': {type: 'int'},
            'openTypeOS2SubscriptYSize': {type: 'int'},
            'openTypeOS2SubscriptXOffset': {type: 'int'},
            'openTypeOS2SubscriptYOffset': {type: 'int'},
            'openTypeOS2SuperscriptXSize': {type: 'int'},
            'openTypeOS2SuperscriptYSize': {type: 'int'},
            'openTypeOS2SuperscriptXOffset': {type: 'int'},
            'openTypeOS2SuperscriptYOffset': {type: 'int'},
            'openTypeOS2StrikeoutSize': {type: 'int'},
            'openTypeOS2StrikeoutPosition': {type: 'int'},
            'openTypeGaspRangeRecords': {type: 'dictList', valueValidator: fontInfoOpenTypeGaspRangeRecordsValidator},
            'openTypeNameRecords': {type: 'dictList', valueValidator: fontInfoOpenTypeNameRecordsValidator},
            'openTypeVheaVertTypoAscender': {type: 'int'},
            'openTypeVheaVertTypoDescender': {type: 'int'},
            'openTypeVheaVertTypoLineGap': {type: 'int'},
            'openTypeVheaCaretOffset': {type: 'int'},
            'woffMajorVersion': {type: 'int', valueValidator: genericNonNegativeIntValidator},
            'woffMinorVersion': {type: 'int', valueValidator: genericNonNegativeIntValidator},
            'woffMetadataUniqueID': {type: 'object', valueValidator: fontInfoWOFFMetadataUniqueIDValidator},
            'woffMetadataVendor': {type: 'object', valueValidator: fontInfoWOFFMetadataVendorValidator},
            'woffMetadataCredits': {type: 'object', valueValidator: fontInfoWOFFMetadataCreditsValidator},
            'woffMetadataDescription': {type: 'object', valueValidator: fontInfoWOFFMetadataDescriptionValidator},
            'woffMetadataLicense': {type: 'object', valueValidator: fontInfoWOFFMetadataLicenseValidator},
            'woffMetadataCopyright': {type: 'object', valueValidator: fontInfoWOFFMetadataCopyrightValidator},
            'woffMetadataTrademark': {type: 'object', valueValidator: fontInfoWOFFMetadataTrademarkValidator},
            'woffMetadataLicensee': {type: 'object', valueValidator: fontInfoWOFFMetadataLicenseeValidator},
            'woffMetadataExtensions': {type: Array, valueValidator: fontInfoWOFFMetadataExtensionsValidator},
            'guidelines': {type: Array, valueValidator: guidelinesValidator}
        })
      , fontInfoAttributesVersion3 = setLike(Object.keys(fontInfoAttributesVersion3ValueData))


        // Version Conversion Support
        // These are used from converting from version 1
        // to version 2 or vice-versa.
      , fontInfoAttributesVersion1To2 = {
            'menuName': 'styleMapFamilyName',
            'designer': 'openTypeNameDesigner',
            'designerURL': 'openTypeNameDesignerURL',
            'createdBy': 'openTypeNameManufacturer',
            'vendorURL': 'openTypeNameManufacturerURL',
            'license': 'openTypeNameLicense',
            'licenseURL': 'openTypeNameLicenseURL',
            'ttVersion': 'openTypeNameVersion',
            'ttUniqueID': 'openTypeNameUniqueID',
            'notice': 'openTypeNameDescription',
            'otFamilyName': 'openTypeNamePreferredFamilyName',
            'otStyleName': 'openTypeNamePreferredSubfamilyName',
            'otMacName': 'openTypeNameCompatibleFullName',
            'weightName': 'postscriptWeightName',
            'weightValue': 'openTypeOS2WeightClass',
            'ttVendor': 'openTypeOS2VendorID',
            'uniqueID': 'postscriptUniqueID',
            'fontName': 'postscriptFontName',
            'fondID': 'macintoshFONDFamilyID',
            'fondName': 'macintoshFONDName',
            'defaultWidth': 'postscriptDefaultWidthX',
            'slantAngle': 'postscriptSlantAngle',
            'fullName': 'postscriptFullName',
            // require special value conversion
            'fontStyle': 'styleMapStyleName',
            'widthName': 'openTypeOS2WidthClass',
            'msCharSet': 'postscriptWindowsCharacterSet'
        }
      , fontInfoAttributesVersion2To1 = _flipDict(fontInfoAttributesVersion1To2)
      , deprecatedFontInfoAttributesVersion2 = setLike(Object.keys(fontInfoAttributesVersion1To2))
      , _fontStyle2To1 = {
            'regular': 64,
            'italic': 1,
            'bold': 32,
            'bold italic': 33
        }
      , _fontStyle1To2 = (
            // this is a bit hackish. It let's me stay in the current
            // var declaration for the moment.
            _fontStyle1To2 = _flipDict(_fontStyle2To1) ,
            // Some UFO 1 files have 0
            _fontStyle1To2[0] = "regular",
            _fontStyle1To2
        )
      , _msCharSet1To2 = {
            0   : 1,
            1   : 2,
            2   : 3,
            77  : 4,
            128 : 5,
            129 : 6,
            130 : 7,
            134 : 8,
            136 : 9,
            161 : 10,
            162 : 11,
            163 : 12,
            177 : 13,
            178 : 14,
            186 : 15,
            200 : 16,
            204 : 17,
            222 : 18,
            238 : 19,
            255 : 20
        }
      , _msCharSet2To1 = _flipDict(_msCharSet1To2, true)
      , _widthName1To2 = {
            'Ultra-condensed' : 1,
            'Extra-condensed' : 2,
            'Condensed'		  : 3,
            'Semi-condensed'  : 4,
            'Medium (normal)' : 5,
            'Semi-expanded'	  : 6,
            'Expanded'		  : 7,
            'Extra-expanded'  : 8,
            'Ultra-expanded'  : 9
        }
      , _widthName2To1 = _flipDict(_widthName1To2)
      ;
    // FontLab's default width value is "Normal".
    // Many format version 1 UFOs will have this.
    _widthName1To2.Normal = 5;
    // FontLab has an "All" width value. In UFO 1
    // move this up to "Normal".
    _widthName1To2.All = 5;
    // "medium" appears in a lot of UFO 1 files.
    _widthName1To2.medium = 5;
    // "Medium" appears in a lot of UFO 1 files.
    _widthName1To2.Medium = 5;

    // 1 <-> 2
    /**
     * Convert value from version 1 to version 2 format.
     * Returns the new attribute name and the converted value.
     * If the value is None, None will be returned for the new value.
     */
    function convertFontInfoValueForAttributeFromVersion1ToVersion2(attr, value) {
        var a, v = value
          , conversion = ({
                    fontStyle: _fontStyle1To2
                  , widthName: _widthName1To2
                  , msCharSet: _msCharSet1To2
                })[value]
          ;
        if(conversion !== undefined) {
            v = conversion[value];
            if(v === undefined)
                throw new UFOLibError('Cannot convert value ('
                                +value+') for attribute ' + attr +'.');
        }
        a = fontInfoAttributesVersion1To2[attr] || attr;
        return [a, v];
    }

    /**
     * Convert value from version 2 to version 1 format.
     * Returns the new attribute name and the converted value.
     * If the value is None, None will be returned for the new value.
     */
    function convertFontInfoValueForAttributeFromVersion2ToVersion1(attr, value) {
        var a, v = value;
        if(value !== undefined)
            if (attr === 'styleMapStyleName')
                v = _fontStyle2To1[value];
            else if (attr === 'openTypeOS2WidthClass')
                v = _widthName2To1[value];
            else if (attr === 'postscriptWindowsCharacterSet')
                v = _msCharSet2To1[value];
        a = fontInfoAttributesVersion2To1[attr] || attr;
        return [a, v];
    }

    function convertFontInfoDataVersion1ToVersion2(data) {
        var converted = Object.create(null)
          , attr, value, newAttrValue, newAttr
          ;
        for(attr in data) {
            value = data[attr];
            // FontLab gives -1 for the weightValue
            // for fonts with no defined value. Many
            // format version 1 UFOs will have this.
            if(attr === 'weightValue' && value === -1)
                continue;
            newAttrValue = convertFontInfoValueForAttributeFromVersion1ToVersion2(attr, value);
            newAttr = newAttrValue[0];
            // skip if the attribute is not part of version 2
            if (!(newAttr in fontInfoAttributesVersion2))
                continue;
            // catch values that can't be converted
            if(value === undefined)
                throw new UFOLibError('Cannot convert value ('
                        + value + ') for attribute ' + newAttr + '.');
            // store
            converted[newAttr] = newAttrValue[1];
        }
        return converted;
    }

    function convertFontInfoDataVersion2ToVersion1(data) {
        var converted = Object.create(null)
          , attr, value, newAttrValue, newAttr
          ;
        for(attr in data) {
            value = data[attr];
            newAttrValue = convertFontInfoValueForAttributeFromVersion2ToVersion1(attr, value);
            newAttr = newAttrValue[0];
            // only take attributes that are registered for version 1
            if(!(newAttr in fontInfoAttributesVersion1))
                continue;
            // catch values that can't be converted
            if(value === undefined)
                                throw new UFOLibError('Cannot convert value ('
                        + value + ') for attribute ' + newAttr + '.');
            // store
            converted[newAttr] = newAttrValue[1];
        }
        return converted;
    }

    // 2 <-> 3
    var _ufo2To3NonNegativeInt = setLike([
            'versionMinor',
            'openTypeHeadLowestRecPPEM',
            'openTypeOS2WinAscent',
            'openTypeOS2WinDescent'
        ])
      , _ufo2To3NonNegativeIntOrFloat = setLike([
            'unitsPerEm'
        ])
      , _ufo2To3FloatToInt = setLike([
            'openTypeHeadLowestRecPPEM',
            'openTypeHheaAscender',
            'openTypeHheaDescender',
            'openTypeHheaLineGap',
            'openTypeHheaCaretOffset',
            'openTypeOS2TypoAscender',
            'openTypeOS2TypoDescender',
            'openTypeOS2TypoLineGap',
            'openTypeOS2WinAscent',
            'openTypeOS2WinDescent',
            'openTypeOS2SubscriptXSize',
            'openTypeOS2SubscriptYSize',
            'openTypeOS2SubscriptXOffset',
            'openTypeOS2SubscriptYOffset',
            'openTypeOS2SuperscriptXSize',
            'openTypeOS2SuperscriptYSize',
            'openTypeOS2SuperscriptXOffset',
            'openTypeOS2SuperscriptYOffset',
            'openTypeOS2StrikeoutSize',
            'openTypeOS2StrikeoutPosition',
            'openTypeVheaVertTypoAscender',
            'openTypeVheaVertTypoDescender',
            'openTypeVheaVertTypoLineGap',
            'openTypeVheaCaretOffset'
        ])
      ;

    /**
     * This performs very basic validation of the value for attribute
     * following the UFO 2 fontinfo.plist specification. The results
     * of this should not be interpretted as *correct* for the font
     * that they are part of. This merely indicates that the value
     * is of the proper type and, where the specification defines
     * a set range of possible values for an attribute, that the
     * value is in the accepted range.
     */
    var validateFontInfoVersion2ValueForAttribute = _validateFontInfoAttribue.bind(
                                null, fontInfoAttributesVersion2ValueData);
    /**
     * This performs very basic validation of the value for infoData
     * following the UFO 2 fontinfo.plist specification. The results
     * of this should not be interpretted as *correct* for the font
     * that they are part of. This merely indicates that the values
     * are of the proper type and, where the specification defines
     * a set range of possible values for an attribute, that the
     * value is in the accepted range.
     */
    var validateInfoVersion2Data = _validateInfoData.bind(
                            null, validateFontInfoVersion2ValueForAttribute);

    /**
     * This performs very basic validation of the value for attribute
     * following the UFO 3 fontinfo.plist specification. The results
     * of this should not be interpretted as *correct* for the font
     * that they are part of. This merely indicates that the value
     * is of the proper type and, where the specification defines
     * a set range of possible values for an attribute, that the
     * value is in the accepted range.
     */
    var validateFontInfoVersion3ValueForAttribute = _validateFontInfoAttribue.bind(
                                null, fontInfoAttributesVersion3ValueData);

    /**
     * This performs very basic validation of the value for infoData
     * following the UFO 3 fontinfo.plist specification. The results
     * of this should not be interpretted as *correct* for the font
     * that they are part of. This merely indicates that the values
     * are of the proper type and, where the specification defines
     * a set range of possible values for an attribute, that the
     * value is in the accepted range.
     */
    var validateInfoVersion3Data = _validateInfoData.bind(
                            null, validateFontInfoVersion3ValueForAttribute);

    /**
     * Convert value from version 2 to version 3 format.
     * Returns the new attribute name and the converted value.
     * If the value is None, None will be returned for the new value.
     */
    function convertFontInfoValueForAttributeFromVersion2ToVersion3(attr, value) {
        var v = value;
        if(attr in _ufo2To3FloatToInt)
            v = Math.round(value);
        if(attr in _ufo2To3NonNegativeInt)
            v = Math.round(Math.abs(value));
        else if(attr in _ufo2To3NonNegativeIntOrFloat)
            v = Math.abs(value);
        return [attr, v];
    }


    /**
     * Convert value from version 3 to version 2 format.
     * Returns the new attribute name and the converted value.
     * If the value is None, None will be returned for the new value.
     */
    function convertFontInfoValueForAttributeFromVersion3ToVersion2(attr, value) {
        return [attr, value];
    }

    function convertFontInfoDataVersion3ToVersion2(data) {
        var converted = Object.create(null)
          , attr, value, newAttrValue, newAttr;
        for(attr in data) {
            value = data[attr];
            newAttrValue = convertFontInfoValueForAttributeFromVersion3ToVersion2(attr, value);
            newAttr = newAttrValue[0];
            if(!(newAttr in fontInfoAttributesVersion2))
                continue;
            converted[newAttr] = newAttrValue[1];
        }
        return converted;
    }

    function convertFontInfoDataVersion2ToVersion3(data) {
        var converted = Object.create(null)
          , attr, value, newAttrValue;
        for(attr in data) {
            value = data[attr];
            newAttrValue = convertFontInfoValueForAttributeFromVersion2ToVersion3(attr, value);
            converted[newAttrValue[0]] = newAttrValue[1];
        }
        return converted;
    }

    return {
        findKnownKerningGroups: findKnownKerningGroups
      , makeUniqueGroupName: makeUniqueGroupName
      , convertUFO1OrUFO2KerningToUFO3Kerning: convertUFO1OrUFO2KerningToUFO3Kerning
      , validateInfoVersion2Data: validateInfoVersion2Data
      , validateInfoVersion3Data: validateInfoVersion3Data
      , convertFontInfoDataVersion1ToVersion2: convertFontInfoDataVersion1ToVersion2
      , convertFontInfoDataVersion2ToVersion1: convertFontInfoDataVersion2ToVersion1
      , convertFontInfoDataVersion3ToVersion2: convertFontInfoDataVersion3ToVersion2
      , convertFontInfoDataVersion2ToVersion3: convertFontInfoDataVersion2ToVersion3
      , fontInfoAttributesVersion1: fontInfoAttributesVersion1
      , fontInfoAttributesVersion2: fontInfoAttributesVersion2
      , fontInfoAttributesVersion3: fontInfoAttributesVersion3
      , deprecatedFontInfoAttributesVersion2: deprecatedFontInfoAttributesVersion2
    };
});

define('Atem-IO/tools/readDirRecursive',[
    'Atem-IO/errors'
  , 'obtain/obtain'
], function(
    errors
  , obtain
) {
    "use strict";

    var IOMaxRecursionError = errors.IOMaxRecursion;
    /**
     * when name ends with a slash it is a directory name
     */
    function _isDirName(name) {
        return name.slice(-1) === '/';
    }

    /**
     * Read an entire directory tree into a flat list of filenames.
     *
     * use this with caution:
     * It may run long and need a lot of memory for large/deep directories.
     * Also, the result may not be correct anymore when it's done.
     * This is why we don't use it as a standard io function.
     * A better approach for large trees may be an iterator based
     * implementation.
     */
    var _readDirRecursive = obtain.factory(
        {
            names: ['io', 'path', function(io, path) {
                return io.readDir(false, path);
            }]
          , readDir: ['io', 'names', 'path', 'depth', 'maxDepth',
            function(io, names, path, depth, maxDepth) {
                var i
                  , name
                  , fullPath
                  , children
                  , result = []
                  ;
                for(i=0;i<names.length;i++) {
                    name = names[i];
                    fullPath = [path, name].join(
                                    path.slice(-1) === '/' ? '' : '/');
                    if(_isDirName(name)) {
                        children = _readDirRecursive(false, io, fullPath
                                                    , depth+1, maxDepth);
                        Array.prototype.push.apply(result, children);
                    }
                    else
                        result.push(fullPath);
                }
                return result;
            }]
        }
      , {
            names: ['io', 'path', function(io, path) {
                return io.readDir(true, path);
            }]
          , readDir: ['io', 'names', 'path', 'depth', 'maxDepth', '_callback',
            function(io, names, path, depth, maxDepth, callback) {
                var i
                  , name
                  , loaded = 0
                  , loading = 0
                  , fullPath
                  , failed = false
                  , promise
                  , result = []
                  ;
                function finalize(children) {
                    if(failed) return;
                    Array.prototype.push.apply(result, children);
                    loaded++;
                    if(loaded === loading)
                        callback(null, result);
                }
                function fail(error) {
                    failed = true;
                    callback(error, null);
                }
                for(i=0;i<names.length;i++) {
                    name = names[i];
                    fullPath = [path, name].join(
                                        path.slice(-1) === '/' ? '' : '/');
                    if(_isDirName(name)) {
                        loading++;
                        promise = _readDirRecursive(true, io, fullPath
                                                    , depth+1, maxDepth)
                        .then(finalize, fail);
                    }
                    else
                        result.push(fullPath);
                }
                if(!loading)
                    setTimeout(callback, 0, null, result);
            }]
        }
      , ['io', 'path', 'depth', 'maxDepth']
      , function(obtain, path, depth, maxDepth) {
            if(depth > maxDepth)
                throw new IOMaxRecursionError('Maximum recusion depth ('
                                                + maxDepth + ') reached.');
            return obtain('readDir');
        }
    );

    function readDirRecursive(async, io, path, maxDepth /* default 100 */) {
        var md = maxDepth === undefined ? 100 : maxDepth;
        return _readDirRecursive(async, io, path, 0, md);
    }
    return readDirRecursive;
});

/**
 * Copyright (c) 2012, Lasse Fister lasse@graphicore.de, http://graphicore.de
 * 
 * You should have received a copy of the MIT License along with this program.
 * If not, see http://www.opensource.org/licenses/mit-license.php
 * 
 * This is a port of the validators defined in robofab/branches/ufo3k/Lib/ufoLib/validators.py
 * The svn revision of the source file was 576 from 2012-05-11 20:00:18 +0200
 * 
 * 
 * 
 * User name to file name conversion.
 * This was taken form the UFO 3 spec.
 * 
 */
 
define(
    'ufojs/ufoLib/filenames',[
        'ufojs/main',
        'ufojs/errors'
    ],
    function(
        main,
        errors
) {
    "use strict";
    var assert = errors.assert,
        NameTranslationError = errors.NameTranslation,
        setLike = main.setLike,
        
        illegalCharacters,
        reservedFileNames,
        maxFileNameLength = 255;
    
    illegalCharacters = setLike((function() {
        var arr = '" * + / : < > ? [ \ ] | \0'.split(' ');
        for(var i=1; i<32; i++)
            arr.push(String.fromCharCode(i));
        arr.push(String.fromCharCode(0x7F));
        return arr;
    })())
    reservedFileNames = setLike([
            'CON PRN AUX CLOCK$ NUL A:-Z: COM1',
            'LPT1 LPT2 LPT3 COM2 COM3 COM4'
        ].join(' ').toLowerCase().split(" "));
    
    /**
     * existing should be a case-insensitive list
     * of all existing file names.
     * 
     * from Python doctest
     * >>> userNameToFileName(u"a")
     * u'a'
     * >>> userNameToFileName(u"A")
     * u'A_'
     * >>> userNameToFileName(u"AE")
     * u'A_E_'
     * >>> userNameToFileName(u"Ae")
     * u'A_e'
     * >>> userNameToFileName(u"ae")
     * u'ae'
     * >>> userNameToFileName(u"aE")
     * u'aE_'
     * >>> userNameToFileName(u"a.alt")
     * u'a.alt'
     * >>> userNameToFileName(u"A.alt")
     * u'A_.alt'
     * >>> userNameToFileName(u"A.Alt")
     * u'A_.A_lt'
     * >>> userNameToFileName(u"A.aLt")
     * u'A_.aL_t'
     * >>> userNameToFileName(u"A.alT")
     * u'A_.alT_'
     * >>> userNameToFileName(u"T_H")
     * u'T__H_'
     * >>> userNameToFileName(u"T_h")
     * u'T__h'
     * >>> userNameToFileName(u"t_h")
     * u't_h'
     * >>> userNameToFileName(u"F_F_I")
     * u'F__F__I_'
     * >>> userNameToFileName(u"f_f_i")
     * u'f_f_i'
     * >>> userNameToFileName(u"Aacute_V.swash")
     * u'A_acute_V_.swash'
     * >>> userNameToFileName(u".notdef")
     * u'_notdef'
     * >>> userNameToFileName(u"con")
     * u'_con'
     * >>> userNameToFileName(u"CON")
     * u'C_O_N_'
     * >>> userNameToFileName(u"con.alt")
     * u'_con.alt'
     * >>> userNameToFileName(u"alt.con")
     * u'alt._con'
     * 
     */
    function userNameToFileName(
        userName,
        existing /* default {} (setLike) */,
        prefix /* default "" */,
        suffix /* default="" */
    ) {
        if(existing === undefined) existing = {};
        if(prefix === undefined) prefix = '';
        if(suffix === undefined) suffix = '';
        // the incoming name must be a unicode string
        // in js every string is that
        assert( typeof userName === 'string',
            "The value for userName must be a string.");
        // establish the prefix and suffix lengths
        var prefixLength = prefix.length,
            suffixLength = suffix.length;
        // replace an initial period with an _
        // if no prefix is to be added
        if(prefix === '' && userName[0] === ".")
            userName = "_" + userName.slice(1)
        // filter the user name
        var filteredUserName = [], i=0, character;
        for(; i<userName.length; i++) {
            character = userName[i];
            // replace illegal characters with _
            if(character in illegalCharacters)
                character = "_";
            // add _ to all non-lower characters
            else if(character != character.toLowerCase())
                character += "_";
            filteredUserName.push(character)
        }
        userName = filteredUserName.join('')
        // clip to 255
        var sliceLength = maxFileNameLength - prefixLength - suffixLength;
        userName = userName.slice(0, sliceLength);
        // test for illegal files names
        var parts = [],
            userNameParts = userName.split("."),
            fullName,
            part;
        for(var i=0; i<userNameParts.length; i++) {
            part = userNameParts[i];
            if(part.toLowerCase() in reservedFileNames)
                part = "_" + part;
            parts.push(part)
        }
        userName = parts.join('.');
        // test for clash
        fullName = prefix + userName + suffix;
        if(fullName.toLowerCase() in existing)
            fullName = handleClash1(userName, existing, prefix, suffix);
        // finished
        return fullName
    }

    /**
     * existing should be a case-insensitive list
     * of all existing file names.
     *
     * python doctest:
     * 
     * >>> prefix = ("0" * 5) + "."
     * >>> suffix = "." + ("0" * 10)
     * >>> existing = ["a" * 5]
     *
     * >>> e = list(existing)
     * >>> handleClash1(userName="A" * 5, existing=e,
     * ...		prefix=prefix, suffix=suffix)
     * '00000.AAAAA000000000000001.0000000000'
     *
     * >>> e = list(existing)
     * >>> e.append(prefix + "aaaaa" + "1".zfill(15) + suffix)
     * >>> handleClash1(userName="A" * 5, existing=e,
     * ...		prefix=prefix, suffix=suffix)
     * '00000.AAAAA000000000000002.0000000000'
     *
     * >>> e = list(existing)
     * >>> e.append(prefix + "AAAAA" + "2".zfill(15) + suffix)
     * >>> handleClash1(userName="A" * 5, existing=e,
     * ...		prefix=prefix, suffix=suffix)
     * '00000.AAAAA000000000000001.0000000000'
     */
    function handleClash1(
        userName,
        existing /* default {} (setLike) */,
        prefix /* default "" */,
        suffix /* default="" */
    ) {
        if(existing === undefined) existing = {};
        if(prefix === undefined) prefix = '';
        if(suffix === undefined) suffix = '';
        // if the prefix length + user name length + suffix length + 15 is at
        // or past the maximum length, silce 15 characters off of the user name
        var prefixLength = prefix.length,
            suffixLength = suffix.length;

        if(prefixLength + userName.length + suffixLength + 15 > maxFileNameLength){
            var l = (prefixLength + userName.length + suffixLength + 15),
                sliceLength = maxFileNameLength - l;
            userName = userName.slice(0, sliceLength);
        }
        // try to add numbers to create a unique name
        var counter = 1,
            fill = '000000000000000',
            finalName, counterStr, name, fullName;
        while(finalName === undefined) {
            counterStr = '' + counter;
            name = userName + fill.slice(0, -counterStr.length) + counterStr;
            fullName = prefix + name + suffix
            if(!(fullName.toLowerCase() in existing)){
                finalName = fullName
                break
            }
            else
                counter += 1;
            if(counter >= 999999999999999)
                break;
        }
        // if there is a clash, go to the next fallback
        if(finalName === undefined)
            finalName = handleClash2(existing, prefix, suffix);
        // finished
        return finalName;
    }
    
    /**
     * existing should be a case-insensitive list
     * of all existing file names.
     * 
     * python doctest:
     * >>> prefix = ("0" * 5) + "."
     * >>> suffix = "." + ("0" * 10)
     * >>> existing = [prefix + str(i) + suffix for i in range(100)]
     *
     * >>> e = list(existing)
     * >>> handleClash2(existing=e, prefix=prefix, suffix=suffix)
     * '00000.100.0000000000'
     *
     * >>> e = list(existing)
     * >>> e.remove(prefix + "1" + suffix)
     * >>> handleClash2(existing=e, prefix=prefix, suffix=suffix)
     * '00000.1.0000000000'
     *
     * >>> e = list(existing)
     * >>> e.remove(prefix + "2" + suffix)
     * >>> handleClash2(existing=e, prefix=prefix, suffix=suffix)
     * '00000.2.0000000000'
     */
    function handleClash2(
        existing /* default {} (setLike) */,
        prefix /* default "" */,
        suffix /* default="" */
    ) {
        if(existing === undefined) existing = {};
        if(prefix === undefined) prefix = '';
        if(suffix === undefined) suffix = '';
        
        // calculate the longest possible string
        var maxLength = maxFileNameLength - prefix.length - suffix.length,
            maxValue = [], finalName = undefined, counter = 1, fullName;
        for(var i=0; i<maxLength; i++)
            maxValue.push('9');
        maxValue = maxValue.join('');
        //try to find a number
        while(finalName === undefined) {
            fullName = prefix + counter + suffix;
            if(!(fullName.toLowerCase() in existing)){
                finalName = fullName;
                break;
            }
            else
                counter += 1;
            if(counter >= maxValue)
                break;
        }
        // raise an error if nothing has been found
        if(finalName === undefined)
            throw new NameTranslationError("No unique name could be found.")
        // finished
        return finalName;
    }
    
    //export the module
    return {
        illegalCharacters: illegalCharacters,
        reservedFileNames: reservedFileNames,
        maxFileNameLength: maxFileNameLength,
        userNameToFileName: userNameToFileName,
        handleClash1: handleClash1,
        handleClash2: handleClash2
    };
});

/**
 * Copyright (c) 2012, Lasse Fister lasse@graphicore.de, http://graphicore.de
 * 
 * You should have received a copy of the MIT License along with this program.
 * If not, see http://www.opensource.org/licenses/mit-license.php
 * 
 * This is a port of various functions  defined in robofab/branches/ufo3k/Lib/ufoLib/gliflib.py
 *
 */ 
define(
    'ufojs/ufoLib/glifLib/misc',[
    'ufojs/main',
    'ufojs/errors',
    'ufojs/ufoLib/filenames',
    'ufojs/ufoLib/validators'
    ],
    function(
        main,
        errors,
        filenames,
        validators
) {
    "use strict";
    var setLike = main.setLike,
        userNameToFileName = filenames.userNameToFileName,
        colorValidator = validators.colorValidator,
        genericTypeValidator = validators.genericTypeValidator,
        GlifLibError = errors.GlifLib;
    
    // -----------------------
    // Glyph Name to File Name
    // -----------------------
    
    /**
     * Wrapper around the userNameToFileName function in filenames.py
     */
    function glyphNameToFileName(glyphName, glyphSet) {
        var existing = {};
        for(var name in glyphSet.contents)
            existing[name.toLowerCase()] = true;
        return userNameToFileName(glyphName, existing, '', '.glif');
    }
    
    // -----------------------
    // layerinfo.plist Support
    // -----------------------

    var layerInfoVersion3ValueData = {
        'color' : {type: 'string', valueValidator: colorValidator},
        'lib' : {type: 'object', valueValidator: genericTypeValidator}
    };

    /**
     * This performs very basic validation of the value for attribute
     * following the UFO 3 fontinfo.plist specification. The results
     * of this should not be interpretted as *correct* for the font
     * that they are part of. This merely indicates that the value
     * is of the proper type and, where the specification defines
     * a set range of possible values for an attribute, that the
     * value is in the accepted range.
     */
    function validateLayerInfoVersion3ValueForAttribute(attr, value) {
        if(!(attr in layerInfoVersion3ValueData))
            return false;
        var dataValidationDict = layerInfoVersion3ValueData[attr],
            valueType = dataValidationDict['type'],
            validator = dataValidationDict['valueValidator'],
            valueOptions = dataValidationDict['valueOptions'],
            isValidValue;
        // have specific options for the validator
        if(valueOptions !== undefined)
            isValidValue = validator(value, valueOptions);
        // no specific options
        else
            if (validator === genericTypeValidator)
                isValidValue = validator(value, valueType);
            else
                isValidValue = validator(value);
        return isValidValue;
    }
    
    /**
     * This performs very basic validation of the value for infoData
     * following the UFO 3 layerinfo.plist specification. The results
     * of this should not be interpretted as *correct* for the font
     * that they are part of. This merely indicates that the values
     * are of the proper type and, where the specification defines
     * a set range of possible values for an attribute, that the
     * value is in the accepted range.
     */
    function validateLayerInfoVersion3Data(infoData) {
        var validInfoData = {}, attr, value, isValidValue;
        for(attr in infoData) {
            value = infoData[attr];
            if(!(attr in layerInfoVersion3ValueData))
                throw new GlifLibError('Unknown attribute ' + attr + '.');
            isValidValue = validateLayerInfoVersion3ValueForAttribute(attr, value);
            if(!isValidValue)
                throw new GlifLibError('Invalid value for attribute '
                    + attr + ' (' + (typeof value) + ': '+ value + ').');
            else
                validInfoData[attr] = value
        }
        return validInfoData;
    }
    
    return {
        glyphNameToFileName : glyphNameToFileName,
        layerInfoVersion3ValueData: layerInfoVersion3ValueData,
        validateLayerInfoVersion3ValueForAttribute : validateLayerInfoVersion3ValueForAttribute,
        validateLayerInfoVersion3Data : validateLayerInfoVersion3Data
    }
});

/**
 * Copyright (c) 2011, Lasse Fister lasse@graphicore.de, http://graphicore.de
 *
 * You should have received a copy of the MIT License along with this program.
 * If not, see http://www.opensource.org/licenses/mit-license.php
 *
 * This is a translation of AbstractPointPen defined in robofab/pens/pointPen.py
 * The svn revision of the source file in trunk/Lib/ was 67 from 2008-03-11 10:18:32 +0100
 * Ther very same pen is to be found in robofab/branches/ufo3k/Lib/ufoLib/pointPen.py
 * revision 517 2011-12-07 18:17:40 +0100 (Wed, 07 Dec 2011)
 *
 * I even copied the docstrings and comments! (These may still refer to the Python code)
 *
 *
 * =========
 * PointPens
 * =========
 *
 * Where **SegmentPens** have an intuitive approach to drawing
 * (if you're familiar with postscript anyway), the **PointPen**
 * is geared towards accessing all the data in the contours of
 * the glyph. A PointsPen has a very simple interface, it just
 * steps through all the points in a call from glyph.drawPoints().
 * This allows the caller to provide more data for each point.
 * For instance, whether or not a point is smooth, and its name.
 */

define('Atem-Pen-Case/pens/AbstractPointPen',[
    'Atem-Errors/errors'
], function(
    errors
) {
    "use strict";
    //shortcuts
    var NotImplementedError = errors.NotImplemented;

    /*constructor*/
    /**
     * Baseclass for all PointPens.
     */
    function AbstractPointPen(){}
    var _p = AbstractPointPen.prototype;
    /*inheritance*/
    //pass

    /*definition*/
        /**
         * Start a new sub path.
         */
        _p.beginPath = function(kwargs/*optional, dict*/)
        {
            throw new NotImplementedError(
                'AbstractPointPen has not implemented'
                +' beginPath');
        };
        /**
         * End the current sub path.
         */
        _p.endPath = function()
        {
            throw new NotImplementedError(
                'AbstractPointPen has not implemented'
                +' endPath');
        };
        /**
         * Add a point to the current sub path.
         */
        _p.addPoint = function(
            pt,
            segmentType /* default null */,
            smooth /* default false */,
            name /* default null */,
            kwargs /* default an object, javascript has no **kwargs syntax */
        ) {
            segmentType = (segmentType === undefined) ? null : segmentType;
            smooth = (smooth || false);
            name = (name === undefined) ? null : name;
            kwargs = (kwargs || {});//an "options" object
            throw new NotImplementedError(
                'AbstractPointPen has not implemented'
                +' addPoint');
        };
        /**
         * Add a sub glyph.
         */
        _p.addComponent = function(baseGlyphName, transformation)
        {
            throw new NotImplementedError(
                'AbstractPointPen has not implemented'
                +' addComponent');
        };
    return AbstractPointPen;
});

/**
 * Copyright (c) 2011, Lasse Fister lasse@graphicore.de, http://graphicore.de
 *
 * You should have received a copy of the MIT License along with this program.
 * If not, see http://www.opensource.org/licenses/mit-license.php
 *
 * This is a translation of BasePointToSegmentPen defined in robofab/pens/pointPen.py
 * The svn revision of the source file in trunk/Lib/ was 67 from 2008-03-11 10:18:32 +0100
 *
 * I even copied the docstrings and comments! (These may still refer to the Python code)
 */
define(
    'Atem-Pen-Case/pens/BasePointToSegmentPen',[
        'Atem-Errors/errors',
        './AbstractPointPen'
    ],
    function(
        errors,
        AbstractPointPen
) {
    "use strict";
    //shortcuts
    var NotImplementedError = errors.NotImplemented,
        assert = errors.assert;

    /*constructor*/

    /**
     * Base class for retrieving the outline in a segment-oriented
     * way. The PointPen protocol is simple yet also a little tricky,
     * so when you need an outline presented as segments but you have
     * as points, do use this base implementation as it properly takes
     * care of all the edge cases.
     */
    function BasePointToSegmentPen()
    {
        this.currentPath = null;
    }

    /*inheritance*/
    var _p = BasePointToSegmentPen.prototype = Object.create(AbstractPointPen.prototype);
    _p.constructor = BasePointToSegmentPen;

    /*definition*/
        _p.beginPath = function(kwargs/*optional, object*/)
        {
            assert(this.currentPath === null,
                'currentPath is not null, call endPath');
            this.currentPath = [];
            this.currentPath.kwargs = kwargs;
        };

        /**
         * Override this method.
         *
         * It will be called for each non-empty sub path with a list
         * of segments: the 'segments' argument.
         *
         * The segments list contains tuples of length 2:
         * (segmentType, points)
         *
         * segmentType is one of "move", "line", "curve" or "qcurve".
         * "move" may only occur as the first segment, and it signifies
         * an OPEN path. A CLOSED path does NOT start with a "move", in
         * fact it will not contain a "move" at ALL.
         *
         * The 'points' field in the 2-tuple is a list of point info
         * tuples. The list has 1 or more items, a point tuple has
         * four items:
         * (point, smooth, name, kwargs)
         * 'point' is an (x, y) coordinate pair.
         *
         * For a closed path, the initial moveTo point is defined as
         * the last point of the last segment.
         *
         * The 'points' list of "move" and "line" segments always contains
         * exactly one point tuple.
         */
        _p._flushContour = function(segments, kwargs/*optional, object*/)
        {
            throw new NotImplementedError(
                'BasePointToSegmentPen has not _flushContour endPath');
        };

        _p.endPath = function()
        {
            assert(this.currentPath !== null,
                'currentPath is null, call beginPath');
            var points = this.currentPath
              , contour_kwargs = this.currentPath.kwargs
              , pt, smooth, name, kwargs, segments, firstOnCurve
              , currentSegment, i, l, segmentType
              ;
            this.currentPath = null;
            if(!points.length)
                return;
            if(points.length === 1) {
                // Not much more we can do than output a single move segment.
                pt = points[0][0];
                //segmentType = points[0][1], not using this
                smooth = points[0][2];
                name = points[0][3];
                kwargs = points[0][4];
                segments = [ ['move', [ [pt, smooth, name, kwargs] ] ] ];
                this._flushContour(segments, contour_kwargs);
                return;
            }
            segments = [];
            if(points[0][1] == 'move') {
                // It's an open contour, insert a "move" segment for the
                // first point and remove that first point from the point list.
                pt = points[0][0];
                //segmentType = points[0][1],// it's 'move', we just checked
                smooth = points[0][2];
                name = points[0][3];
                kwargs = points[0][4];
                segments.push(['move', [ [pt, smooth, name, kwargs] ] ]);
                points.splice(0,1);
            } else {
                // It's a closed contour. Locate the first on-curve point, and
                // rotate the point list so that it _ends_ with an on-curve
                // point.
                firstOnCurve = null;
                for (i = 0, l = points.length; i < l; i++) {
                    segmentType = points[i][1];
                    if(segmentType !== null) {
                        firstOnCurve = i;
                        break;
                    }
                }
                if(firstOnCurve === null) {
                    // Special case for quadratics: a contour with no on-curve
                    // points. Add a "None" point. (See also the Pen protocol's
                    // qCurveTo() method and fontTools.pens.basePen.py.)
                    points.push([null, 'qcurve', null, null, null]);
                } else {
                    //points = [].concat(points.slice(firstOnCurve+1), points.slice(0, firstOnCurve+1))
                    points = points.concat(points.splice(0, firstOnCurve+1));
                }
            }
            currentSegment = [];
            for (i = 0, l = points.length; i < l; i++) {
                pt = points[i][0];
                segmentType = points[i][1];
                smooth = points[i][2];
                name = points[i][3];
                kwargs = points[i][4];
                currentSegment.push([pt, smooth, name, kwargs]);
                if(segmentType === null)
                    continue;
                segments.push([segmentType, currentSegment]);
                currentSegment = [];
            }
            this._flushContour(segments, contour_kwargs);
        };

        _p.addPoint = function(
            pt,
            segmentType /* default null */,
            smooth /* default false */,
            name /* default null */,
            kwargs /* default an object, javascript has no **kwargs syntax */
        ) {
            segmentType = (segmentType === undefined) ? null : segmentType;
            smooth = (smooth || false);
            name = (name === undefined) ? null : name;
            kwargs = (kwargs || {});//an "options" object
            this.currentPath.push([pt, segmentType, smooth, name, kwargs]);
        };

    return BasePointToSegmentPen;
});

/**
 * Copyright (c) 2011, Lasse Fister lasse@graphicore.de, http://graphicore.de
 *
 * You should have received a copy of the MIT License along with this program.
 * If not, see http://www.opensource.org/licenses/mit-license.php
 *
 * This is a translation of PointToSegmentPen defined in robofab/pens/adapterPens.py
 * The svn revision of the source file in trunk/Lib/ was 67 from 2008-03-11 10:18:32 +0100
 *
 * I even copied the docstrings and comments! (These may still refer to the Python code)
 */

define(
    'Atem-Pen-Case/pens/PointToSegmentPen',[
        'Atem-Errors/errors',
        './BasePointToSegmentPen'
    ],
    function(
        errors,
        Parent
) {
    "use strict";
    var assert = errors.assert;
    /*constructor*/
    /**
     * Adapter class that converts the PointPen protocol to the
     * (Segment)Pen protocol.
     */
    function PointToSegmentPen(
        segmentPen,
        outputImpliedClosingLine /* default: false*/
    ) {
        Parent.call(this);
        this.pen = segmentPen;
        this.outputImpliedClosingLine = (outputImpliedClosingLine || false);
    }

    /*inheritance*/
    var _p = PointToSegmentPen.prototype = Object.create(Parent.prototype);
    _p.constructor = PointToSegmentPen;

    /*definition*/
        _p._flushContour = function(segments)
        {
            assert(segments.length >= 1, 'Less than one segment');
            var pen = this.pen
              , closed, segment, segmentType, points, point
              , movePt, smooth, name, kwargs, i, n, l
              , outputImpliedClosingLine, nSegments, pt
              ;
            if( segments[0][0] == "move" ) {
                // It's an open path.
                closed = false;
                points = segments[0][1];
                assert(points.length === 1, 'Points length is not 1');
                movePt = points[0][0];
                smooth = points[0][1];
                name = points[0][2];
                kwargs = points[0][3];
                segments.splice(0, 1);
            } else {
                // It's a closed path, do a moveTo to the last
                // point of the last segment.
                closed = true;
                segment = segments[segments.length - 1];
                segmentType = segment[0];
                points = segment[1];
                point = points[points.length - 1];
                movePt = point[0];
                smooth = point[1];
                name = point[2];
                kwargs = point[3];
            }
            if(movePt === null) {
                // quad special case: a contour with no on-curve points
                // contains one "qcurve" segment that ends with a point
                // that's null. We must not output a moveTo() in that case.
                // pass
            } else {
                pen.moveTo(movePt);
            }
            outputImpliedClosingLine = this.outputImpliedClosingLine;
            nSegments = segments.length;
            for(i = 0; i < nSegments; i++) {
                segmentType = segments[i][0];
                points = [];
                for(n = 0, l=segments[i][1].length; n < l; n++)
                    points.push(segments[i][1][n][0]);
                if(segmentType == 'line') {
                    assert(points.length === 1, 'Points length is not 1');
                    pt = points[0];
                    if(i + 1 != nSegments
                    || outputImpliedClosingLine
                    || !closed)
                        pen.lineTo(pt);
                } else if(segmentType == 'curve') {
                    pen.curveTo.apply(pen, points);
                } else if(segmentType == 'qcurve') {
                    pen.qCurveTo.apply(pen, points);
                } else {
                    throw new errors.Type('illegal segmentType: '
                        + segmentType);
                }
            }
            if(closed)
                pen.closePath();
            else
                pen.endPath();
        };

        _p.addComponent = function(glyphName, transform)
        {
            this.pen.addComponent(glyphName, transform);
        };
    return PointToSegmentPen;
});

/**
 * Copyright (c) 2012, Lasse Fister lasse@graphicore.de, http://graphicore.de
 *
 * You should have received a copy of the MIT License along with this program.
 * If not, see http://www.opensource.org/licenses/mit-license.php
 *
 * This is a port of glifLib.Glyph defined in robofab/branches/ufo3k/Lib/ufoLib/gliflib.py
 *
 */

define(
    'ufojs/ufoLib/glifLib/Glyph',[
        'ufojs/errors'
      , 'obtain/obtain'
      , 'Atem-Pen-Case/pens/PointToSegmentPen'
    ],
    function(
        errors
      , obtain
      , PointToSegmentPen
) {
    "use strict";

    // ------------
    // Simple Glyph
    //-------------

    /**
     * Minimal glyph object. It has no glyph attributes until either
     * the draw() or the drawPoint() method has been called.
     *
     * The methods of this glyph are not enumerable, so that a
     *     for(var k in glyph){ ... }
     * yields only glyph attributes
     */

    function Glyph(glyphName, glyphSet) {
        Object.defineProperty(this, 'glyphName', {
            enumerable: false
          , value: glyphName
        })

        Object.defineProperty(this, 'glyphSet', {
            enumerable: false
          , value: glyphSet
        })
    };

    var _p = Glyph.prototype;

    /**
     * Draw the outline of this glyph onto a *FontTools* Pen.
     * The rest of the data will be written directly onto the Glyph
     */
     Object.defineProperty(_p, 'draw', {
        enumerable: false
      , value: function(obtainsSwitch, pen) {
            var pointPen = new PointToSegmentPen(pen);
            return this.drawPoints(obtainsSwitch, pointPen);
        }
    })


    Object.defineProperty(_p, '_readGlyph', {
        enumerable: false
      , value: function(obtainSwitch, pointPen) {
            var args = Array.prototype.slice.call(arguments);
            // insert this.glyphName
            // and the glyphObject argument === this
            args.splice(1, 0, this.glyphName, this);
            // args is now: [obtainSwitch, glyphname, this, pointPen]
            return this.glyphSet.readGlyph.apply(this.glyphSet, args)
        }
    })

    /**
     * Draw the outline of this glyph onto a PointPen.
     * The rest of the data will be written directly onto the Glyph
     */
    Object.defineProperty(_p, 'drawPoints', {
        enumerable: false
      , value: obtain.factory(
            {
                readGlyph: [false, 'pen', _p._readGlyph]
            }
          , {
                readGlyph: [true, 'pen', _p._readGlyph]
            }
          , ['pen']
          , function(obtain){ return obtain('readGlyph'); }
        )
    })

    return Glyph;
});

/**
 * Copyright (c) 2012, Lasse Fister lasse@graphicore.de, http://graphicore.de
 *
 * You should have received a copy of the MIT License along with this program.
 * If not, see http://www.opensource.org/licenses/mit-license.php
 *
 * This is a port of various functions to read a glif xml into a generic
 * glyph object defined in robofab/branches/ufo3k/Lib/ufoLib/gliflib.py
 *
 * There have been modifications from the python sources because XML is
 * treated with the DOM in here.
 */
define('ufojs/ufoLib/glifLib/readGlyph',[
    'ufojs/main'
  , 'ufojs/errors'
  , 'ufojs/xml/main'
  , 'ufojs/plistLib/main'
  , 'ufojs/ufoLib/validators'
  , 'ufojs/ufoLib/constants'
], function(
    main
  , errors
  , xml
  , plistLib
  , validators
  , constants
) {
    "use strict";
    var GlifLibError = errors.GlifLib,
        glyphLibValidator = validators.glyphLibValidator,
        guidelinesValidator = validators.guidelinesValidator,
        anchorsValidator =  validators.anchorsValidator,
        imageValidator = validators.imageValidator,
        identifierValidator = validators.identifierValidator,
        transformationInfo = constants.transformationInfo;

    /**
     * You may pass a callback function as errorCallback. This
     * function will be called when an error is encountered during the
     * loading of a glyph. The errorCallback can return true and try
     * to let ReadGlyph do more parsing or false which will raise the
     * error immediately. Also, if "errorCallbackData.recoverable" is
     * false, errorCallback can report the error but not prevent it
     * from being thrown by returning true.
     */
    function ReadGlyph( errorCallback /* undefined or function*/
    ) {
        if(errorCallback) {
            this._errorCallback = errorCallback;
        }
        this._resetErrorCallbackData();
    }

    var _p = ReadGlyph.prototype;
    _p.constructor = ReadGlyph;

    _p._resetErrorCallbackData = function() {
        this._errorCallbackData = { glyphName: '' };
    }
    _p._executeErrorCallback = function(recoverable, msg) {
        var recover;
        this._errorCallbackData.message = msg;
        this._errorCallbackData.recoverable = recoverable;
        recover = this._errorCallback
            ? this._errorCallback( this._errorCallbackData )
            : false;
        if(!recover || !recoverable)
            throw new GlifLibError(msg);
    }


    /*
     * Read .glif data from a string into a glyph object.
     *
     * The 'glyphObject' argument can be any kind of object (even None);
     * the readGlyphFromString() method will attempt to set the following
     * attributes on it:
     *   'width'      the advance with of the glyph
     *   'height'     the advance height of the glyph
     *   'unicodes'   a list of unicode values for this glyph
     *   'note'       a string
     *   'lib'        a dictionary containing custom data
     *   'image'      a dictionary containing image data
     *   'guidelines' a list of guideline data dictionaries
     *   'anchors'    a list of anchor data dictionaries
     *
     * All attributes are optional, in two ways:
     *   1) An attribute *won't* be set if the .glif file doesn't
     *      contain data for it. 'glyphObject' will have to deal
     *      with default values itself.
     *   2) If setting the attribute fails with an AttributeError
     *      (for example if the 'glyphObject' attribute is read-
     *      only), readGlyphFromString() will not propagate that
     *      exception, but ignore that attribute.
     *
     * To retrieve outline information, you need to pass an object
     * conforming to the PointPen protocol as the 'pointPen' argument.
     * This argument may be None if you don't need the outline data.
     *
     * The formatVersions argument defined the GLIF format versions
     * that are allowed to be read.
     *
     * _glifTreeFromFile from the python code should lead you here
     */
    _p.fromString = function(
        glyphDataString,
        glyphObject /* undefined */,
        pointPen /* undefined */,
        // the formatVersions argument is not used! this was in the python code.
        formatVersions /* default = [1, 2]*/
    ) {
        var glifDoc = xml.parseXMLString(glyphDataString);
        this.fromDOM(glifDoc, glyphObject, pointPen, formatVersions );
    }

    /**
     * defined as _readGlyphFromTree in the python code
     */
    _p.fromDOM = function(
        glifDoc,
        glyphObject /* undefined */,
        pointPen /* undefined */,
        // the formatVersions argument is not used! this was in the python code.
        formatVersions /* default = [1, 2]*/
    ) {
        try {
            // quick format validation
            var root = glifDoc.documentElement,
            formatError = false,
            formatVersion;
            if( typeof root === 'undefined'
                || typeof root.tagName !== 'string'
                || root.tagName !== 'glyph')
                formatError = true;
            if(formatError) {
                this._executeErrorCallback(false,'GLIF data is not properly formatted.');
            }

            // check the format version
            formatVersion = root.getAttribute('format');
            formatVersion = main.isIntString(formatVersion)
                ? parseInt(formatVersion, 10)
                : formatVersion;
            if(formatVersion === 1)
                this._readGlyphFromTreeFormat1(glifDoc, glyphObject, pointPen);
            else if(formatVersion === 2)
                this._readGlyphFromTreeFormat2(glifDoc, glyphObject, pointPen);
            else
                this._executeErrorCallback(false,'Unsupported GLIF format version: '
                                           + formatVersion + '.');
        }
        finally {
            this._resetErrorCallbackData();
        }
    }

    // this method is inherited from the python code
    // it's still there becaue this code could try to set
    // values on an undefined object
    // it's propably a good idea to make it superfluous by not setting
    // values on undefined
    _p._relaxedSetattr = function (object, attr, value) {
        try {
            object[attr] = value;
            return true;
        }
        catch(e) {
            if(!(e instanceof TypeError))
                throw e;
            /*else pass*/
        }
        return false;
    }

    _p._relaxedSetattrDict = function (object, dict) {
        for(var k in dict)
            this._relaxedSetattr(object, k, dict[k]);
    }

    _p._isDOMElement = function (node) {
        return (
            (node instanceof xml.Node)
            && node.nodeType === xml.Node.ELEMENT_NODE
        );
    }

    /**
     * This will yet allow more than the python version, because it uses
     * only Javascripts parseFloat, which is very forgiving
     *
     * Python docstring:
     * Given a numeric string, return an integer or a float, whichever
     * the string indicates. _toNumber("1") will return the integer 1,
     * _toNumber("1.0") will return the float 1.0.
     *
     * >>> _toNumber("1")
     * 1
     * >>> _toNumber("1.0")
     * 1.0
     * >>> _toNumber("a")
     * Traceback (most recent call last):
     *     ...
     * GlifLibError: Could not convert a to an int or float.
     */
    _p._toNumber = function (string) {
        var number;
        if(main.isNumber(string))
            return parseFloat(string);
        if(!main.isFloatString(string))
            throw new GlifLibError('Could not convert "' + string
                + '" to an int or float.');

        number = parseFloat(string)
        if(!isFinite(number))
            throw new GlifLibError('Could not convert "' + string
                + '" to an int or float.');
        return number;
    }

    /**
     * element.getAttribute but with an optional default Value
     * use this like:
     * _getAttribute.call(domElement, 'attrbuteName', 'fallbackValue');
     */
    _p._getAttribute = function (attribute, fallback /* default: null*/) {
        // this method allows undefined as a fallback value
        if(arguments.length < 2)
            fallback = null;
        if(this.hasAttribute(attribute))
            return this.getAttribute(attribute);
        return fallback;
    }

    /**
     * Make a list based interface for a function.
     *
     * Takes a function as input and returns a function that takes an
     * array and applies (using Function.prototype.apply) the array items
     * as arguments to the input function.
     */
    _p._getArrayInterface = function (func) {
        return function(args) {
            return func.apply(this, args);
        }
    }

    /**
     * return a real array out of the children of a DOM Element
     */
    _p._listOfChildren = function (element) {
        return [].slice.call(element.children);
    }

    _p._attributesDict = function (node) {
        var attributes = {};
        for(var i=0; i<node.attributes.length; i++)
            attributes[node.attributes.item(i).name] = node.attributes.item(i).value;
        return attributes;
    }

    _p._checkAttributesWhitelist = function (
        element /* DOM Element*/,
        whitelist /* setLike */
    ) {
        var i=0, attrName;
        for(; i<element.attributes.length; i++) {
            attrName = element.attributes.item(i).name;
            if(!(attrName in whitelist))
                throw new GlifLibError('Unknown attribute (' + attrName
                    + ') in ' + element.tagName + ' element.');
        }
    }

    _p._readGlyphFromTreeFormat1 = function (
        glifDoc,
        glyphObject/* undefined */,
        pointPen/* undefined */
    ) {
        var root = glifDoc.documentElement;
        // get the name
        this._relaxedSetattr( glyphObject, 'name', this._readName(root));

        // bind the glyph name so that lower methods don't need it
        this._errorCallbackData.glyphName = glyphObject['name'];

        // populate the sub elements
        var unicodes = {list: [], dict: {}},
            haveSeenAdvance = false,
            haveSeenOutline = false,
            haveSeenLib = false,
            haveSeenNote = false,
            children = this._listOfChildren(root),
            i, node, element, v;

        for(i=0; i<children.length; i++) {
            node = children[i];
            element = node.tagName;
            if(element === 'outline') {
                if(haveSeenOutline)
                    throw new GlifLibError('The outline element occurs '
                        + 'more than once.');
                if(node.attributes.length)
                    throw new GlifLibError('The outline element contains '
                        + 'unknown attributes.');
                haveSeenOutline = true;
                if(pointPen !== undefined)
                    this._buildOutlineFormat1(glyphObject, pointPen,
                                        this._listOfChildren(node));
            }
            else if(element === 'advance') {
                if(haveSeenAdvance)
                    throw new GlifLibError('The advance element occurs '
                        + 'more than once.');
                haveSeenAdvance = true;
                this._relaxedSetattrDict(glyphObject, this._readAdvance(node));
            }
            else if(element === 'unicode') {
                v = node.getAttribute('hex');
                v = parseInt(v, 16);
                if(!isFinite(v))
                    throw new GlifLibError('Illegal value for hex '
                        + 'attribute of unicode element.');
                if(!(v in unicodes.dict)) {
                    // Could store indices of unicodes.list here if there
                    // was a need, anyone? This way unicodes.dict is still
                    // useable like a set in python
                    unicodes.dict[v] = true;
                    unicodes.list.push(v);
                }
            }
            else if(element === 'note') {
                if(haveSeenNote)
                    throw new GlifLibError('The note element occurs more '
                        + 'than once.');
                haveSeenNote = true;
                this._relaxedSetattr(glyphObject, 'note', this._readNote(node));
            }
            else if(element === 'lib') {
                if(haveSeenLib)
                    throw new GlifLibError('The lib element occurs more '
                    + 'than once.');
                haveSeenLib = true;
                this._relaxedSetattr(glyphObject, 'lib', this._readLib(node));
            }
            else throw new GlifLibError('Unknown element in GLIF: '
                    + element + '.');
        }
        // set the collected unicodes
        if(unicodes.list.length)
            this._relaxedSetattr(glyphObject, 'unicodes', unicodes.list);
    }


    _p._readGlyphFromTreeFormat2 = function (
        glifDoc,
        glyphObject/* undefined */,
        pointPen/* undefined */
    ) {
        var root = glifDoc.documentElement;
        // get the name
        this._relaxedSetattr(glyphObject, 'name', this._readName(root));
        this._errorCallbackData.glyphName = glyphObject['name'];

        // populate the sub elements
        var unicodes = {list: [], dict: {}},
            guidelines = [],
            anchors = [],
            haveSeenAdvance = false,
            haveSeenImage = false,
            haveSeenOutline = false,
            haveSeenLib = false,
            haveSeenNote = false,
            identifiers = {}, // set() in python
            children = this._listOfChildren(root),
            i, node, element, attrs, attr, v;
        for(i=0; i<children.length; i++) {
            node = children[i];
            element = node.tagName;
            if(element === 'outline') {
                if(haveSeenOutline)
                    throw new GlifLibError('The outline element occurs '
                        + 'more than once.');
                if(node.attributes.length)
                    throw new GlifLibError('The outline element contains '
                        + 'unknown attributes.');
                haveSeenOutline = true;
                if(pointPen !== undefined)
                    // FIXME: It's wrong to not check the outline here.
                    // Because the glyph could be invalid (duplicate
                    // identifiers for example). However: for some tasks
                    // it would be a performance hit I quess (when only
                    // reading a particular value, there is the rapid value
                    // fetching stuff in GlyphSet, maybe that API or a new
                    // one could be used in these cases). Another option
                    // would be a further optional Argument
                    // for this method.
                    // UFO 2 had no identifiers, and thus not this exact
                    // problem, however, the outline could be malformed in
                    // other ways, too.
                    // The glyph in the case of an invalid outline would
                    // be sometimes valid, when not reading the outline
                    // and sometimes invalid, when reading the outline.
                    // That is a bad thing.
                    // I'm leaving it for now, because the first aim is
                    // to be compatible to robofab.
                    this._buildOutlineFormat2( pointPen, this._listOfChildren(node),
                                              identifiers );
            }
            else if(element === 'advance') {
                if(haveSeenAdvance)
                    throw new GlifLibError('The advance element occurs '
                        + 'more than once.');
                haveSeenAdvance = true;
                this._relaxedSetattrDict(glyphObject, this._readAdvance(node));
            }
            else if(element === 'unicode') {
                v = node.getAttribute('hex');
                v = parseInt(v, 16);
                if(!isFinite(v))
                    throw new GlifLibError('Illegal value for hex '
                        + 'attribute of unicode element.');
                if(!(v in unicodes.dict)) {
                    // Could store indices of unicodes.list here if there
                    // was a need, anyone? This way unicodes.dict is still
                    // useable like a set in python
                    unicodes.dict[v] = true;
                    unicodes.list.push(v);
                }
            }
            else if(element === 'guideline') {
                if (node.childNodes.length)
                    throw new GlifLibError('Unknown children in guideline element.');
                attrs = this._attributesDict(node);
                for(attr in {x: null, y: null, angle: null})
                    if(attr in attrs)
                        attrs[attr] = this._toNumber(attrs[attr]);
                guidelines.push(attrs);
            }
            else if(element === 'anchor') {
                if (node.childNodes.length)
                    throw new GlifLibError('Unknown children in anchor element.')
                attrs = this._attributesDict(node);
                for(attr in {x: null, y: null})
                    if(attr in attrs)
                        attrs[attr] = this._toNumber(attrs[attr]);
                anchors.push(attrs);
            }
            else if(element === 'image') {
                if(haveSeenImage)
                    throw new GlifLibError('The image element occurs '
                        + 'more than once.')
                if (node.childNodes.length)
                    throw new GlifLibError('Unknown children in image '
                        + 'element.');
                haveSeenImage = true;
                this._relaxedSetattr(glyphObject, 'image',this._readImage(node));
            }
            else if(element === 'note') {
                if(haveSeenNote)
                    throw new GlifLibError('The note element occurs more '
                        + 'than once.');
                haveSeenNote = true;
                this._relaxedSetattr(glyphObject, 'note',this._readNote(node));
            }
            else if(element === 'lib') {
                if(haveSeenLib)
                    throw new GlifLibError('The lib element occurs more '
                    + 'than once.');
                haveSeenLib = true;
                this._relaxedSetattr(glyphObject, 'lib', this._readLib(node));
            }
            else throw new GlifLibError('Unknown element in GLIF: '
                    + element + '.');
        }
        // set the collected guidelines
        if(guidelines.length) {
            if(!guidelinesValidator(guidelines, identifiers))
                // FIXME: in case of duolicate identifieres be more clear
                throw new GlifLibError('The guidelines are improperly formatted.')
             this._relaxedSetattr(glyphObject, 'guidelines', guidelines);
        }
        // set the collected anchors
        if(anchors.length) {
            if(!anchorsValidator(anchors, identifiers))
                // FIXME: in case of duolicate identifieres be more clear
                throw new GlifLibError('The anchors are improperly formatted.')
            this._relaxedSetattr(glyphObject, 'anchors', anchors);
        }
        // set the collected unicodes
        if(unicodes.list.length)
            this._relaxedSetattr(glyphObject, 'unicodes', unicodes.list);
    }

    _p._readName = function (node) {
        var glyphName = node.getAttribute('name');

        if(typeof glyphName !== 'string' || glyphName === '')
            throw new GlifLibError('Empty glyph name in GLIF.');
        return glyphName;
    }

    _p._readAdvance = function (node) {
        var values = ['width', 'height']
            .map(node.getAttribute, node)
            .map(function(value){ return value === null ? 0 : value;})
            .map(this._toNumber);
        return {
            width: values[0],
            height: values[1]
        }
    }

    _p._readNote = function (node) {
        return this._listOfChildren(node) // array
            .map(function(item){return item.textContent;}) // array
            .join('\n') // string
            .split('\n')// array
            .map(function(str){return str.trim();}) // array
            .join('\n'); // string
    }

    _p._readLib = function (node) {
        if(node.children.length !== 1)
            throw new GlifLibError('lib node may have only one child, '
                +'but has ' + node.children.length + '.');

        var plistElement = node.firstElementChild || node.children[0],
            lib, validation;

        if(plistElement.tagName !== 'dict')
            throw new GlifLibError('The child node of lib must be "dict"'
                +'but is ' + plistElement.tagName + '.');

        lib = plistLib.readPlistElement(plistElement);
        validation = glyphLibValidator(lib);

        if(!validation[0])
            throw new GlifLibError(validation[1]);
        return lib;
    }

    _p._readImage = function (node) {
        var imageData = this._attributesDict(node),
            i=0, attr, value;
        // FIXME: it would be nice to have a single transformation value
        // at this point on the glyphObject instead of all those xScale,
        // xyScale, etc. values. Either as a list or as a new Transform()
        // from Atem-Math-Tools/transform.
        // That of course would require some refactoring and might break
        // compatibillity to some existing python code, what would be ok
        // I guess???
        for(; i<transformationInfo.length; i++) {
            attr = transformationInfo[i][0];
            value = transformationInfo[i][1];
            if(attr in imageData)
                value = imageData[attr];
            imageData[attr] = this._toNumber(value);
        }
        // needs to happen after parsing, because the type of teh attributes
        // must be number
        if(!imageValidator(imageData))
            throw new GlifLibError('The image element is not properly '
                + 'formatted.');
        return imageData;
    }

    // ----------------
    // GLIF to PointPen
    // ----------------

    //all of these are defined as set in python
    var contourAttributesFormat2 = main.setLike(['identifier']),
        componentAttributesFormatBaseList = ['base', 'xScale', 'xyScale',
            'yxScale', 'yScale', 'xOffset', 'yOffset'],
        componentAttributesFormat1 = main.setLike(
            componentAttributesFormatBaseList),
        componentAttributesFormat2 = main.setLike(
            componentAttributesFormatBaseList.concat(['identifier'])),
        pointAttributesFormatBaseList = ['x', 'y', 'type', 'smooth',
            'name'],
        pointAttributesFormat1 = main.setLike(
            pointAttributesFormatBaseList),
        pointAttributesFormat2 = main.setLike(
            pointAttributesFormatBaseList.concat(["identifier"])),
        pointSmoothOptions = main.setLike(['no', 'yes']),
        pointTypeOptions = main.setLike(['move', 'line', 'offcurve',
            'curve', 'qcurve'])
        ;

    // format 1

    _p._buildOutlineFormat1 = function (glyphObject, pen, nodes ) {
        var i = 0,
            anchors = [],
            node, child, anchor;
        for(; i<nodes.length; i++) {
            node = nodes[i];
            if(!this._isDOMElement(node))
                throw new GlifLibError('The outline element is not '
                    + 'properly structured.');
            if(node.tagName == 'contour') {
                if(node.children.length == 1) {
                    // its an anchor
                    child = node.children[0];
                    if(child.tagName == "point") {
                        anchor = this._buildAnchorFormat1(child);
                        if(anchor)
                            anchors.push(anchor);
                    }
                    // FIXME: The Python source allows it when here is
                    // an unknown tag name. Beeing a little more strict
                    // at least our namespace should not be polluted with
                    // undocumented tags give it back to robofab? Its most
                    // probably too late for outline format version 1.
                    // else
                    //     new GlifLibError('Unknown element in contour '
                    //         + 'element: ' + child.tagName);
                }
                else
                    this._buildOutlineContourFormat1(pen, node)
            }
            else if(node.tagName == 'component')
                this._buildOutlineComponentFormat1(pen, node);
            else
                throw new GlifLibError('Unknown element in outline element '
                    +  node.tagName);
        }

        // set the collected anchors
        if(anchors.length) {
            if(!anchorsValidator(anchors))
                throw new GlifLibError('GLIF 1 anchors are not properly '
                    + 'formatted.');
            this._relaxedSetattr(glyphObject, 'anchors', anchors);
        }
    }

    _p._buildAnchorFormat1 = function (point /* a DOM Node */ ) {
        if( point.getAttribute('type') !== 'move')
            return;

        if (!point.hasAttribute('x'))
            throw new GlifLibError('Required x attribute is missing in '
                + 'point element.');
        if (!point.hasAttribute('y'))
            throw new GlifLibError('Required y attribute is missing in '
                + 'point element.');
        return {
            x: this._toNumber(point.getAttribute('x')),
            y: this._toNumber(point.getAttribute('y')),
            name: point.getAttribute('name')
        }
    }

    _p._buildOutlineContourFormat1 = function (pen, contour) {
        var children
        if (contour.attributes.length)
            throw new GlifLibError('Unknown attributes in contour element.')
        pen.beginPath();
        if (contour.children.length) {
            children = this._validateAndMassagePointStructures(
                this._listOfChildren(contour),
                pointAttributesFormat1,
                /* openContourOffCurveLeniency */ true )
            this._buildOutlinePointsFormat1(pen, children)
        }
        pen.endPath();
    }

    _p._buildOutlinePointsFormat1 = function (pen, points) {
        var i = 0,
            attrs;
        for (; i<points.length; i++) {
            attrs = points[i];
            pen.addPoint(
                [attrs.x, attrs.y],
                attrs.segmentType,
                attrs.smooth,
                attrs.name
            );
        }
    }

    _p._buildOutlineComponentFormat1 = function (pen, component) {
        var baseGlyphName,
            transformation;

        if (component.children.length)
            throw new GlifLibError('Unknown child elements of component '
                + 'element.');

        // throws GlifLibError
        this._checkAttributesWhitelist(component, componentAttributesFormat1);

        if(!component.hasAttribute('base'))
            throw new GlifLibError('The base attribute is not defined '
                + 'in the component.');
        baseGlyphName = component.getAttribute('base');

        transformation = transformationInfo
            // the contents of transformatiooInfo work well as arguments
            // of _getAttribute
            .map(this._getArrayInterface(this._getAttribute), component)
            .map(this._toNumber);
        pen.addComponent(baseGlyphName, transformation);
    }

    // format 2

    /**
     * little helper
     */
    _p._processIdentifier = function (identifier, identifiers) {
        if(identifier in identifiers)
            throw new GlifLibError('The identifier "' + identifier
                + '" is used more than once.');
        else if(!identifierValidator(identifier))
            throw new GlifLibError('The identifier "' + identifier
                + '" is not valid.');
        else
            identifiers[identifier] = true;
    }

    _p._buildOutlineFormat2 = function (pen, nodes, identifiers ) {
        var anchors = [], node, i=0;
        for (; i<nodes.length; i++) {
            node = nodes[i];
             if(!this._isDOMElement(node))
                throw new GlifLibError('The outline element is not '
                    + 'properly structured.');

            if(node.tagName === 'contour')
                this._buildOutlineContourFormat2(pen, node, identifiers )
            else if(node.tagName == 'component')
                this._buildOutlineComponentFormat2(pen, node, identifiers )
            else
                throw new GlifLibError('Unknown element in outline '
                    + 'element: ' + node.tagName);
        }
    }

    _p._buildOutlineContourFormat2 = function (pen, contour, identifiers) {
        var identifier, children;

        // throws GlifLibError
        this._checkAttributesWhitelist(contour, contourAttributesFormat2);
        if (contour.hasAttribute('identifier')) {
            identifier = contour.getAttribute('identifier');
            this._processIdentifier(identifier, identifiers);
        }
        pen.beginPath({identifier:identifier});

        if (contour.children.length) {
            children = this._validateAndMassagePointStructures(
                this._listOfChildren(contour),
                pointAttributesFormat2,
                false
            );
            this._buildOutlinePointsFormat2(pen, children, identifiers);
        }
        pen.endPath()
    }

    _p._buildOutlinePointsFormat2 = function (pen, points, identifiers) {
        var i = 0,
            attrs, identifier;
        for (; i<points.length; i++) {
            attrs = points[i];

            if(attrs.identifier !== undefined) {
                identifier = attrs.identifier;
                this._processIdentifier(identifier, identifiers);
            }
            pen.addPoint(
                    [attrs.x, attrs.y],
                    attrs.segmentType,
                    attrs.smooth,
                    attrs.name,
                    {identifier: attrs.identifier}
            );
        }
    }

    _p._buildOutlineComponentFormat2 = function (pen, component, identifiers ) {
        var baseGlyphName, transformation, identifier;

        if (component.children.length)
            throw new GlifLibError('Unknown child elements of component element.')

        // throws GlifLibError
        this._checkAttributesWhitelist(component, componentAttributesFormat2);

        if(!component.hasAttribute('base'))
            throw new GlifLibError('The base attribute is not defined '
                + 'in the component.');
        baseGlyphName = component.getAttribute('base');

        transformation = transformationInfo
            // the contents of transformatiooInfo work well as arguments
            // of _getAttribute
            .map(this._getArrayInterface(this._getAttribute), component)
            .map(this._toNumber);

        if (component.hasAttribute('identifier')) {
            identifier = component.getAttribute('identifier');
            this._processIdentifier(identifier, identifiers);
        }

        try {
            pen.addComponent(baseGlyphName, transformation, {identifier:identifier});
        // HELP: where is this error supposed to be risen. I can't find a pen that does so.
        }
        catch(e) {
            // FIXME: if there is a pen that is supposed to raise this error
            // in Javascript that has to happen explicitly.
            // TypeError would be still ok to expect
            if(!(e instanceof TypeError))
                throw e;
            pen.addComponent(baseGlyphName, transformation);
            errors.warn('DEPRECATED: The addComponent method needs an '
                + 'identifier kwarg. The component\'s identifier value '
                + 'has been discarded.');
        }
    }

    // all formats

    _p._validateAndMassagePointStructures = function (
        children /* a list of DOM Elements */,
        pointAttributes /* a setlike Objekt */,
        openContourOffCurveLeniency /* default: False */
    ) {
        // store some data for later validation
        var pointTypes = [],
            resultChildren = [],
            haveOnCurvePoint = false,
            haveOffCurvePoint = false,
            i, point, resultPoint, pointType, segment,
            segmentType, offCurves, k, smooth;

        if(!children.length)
            return resultChildren;

        // validate and massage the individual point elements
        for (i=0; i<children.length; i++) {
            point = children[i];

            // not <point>
            if(point.tagName != 'point')
                throw new GlifLibError('Unknown child element ('
                    + child.tagName + ') of contour element.');

            // unknown attributes, throws GlifLibError
            this._checkAttributesWhitelist(point, pointAttributes);

            resultPoint = this._attributesDict(point);
            resultChildren.push(resultPoint);
            // search for unknown children
            if(point.children.length)
                throw new GlifLibError('Unknown child elements in point '
                    + 'element.')

            // x and y are required
            for(k in {'x':undefined, 'y':undefined}) {
                if(resultPoint[k] === undefined)
                    throw new GlifLibError('Required ' + k +' attribute is '
                        + 'missing in point element.');
                resultPoint[k] = this._toNumber(resultPoint[k]);
            }

            // segment type
            pointType = resultPoint.type;
            if(pointType === 'offcurve' || pointType === undefined)
                pointType = null
            if(pointType !== null && !(pointType in pointTypeOptions))
                throw new GlifLibError('Unknown point type: '
                    + pointType);
            resultPoint.segmentType = pointType;
            if(pointType === null)
                haveOffCurvePoint = true;
            else
                haveOnCurvePoint = true;
            pointTypes.push(pointType);

            // move can only occur as the first point
            if(pointType === 'move' && i !== 0)
                throw new GlifLibError('A move point occurs after the '
                    + 'first point in the contour.')

            // smooth is optional
            smooth = resultPoint.smooth
            if(smooth !== undefined && !(smooth in pointSmoothOptions))
                throw new GlifLibError('Unknown point smooth value: '
                        + smooth);
            resultPoint.smooth = smooth === 'yes';

            // smooth can only be applied to curve and qcurve
            // FIXME: so what about "move" and "line"?
            if(resultPoint.smooth && pointType === null)
                throw new GlifLibError('smooth attribute set in an '
                    + 'offcurve point.');
            // name is optional
            if(!('name' in resultPoint))
                resultPoint.name = null;
        }

        if(openContourOffCurveLeniency) {
            //TODO: test this openContourOffCurveLeniency (it seems to
            // be working correcly though)

            // remove offcurves that precede a move. this is technically
            // illegal, but we let it slide because there are fonts out
            // there in the wild like this.
            if(resultChildren[0].segmentType == 'move') {
                resultChildren.reverse()
                for(i=0; i<resultChildren.length; i++) {
                    if(resultChildren[i].segmentType !== null) {
                        resultChildren = resultChildren.slice(i);
                        break;
                    }
                    else if( resultChildren[i].segmentType === null) {
                        // remove the point
                        pointTypes.pop();
                    }
                }
                resultChildren.reverse();
            }
        }
        // validate the off-curves in the segments
        if(haveOffCurvePoint && haveOnCurvePoint) {
            while (pointTypes[pointTypes.length - 1] === null)
                pointTypes.unshift(pointTypes.pop());
            segment = [];
            for(i=0; i<pointTypes.length; i++) {
                pointType = pointTypes[i];
                segment.push(pointType);
                if(pointType === null)
                    continue;
                if(segment.length > 1) {
                    segmentType = segment[segment.length -1];
                    offCurves = segment.slice(0, -1);
                    // move and line can't be preceded by off-curves
                    if(segmentType === 'move')
                        // this will have been filtered out already
                        throw new GlifLibError('move can not have an '
                            + 'offcurve.');
                    else if(segmentType === 'line')
                        {
                            this._executeErrorCallback(true, 'line can not have an offcurve.');

                            // still here, try to recover.
                            resultChildren = [];
                            return resultChildren;
                        }
                    else if(segmentType === 'curve')
                        if (offCurves.length > 2) {
                            this._executeErrorCallback(true, 'Too many offcurves defined for curve.');

                            // still here, try to recover.
                            resultChildren = [];
                            return resultChildren;
                        }
                //    else if(segmentType === "qcurve")
                //        {/* pass */}
                //    else
                //        // unknown segement type. it'll be caught later.
                //        { /* pass */ }
                }
                // reset
                segment = [];
            }
        }
        return resultChildren;
    }

    return {
        fromString: _p.fromString.bind(new ReadGlyph()),
        fromDOM:    _p.fromDOM.bind(new ReadGlyph()),
        ReadGlyph:  ReadGlyph
    }
});

/**
 * Copyright (c) 2012, Lasse Fister lasse@graphicore.de, http://graphicore.de
 *
 * You should have received a copy of the MIT License along with this program.
 * If not, see http://www.opensource.org/licenses/mit-license.php
 *
 * This is a port of glifLib.GLIFPointPen defined in
 * robofab/branches/ufo3k/Lib/ufoLib/gliflib.py
 *
 */

define(
    'ufojs/ufoLib/glifLib/GLIFPointPen',[
        'ufojs/main',
        'ufojs/errors',
        'ufojs/xml/main',
        'Atem-Pen-Case/pens/AbstractPointPen',
        'ufojs/ufoLib/validators',
        'ufojs/ufoLib/constants'
    ],
    function(
        main,
        errors,
        xml,
        AbstractPointPen,
        validators,
        constants
) {
    "use strict";
    //shortcuts
    var enhance = main.enhance,
        isNumber = main.isNumber,
        assert = errors.assert,
        GlifLibError = errors.GlifLib,
        identifierValidator = validators.identifierValidator,
        transformationInfo = constants.transformationInfo;

    /*constructor*/

    /**
     * Helper class using the PointPen protocol to write the <outline>
     * part of .glif files.
     */
    function GLIFPointPen(
        element /* DOM Element*/,
        identifiers /* dict optional */,
        formatVersion /*default 2*/
        /* undefined or a dict with optional keys:
         *    precision: number of decimal places to round numbers to
         */
      , options
    ) {

        if(!(element instanceof xml.Node))
            throw new GlifLibError('Element must be an instance of xml.Node.')

        this._element = element;
        this._formatVersion = formatVersion === undefined ? 2 : formatVersion;
        this._identifiers = identifiers || {};

        this._options = options || {};

        this._document = element.ownerDocument;
        this._prevPointTypes = [];
        this._prevOffCurveCount = 0;
        this._currentPath = null;
    }

    /*inheritance*/
    GLIFPointPen.prototype = Object.create(AbstractPointPen.prototype);

    /*definition*/
    enhance(GLIFPointPen, {
        _getPrecision: function() {
            // since a precision of 0 makes totally sense: "no decimal places"
            // we use -1 to turn of rounding
            return (
                this._options.precision !== undefined
                                    && this._options.precision !== -1
                    ? this._options.precision
                    : false
            )
        }
      , get element() {
            return this._element;
        }
      , get identifiers() {
            return this._identifiers;
        }
      , get formatVersion() {
            return this._formatVersion;
        }
      , beginPath: function(kwargs /* optional, object looks for the key 'identifiers'*/) {
            kwargs = kwargs || {}

            assert(this._currentPath === null,
                'currentPath is not null, call endPath');
            this._currentPath = this._document.createElement('contour');
            if(this._checkIdentifier(kwargs.identifier))
                this._currentPath.setAttribute('identifier', kwargs.identifier);
            this._prevOffCurveCount = 0
        },
        endPath: function () {
            assert(this._currentPath !== null,
                'currentPath is null, call beginPath');

            if ( this._prevPointTypes.length
                && this._prevPointTypes[0] === 'move'
                && this._prevPointTypes.slice(-1)[0] == 'offcurve'
            )
                throw new GlifLibError('open contour has loose offcurve point');

            this._element.appendChild(this._currentPath);
            this._currentPath = null;
            this._prevOffCurveCount = 0;
            this._prevPointTypes = [];
        },
        addPoint: function(
            pt,
            segmentType /* default null */,
            smooth /* default false */,
            name /* default null */,
            kwargs /* default an object, javascript has no **kwargs syntax
                looks for the key "identifier"
            */
        ) {
            assert(this._currentPath !== null,
                'currentPath is null, call beginPath');

            segmentType = (segmentType === undefined) ? null : segmentType;
            smooth = (smooth || false);
            name = (name === undefined) ? null : name;
            kwargs = (kwargs || {});//an "options" object

            var point = this._document.createElement('point')
              , precision = this._getPrecision()
              ;

            // coordinates
            if(pt === undefined)
                throw new GlifLibError('Missing point argument');
            if(pt.filter(isNumber).length < 2)
                throw new GlifLibError('coordinates must be int or float')

            // Do any requested rounding
            if(precision !== false)
                pt = main.roundRecursive(pt, precision);

            point.setAttribute('x', pt[0]);
            point.setAttribute('y', pt[1]);

            // segment type
            if (segmentType === 'offcurve')
                segmentType = null
            else if(segmentType == 'move' && this._prevPointTypes.length)
                throw new GlifLibError('move occurs after a point has '
                    +'already been added to the contour.')
            else if(
                segmentType == 'line'
                && this._prevPointTypes.length
                && this._prevPointTypes.slice(-1)[0] === 'offcurve'
            )
                throw new GlifLibError('offcurve occurs before line point.');
            else if (segmentType === 'curve' && this._prevOffCurveCount > 2)
                throw new GlifLibError('too many offcurve points before '
                    + 'curve point.');

            if (segmentType !== null)
                point.setAttribute('type', segmentType);
            else
                segmentType = 'offcurve'

            if (segmentType === 'offcurve')
                this._prevOffCurveCount += 1;
            else
                this._prevOffCurveCount = 0;

            this._prevPointTypes.push(segmentType);

            // smooth
            if(smooth) {
                if(segmentType === 'offcurve')
                    throw new GlifLibError('can\'t set smooth in an '
                        + 'offcurve point.');
                 point.setAttribute('smooth', 'yes');
            }
            // name
            if (name !== null)
                point.setAttribute('name', name);

            // identifier
            if(this._checkIdentifier(kwargs.identifier))
                point.setAttribute('identifier', kwargs.identifier);

            this._currentPath.appendChild(point);
        },
        addComponent: function(glyphName, transformation, kwargs/*optional dict*/) {
            var component = this._document.createElement('component')
              , kwargs = kwargs || {}
              , i=0
              , attr
              , defaultVal
              , precision = this._getPrecision()
              , trans
              ;
            component.setAttribute('base', glyphName);

            // the python code was here:
            // for (attr, default), value in zip(_transformationInfo, transformation):
            // not shure if the python code is right here
            for(;i<transformationInfo.length && i<transformation.length; i++) {
                attr = transformationInfo[i][0];
                defaultVal = transformationInfo[i][1];
                if(!isNumber(transformation[i]))
                    throw new GlifLibError('transformation values must '
                        + 'be int or float');

                trans = precision !== false
                    ? main.round(transformation[i], precision)
                    : transformation[i];
                if(trans !== defaultVal)
                   component.setAttribute(attr, trans);
            }

            if(this._checkIdentifier(kwargs.identifier))
                component.setAttribute('identifier', kwargs.identifier);
            this._element.appendChild(component);
        },
        _checkIdentifier: function(identifier) {
            if(identifier === undefined || this._formatVersion < 2)
                return false;
            if(identifier in this._identifiers)
                throw new GlifLibError('identifier used more than once: '
                    + identifier);
            if(!identifierValidator(identifier))
                throw new GlifLibError('identifier not formatted properly: '
                    +  identifier);
            this._identifiers[identifier] = true;
            return true;
        }
    });

    return GLIFPointPen;
});


/**
 * Copyright (c) 2012, Lasse Fister lasse@graphicore.de, http://graphicore.de
 *
 * You should have received a copy of the MIT License along with this program.
 * If not, see http://www.opensource.org/licenses/mit-license.php
 *
 * This is a port of various functions to write a generic glyph object
 * into a glif xml defined in robofab/branches/ufo3k/Lib/ufoLib/gliflib.py
 *
 * There have been modifications from the python sources because XML is
 * treated with the DOM in here.
 */
define(
    'ufojs/ufoLib/glifLib/writeGlyph',[
        'ufojs/main',
        'ufojs/errors',
        'ufojs/xml/main',
        'ufojs/plistLib/main',
        'ufojs/ufoLib/validators',
        'ufojs/ufoLib/constants',
        './GLIFPointPen'
    ],
    function(
        main,
        errors,
        xml,
        plistLib,
        validators,
        constants,
        GLIFPointPen
) {
    "use strict";
    var GlifLibError = errors.GlifLib,
        isNumber = main.isNumber,
        isInt = main.isInt,
        imageValidator = validators.imageValidator,
        guidelinesValidator = validators.guidelinesValidator,
        anchorsValidator =  validators.anchorsValidator,
        glyphLibValidator = validators.glyphLibValidator,
        transformationInfo = constants.transformationInfo;

    /**
     * Return .glif data for a glyph as a UTF-8 encoded string.
     * The 'glyphObject' argument can be any kind of object (even None);
     * the writeGlyphToString() method will attempt to get the following
     * attributes from it:
     *     "width"      the advance width of the glyph
     *     "height"     the advance height of the glyph
     *     "unicodes"   a list of unicode values for this glyph
     *     "note"       a string
     *     "lib"        a dictionary containing custom data
     *     "image"      a dictionary containing image data
     *     "guidelines" a list of guideline data dictionaries
     *     "anchors"    a list of anchor data dictionaries
     *
     * All attributes are optional: if 'glyphObject' doesn't
     * have the attribute, it will simply be skipped.
     *
     * To write outline data to the .glif file, writeGlyphToString() needs
     * a function (any callable object actually) that will take one
     * argument: an object that conforms to the PointPen protocol.
     * The function will be called by writeGlyphToString(); it has to call the
     * proper PointPen methods to transfer the outline to the .glif file.
     *
     * The GLIF format version can be specified with the formatVersion argument.
     */
    function writeGlyphToString (
        glyphName
      , glyphObject /* default = undefined */
      , drawPointsFunc /* default = undefined */
        // the writer argument is not supported yet, here is no such concept
        /* writer default = undefined */
      , formatVersion /* default = 2 */
        /* undefined or a dict with optional keys:
         *    precision: number of decimal places to round numbers to
         */
      , options
    ) {
        var args = Array.prototype.slice.call(arguments)
          , doc = writeGlyphToDOM.apply(undefined, args)
          ;
        return xml.toString(doc);
    }

    function writeGlyphToDOM (
        glyphName
      , glyphObject /* default = undefined */
      , drawPointsFunc /* default = undefined */
        // the writer argument is not supported yet, here is no such concept
        /* writer default = undefined */
      , formatVersion /* default = 2 */
        /* undefined or a dict with optional keys:
         *    precision: number of decimal places to round numbers to
         */
      , options
    ) {
        var identifiers = {},
            doc,
            glyphElement,
            needOutline,
            outlineElement,
            pen;

        // we could also raise an exception on this one, but the docstring
        // says glyphObject is optional
        glyphObject = glyphObject || {}

        options = options || {}

        // start
        if(typeof glyphName !== 'string' && !(glyphName instanceof String))
            throw new GlifLibError('The glyph name is not properly formatted.')
        if(glyphName.length === 0)
            throw new GlifLibError('The glyph name is empty.');

        if(formatVersion === undefined)
            formatVersion = 2;

        doc = xml.createDocument(null, 'glyph', null);
        glyphElement = doc.documentElement;

        glyphElement.setAttribute('name', glyphName);
        glyphElement.setAttribute('format', formatVersion);

        // advance
        glyphElement.appendChild(_writeAdvance(glyphObject, doc, options))

        // unicodes
        if(glyphObject.unicodes !== undefined)
            glyphElement.appendChild(_writeUnicodes(glyphObject.unicodes, doc));

        // note
        if(glyphObject.note !== undefined)
            glyphElement.appendChild(_writeNote(glyphObject.note, doc));

        // image
        if(formatVersion >= 2 && glyphObject.image !== undefined)
            glyphElement.appendChild(_writeImage(glyphObject.image, doc,
                                     options));

        // guidelines
        if(formatVersion >= 2 && glyphObject.guidelines !== undefined)
            glyphElement.appendChild(
                _writeGuidelines(glyphObject.guidelines, doc, identifiers,
                                 options)
            );

        // anchors
        if(formatVersion >= 2  &&  glyphObject.anchors !== undefined)
            glyphElement.appendChild(
                _writeAnchors(glyphObject.anchors, doc, identifiers, options)
            );

        // outline
        needOutline = drawPointsFunc
            || formatVersion == 1 && glyphObject.anchors !== undefined;
        if(needOutline) {
            outlineElement = doc.createElement('outline');
            pen = new GLIFPointPen(outlineElement, identifiers, formatVersion, options);

            if(drawPointsFunc)
                drawPointsFunc(pen);
            if(formatVersion == 1 && glyphObject.anchors !== undefined)
                _writeAnchorsFormat1(pen, glyphObject.anchors);
            glyphElement.appendChild(outlineElement);
        }

        // lib
        if(glyphObject.lib !== undefined)
            glyphElement.appendChild(_writeLib(glyphObject.lib, doc));

        return doc;
    }

    /**
     *  a little helper
     */
    function _setAttributes(dict) {
        for(var k in dict)
            this.setAttribute(k, dict[k]);
    }

    /**
     * Round to 'precision' number decimal places.
     *
     * Since a precision of 0 makes totally sense: "no decimal places"
     * we use -1 to turn of rounding
     */
    function _round(precision, value) {
        if(precision === undefined || precision === -1)
            return value;
        return main.round(value, precision);
    }

    function _writeAdvance(glyphObject, document, options) {
        var keys = { width: undefined, height: undefined }
          , fragment = document.createDocumentFragment()
          , advanceElement = document.createElement('advance')
          , k, val
          ;
        for(k in keys) {
            val = glyphObject[k];
            if(val === undefined || val === 0)
                continue;
            if(!isNumber(val))
                throw new GlifLibError(k + ' attribute must be int or float');
            val = _round(options.precision, val)
            advanceElement.setAttribute(k, val)
        }
        if(advanceElement.attributes.length)
            fragment.appendChild(advanceElement);
        return fragment;
    }

    function _writeUnicodes(unicodes, document) {
        var seen = {}, // like a set
            i = 0,
            code,
            tag,
            hexCode,
            fragment = document.createDocumentFragment();
        // in my opinion unicodes should always be a list, an int would
        // be an error
        if (isInt(unicodes))
            unicodes = [unicodes];

        for(; i<unicodes.length; i++) {
            code = unicodes[i];
            if(!isInt(code))
                throw new GlifLibError('unicode values must be int');
            if(code in seen)
                continue;
            seen[code] = null;
            hexCode = code.toString(16).toUpperCase();
            if(hexCode.length < 4)
                hexCode = ['0', '0', '0', '0', hexCode]
                    .slice(hexCode.length)
                    .join('');
            tag = document.createElement('unicode');
            tag.setAttribute('hex', hexCode);
            fragment.appendChild(tag);
        }
        return fragment;
    }

    function _writeNote(note, document) {
        var noteElement;

        if(typeof note !== 'string')
            throw new GlifLibError('note attribute must be string');

        note = note.split('\n')// array
            .map(function(str){return str.trim();}) // array
            .join('\n'); // string

        noteElement = document.createElement('note');
        noteElement.appendChild(document.createTextNode(note));
        return noteElement;
    }

    function _writeImage(image, document, options) {
        var i=0,
            attr, defaultVal, imageElement, val;

        if(!imageValidator(image))
            throw new GlifLibError('image attribute must be a dict or '
                + 'dict-like object with the proper structure.');

        imageElement = document.createElement('image');
        imageElement.setAttribute('fileName', image.fileName);

        for(; i<transformationInfo.length; i++) {
            attr = transformationInfo[i][0];
            defaultVal = transformationInfo[i][1];
            val = image[attr];
            if(val === undefined) continue;
            val = _round(options.precision, val)
            if(val !== defaultVal)
                imageElement.setAttribute(attr, val);
        }

        if(image.color !== undefined)
            imageElement.setAttribute('color', image.color);

        return imageElement;
    }

    function _writeGuideline(data, document, options) {
        var guidelineElement = document.createElement('guideline')
          , roundAttributes = {'x': null, 'y': null, 'angle': null}
          , k
          , val
          ;
        // 'x', 'y', 'angle', 'name', 'color', 'identifier'
        for(k in data) {
            val = data[k];
            if(k in roundAttributes)
                val = _round(options.precision, val);
            guidelineElement.setAttribute(k, val);
        }
        return guidelineElement;
    }

    function _writeGuidelines(guidelines, document, identifiers, options) {
        var i=0
          , fragment
          ;
        if(!guidelinesValidator(guidelines, identifiers))
            throw new GlifLibError('guidelines attribute does not have '
                + 'the proper structure.');
        fragment = document.createDocumentFragment();
        for (; i<guidelines.length; i++)
            fragment.appendChild(
                    _writeGuideline(guidelines[i], document, options));
        return fragment;
    }

    function _writeAnchorsFormat1(pen, anchors) {
        var i = 0,
            anchor;
        if(!anchorsValidator(anchors))
            throw new GlifLibError('anchors attribute does not have the '
                + 'proper structure.');
        for(; i<anchors.length; i++) {
            anchor = anchors[i];
            pen.beginPath()
            pen.addPoint([anchor.x, anchor.y], "move", false, anchor.name);
            pen.endPath()
        }
    }

    function _writeAnchor(data, document, options) {
        var anchorElement = document.createElement('anchor')
          , roundAttributes = {'x': null, 'y': null}
          , k
          , val
          ;
        for(k in data) {
            val = data[k];
            if(k in roundAttributes)
                val = _round(options.preciosion, val);
            anchorElement.setAttribute(k, val);
        }
        return anchorElement;
    }

    function _writeAnchors(anchors, document, identifiers, options) {
        var i=0, fragment;
        if(!anchorsValidator(anchors, identifiers))
            throw new GlifLibError('anchors attribute does not have the '
                + 'proper structure.');

        fragment = document.createDocumentFragment();
        for (; i<anchors.length; i++)
            fragment.appendChild(_writeAnchor(anchors[i], document, options))
        return fragment;
    }

    function _writeLib(lib, document) {
        var validation, libElement;

        validation = glyphLibValidator(lib);
        if(!validation[0])
            throw new GlifLibError(validation[1]);
        libElement = document.createElement('lib');
        libElement.appendChild(
            plistLib.createPlistElement(document, lib)
        );
        return libElement;
    }

    return {
        toString: writeGlyphToString,
        toDOM: writeGlyphToDOM
    }
});


/**
 * Copyright (c) 2012, Lasse Fister lasse@graphicore.de, http://graphicore.de
 * 
 * You should have received a copy of the MIT License along with this program.
 * If not, see http://www.opensource.org/licenses/mit-license.php
 * 
 * This is a port of various functions for "rapid value fetching" defined in
 * robofab/branches/ufo3k/Lib/ufoLib/gliflib.py
 * 
 * it uses XPATH and DOM Documents, so its very different to the python
 * code.
 */
define(
    'ufojs/ufoLib/glifLib/rapidValueFetching',[
    'ufojs/main',
    'ufojs/xml/main'
    ],
    function(
        main,
        xml
) {
    "use strict";
    
    var evaluateXPath = xml.evaluateXPath;
    
    function _getAttributeValue(attribute) {
        return attribute.value;
    }
    
    var x_unicodes = '/glyph/unicode/@hex'
      , x_components = '/glyph/outline[1]/component/@base'
        // NOTE: jsdom of nodejs converts the search attribute name fileName to
        // lowercase and matches only lowercase "filename" not "fileName"
        // in the document!
        // unless this is fixed we do a workaround here
      , x_image_fileName = '/glyph/image[1]/@fileName' // <= not workin with js DOM
      , x_image = '/glyph/image[1]'
      ;
    
    /**
     * Get a list of unicodes listed in glif
     */
    function fetchUnicodes(doc) {
        var results = evaluateXPath(doc, x_unicodes).map(_getAttributeValue),
            unicodes = { dict: {}, list: [] },
            i = 0,
            v;
        for(; i<results.length; i++) {
            v = parseInt(results[i], 16);
            if(!isFinite(v) || v in unicodes.dict) continue;
            unicodes.dict[v] = true;
            unicodes.list.push(v);
        }
        return unicodes.list;
    }
    
    /**
     * The image file name (if any) from glif.
     */
    function fetchImageFileName(doc) {
        return evaluateXPath(doc, x_image)
        .filter(function(elem){ return elem.hasAttribute('fileName'); })
        .map(function(elem){ return elem.getAttribute('fileName'); })
    }
    
    /**
     * Get a list of component base glyphs listed in glif.
     */
    function fetchComponentBases(doc) {
        return evaluateXPath(doc, x_components).map(_getAttributeValue);
    }
    
    return {
        fetchUnicodes: fetchUnicodes,
        fetchImageFileName: fetchImageFileName,
        fetchComponentBases: fetchComponentBases
    }
});

/**
 * Copyright (c) 2012,2014 Lasse Fister lasse@graphicore.de, http://graphicore.de
 *
 * You should have received a copy of the MIT License along with this program.
 * If not, see http://www.opensource.org/licenses/mit-license.php
 *
 * This is a port of glifLib.Glyph defined in robofab/branches/ufo3k/Lib/ufoLib/gliflib.py
 *
 * Modifications were made in order to use DOM Methods with the glifs.
 * Because there is no native SAX parser in the Browser, we parse the glifs
 * completely, not just partly on some operations as the Python
 * implementation does.
 *
 * added a method:
 *     getGLIFDocumnet
 *
 * The file reading/writing methods use the io module to abstract file writing.
 * TODO: use dependency injection to set up I/O on a per-GlyphSet-instance
 * basis.
 *
 * I implemented all otherwise blocking methods using obtainJS to provide
 * a switch beteween synchronous/asynchronous execution. See obtainJS for
 * details.
 *
 */


 /**
  * GlyphSet manages a set of .glif files inside one directory.
  *
  * GlyphSet's constructor takes a path to an existing directory as its
  * first argument. Reading glyph data can either be done through the
  * readGlyph() method, or by using GlyphSet's dictionary interface, where
  * the keys are glyph names and the values are (very) simple glyph objects.
  *
  * Use Glyphset.factory to create a ready to use instance! Or, invoke
  * glyphSet.rebuildContents after using the constructor directly. This
  * is a restriction to enable an asynchronous API.
  *
  * To write a glyph to the glyph set, you use the writeGlyph() method.
  * The simple glyph objects returned through the dict interface do not
  * support writing, they are just a convenient way to get at the glyph data.
  */
define(
    'ufojs/ufoLib/glifLib/GlyphSet',[
        'ufojs/main'
      , 'ufojs/errors'
      , 'Atem-IO/errors'
      , 'obtain/obtain'
      , 'ufojs/xml/main'
      , 'ufojs/plistLib/main'
      , 'ufojs/ufoLib/constants'
      , './misc'
      , './Glyph'
      , './readGlyph'
      , './writeGlyph'
      , './rapidValueFetching'

    ],
    function(
        main
      , errors
      , ioErrors
      , obtain
      , xml
      , plistLib
      , constants
      , misc
      , Glyph
      , readGlyph
      , writeGlyph
      , rapidValueFetching
) {
    "use strict";
    /*globals setTimeout:true*/

    var GlifLibError = errors.GlifLib
      , KeyError = errors.Key
      , IONoEntryError = ioErrors.IONoEntry
      , glyphNameToFileName = misc.glyphNameToFileName
      , layerInfoVersion3ValueData = misc.layerInfoVersion3ValueData
      , validateLayerInfoVersion3Data = misc.validateLayerInfoVersion3Data
      , readPlistFromString = plistLib.readPlistFromString
      , writePlistToString = plistLib.createPlistString
      , fetchUnicodes = rapidValueFetching.fetchUnicodes
      , fetchImageFileName = rapidValueFetching.fetchImageFileName
      , fetchComponentBases = rapidValueFetching.fetchComponentBases
        // This are wrappers that enable us to use io functions
        // with less hassle in an obtain.factory context
        // note that the host object must provide an I/O module itself _io
        // Todo: think about common an useful mixins!
      , _writeFile = obtain.factory(
            {
                write: ['path', 'data', function(path, data) {
                    return this._io.writeFile(false, path, data);
                }]
            }
          , {
                write: ['path', 'data', function(path, data){
                    return this._io.writeFile(true, path, data);
                }]
            }
          , ['path', 'data']
          , function(obtain){ return obtain('write'); }
        )
      , _unlink = obtain.factory(
            {
                unlink: ['path', function(path) {
                    return this._io.unlink(false, path);
                }]
            }
          , {
                unlink: ['path', function(path) {
                    return this._io.unlink(true, path);
                }]
            }
          , ['path']
          , function(obtain){ return obtain('unlink'); }
        )

        // internal methods

        /**
         * reads a plist from path synchronously or asynchronously
         * using obtainJS for the switch.
         */
      , _readPlist = obtain.factory(
          {
              // a constructor for a lib of shared methods
              // this is a bit hackish, should maybe become formalized
              lib: [function() {
                  return {
                      makeError: function(error, path) {
                          if(error instanceof IONoEntryError)
                              return error;
                          return new GlifLibError(
                              ['The file "', path ,'" could not be read.('
                              , error.message,')'].join(''), error.stack);
                      }
                  };
              }]
            , plist: ['plistString', 'path', 'lib',
              function(string, path, lib) {
                  try {
                      return readPlistFromString(string);
                  } catch(e) {
                      throw lib.makeError(e, path);
                  }
              }]
            , plistString: ['path', 'lib', function(path, lib) {
                  try {
                      return this._io.readFile(false, path);
                  } catch(e) {
                      throw lib.makeError(e, path);
                  }
              }]
          }
        , {
              plistString: ['path', 'lib', '_callback', '_errback',
              function(path, lib, callback, errback)
              {
                  this._io.readFile(true, path)
                      .then(callback, function(error) {
                          errback(lib.makeError(error, path));
                      });
              }]
          }
        , ['path']
        , function(obtain) {return obtain('plist');}
      );

    // ---------
    // Glyph Set
    // ---------

    /**
     * 'dirName' should be a path to an existing directory.
     * The optional 'glyphNameToFileNameFunc' argument must be a callback
     * function that takes two arguments: a glyph name and the GlyphSet
     * instance. It should return a file name (including the .glif
     * extension). The glyphNameToFileName function is called whenever
     * a file name is created for a given glyph name.
     */
    function GlyphSet(
        /* The IO module to use is dependency injected, because we need
         * greater flexibility than a static io module can provide. For
         * one point for testing, the other point is that we can easily
         * adapt our persistency mechanism to all needs
         */
        io,
        dirName,
        glyphNameToFileNameFunc /* undefined */,
        ufoFormatVersion /* 3 */,
        options /* object default undefined,
                   optional, readErrorCallback: see readGlyph/ReadGlyph
                */
    ) {
        if(io === undefined)
            throw new GlifLibError('GlyphSet I/O module missing');
        this._io = io;
        this._options = options || {};
        this._glyphReader = new readGlyph.ReadGlyph(this._options.readErrorCallback);

        if(dirName === undefined)
            throw new GlifLibError('GlyphSet: dirName is missing');
        this.dirName = dirName;

        ufoFormatVersion = (ufoFormatVersion !== undefined)
                ? ufoFormatVersion
                : 3;
        if(!(ufoFormatVersion in constants.supportedUFOFormatVersions))
            throw new GlifLibError("Unsupported UFO format version: "
                                    + ufoFormatVersion);
        this.ufoFormatVersion = ufoFormatVersion;
        this.glyphNameToFileName = (glyphNameToFileNameFunc !== undefined)
                ? glyphNameToFileNameFunc
                : glyphNameToFileName;

        this.contents = undefined;
        this._reverseContents = undefined;
        this._glifCache = {};


        // because of the async/sync switch we run this externally
        // use GlyphSet.factory for a one call solution
        // this.rebuildContents();
    }

    GlyphSet.factory = obtain.factory(
        {
            instance: ['io', 'dirName', 'glyphNameToFileNameFunc', 'ufoFormatVersion', 'options',
                function(i, d, g, u, o) { return new GlyphSet(i, d, g, u, o); }]
          , init: ['instance', function(instance) {
                                    instance.rebuildContents(false);}]
        }
      , {
            init: ['instance', function(instance) {
                                    // returns a promise
                                    return instance.rebuildContents(true);}]
        }
      , ['io', 'dirName', 'glyphNameToFileNameFunc', 'ufoFormatVersion','options']
      , function(obtain) {
            obtain('init');
            return obtain('instance');
        }
    );

    var _p = GlyphSet.prototype;
    _p.constructor = GlyphSet;


    _p.GlyphClass = Glyph;

    _p._writeFile = _writeFile;
    _p._unlink = _unlink;

    _p._readPlist = _readPlist;

    /**
     * Rebuild the contents dict by loading contents.plist.
     */

    _p.rebuildContents = obtain.factory(
        {
            contentsPath: [function() {
                return [this.dirName, 'contents.plist'].join('/');
            }]
          , contentsPlist: ['contentsPath', function(contentsPath) {
                try {
                    return this._readPlist(false, contentsPath);
                }
                catch(e) {
                    if(e instanceof IONoEntryError)
                        // missing, consider the glyphset empty.
                        return {};
                    throw e;
                }
            }]
          , filePaths: ['contentsPlist', function(contents) {
                if( plistLib.getType(contents) !== 'dict' )
                    throw new GlifLibError('contents.plist is not properly '
                        + 'formatted');
                var name
                  , fileName
                  , paths = []
                  ;

                for(name in contents) {
                    fileName = contents[name];
                    // name is always string
                    if(typeof fileName !== 'string')
                        throw new GlifLibError('contents.plist is not '
                            + 'properly formatted the value at "' + name
                            + '" is not string but:'+ typeof fileName);
                    paths.push([this.dirName, fileName].join('/'));
                }
                return paths;
            }]
          , validContents: ['contentsPlist', 'filePaths',
            function(contentsPlist, filePaths) {
                var i=0;
                for(;i<filePaths.length; i++)
                    if(!this._io.pathExists(false, filePaths[i]))
                        throw new GlifLibError('contents.plist references a '
                        + 'file that does not exist: ' + filePaths[i]);
                return contentsPlist;
            }]
        }
      , {
            contentsPlist: ['contentsPath', function(contentsPath) {
                function onError(e){
                    if(e instanceof IONoEntryError)
                        // missing, consider the glyphset empty.
                        return {};
                    throw e;
                }

                return this._readPlist(true, contentsPath)
                           .then(null, onError);
            }]
          , validContents: ['contentsPlist', 'filePaths', '_callback',
                            '_errback',
            function(contentsPlist, filePaths, callback, errback) {
                var i = 0
                    // we'll use this to determine if the test passed
                  , requested = 0
                  , failed = false // ioCallback will change this
                  , ioCallback = function(path, exists) {
                        requested -= 1;
                        // if it failed once we won't have to use the
                        // callbacks anymore, although it may be an option
                        // to write this to the logs in the future
                        if(failed)
                            return;
                        if(!exists) {
                            failed = true;
                            errback(new GlifLibError('contents.plist '
                                + 'references a file that does not exist: '
                                + path));
                            return;
                        }
                        if(requested === 0) {
                            // all requested files where found
                            callback(contentsPlist);
                        }
                    }
                ;
                // if there was no filePath
                if(filePaths.length === 0) {
                    setTimeout(function(){callback(contentsPlist);}, 0);
                    return;
                }
                // we just fire all now. the idea is that the io module
                // will have to throttle stuff like this in the future
                // (and should provide an api to cancel the already fired
                // requests, when possible)
                for(;i<filePaths.length; i++) {
                    requested += 1;
                    this._io.pathExists(true, filePaths[i])
                        .then(ioCallback.bind(null, filePaths[i]));
                }
            }]
        }
      , []
      , function(obtain) {
            this.contents = obtain('validContents');
            this._reverseContents = undefined;
        }
    );
    /**
     * Return a reversed dict of self.contents, mapping file names to
     * glyph names. This is primarily an aid for custom glyph name to file
     * name schemes that want to make sure they don't generate duplicate
     * file names. The file names are converted to lowercase so we can
     * reliably check for duplicates that only differ in case, which is
     * important for case-insensitive file systems.
     */
    _p.getReverseContents = function() {
        if(this._reverseContents === undefined){
            var d = {}, k;
            for(k in this.contents)
                d[this.contents[k].toLowerCase()] = k;
            this._reverseContents = d;
        }
        return this._reverseContents;
    };
    /**
     * Write the contents.plist file out to disk. Call this method when
     * you're done writing glyphs.
     */
    _p.writeContents = obtain.factory(
        {
            path: [function(){return [this.dirName, 'contents.plist'].join('/');}]
          , data: [function(){return writePlistToString(this.contents);}]
          , write: [false, 'path', 'data', _p._writeFile]
        }
      , {
            write: [true, 'path', 'data', _p._writeFile]
        }
      , []
      , function(obtain) { return obtain('write'); }
    );

    /**
     * layer info
     * read the layerinfo.plist and set its values to the info object
     * info object is the only argument of this method
     *
     * obtainJS sync/async api.
     */
    _p.readLayerInfo = obtain.factory(
        {
            path: [function() {
                return [this.dirName, constants.LAYERINFO_FILENAME].join('/');
            }]
          , infoDict: ['path', function(path) {
                var result;
                try {
                    result = this._readPlist(false, path);
                }
                catch(error){
                    if(error instanceof IONoEntryError)
                        return [false, undefined];
                    throw error;
                }
                return [true, result];
            }]

        }
      , {
            infoDict: ['path', '_callback', '_errback',
            function(path, callback, errback) {
                this._readPlist(true, path)
                .then(
                    function(result){callback([true, result]);}
                  , function(error) {
                        if(error instanceof IONoEntryError)
                            callback([false, undefined]);
                        else
                            errback(error);
                    }
                );
            }]

        }
      , ['info']
      , function(obtain, info) {
            var infoDict = obtain('infoDict')
              , attr
              ;
            if(infoDict[0] === false)
                return info;
            if(plistLib.getType(infoDict[1])  !== 'dict')
                throw new GlifLibError('layerinfo.plist is not properly formatted.');
            infoDict = validateLayerInfoVersion3Data(infoDict[1]);
            for (attr in infoDict)
                info[attr] = infoDict[attr];
            // I can't imagine the equivalent exception in javaScript
            // and we do not have a setattribute function
            // maybe the caller should check the attributes of info
            // value = infoDict[attr];
            // try:
            //     setattr(info, attr, value)
            // except AttributeError:
            //     raise GlifLibError("The supplied layer info object does not support setting a necessary attribute (%s)." % attr)
            return info;
        }
    );
    /**
     * write the contents of the info argument to a string and return it
     */
    _p.writeLayerInfoToString = function(info) {
        if(this.ufoFormatVersion < 3)
            throw new GlifLibError('layerinfo.plist is not allowed in UFO '
                + this.ufoFormatVersion + '.');
        // gather data
        var infoData = {}, attr;
        for (attr in layerInfoVersion3ValueData){
            if(!(attr in info) || info[attr] === undefined)
                continue;
            infoData[attr] = info[attr];
        }

        // validate
        infoData = validateLayerInfoVersion3Data(infoData);
        return writePlistToString(infoData);
    };
    /**
     * write the contents of the info argument to LAYERINFO_FILENAME
     * writing to files is not implemented yet
     */
    _p.writeLayerInfo = obtain.factory(
        {
            data: ['info', _p.writeLayerInfoToString]
          , path: [function()
            {
                return [this.dirName, constants.LAYERINFO_FILENAME]
                        .join('/');
            }]
          , write: [false, 'path', 'data', _p._writeFile]
        }
      , {
            write: [true, 'path', 'data', _p._writeFile]
        }
      , ['info']
      , function(obtain) { return obtain('write'); }
    );

    /**
     * Read the glif from I/O and cache it. Return a reference to the
     * cache object: [text, mtime, glifDocument(if alredy build by this.getGLIFDocument)]
     *
     * Has the obtainJS sync/async api.
     *
     * Does something with mtimes to check if the cache needs invalidation.
     * I'm not shure whether its a good idea to implement this with all
     * the calls to mtime, but its done.
     */
    _p._getGLIFcache =  obtain.factory(
        { //sync
            fileName: ['glyphName', function fileName(glyphName) {
                if(!(glyphName in this.contents) || this.contents[glyphName] === undefined)
                    throw new KeyError(glyphName);
                return this.contents[glyphName];
            }]
          , glyphNameInCache: ['glyphName', function(glyphName) {
                return glyphName in this._glifCache;
            }]
          , path: ['fileName', function(fileName) {
                return [this.dirName, fileName].join('/');
            }]
          , mtime: ['path', 'glyphName', function(path, glyphName) {
                try {
                    return this._io.getMtime(false, path);
                }
                catch(error) {
                    if(error instanceof IONoEntryError)
                        throw new KeyError(glyphName, error.stack);
                    throw error;
                }
            }]
          , text: ['path', 'glyphName', function(path, glyphName) {
                try {
                    return this._io.readFile(false, path);
                }
                catch(error) {
                    if(error instanceof IONoEntryError)
                        throw new KeyError(glyphName, error.stack);
                    throw error;
                }
            }]
          , refreshedCache: ['glyphName', 'text', 'mtime',
            function(glyphName, text, mtime) {
                return (this._glifCache[glyphName] = [text, mtime]);
            }]
        }
        //async getters
      , {
            mtime: ['path', 'glyphName', '_callback',
            function(path, glyphName, callback) {
                var _callback = function(error, result){
                    if(error instanceof IONoEntryError)
                        error = new KeyError(glyphName, error.stack);
                    callback(error, result);
                };
                this._io.getMtime({unified: _callback}, path);
            }]
          , text: ['path', 'glyphName', '_callback',
            function(path, glyphName, callback){
                var _callback = function(error, result) {
                    if(error instanceof IONoEntryError)
                        error = new KeyError(glyphName, error.stack);
                    callback(error, result);
                };
                this._io.readFile({unified: _callback}, path);
            }
          ]
        }
        , ['glyphName']
        , function job(obtain, glyphName) {
            if(obtain('glyphNameInCache')) {
                if(obtain('mtime').getTime() === this._glifCache[glyphName][1].getTime()) {
                    // cache is fresh
                    return this._glifCache[glyphName];
                }
            }
            // still here? need read!
            // refreshing the cache:
            obtain('refreshedCache');
            return this._glifCache[glyphName];
        }
    );

    /**
     * This uses synchronous and asynchronous IO
     *
     * The python docstring reads:
     * Get the raw GLIF text for a given glyph name. This only works
     * for GLIF files that are already on disk.
     *
     * This method is useful in situations when the raw XML needs to be
     * read from a glyph set for a particular glyph before fully parsing
     * it into an object structure via the readGlyph method.
     *
     * Internally, this method will load a GLIF the first time it is
     * called and then cache it. The next time this method is called
     * the GLIF will be pulled from the cache if the file's modification
     * time has not changed since the GLIF was cached. For memory
     * efficiency, the cached GLIF will be purged by various other methods
     * such as readGlyph.
     */
    _p.getGLIF = obtain.factory(
        {cache:[false, 'glyphName', _p._getGLIFcache]}
      , {cache:[true, 'glyphName', _p._getGLIFcache]}
      , ['glyphName']
      , function(obtain) {
            return obtain('cache')[0];
        }
     );
    _p.getGLIFDocument = obtain.factory(
        {cache: [false, 'glyphName', _p._getGLIFcache]}
      , {cache: [true, 'glyphName', _p._getGLIFcache]}
      , ['glyphName']
      , function(obtain) {
            var cache = obtain('cache');
            if(cache[2] === undefined)
                cache[2] = xml.parseXMLString(cache[0]);
            return cache[2];
        }
    );
    /**
     * used for convinience with the getUnicodes etc. methods
     */
    _p._getGLIFDocuments = obtain.factory(
        {
            glyphNames: ['requested', function(requested) {
                if(requested !== undefined)
                    return main.setLike(requested);
                return  this.contents;
            }]
          , docs: ['glyphNames', function(glyphNames) {
                var name
                  , docs = {}
                  ;
                for(name in glyphNames)
                    docs[name] = this.getGLIFDocument(false, name);
                return docs;
            }]
        }
      , {
            docs: ['glyphNames', '_callback', '_errback',
            function(glyphNames, callback, errback) {
                var name
                  , docs = {}
                  , failed = false
                  , requested = 0
                  , ioCallback = function(boundName, error, result) {
                        requested -= 1;
                        // if it failed once we won't have to use the
                        // callbacks anymore, although it may be an
                        // option to write this to the logs in the future
                        if(failed)
                            return;
                        if(error) {
                            failed = true;
                            errback(error);
                            return;
                        }
                        docs[boundName] = result;
                        if(requested === 0)
                            // all requested files where found
                            callback(docs);
                    }
                  ;
                // we just fire all now. the idea is that the io module
                // will have to throttle stuff like this in the future
                // (and should provide an api to cancel the already fired
                // requests, when possible)
                for(name in glyphNames) {
                    requested += 1;
                    this.getGLIFDocument(
                        {unified:ioCallback.bind(null, name)}, name);
                }
                // if there was no glyphName
                if(requested === 0)
                    setTimeout(function(){callback(docs);}, 0);
            }]
        }
      , ['requested']
      , function(obtain){return obtain('docs');}
    );
    /**
     * Get the modification time (as reported by os.path.getmtime)
     * of the GLIF with glyphName.
     */
    _p.getGLIFModificationTime = obtain.factory(
        {cache: [false, 'glyphName', _p._getGLIFcache]}
      , {cache: [true, 'glyphName', _p._getGLIFcache]}
      , ['glyphName']
      , function(obtain) {
            return obtain('cache')[1];
    });
    _p._purgeCachedGLIF = function(glyphName) {
        if(glyphName in this._glifCache)
            delete this._glifCache[glyphName];
    };
    // reading/writing API
    /**
     * Read a .glif file for 'glyphName' from the glyph set. The
     * 'glyphObject' argument can be any kind of object (even None);
     * the readGlyph() method will attempt to set the following
     * attributes on it:
     *     "width"      the advance with of the glyph
     *     "height"     the advance height of the glyph
     *     "unicodes"   a list of unicode values for this glyph
     *     "note"       a string
     *     "lib"        a dictionary containing custom data
     *     "image"      a dictionary containing image data
     *     "guidelines" a list of guideline data dictionaries
     *
     * All attributes are optional, in two ways:
     *     1) An attribute *won't* be set if the .glif file doesn't
     *     contain data for it. 'glyphObject' will have to deal
     *     with default values itself.
     *     2) If setting the attribute fails with an AttributeError
     *     (for example if the 'glyphObject' attribute is read-
     *     only), readGlyph() will not propagate that exception,
     *     but ignore that attribute.
     *
     * To retrieve outline information, you need to pass an object
     * conforming to the PointPen protocol as the 'pointPen' argument.
     * This argument may be None if you don't need the outline data.
     *
     * readGlyph() will raise KeyError if the glyph is not present in
     * the glyph set.
     */
    _p.readGlyph = obtain.factory(
        {glifDoc:[false, 'glyphName', _p.getGLIFDocument]}
      , {glifDoc:[true, 'glyphName', _p.getGLIFDocument]}
      , ['glyphName', 'glyphObject', 'pointPen']
      , function(obtain, glyphName, glyphObject/* undefined */,
                 pointPen/* undefined */)
        {
            var glifDoc, formatVersions;
            glifDoc = obtain('glifDoc');
            // purging the cache seems not always desireable
            // I wish here was more control over this.
            this._purgeCachedGLIF(glyphName);
            formatVersions = this.ufoFormatVersion < 3
                    ? [1]
                    : [1, 2];

            this._glyphReader.fromDOM(glifDoc, glyphObject, pointPen, formatVersions);
            return glyphObject;
        }
    );

    /**
     * Write a .glif file for 'glyphName' to the glyph set. The
     * 'glyphObject' argument can be any kind of object (even None);
     * the writeGlyph() method will attempt to get the following
     * attributes from it:
     *     "width"      the advance with of the glyph
     *     "height"     the advance height of the glyph
     *     "unicodes"   a list of unicode values for this glyph
     *     "note"       a string
     *     "lib"        a dictionary containing custom data
     *     "image"      a dictionary containing image data
     *     "guidelines" a list of guideline data dictionaries
     *
     * All attributes are optional: if 'glyphObject' doesn't
     * have the attribute, it will simply be skipped.
     *
     * To write outline data to the .glif file, writeGlyph() needs
     * a function (any callable object actually) that will take one
     * argument: an object that conforms to the PointPen protocol.
     * The function will be called by writeGlyph(); it has to call the
     * proper PointPen methods to transfer the outline to the .glif file.
     *
     * The GLIF format version will be chosen based on the ufoFormatVersion
     * passed during the creation of this object. If a particular format
     * version is desired, it can be passed with the formatVersion argument.
     *
     * Exposes an obtainJS sync/async API
     *
     * @obtainAPI: sync/async switch
     * @glyphName: string
     * @glyphObject: object|undefined
     * @drawPointsFunc: function|undefined
     * @formatVersion: int|undefined
     */
    _p.writeGlyph = obtain.factory(
        {
            checkedFormatVersion: ['formatVersion',
            function(formatVersion) {
                if(formatVersion === undefined) {
                    if(this.ufoFormatVersion >= 3)
                        return 2;
                    return 1;
                }
                if(!(formatVersion in constants.supportedGLIFFormatVersions))
                    throw new GlifLibError('Unsupported GLIF format version: '
                        + formatVersion);
                if(formatVersion == 2 && this.ufoFormatVersion < 3)
                    throw new GlifLibError('Unsupported GLIF format version ('
                        + formatVersion + ') for UFO format version '
                        + this.ufoFormatVersion + '.');
                return formatVersion;
            }]
          , data: ['glyphName', 'glyphObject', 'drawPointsFunc'
                            , 'checkedFormatVersion' , 'options', writeGlyph.toString]
          , fileName: ['glyphName', function(glyphName) {
                var fileName = this.contents[glyphName];
                if(fileName === undefined) {
                    fileName = this.glyphNameToFileName(glyphName, this);
                    this.contents[glyphName] = fileName;
                    if(this._reverseContents !== undefined)
                        this._reverseContents[fileName.toLowerCase()] = glyphName;
                }
                return fileName;
            }]
          , path: ['fileName', function(fileName) {
                return [this.dirName, fileName].join('/');
            }]
          , oldData: ['path', function(path) {
                try {
                    return this._io.readFile(false, path);
                }
                catch(error) {
                    if(error instanceof IONoEntryError)
                        return null;
                    throw error;
                }
            }]
          , dataHasChanged: ['data', 'oldData', function(data, oldData) {
                return data !== oldData;
            }]
          , write: [false, 'path', 'data', _p._writeFile]
        }
      , {
            oldData: ['path', '_callback',
            function(path, callback) {
                var _callback = function(error, result) {
                    if(error instanceof IONoEntryError){
                        error = undefined;
                        result = null;
                    }
                    callback(error, result);
                };
                this._io.readFile({unified: _callback}, path);
            }]
          , write: [true, 'path', 'data', _p._writeFile]
        }
      , ['glyphName', 'glyphObject', 'drawPointsFunc', 'formatVersion', 'options']
      , function(obtain, glyphName, glyphObject/*undefined*/,
            drawPointsFunc/*undefined*/, formatVersion/*undefined*/,
            options/*undefined*/)
        {
            //jshint unused:vars
            this._purgeCachedGLIF(glyphName);
            // TOOD: Check if it's wise to load the old data here
            // it just fragments the process.
            if(!obtain('dataHasChanged'))
                return;
            return obtain('write');
        }
    );
    /**
     * Exposes an obtainJS sync/async API
     *
     * Permanently delete the glyph from the glyph set on disk. Will
     * raise KeyError if the glyph is not present in the glyph set.
     */
    _p.deleteGlyph = obtain.factory(
        {
            path: ['glyphName', function(glyphName){
                var fileName = this.contents[glyphName];
                return [this.dirName, fileName].join('/');
            }]
          , delete: [false, 'path', _p._unlink]
        }
      , {
            delete: [true, 'path', _p._unlink]
        }
      , ['glyphName']
      , function (obtain, glyphName) {
            this._purgeCachedGLIF(glyphName);
            obtain('delete');
            if(this._reverseContents !== undefined)
                delete this._reverseContents[this.contents[glyphName].toLowerCase()];
            delete this.contents[glyphName];
        }
    );

    // dict-like support …
    // there is no magic happening like in python, but we do something
    // in the same mind when possible.

    /**
     * def keys(self):
     *  return self.contents.keys()
     * use:
     *
     * for(var k in glyphSet.contents);
     *
     * in python the keys method is used like the following most of the time
     *
     * for k in glyphSet.keys():
     *      pass
     */
    _p.keys = function() {
        return Object.keys(this.contents);
    };

    /**
     * the same as:
     *     glyphName in this.contents
     */
    _p.has_key = function(glyphName) {
        return glyphName in this.contents;
    };

    /**
     * count the items in this.contents
     */
    _p.getLength = function() {
        var length = 0, k;
        for(k in this.contents)
            length += 1;
        return length;
    };

    // removed, because the length property indicates an array-like inteface
    // at least an interface that can be used with Array-Generics, which is
    // not the case at all!
    // Object.defineProperty(_p, 'length', {
    //     get: function() {
    //         return this.getLength();
    //     }
    // })
    /**
     * this is magic, too
     * Notice that the glyphClass is initialized here.
     */
    _p.get = function(glyphName) {
        if(!(glyphName in this.contents))
            throw new KeyError(glyphName);
        return new this.GlyphClass(glyphName, this);
    };
    /**
     * @mapper: function that takes a glyph document and returns a result
     * @glyphNames: a list of glyph names or undefined
     *
     * Returns a dict with the glyphNames as key and the results of
     * mapper as values.
     *
     * Exposes an obtainJS sync/async API
     */
    _p._mapGLIFDocuments = obtain.factory(
        {docs: [false, 'glyphNames', _p._getGLIFDocuments]}
      , {docs: [true, 'glyphNames', _p._getGLIFDocuments]}
      , ['glyphNames', 'mapper']
      , function(obtain, glyphNames, mapper) {
            var result = {}
              , glyphName
              , docs
              ;
            docs = obtain('docs');
            for(glyphName in docs)
                result[glyphName] = mapper(docs[glyphName]);
            return result;
        }
    );
    // quickly fetch unicode values
    /**
     * Exposes an obtainJS sync/async API
     *
     * not shure if this makes sense in our scenario ... parsing files
     * partially etc.
     *
     * Return a dictionary that maps glyph names to lists containing
     * the unicode value[s] for that glyph, if any. This parses the .glif
     * files partially, so it is a lot faster than parsing all files completely.
     * By default this checks all glyphs, but a subset can be passed with glyphNames.
     */
    _p.getUnicodes = function(obtainAsyncSwitch, glyphNames) {
        return this._mapGLIFDocuments(obtainAsyncSwitch, glyphNames,
                                                      fetchUnicodes);
    };

    /**
     * Exposes an obtainJS sync/async API
     *
     * Return a dictionary that maps glyph names to lists containing the
     * base glyph name of components in the glyph. This parses the .glif
     * files partially, so it is a lot faster than parsing all files completely.
     * By default this checks all glyphs, but a subset can be passed with glyphNames.
     */

    _p.getComponentReferences = function(obtainAsyncSwitch, glyphNames) {
        return this._mapGLIFDocuments(obtainAsyncSwitch, glyphNames,
                                                fetchComponentBases);
    };
    /**
     * Exposes an obtainJS sync/async API
     *
     * Return a dictionary that maps glyph names to the file name of the image
     * referenced by the glyph. This parses the .glif files partially, so it is a
     * lot faster than parsing all files completely.
     * By default this checks all glyphs, but a subset can be passed with glyphNames.
     */
    _p.getImageReferences = function(obtainAsyncSwitch, glyphNames) {
        return this._mapGLIFDocuments(obtainAsyncSwitch, glyphNames,
                                                fetchImageFileName);
    };

    return GlyphSet;
});

define('ufojs/ufoLib/UFOReader',[
    'ufojs/errors'
  , 'Atem-IO/errors'
  , 'obtain/obtain'
  , './_UFOBase'
  , './constants'
  , './validators'
  , './converters'
  , 'Atem-IO/tools/readDirRecursive'
  , './glifLib/GlyphSet'
], function(
    errors
  , ioErrors
  , obtain
  , Parent
  , constants
  , validators
  , converters
  , readDirRecursive
  , GlyphSet
) {
    "use strict";

    /*global setTimeout:true*/

    var UFOLibError = errors.UFOLib
      , NotImplementedError = errors.NotImplemented
      , IONoEntryError = ioErrors.IONoEntry
      , supportedUFOFormatVersions = constants.supportedUFOFormatVersions
      , METAINFO_FILENAME = constants.METAINFO_FILENAME
      , GROUPS_FILENAME = constants.GROUPS_FILENAME
      , FONTINFO_FILENAME = constants.FONTINFO_FILENAME
      , KERNING_FILENAME = constants.KERNING_FILENAME
      , LIB_FILENAME = constants.LIB_FILENAME
      , FEATURES_FILENAME = constants.FEATURES_FILENAME
      , DEFAULT_LAYER_NAME = constants.DEFAULT_LAYER_NAME
      , DEFAULT_GLYPHS_DIRNAME = constants.DEFAULT_GLYPHS_DIRNAME
      , DATA_DIRNAME = constants.DATA_DIRNAME
      , IMAGES_DIRNAME = constants.IMAGES_DIRNAME
      , groupsValidator = validators.groupsValidator
      , fontLibValidator = validators.fontLibValidator
      , pngValidator = validators.pngValidator
      , fontInfoAttributesVersion1 = converters.fontInfoAttributesVersion1
      , fontInfoAttributesVersion2 = converters.fontInfoAttributesVersion2
      , fontInfoAttributesVersion3 = converters.fontInfoAttributesVersion3
      , convertUFO1OrUFO2KerningToUFO3Kerning = converters.convertUFO1OrUFO2KerningToUFO3Kerning
      , convertFontInfoDataVersion1ToVersion2 = converters.convertFontInfoDataVersion1ToVersion2
      , convertFontInfoDataVersion2ToVersion3 = converters.convertFontInfoDataVersion2ToVersion3
      , validateInfoVersion3Data = converters.validateInfoVersion3Data
      ;

    function groupsEqual(groupsA, groupsB) {
        // groups = {"A" : ["A", "A"], "A2" : ["A"]}
        var k, i, l
         , groupA, groupB
         ;
        for(k in groupsA) if(!(k in groupsB))
            return false;
        for(k in groupsB) {
            if(!(k in groupsA))
                return false;
            groupA = groupsA[k];
            groupB = groupsB[k];
            if(groupA.length !== groupB.length)
                return false;
            for(i=0,l=groupA.length;i<l;i++)
                if(groupA[i] !== groupB[i])
                    return false;
        }
        return true;
    }

    function kerningsEqual(kerningA, kerningB) {
        var k, kk, secondsA, secondsB;
        for(k in kerningA)
            if(!(k in kerningB))
                return false;
        for(k in kerningB) {
            if(!(k in kerningA))
                return false;
            secondsA = kerningA[k];
            secondsB = kerningB[k];
            for(kk in secondsA)
                if(!(kk in secondsB))
                    return false;
            for(kk in secondsB) {
                if(!(kk in secondsA))
                    return false;
                if(secondsA[kk] !== secondsB[kk])
                    return false;
            }
        }
        return true;
    }

    /**
     * Read the various components of the .ufo.
     *
     * Use UFOReader.factory to create an instance of this, otherwise
     * your UFOReader is not fully initialized.
     */
    function UFOReader(io, path) {
        Parent.call(this, io, path);
        this._upConvertedKerningData = null;
        this._formatVersion = null;
    }
    var _p = UFOReader.prototype = Object.create(Parent.prototype);
    _p.constructor = UFOReader;

    /**
     * Will fail if metainfo.plist does not exist.
     */
    UFOReader.factory = obtain.factory(
        {
            instance: ['io', 'path',
                function(i, p) { return new UFOReader(i, p); }]
          , init: ['instance', function(instance) {
                instance._readMetaInfo(false);
                return instance;
            }]
        }
      , {
            init: ['instance', function(instance) {
                // returns a promise
                return instance._readMetaInfo(true)
                               .then(function(){return instance;});
            }]
        }
      , ['io', 'path']
      , function(obtain) {
            return obtain('init');
        }
    );

    /**
     * The format version of the UFO. This is determined by reading
     * metainfo.plist during construction via UFOReader.factory.
     */
    Object.defineProperty(_p, 'formatVersion', {
        get: function() {
            if(this._formatVersion === null)
                throw new UFOLibError('No UFO version! Always create UFOReader'
                          + ' via UFOReader.factory, then all initially needed'
                          + ' io will be perfomed.');
            return this._formatVersion;
        }
    });

    _p._readGroups = function(async) {
        return this._getPlist(async, GROUPS_FILENAME, {});
    };

    function _validateOldSchoolGroups(groups) {
        var fail = [false, "groups.plist is not properly formatted."]
          , groupName, glyphList, i, l, glyphName
          ;
        if(typeof groups !== 'object')
            return fail;
        for(groupName in groups) {
            glyphList = groups[groupName];
            if(!(glyphList instanceof Array))
                return fail;
            for(i=0,l=glyphList.length;i<l;i++) {
                glyphName = glyphList[i];
                if(typeof glyphName !== 'string')
                    return fail;
            }
        }
        return [true, null];
    }

    // support methods

    /**
     *  Returns the bytes in the file at the given path.
     *  The path must be relative to the UFO path.
     *  Returns null if the file does not exist.
     */
    _p._readBytesFromPath = obtain.factory(
        {
            path: ['fileName', function(fileName) {
                return [this._path, fileName].join('/');
            }]
          , bytes: ['path', function(path) {
                try {
                    // FIXME: io.readBytes needs an overhaul for this
                    return this._io.readBytes(false, path);
                }
                catch(e) {
                    if(e instanceof IONoEntryError)
                        return null;
                    throw new UFOLibError('Can\'t read bytes from "'
                                            + path + '". ' + e, e.stack);
                }
            }]
        },
        {
            bytes: ['path', function(path) {
                function onError(e) {
                    if(e instanceof IONoEntryError)
                        return null;
                    throw new UFOLibError('Can\'t read bytes from "'
                                            + path + '". ' + e, e.stack);
                }
                // FIXME: io.readBytes needs an overhaul for this
                return this._io.readBytes(true, path)
                           .then(null, onError)
                           ;
            }]
        },
        [ 'fileName'],
        function(obtain) { return obtain('bytes');}
    );

    // metainfo.plist

    /**
     * Read metainfo.plist. Only used for internal operations (in UFOReader.factory).
     *
     * Will fail if metainfo.plist does not exist.
     */
    _p._readMetaInfo = function(async) {
        var data = this._getPlist(async, METAINFO_FILENAME);
        function onData(data) {
            //jshint validthis: true
            if(typeof data !== 'object')
                throw new UFOLibError('metainfo.plist is not properly formatted.');
            if(!(data.formatVersion in supportedUFOFormatVersions))
                throw new UFOLibError('Unsupported UFO format ('
                                    + data.formatVersion + ') in ' + this._path);
            this._formatVersion = data.formatVersion;
        }
        if(async)
            // data is a promise
            return data.then(onData.bind(this));
        return onData.call(this, data);
    };

    // groups.plist

    /**
     * Get maps defining the renaming that was done during any
     * needed kerning group conversion. This method returns a
     * dictionary of this form:
     *     {
     *         "side1" : {"old group name" : "new group name"},
     *         "side2" : {"old group name" : "new group name"}
     *     }
     * When no conversion has been performed, the side1 and side2
     * dictionaries will be empty.
     */
    _p.getKerningGroupConversionRenameMaps = obtain.factory({
            groups: [false, _p.readGroups]
        }
      , {
            groups: [true, _p.readGroups]
        }
      , []
      , function(obtain) {
            if(this.formatVersion >= 3)
                return {side1:Object.create(null), side2:Object.create(null)};
            // use the public group reader to force the load and
            // conversion of the data if it hasn't happened yet.
            obtain('groups');
            return this._upConvertedKerningData.groupRenameMaps;
        }
    );

    // fontinfo.plist
    _p._readInfo = function(async) {
        var data = this._getPlist(async, FONTINFO_FILENAME, {});
        function onData(data) {
            if(typeof data !== 'object')
                throw new UFOLibError("fontinfo.plist is not properly formatted.");
            return data;
        }
        if(async)
            return data.then(onData);
        return onData(data);
    };
    /**
     * Read fontinfo.plist. It requires an object that allows
     * setting attributes with names that follow the fontinfo.plist
     * version 3 specification. This will write the attributes
     * defined in the file into the object.
     */
    _p.readInfo = function(async, infoArg) {
        var data = this._readInfo(async)
          , info = infoArg || Object.create(null)
          ;
        function onData(infoDict) {
            //jshint validthis: true
            var infoDataToSet = {}
            , attr, value, attributes, converters = [], i, l
            ;
            switch(this.formatVersion) {
                case 1:
                    // version 1
                    attributes = fontInfoAttributesVersion1;
                    converters.push(convertFontInfoDataVersion1ToVersion2
                                , convertFontInfoDataVersion2ToVersion3);
                    break;
                case 2:
                    // version 2
                    attributes = fontInfoAttributesVersion2;
                    converters.push(convertFontInfoDataVersion2ToVersion3);
                    break;
                case 3:
                    // version 3
                    attributes = fontInfoAttributesVersion3;
                    break;
                default:
                    // unsupported version
                    throw new NotImplementedError('readInfo formatVersion ' + this.formatVersion);
            }
            for(attr in attributes) {
                value = infoDict[attr];
                if(value !== undefined)
                    infoDataToSet[attr] = value;
                for(i=0,l=converters.length;i<l;i++)
                    infoDataToSet = converters[i](infoDataToSet);
            }
            // validate data
            infoDataToSet = validateInfoVersion3Data(infoDataToSet);
            // populate the object
            for(attr in infoDataToSet)
                info[attr] = infoDataToSet[attr];
            return info;
        }
        if(async)
            return data.then(onData.bind(this));
        return onData.call(this, data);
    };

    // kerning.plist

    _p._readKerning = function(async) {
        var data = this._getPlist(async, KERNING_FILENAME, {});
        function onData(data) {
            var invalidFormatMessage = 'kerning.plist is not properly formatted.'
              , first, secondDict, second, value
              ;
            if(typeof data !== 'object')
                throw new UFOLibError(invalidFormatMessage);
            for(first in data) {
                secondDict = data[first];
                if(typeof secondDict !== 'object')
                    throw new UFOLibError(invalidFormatMessage);
                for(second in secondDict) {
                    value = secondDict[second];
                    if(typeof value !== 'number')
                        throw new UFOLibError(invalidFormatMessage
                            + ' Value is not a number: typeof ' + typeof value);
                }
            }
            return data;
        }
        if(async)
            return data.then(async);
        return onData(data);
    };

    // up conversion
    /**
     * Up convert kerning and groups in UFO 1 and 2.
     * The data will be held internally until each bit of data
     * has been retrieved. The conversion of both must be done
     * at once, so the raw data is cached and an error is raised
     * if one bit of data becomes obsolete before it is called.
     */
    _p._upConvertKerning = obtain.factory(
        {
            testKerning: ['kerning', function(testKerning) {
                if(!kerningsEqual(testKerning,
                                this._upConvertedKerningData.originalKerning))
                    throw new UFOLibError('The data in kerning.plist has been '
                        + 'modified since it was converted to UFO 3 format.');
            }]
          , testGroups: ['groups', function(testGroups) {
                if(!groupsEqual(testGroups,
                                this._upConvertedKerningData.originalGroups))
                    throw new UFOLibError('The data in groups.plist has been '
                        + 'modified since it was converted to UFO 3 format.');
            }]
          , test: ['testKerning', 'testGroups', function() {}]
          , kerning: [false, _p._readKerning]
          , groups:  [false, _p._readGroups]
          , convertedKerning: ['groups', 'kerning', function(groups, kerning) {
                var groupsValidation = _validateOldSchoolGroups(groups)
                  , upConverted = this._upConvertedKerningData = {
                        kerning: {}
                      , originalKerning: kerning
                      , groups:{}
                      , originalGroups:groups
                    }
                  , result
                  ;

                if(!groupsValidation[0])
                    throw new UFOLibError(groupsValidation[1]);

                // convert kerning and groups
                result = convertUFO1OrUFO2KerningToUFO3Kerning(kerning, groups);
                // kerning, groups, conversionMaps = result
                // store
                upConverted.kerning = result[0];
                upConverted.groups = result[1];
                upConverted.groupRenameMaps = result[2];
            }]
        }
      , {
            kerning: [true, _p._readKerning]
          , groups:  [true, _p._readGroups]

        }
      , []
      , function(obtain) {
            if(this._upConvertedKerningData)
                return obtain('test');
            return obtain('convertedKerning');
        }
    );

    /**
     * Read groups.plist. Returns a dict.
     */
    _p.readGroups = obtain.factory(
        {
            upConvertKerning: [false, _p._upConvertKerning]
          , data: [false, _p._readGroups]
          , groups: ['data', function(data) {
                var result = groupsValidator(data);
                if(!result[0])
                    throw new UFOLibError(result[1]);
                return data;
            }]
        }
      , {
            upConvertKerning: [true, _p._upConvertKerning]
          , data: [true, _p._readGroups]
        }
      , []
      , function(obtain) {
            if(this.formatVersion < 3) {
                obtain('upConvertKerning');
                return this._upConvertedKerningData.groups;
            }
            return obtain('groups');
        }
    );

    /**
     * Read kerning.plist. Returns a dict.
     * This performs structural validation of the kerning data,
     * but it does not check the validity of the kerning as
     * dictated in the UFO spec. To do that, pass the kerning
     * obtained from this method and the groups obtained from
     * readGroups to the kerningvalidator function in the
     * validators module.
     */
    _p.readKerning = obtain.factory(
        {
            upConvertKerning: [false, _p._upConvertKerning]
          , kerning: [false, _p._readKerning]
        }
      , {
            upConvertKerning: [true, _p._upConvertKerning]
          , kerning: [true, _p._readKerning]
        }
      , []
      , function(obtain) {
            var kerningNested;
            if(this.formatVersion < 3) {
                obtain('upConvertKerning');
                kerningNested = this._upConvertedKerningData.kerning;
            }
            else
                kerningNested = obtain('kerning');

            // NOTE: Python uses here a "flattening" approach where a tuple
            // of the strings (left, right) is the key of the kernig entry
            // while this is nice in python, it s actually not practical
            // in JavaScript, not even with the (yet still new) Map objects.
            // Because of python tuples can be reproduced as a key, no need
            // to have an instance of them (jsut like strings). With a similar
            // (same content) JavaScript array of [left, right], we still
            // can't get the value of the implied kerning pair.
            // flatten:
            // kerning = Object.create(null);
            // for(left in kerningNested)
            //     for(right in kerningNested[left])
            //         // FIXME:
            //         kerning[left, right] = kerningNested[left][right];
            return kerningNested;
        }
    );

    // lib.plist

    /**
     * Read lib.plist. Returns a dict.
     */
    _p.readLib = function (async) {
        var data = this._getPlist(async, LIB_FILENAME, {});
        function onData(data) {
            var result = fontLibValidator(data);
            if(!result[0])
                throw new UFOLibError(result[1]);
            return data;
        }
        if(async)
            return data.then(onData);
        return onData(data);
    };

    // features.fea

    /**
     * Read features.fea. Returns a string.
     */
    _p.readFeatures = obtain.factory(
        {
            path: [function(){
                return [this._path, FEATURES_FILENAME].join('/');
            }]
          , features: ['path', function(path) {
                try {
                    return this._io.readFile(false, path);
                }
                catch(e) {
                    if(e instanceof IONoEntryError)
                        return '';
                    throw e;
                }
            }]
        }
      , {
            features: ['path', function(path) {
                function onError(e){
                    if(e instanceof IONoEntryError)
                        return '';
                    throw e;
                }
                return this._io.readFile(true, path)
                           .then(null, onError)
                           ;
            }]
        }
      , []
      , function(obtain){ return obtain('features');}
    );

    // glyph sets & layers

    /**
     * Rebuild the layer contents list by checking what glyphsets
     * are available on disk.
     */
    _p._readLayerContents = obtain.factory(
        {
            layerContents: [false, _p._readRawLayerContents]
        }
      , {
            layerContents: [true, _p._readRawLayerContents]
        }
      , []
      , function(obtain) {
            if(this.formatVersion < 3)
                return [[DEFAULT_LAYER_NAME, DEFAULT_GLYPHS_DIRNAME]];
            return obtain('layerContents');
        }
    );

    /**
     * Get the ordered layer names from layercontents.plist.
     */
    _p.getLayerNames = function (async) {
        var data = this._readLayerContents(async);
        function onData(layerContents) {
            var i, l
              , result = []
              ;
            for(i=0,l=layerContents.length;i<l;i++)
                result.push(layerContents[i][0]);
            return result;
        }
        if(async)
            return data.then(onData);
        return onData(data);
    };

    /**
     * Get the default layer name from layercontents.plist.
     */
    _p.getDefaultLayerName = function (async) {
        var data = this._readLayerContents(async);
        function onData(layerContents) {
            var i, l;
            for(i=0,l=layerContents.length;i<l;i++)
                if(layerContents[i][1] === DEFAULT_GLYPHS_DIRNAME)
                    return layerContents[i][0];
            throw new UFOLibError('The default layer is not defined in layercontents.plist.');
        }
        if(async)
            return data.then(onData);
        return onData(data);
    };

    /**
     * Return the GlyphSet associated with the
     * glyphs directory mapped to layerName
     * in the UFO. If layerName is not provided,
     * the name retrieved with getDefaultLayerName
     * will be used.
     */
    _p.getGlyphSet = obtain.factory(
        {
            layerContents: [false, _p._readLayerContents]
          , layerDir: ['layerName', function(layerName) {
                if(layerName)
                    return layerName;
                return this.getDefaultLayerName(false);
            }]
          , directory: ['layerDir', 'layerContents', function(layerName, layerContents) {
                var layer, i,l
                  , storedLayerName, storedLayerDirectory
                  ;
                for(i=0,l=layerContents.length;i<l;i++) {
                    layer = layerContents[i];
                    storedLayerName = layer[0];
                    storedLayerDirectory = layer[1];
                        if(layerName === storedLayerName)
                                return storedLayerDirectory;
                }
                throw new UFOLibError('No glyphs directory is mapped to "'
                                                            + layerName + '".');
            }]
          , glyphsPath: ['directory', function(directory) {
                return [this._path, directory].join('/');
            }]
          , glyphSet: ['glyphsPath', 'glyphNameToFileNameFunc', 'options',
            function(glyphsPath, glyphNameToFileNameFunc, options) {
                return GlyphSet.factory(false, this._io, glyphsPath
                                , undefined, this.formatVersion, options);
            }]
        }
      , {
            layerContents: [true, _p._readLayerContents]
          , layerDir: ['layerName', '_callback', '_errback', function(layerName, callback, errback) {
                // It's a bit wacky to force this to be async even if
                // the value already exists
                if(layerName)
                    setTimeout(callback.bind(null, layerName));
                else
                    this.getDefaultLayerName(true).then(callback, errback);
            }]
          , glyphSet: ['glyphsPath', 'glyphNameToFileNameFunc', 'options',
            function(glyphsPath, glyphNameToFileNameFunc, options) {
                return GlyphSet.factory(true, this._io, glyphsPath
                                , undefined, this.formatVersion, options);
            }]
        }
      , ['layerName', 'glyphNameToFileNameFunc', 'options']
      , function(obtain){return obtain('glyphSet');}
    );

    /**
     * Return a dictionary that maps unicode values (ints) to
     * lists of glyph names.
     */
    _p.getCharacterMapping = obtain.factory(
        {
            glyphSet: [false, 'layerName', _p.getGlyphSet]
          , allUnicodes: ['glyphSet', function(glyphSet){
                return glyphSet.getUnicodes(false);
            }]
          , cmap: ['allUnicodes', function(allUnicodes) {
                var cmap = Object.create(null)
                  , glyphName, unicodes, i, l, code, glyphs
                  ;
                for(glyphName in allUnicodes) {
                    unicodes = allUnicodes[glyphName];
                    for(i=0,l=unicodes.length;i<l;i++) {
                        code = unicodes[i];
                        glyphs = cmap[code];
                        if(!glyphs)
                            cmap[code] = glyphs = [];
                        glyphs.push(glyphName);
                    }
                }
                return cmap;
            }]
        }
      , {
            glyphSet: [true, 'layerName', _p.getGlyphSet]
          , allUnicodes: ['glyphSet', function(glyphSet){
                return glyphSet.getUnicodes(true);
            }]

        }
      , ['layerName']
      , function(obtain){ return obtain('cmap');}
    );


    // /data

    /**
     * Returns a list of all files in the data directory.
     * The returned paths will be relative to the UFO.
     * This will not list directory names, only file names.
     * Thus, empty directories will be skipped.
     * The maxDepth argument sets the maximum number
     * of sub-directories that are allowed.
     */
    _p.getDataDirectoryListing = obtain.factory(
        {
            path: [function(){ return [this._path, DATA_DIRNAME].join('/'); }]
          , md:['maxDepth', function(maxDepth) {
                    return maxDepth === undefined ? 100 : maxDepth;}]
          , listing: ['path', 'md', function(path, maxDepth) {
                if(!this._io.pathExists(false, path))
                    return [];
                return readDirRecursive(false, this._io, path, maxDepth);
            }]
        }
      , {
            pathExists: ['path', function(path) {
                            return this._io.pathExists(true, path);}]
          , listing: ['path', 'md', 'pathExists', '_callback',
            function(path, maxDepth, pathExists, callback) {
                if(pathExists)
                    setTimeout(callback,0,[]);
                else
                    return readDirRecursive(true, this._io, path, maxDepth);

            }]
        }
      , ['maxDepth']
      , function(obtain){ return obtain('listing');}
    );

    /**
     * Returns a list of all image file names in
     * the images directory. Each of the images will
     * have been verified to have the PNG signature.
     */
    _p.getImageDirectoryListing = obtain.factory(
        {
            path: [function(){ return [this._path, IMAGES_DIRNAME].join('/');}]
          , listing: ['path', function(path) {
                try {
                    return this._io.readDir(false, path);
                }
                catch(e) {
                    if(e instanceof IONoEntryError)
                        return [];
                    throw e;
                }
            }]
          , files: ['listing', function(listing) {
                function isNotDirName(name) {
                    return name.slice(-1) !== '/';
                }
                return listing.map(isNotDirName);
            }]
          , pngs: ['files', function(files) {
                var pngs = [], result, i, l;
                for(i=0,l=files.length;i<l;i++) {
                    result = pngValidator(false, this._io, {path:files[i]});
                    if(result[0])
                        pngs.push(files[i]);
                }
                return pngs;
            }]
        }
      , {
            listing: ['path', function(path) {
                function onError(e) {
                    if(e instanceof IONoEntryError)
                        return [];
                    throw e;
                }
                return this._io.readDir(true, path).then(null, onError);
            }]
          , pngs: ['files', '_callback', '_errback',
            function(files, callback, errback) {
                var pngs = []
                  , jobs=0
                  , i, l
                  , done=false
                  ;
                function onError(e) {
                    if(done) return;
                    // just report once
                    done = true;
                    errback(e);
                }
                function onData(file, result) {
                    if(done) return;
                    if(result[0])
                        pngs.push(file);
                    jobs -= 1;
                    if(jobs > 0) return;
                    done = true;
                    // return
                    callback(pngs);
                }
                for(i=0,l=files.length;i<l;i++) {
                    pngValidator(true, this._io, {path:files[i]})
                                .then(onData.bind(null, files[i]), onError);
                    jobs += 1;
                }
            }]
        }
      , []
      , function(obtain) {
            if(this.formatVersion < 3)
                return [];
            return obtain('pngs');
        }
    );

    /**
     * Return image data for the file named fileName.
     */
    _p.readImage = function (async, fileName) {
        if(this.formatVersion < 3)
            throw new UFOLibError('Reading images is not allowed in UFO '
                                            + this.formatVersion + '.');
        var path = [this._path, IMAGES_DIRNAME, fileName].join('/')
          , data = this.readBytesFromPath(async, path)
          ;
        function onData(data) {
            if(data === null)
                throw new UFOLibError('No image file named "'+ fileName +'".');
            var result = pngValidator(false, undefined, {data:data});
            if(!result[0])
                throw new UFOLibError(result[1]);
            return data;
        }
        if(async)
            return data.then(onData);
        return onData(data);
    };

    return UFOReader;
});

/** 'path' nodejs core module browserify-ied with `--standalone path`. Should support all module systems (commonjs, AMD & `window.path`) - check browserify docs.

From [node2web](http://github.com/anodynos/node2web) collection,
should/will be exposed as 'path' to [bower](http://bower.io) for *browser* usage.

browserify version: '3.46.1', build date 'Wed Oct 08 2014 17:36:29 GMT+0300 (EEST)' 
**/
!function(e){if("object"==typeof exports)module.exports=e();else if("function"==typeof define&&define.amd)define('path',e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.path=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,_dereq_("+xKvab"))
},{"+xKvab":2}],2:[function(_dereq_,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],3:[function(_dereq_,module,exports){
module.exports = _dereq_('path');
},{"path":1}]},{},[3])
(3)
});
define('ufojs/ufoLib/UFOWriter',[
    'ufojs/errors'
  , 'Atem-IO/errors'
  , 'obtain/obtain'
  , 'ufojs/plistLib/main'
  , 'path'
  , './_UFOBase'
  , './constants'
  , './validators'
  , './converters'
  , './filenames'
  , './glifLib/GlyphSet'
], function(
    errors
  , ioErrors
  , obtain
  , plistLib
  , path
  , Parent
  , constants
  , validators
  , converters
  , filenames
  , GlyphSet
) {
    "use strict";
    var UFOLibError = errors.UFOLib
      , IONoEntryError = ioErrors.IONoEntry
      , IOError = ioErrors.IO
      , supportedUFOFormatVersions = constants.supportedUFOFormatVersions
      , METAINFO_FILENAME = constants.METAINFO_FILENAME
      , GROUPS_FILENAME = constants.GROUPS_FILENAME
      , FONTINFO_FILENAME = constants.FONTINFO_FILENAME
      , KERNING_FILENAME = constants.KERNING_FILENAME
      , LIB_FILENAME = constants.LIB_FILENAME
      , FEATURES_FILENAME = constants.FEATURES_FILENAME
      , DEFAULT_LAYER_NAME = constants.DEFAULT_LAYER_NAME
      , DEFAULT_GLYPHS_DIRNAME = constants.DEFAULT_GLYPHS_DIRNAME
      , DATA_DIRNAME = constants.DATA_DIRNAME
      , IMAGES_DIRNAME = constants.IMAGES_DIRNAME
      , LAYERCONTENTS_FILENAME = constants.LAYERCONTENTS_FILENAME
      , groupsValidator = validators.groupsValidator
      , fontLibValidator = validators.fontLibValidator
      , pngValidator = validators.pngValidator
      , fontInfoAttributesVersion3 = converters.fontInfoAttributesVersion3
      , convertFontInfoDataVersion3ToVersion2 = converters.convertFontInfoDataVersion3ToVersion2
      , convertFontInfoDataVersion2ToVersion1 = converters.convertFontInfoDataVersion2ToVersion1
      , validateInfoVersion3Data = converters.validateInfoVersion3Data
      , validateInfoVersion2Data = converters.validateInfoVersion2Data
      , userNameToFileName = filenames.userNameToFileName
      ;

    /**
     * Write the various components of the .ufo.
     */
    function UFOWriter(io, path, formatVersion /*default: 3*/, fileCreator /*default: 'org.ufojs.lib'*/){
        Parent.call(this, io, path);
        var _formatVersion = formatVersion || 3;

        if(!(_formatVersion in supportedUFOFormatVersions))
            throw new UFOLibError('Unsupported UFO format ('+_formatVersion+').');
        // establish some basic stuff
        this._formatVersion = parseInt(_formatVersion, 10);
        this._fileCreator = fileCreator || 'org.ufojs.lib';
        this._downConversionKerningData = null;
        this.layerContents = {};
    }
    var _p = UFOWriter.prototype = Object.create(Parent.prototype);
    _p.constructor = UFOWriter;

    /**
     * TODO: I dislike doing a write immediately on initialisation (_writeMetaInfo)!
     * It's really an unwanted side effect in my opinion.
     * Well, let's see how the rest turns out.
     */
    UFOWriter.factory = obtain.factory(
        {
            instance: ['io', 'path', 'formatVersion', 'fileCreator',
                function(i, p, fv, fc) { return new UFOWriter(i, p, fv, fc); }]
          , init: ['instance', function(instance) {
                instance._initLayerContents(false);
                instance._writeMetaInfo(false);
                if(!(DEFAULT_LAYER_NAME in instance.layerContents)) {
                    // UFOReader expects a default layer in a vanilla UFO v3
                    var gs = instance.getGlyphSet(false);
                    gs.writeContents(false);
                }
                instance.writeLayerContents(false);
            }]
        }
      , {
            init: ['instance', function(instance) {
                // returns a promise
                function onGlyphSet (gs) { return gs.writeContents(true);}
                function onLayerContents() {
                    if(DEFAULT_LAYER_NAME in instance.layerContents)
                        return;
                    // UFOReader expects a default layer in a vanilla UFO v3
                    return instance.getGlyphSet(true)
                                   .then(onGlyphSet);
                }
                return instance._writeMetaInfo(true)
                    .then(instance._initLayerContents.bind(instance, true))
                    .then(onLayerContents)
                    .then(instance.writeLayerContents.bind(instance, true));
            }]
        }
      , ['io', 'path', 'formatVersion', 'fileCreator']
      , function(obtain) {
            obtain('init');
            return obtain('instance');
        }
    );

    // this is a shared helper for _p._initLayerContents
    function _initLayerContents(async, previousFormatVersion) {
        // jshint validthis:true
        if(previousFormatVersion !== null && previousFormatVersion  >= 3)
            // LayerContents plist should exist
            return this._readLayerContents(async);

        // if there is DEFAULT_GLYPHS_DIRNAME, make a default layerContents
        // dictionary
        var path = [this._path, DEFAULT_GLYPHS_DIRNAME].join('/')
          , check = this._io.pathExists(async, path)
          ;

        function onPathChecked(exists) {
            // jshint validthis:true
            if(exists)
                this.layerContents = {DEFAULT_LAYER_NAME : DEFAULT_GLYPHS_DIRNAME};
        }

        if(async)
            return check.then(onPathChecked.bind(this));
        return onPathChecked.call(this, check);
    }

    /**
     * Used only internally in UFOWriter.factory
     */
    _p._initLayerContents = obtain.factory(
        {
            // _getPlist already catches the original IONoEntryError and
            // returns the "default" argument if metaInfo.plist is not present.
            // That's OK, we can just pass a marker as default value.
            // Which in this case is an instance of IONoEntryError, could be
            // any uniquely identifiable object (even a {}) though
            noEntryMarker: [function(){return new IONoEntryError();}]
          , metaInfo: [false, new obtain.Argument(METAINFO_FILENAME)
                                        , 'noEntryMarker', _p._getPlist]
          , previousVersion: ['metaInfo', 'noEntryMarker',
            function(metaInfo, noEntryMarker) {
                if(metaInfo === noEntryMarker)
                    return null;
                // path exists
                var previousFormatVersion = parseInt(metaInfo['formatVersion'], 10);
                if(previousFormatVersion !== previousFormatVersion)// NaN
                    throw new UFOLibError('The existing metainfo.plist is not '
                                + ' properly formatted. Couldn\'t interpret '
                                + 'formatVersion as an integer: '
                                + metaInfo['formatVersion']);

                if(!(previousFormatVersion in supportedUFOFormatVersions))
                    throw new UFOLibError('Unsupported UFO format (' + previousFormatVersion
                                        + ') in existing metainfo.plist.');
                return previousFormatVersion;
            }]
          , initLayerContents:[false, 'previousVersion', _initLayerContents]
        }
      , {
            metaInfo: [true, new obtain.Argument(METAINFO_FILENAME)
                                        , 'noEntryMarker', _p._getPlist]
          , initLayerContents:[true, 'previousVersion', _initLayerContents]
        }
      , []
      , function(obtain){ obtain('initLayerContents'); }
    );

    _p._writeMetaInfo = function(async) {
        var metaInfo = {
            creator: this._fileCreator,
            formatVersion: this._formatVersion
        };
        return this._writePlist(async, METAINFO_FILENAME, metaInfo);
    };

    /**
     * The path the UFO is being written to.
     */
    Object.defineProperty(_p, 'path', {get: function(){return this._path;}});

    /**
     * The format version of the UFO. This is set into metainfo.plist during __init__.
     */
    Object.defineProperty(_p, 'formatVersion', {get: function(){return this._formatVersion;}});

    /**
     * The file creator of the UFO. This is set into metainfo.plist during __init__.
     */
    Object.defineProperty(_p, 'fileCreator', {get: function(){return this._fileCreator;}});

    _p._makeDirectory = function(async, subDirectory) {
        var path = subDirectory
            ? [this._path, subDirectory].join('/')
            : this._path
          , promise = this._io.ensureDir(async, path)
          ;

        if(async)
            return promise.then(function(){ return path; });
        return path;

    };

    /**
     *  Write a property list. The errors that
     *  could be raised during the writing of
     *  a plist are unpredictable and/or too
     *  large to list, so, a blind try: except:
     *  is done. If an exception occurs, a
     *  UFOLibError will be raised.
     */
    _p._writePlist = obtain.factory(
        {
            ensureDir: [false, _p._makeDirectory]
          , path: ['fileName', function(fileName){
                return [this._path, fileName].join('/'); }]
          , plist: ['data', 'fileName', function(data, fileName) {
                try {
                    return plistLib.createPlistString(data);
                }
                catch(e) {
                    throw new UFOLibError('The data for the file "' + fileName
                                + '" could not be written: ' + e, e.stack);
                }
            }]
          , write: ['path', 'plist', function(path, plist) {
                this._io.writeFile(false, path, plist);}]
        }
      , {
            ensureDir: [true, _p._makeDirectory]
          , write: ['path', 'plist', 'ensureDir', function(path, plist) {
                return this._io.writeFile(true, path, plist);}]
        }
      , ['fileName', 'data']
      , function(obtain) {
          obtain('ensureDir');
          obtain('write');
        }

    );

    _p._deleteFile = obtain.factory(
        {
            path: ['fileName', function(fileName){
                return [this._path, fileName].join('/');
            }]
          , unlink:['path', function(path){
                try {
                    this._io.unlink(false, path);
                }
                catch(e) {
                    if(!(e instanceof IONoEntryError))
                        throw e;
                    // pass
                }
            }]
        }
      , {
            unlink:['path', function(path){
                function onError(e){
                    if(!(e instanceof IONoEntryError))
                        throw e;
                    // pass
                }
                return this._io.unlink(true, path)
                           .then(null, onError);
            }]
        }
      , ['fileName']
      , function(obtain){ obtain('unlink'); }
    );

    _p._removeEmptyDirectories = obtain.factory(
        {
            basePath: [function() {
                return path.normalize(this._path);
            }]
          , absDir: ['directory', function(directory) {
                return path.normalize(directory);
            }]
          , removeDirs: ['basePath', 'absDir', function(basePath, absDir) {
                var directory = absDir;
                do {
                    try {
                        this._io.rmDir(false, directory);
                    }
                    catch(e) {
                        if(e instanceof IONoEntryError)
                            // just move on to the name above
                            // AFAIK, this case is silenced by the IO API
                            // anyways.
                            continue;
                        // raises IOError if dir can't be deleted
                        // which is the case for not empty dirs but also other
                        // occasions. Unfortunately the other occasions are suppressed
                        // here, too. A better error to silence would be IONotEmptyError
                        // but that is not used by the REST adapter (due to the
                        // lack of an appropriate HTTP status code. We could come
                        // up with a non-standard code for this.)
                        if(!(e instanceof IOError))
                            throw e;
                        // we are done
                        break;
                    }
                    directory = path.dirname(directory);
                // do this until we are at basePath
                } while(directory && directory !== basePath);
            }]
        }
      , {
            removeDirs: ['basePath', 'absDir', '_callback', '_errback',
            function(basePath, absDir, callback, errback) {
                var directory = absDir, next;
                function onError(e) {
                    if(e instanceof IONoEntryError)
                        next();
                    // see the sync version for a comment about why
                    // IOError is sub-optimal
                    else if(!(e instanceof IOError))
                        errback(e);
                    else
                        // we are done
                        callback();
                }
                next = (function () {
                    if(directory && directory !== basePath){
                        // another round
                        this._io.rmDir(true, directory).then(next, onError);
                        directory = path.dirname(directory);
                    }
                    else
                        // we are done
                        callback();
                }).bind(this);
                next();
            }]

        }
      , ['directory']
      , function(obtain, directory) {
            var absDir = obtain('absDir')
              , basePath = obtain('basePath')
              ;
            if(basePath === absDir)
                throw new UFOLibError('Can\'t delete UFO path');
            if(absDir.indexOf(basePath) !== 0)
                // directory must be contained in basePath
                throw new UFOLibError('The directory must be contained '
                                +'within the UFO path: "'+directory+'".');
            obtain('removeDirs');
        }
    );

    _p._getPathType = function(async, p) {
        var parent = path.dirname(p)
         , baseFile = path.basename(p)
         , lookup = Object.create(null)
         ;
        lookup[baseFile] = 'file';
        lookup[baseFile + '/'] = 'directory';

        function onData(items) {
            var i,l, found;
            for(i=0,l=items.length;i<l;i++)
                if((found = lookup[items[i]]))
                    return found;
            // not found
            return null;
        }
        function onError(e) {
            if(e instanceof IONoEntryError)
                // not found
                return null;
            throw e;
        }
        if(async)
            return this._io.readDir(async, parent)
                            .then(onData, onError);

        // synchronous
        try {
            return onData(this._io.readDir(async, parent));
        }
        catch(e) {
            return onError(e);
        }
    };

    _p._removeAndCleanup = obtain.factory(
        {
            basePath: [function(){ return path.normalize(this._path); }]
          , absPath: ['path', 'basePath', function(p, basePath) {
                var absPath = path.normalize(p);
                if(basePath === absPath)
                    throw new UFOLibError('Can\'t delete UFO path');
                if(absPath.indexOf(basePath) !== 0)
                    throw new UFOLibError('The path "' + p + '" must be '
                                    + 'contained within the UFO path.');
                return absPath;
            }]
          , parent: ['path', path.dirname]
          , type: [false, 'path', _p._getPathType]
          , rmDir: ['absPath', function(path) {
                        return this._io.rmDirRecursive(false, path);}]
          , unlink: ['absPath', function(path) {
                        return this._io.unlink(false, path);}]
          , cleanup:[false, 'parent', _p._removeEmptyDirectories]

        }
      , {
            type: [true, 'path', _p._getPathType]
          , rmDir: ['absPath', function(path) {
                        return this._io.rmDirRecursive(true, path);}]
          , unlink: ['absPath', function(path) {
                        return this._io.unlink(true, path);}]
          , cleanup:[true, 'parent', _p._removeEmptyDirectories]
        }
      , ['path']
      , function(obtain) {
            // run the absPath check before getting the type
            obtain('absPath');
            var type = obtain('type');
            if(type === 'directory')
                obtain('rmDir');
            else if(type === 'file')
                obtain('unlink');
            obtain('cleanup');
        }
    );

    /**
     * Set the UFO modification time to the current time.
     * This is never called automatically. It is up to the
     * caller to call this when finished working on the UFO.
     *
     * WARNING: This will only do something if the io adapter has
     * a `setMtime` method, otherwise an NotImplementedError is thrown.
     * Currently `setMtime` is nowhere implemented.
     */
    _p.setModificationTime = function(async) {
        return this._io.setMtime(async, this._path);
    };

    // groups.plist

    /**
     * Set maps defining the renaming that should be done
     * when writing groups and kerning in UFO 1 and UFO 2.
     * This will effectively undo the conversion done when
     * UFOReader reads this data. The dictionary should have
     * this form:
     *
     *     {
     *         "side1" : {"group name to use when writing" : "group name in data"},
     *         "side2" : {"group name to use when writing" : "group name in data"}
     *     }
     *
     * This is the same form returned by UFOReader's
     * getKerningGroupConversionRenameMaps method.
     */
    _p.setKerningGroupConversionRenameMaps = function(maps) {
        if(this._formatVersion >= 3)
            throw new UFOLibError('Not supported in UFO '+this._formatVersion+'.');
        // flip the dictionaries
        var remap = {}, side, writeName, dataName;
        for(side in {side1:true, side2:true})
            for(writeName in maps[side]) {
                dataName = maps[side][writeName];
                remap[dataName] = writeName;
            }
        this._downConversionKerningData = {groupRenameMap: remap};
    };

    /**
     * Write groups.plist. This method requires a
     * dict of glyph groups as an argument.
     */
    _p.writeGroups = obtain.factory(
        {
            checkedGroups: ['groups', function(groups) {
                // validate the data structure
                var result = groupsValidator(groups)
                  , remap, remappedGroups, name, contents
                  ;
                if(!result[0])
                    throw new UFOLibError(result[1]);
                // down convert
                if(this._formatVersion < 3 && this._downConversionKerningData !== null) {
                    remap = this._downConversionKerningData['groupRenameMap'] || {};
                    remappedGroups = {};
                    // there are some edge cases here that are ignored:
                    // 1. if a group is being renamed to a name that
                    //    already exists, the existing group is always
                    //    overwritten. (this is why there are two loops
                    //    below.) there doesn't seem to be a logical
                    //    solution to groups mismatching and overwriting
                    //    with the specifiecd group seems like a better
                    //    solution than throwing an error.
                    // 2. if side 1 and side 2 groups are being renamed
                    //    to the same group name there is no check to
                    //    ensure that the contents are identical. that
                    //    is left up to the caller.
                    for(name in groups) {
                        contents = groups[name];
                        if(name in remap)
                            name = remap[name];
                        remappedGroups[name] = contents;
                    }
                    groups = remappedGroups;
                }
                return groups;
            }]
          , write: ['checkedGroups', function(groups) {
                var k;
                for(k in groups) // if anything is in groups
                    return this._writePlist(false, GROUPS_FILENAME, groups);
                return this._deleteFile(false, GROUPS_FILENAME);

            }]
        }
      , {
            write: ['checkedGroups', function(groups) {
                var k;
                for(k in groups) // if anything is in groups
                    return this._writePlist(true, GROUPS_FILENAME, groups);
                return this._deleteFile(true, GROUPS_FILENAME);

            }]
        }
      , ['groups']
      , function(obtain){ obtain('write'); }
    );


    // fontinfo.plist

    /**
     * Write info.plist. This method requires an object
     * that supports getting attributes that follow the
     * fontinfo.plist version 2 specification. Attributes
     * will be taken from the given object and written
     * into the file.
     */
    _p.writeInfo = obtain.factory(
        {
            data: ['info', function(info){
                // gather version 3 data
                var infoData = {}
                  , attr, value
                  ;
                for(attr in fontInfoAttributesVersion3) {
                    if(attr in info) {
                        value = info[attr];
                        if(value === undefined || value === null)
                            continue;
                        infoData[attr] = value;
                    }
                }
                // down convert data if necessary and validate
                switch(this._formatVersion){
                    case 3:
                        infoData = validateInfoVersion3Data(infoData);
                        break;
                    case 2:
                        infoData = convertFontInfoDataVersion3ToVersion2(infoData);
                        infoData = validateInfoVersion2Data(infoData);
                        break;
                    case 1:
                        infoData = convertFontInfoDataVersion3ToVersion2(infoData);
                        infoData = validateInfoVersion2Data(infoData);
                        infoData = convertFontInfoDataVersion2ToVersion1(infoData);
                        break;
                }
                return infoData;
            }]
          , write:[false, new obtain.Argument(FONTINFO_FILENAME), 'data', _p._writePlist]
        }
      , {
            write:[true, new obtain.Argument(FONTINFO_FILENAME), 'data', _p._writePlist]
        }
      , ['info']
      , function(obtain){return obtain('write');}
    );

    // kerning.plist

    /**
     * Write kerning.plist. This method requires a
     * dict of kerning pairs as an argument.
     *
     * This performs basic structural validation of the kerning,
     * but it does not check for compliance with the spec in
     * regards to conflicting pairs. The assumption is that the
     * kerning data being passed is standards compliant.
     */
    _p.writeKerning = obtain.factory(
        {
            data: ['kerning', function(kerning) {
                        // validate the data structure
                var side1, seconds, side2, value, remap, remappedKerning;
                for(side1 in kerning) {
                    seconds = kerning[side1];
                    for(side2 in seconds)
                        value = seconds[side2];
                    if(typeof value !== 'number')
                        throw new UFOLibError('The kerning is not properly formatted.');
                }
                // down convert
                if( this._formatVersion < 3 && this._downConversionKerningData !== null) {
                    remap = this._downConversionKerningData['groupRenameMap'];
                    remappedKerning = {};
                    for(side1 in kerning) {
                        seconds = kerning[side1];
                        for(side2 in seconds) {
                            value = seconds[side2];
                            side1 = remap[side1] || side1;
                            side2 = remap[side2] || side2;

                            if(!remappedKerning[side1])
                                remappedKerning[side1] = {};
                            remappedKerning[side1][side2] = value;
                        }
                    }
                    return remappedKerning;
                }
                return kerning;
            }]
          , write: ['data', function(kerning) {
                var k;
                for(k in kerning)
                    // has kerning, this is just a check we don't iterate further
                    return this._writePlist(false, KERNING_FILENAME, kerning);
                return this._deleteFile(false, KERNING_FILENAME);
            }]
        }
      , {
            write: ['data', function(kerning) {
                var k;
                for(k in kerning)
                    // has kerning, this is just a check we don't iterate further
                    return this._writePlist(true, KERNING_FILENAME, kerning);
                return this._deleteFile(true, KERNING_FILENAME);
            }]
        }
      , ['kerning']
      , function(obtain){ return obtain('write'); }
    );

    // lib.plist

    /**
     * Write lib.plist. This method requires a
     * lib dict as an argument.
     */
    _p.writeLib = obtain.factory(
        {
            data: ['libDict', function(libDict) {
                var result = fontLibValidator(libDict);
                if(!result[0])
                    throw new UFOLibError(result[1]);
                return libDict;
            }]
          , write:['data', function(data) {
                var k;
                for(k in data)
                    // has contents, note, returns immediately
                    return this._writePlist(false, LIB_FILENAME, data);
                // empty
                return this._deleteFile(false, LIB_FILENAME);
            }]
        }
      , {
            write:['data', function(data) {
                var k;
                for(k in data)
                    // has contents, note, returns immediately
                    return this._writePlist(true, LIB_FILENAME, data);
                // empty
                return this._deleteFile(true, LIB_FILENAME);
            }]
        }
      , ['libDict']
      , function(obtain){ return obtain('write'); }
    );

    // features.fea

    /**
     * Write features.fea. This method requires a
     * features string as an argument.
     */
    _p.writeFeatures = obtain.factory(
        {
            path: [function(){ return [this._path, FEATURES_FILENAME].join('/'); }]
          , dir: [false, _p._makeDirectory]
          , check: ['features', function(features) {
                if(this._formatVersion === 1)
                    throw new UFOLibError('features.fea is not allowed '
                                                            + 'in UFO 1.');
                if(typeof features !== 'string')
                    throw new UFOLibError('The features must be string, '
                                    + 'but are: ' + (typeof features) + '.');
                return true;
            }]
          , write: ['path', 'features', 'dir', function(path, features) {
                return this._io.writeFile(false, path, features);
            }]
        }
      , {
            dir: [true, _p._makeDirectory]
          , write: ['path', 'features', 'dir', function(path, features) {
                return this._io.writeFile(true, path, features);
            }]
        }
      , ['features']
      , function(obtain) {
            obtain('check');

            obtain('write');
        }
    );

    // glyph sets & layers

    _p._readLayerContents = function(async) {
        var data = this._readRawLayerContents(async);
        function onData(raw) {
            //jshint validthis:true
            var contents = {}, i, l;
            for(i=0,l=raw.length;i<l;i++)
                // contents[layerName] = directoryName;
                contents[raw[i][0]] = raw[i][1];
            this.layerContents = contents;
        }
        if(async)
            return data.then(onData.bind(this));
        return onData.call(this, data);
    };

    /**
     * Write the layercontents.plist file. This method  *must* be called
     * after all glyph sets have been written.
     */
    _p.writeLayerContents = obtain.factory(
        {
            data: ['layerOrder', function(layerOrder) {
                var newOrder, layerName, i,l
                  , layerNames = Object.keys(this.layerContents)
                  , layerContents
                  ;
                if(layerOrder) {
                    newOrder = [];
                    for(i=0,l=layerOrder.length;i<l;i++) {
                        layerName = layerOrder[i];
                        if(layerName === null) // RLY? was `if layerName is None`
                            layerName = DEFAULT_LAYER_NAME;
                        newOrder.append(layerName);
                    }
                    layerOrder = newOrder;
                }
                else
                    layerOrder = layerNames;

                if(layerOrder === layerNames){}//pass
                else if(layerOrder.length !==  layerNames.length)
                    throw new UFOLibError('layerOrder does not match the glyph '
                                                +'sets that have been created.');

                layerContents = [];
                for(i=0,l=layerOrder.length;i<l;i++) {
                    layerName = layerOrder[i];
                    if(!(layerName in this.layerContents))
                        throw new UFOLibError('layerOrder does not match the glyph '
                                                +'sets that have been created.');
                    layerContents.push([layerName, this.layerContents[layerName]]);
                }
                return layerContents;
            }]
          , write: [false, new obtain.Argument(LAYERCONTENTS_FILENAME)
                                        , 'data', _p._writePlist]
        }
      , {
            write: [true, new obtain.Argument(LAYERCONTENTS_FILENAME)
                                        , 'data', _p._writePlist]
        }
      , ['layerOrder'/*default: null*/]
      , function(obtain) {
          if(this._formatVersion < 3)
                    return;
          return obtain('write');
        }
    );

    _p._findDirectoryForLayerName = function(layerName) {
        var existingLayerName
          , directoryName
          ;

        for(existingLayerName in this.layerContents) {
            directoryName = this.layerContents[existingLayerName];
            if(!layerName && directoryName === DEFAULT_GLYPHS_DIRNAME)
                return directoryName;
            else if(existingLayerName === layerName)
                return directoryName;
        }
        throw new UFOLibError('Could not locate a glyph set directory '
                            + 'for the layer named ' + layerName + '.');
    };

    _p._getGlyphSet = obtain.factory(
        {
            directoryName: ['layerName', 'defaultLayer',
            function (layerName, dl) {
                var existingLayerName, directory, k, existing
                  , defaultLayer = dl === undefined ? true : !!dl
                  ;
                if(this._formatVersion < 3)
                    return DEFAULT_GLYPHS_DIRNAME;

                // if the default flag is on, make sure that the default in the file
                // matches the default being written. also make sure that this layer
                // name is not already linked to a non-default layer.
                if(defaultLayer) {
                    for(existingLayerName in this.layerContents) {
                        directory = this.layerContents[existingLayerName];
                        if(directory === DEFAULT_GLYPHS_DIRNAME) {
                            if(existingLayerName !== layerName)
                                throw new UFOLibError('Another layer is already '
                                                + 'mapped to the default directory.');
                        }
                        // directory !== DEFAULT_GLYPHS_DIRNAME
                        else if(existingLayerName === layerName)
                            throw new UFOLibError('The layer name is already mapped '
                                                + 'to a non-default layer.');
                    }
                }
                // get an existing directory name
                if(layerName in this.layerContents)
                    directory = this.layerContents[layerName];
                // get a  new directory name
                else {
                    if(defaultLayer)
                        directory = DEFAULT_GLYPHS_DIRNAME;
                    else {
                        // not caching this could be slightly expensive,
                        // but caching it will be cumbersome
                        existing = Object.create(null);
                        for(k in this.layerContents)
                            existing[this.layerContents[k].toLowerCase()] = true;
                        directory = userNameToFileName(path.basename(layerName)
                                                        , existing, 'glyphs.');
                    }
                }
                return directory;
            }]
          , io: [function(){ return this._io; }]
          , path: ['layerName', 'directoryName', function(layerName, directory) {
                var path = this._makeDirectory(false, directory);
                // store the mapping
                if(this._formatVersion >= 3)
                    this.layerContents[layerName] = directory;
                return path;
            }]
          , formatVersion: [function(){ return this._formatVersion; } ]
          , GlyphSet: [false, 'io', 'path', 'glyphNameToFileNameFunc', 'formatVersion', GlyphSet.factory]
        }
      , {
            path: ['layerName', 'directoryName', function(layerName, directory) {
                return this._makeDirectory(true, directory)
                           .then(function(path) {
                                // jshint validthis:true
                                // store the mapping
                                if(this._formatVersion >= 3)
                                    this.layerContents[layerName] = directory;
                                return path;
                            }.bind(this));

            }]
          , GlyphSet: [true, 'io', 'path', 'glyphNameToFileNameFunc', 'formatVersion', GlyphSet.factory]
        }
      , [ 'layerName' /* default null */
        , 'defaultLayer'/* default true */
        , 'glyphNameToFileNameFunc' /* default null */]
      , function(obtain) { return obtain('GlyphSet'); }
    );

    /**
     * Return the GlyphSet object associated with the
     * appropriate glyph directory in the .ufo.
     * If layerName is None, the default glyph set
     * will be used. The defaultLayer flag indictes
     * that the layer should be saved into the default
     * glyphs directory.
     */
    _p.getGlyphSet = obtain.factory(
        {
            dfltLayer: ['defaultLayer', function(dl){ return dl === undefined ? true : !!dl;}]
          , layer: ['layerName', 'dfltLayer', function(layerName, dfltLayer) {
                var existingLayerName;
                // only default can be written in < 3
                if(this._formatVersion < 3 && (!dfltLayer || layerName))
                    throw new UFOLibError('Only the default layer can be writen '
                                        + 'in UFO ' + this._formatVersion + '.');

                // locate a layer name when None has been given
                if(!layerName && dfltLayer) {
                    for(existingLayerName in this.layerContents) {
                        if(this.layerContents[existingLayerName] === DEFAULT_GLYPHS_DIRNAME) {
                            layerName = existingLayerName;
                            break;
                        }
                    }
                    if(!layerName)
                        layerName = DEFAULT_LAYER_NAME;
                }
                else if(!layerName && !dfltLayer)
                    throw new UFOLibError('A layer name must be provided for '
                                                        +'non-default layers.');
                return layerName;
            }]
          , GlyphSet:[false, 'layer', 'dfltLayer', 'glyphNameToFileNameFunc', _p._getGlyphSet]
        }
      , {
            GlyphSet:[true, 'layer', 'dfltLayer', 'glyphNameToFileNameFunc', _p._getGlyphSet]
        }
      , [ 'layerName'/*default null*/
        , 'defaultLayer' /*default:true*/
        , 'glyphNameToFileNameFunc'/*default:null*/]
      , function(obtain){ return obtain('GlyphSet'); }
    );

    /**
     * Rename a glyph set.
     *
     * Note: if a GlyphSet object has already been retrieved for
     * layerName, it is up to the caller to inform that object that
     * the directory it represents has changed.
     */
    _p.renameGlyphSet = obtain.factory(
        {
            dirs: ['layerName', 'newLayerName', 'defaultLayer',
            function(layerName, newLayerName, defaultLayer /* default: false */) {
                var k, oldDirectory, newDirectory, existing;
                if(this._formatVersion < 3)
                    throw new UFOLibError('Renaming a glyph set is not supported '
                                        + 'in UFO ' + this._formatVersion + '.');
                // the new and old names can be the same
                // as long as the default is being switched
                if(layerName === newLayerName) {
                    // if the default is off and the layer is already
                    // not the default, skip
                    if(this.layerContents[layerName] !== DEFAULT_GLYPHS_DIRNAME
                                                                && !defaultLayer)
                        return;
                    // if the default is on and the layer is already
                    // the default, skip
                    if(this.layerContents[layerName] === DEFAULT_GLYPHS_DIRNAME
                                                                 && defaultLayer)
                        return;
                }
                else {
                    // make sure the new layer name doesn't already exist
                    if(!newLayerName)
                        newLayerName = DEFAULT_LAYER_NAME;
                    if(newLayerName in this.layerContents)
                        throw new UFOLibError('A layer named "' + newLayerName
                                            + '" already exists.');

                    // make sure the default layer doesn't already exist
                    if(defaultLayer)
                        for(k in this.layerContents)
                            if(DEFAULT_GLYPHS_DIRNAME === this.layerContents[k])
                                throw new UFOLibError('A default layer already exists.');
                }
                // get the paths
                oldDirectory = this._findDirectoryForLayerName(layerName);
                if(defaultLayer)
                    newDirectory = DEFAULT_GLYPHS_DIRNAME;
                else {
                    existing = Object.create(null);
                    for(k in this.layerContents)
                        existing[this.layerContents[k].toLowerCase()] = true;
                    newDirectory = userNameToFileName(path.basename(newLayerName)
                                                    , existing, 'glyphs.');
                }
                // update the internal mapping
                delete this.layerContents[layerName];
                this.layerContents[newLayerName] = newDirectory;
                return {
                    from: [this._path, oldDirectory]
                  , to: [this._path, newDirectory]
                };
            }]
          , rename: ['dirs', function(dirs){
                        return this._io.rename(false, dirs.from, dirs.to);}]
        }
      , {
            rename: ['dirs', function(dirs){
                        return this._io.rename(true, dirs.from, dirs.to);}]
        }
      , ['layerName', 'newLayerName', 'defaultLayer' /* default: false */]
      , function(obtain){return obtain['rename'];}
    );

    /**
     * Remove the glyph set matching layerName.
     */
     // FIXME
    _p.deleteGlyphSet = obtain.factory(
        {
            path: ['layerName', function( layerName) {
                if(this._formatVersion < 3)
                    throw new UFOLibError('Deleting a glyph set is not allowed '
                                        + 'in UFO ' + this._formatVersion + '.');
                return this._findDirectoryForLayerName(layerName);
            }]
          , delete: ['layerName', 'remove', function (layerName) {
                delete this.layerContents[layerName];
            }]
          , remove: [false, 'path', _p._removeAndCleanup]
        }
      , {
            remove: [true, 'path', _p._removeAndCleanup]
        }
      , ['layerName']
      , function(obtain){ return obtain('delete'); }
    );

    _p._ensureDirs = function(async, path) {
        return this._io.ensureDirs(async, path);
    };

    /**
     * Write data to fileName in the images directory.
     * The data must be a valid PNG.
     */
    _p.writeImage = obtain.factory(
        {
            path: ['fileName', function(fileName){
                var basePath = path.normalize(
                                [this._path, IMAGES_DIRNAME].join('/'))
                  , absPath = path.normalize(
                        [this._path, IMAGES_DIRNAME, fileName].join('/'))
                  ;
                if(basePath === absPath)
                    throw new UFOLibError('Image can\'t be directly at the "'
                                +  IMAGES_DIRNAME +'" path: "'+fileName+'"');
                if(absPath.indexOf(basePath) !== 0)
                    throw new UFOLibError('Image must be contained within the "'
                                +  IMAGES_DIRNAME +'" path: "'+fileName+'"');
                return absPath;
            }]
          , parentDir: ['path', path.dirname]
          , validData: ['data', function(data){
                var result = pngValidator(false, undefined, {data:data});
                if(!result[0])
                    throw new UFOLibError(result[1]);
                return true;
            }]
          , ensureDirs: [true, 'parentDir', _p._ensureDirs]
          , write: ['path', 'data', 'ensureDirs', function(path, data) {
                return this._io.writeFile(true, path, data);
            }]
        }
      , {
            ensureDirs: [true, 'parentDir', _p._ensureDirs]
          , write: ['path', 'data', 'ensureDirs', function(path, data) {
                return this._io.writeFile(true, path, data);
            }]
        }
      , ['fileName', 'data']
      , function(obtain){
            if(this._formatVersion < 3)
            throw new UFOLibError('Images are not supported in UFO '
                                            + this._formatVersion + '.');
            obtain('validData');
            return obtain('write');
        }
    );

    _p._removePath = obtain.factory(
        {
            absPath: ['dir', 'relPath', function(dir, relPath) {
                if(this._formatVersion < 3)
                    throw new UFOLibError('The "'+ dir +'" directory is not supported '
                                    +'in UFO ' + this._formatVersion + '.');
                var absDir = path.normalize([this._path, dir].join('/'))
                  , absPath = path.normalize([absDir, relPath].join('/'))
                  ;
                if(absPath.indexOf(absDir) !== 0)
                    throw new UFOLibError('Path must be contained in ' +'the "'
                                + dir +'" but: "' + relPath + '" is not.');
                return absPath;
            }]
          , remove: [false, 'absPath', _p._removeAndCleanup]
        }
      , {
            remove: [true, 'absPath', _p._removeAndCleanup]
        }
      , ['dir', 'relPath']
      , function(obtain){ return obtain('remove'); }
    );

    /**
     * Remove the file named fileName from the images directory.
     * Remove IMAGES_DIRNAME if it is empty after the operation.
     */
    _p.removeImage = function(async, fileName) {
        return this._removePath(async, IMAGES_DIRNAME, fileName);
    };

    /**
     * Remove the file (or directory) at path. The path
     * must be relative to the UFO. This is only allowed
     * for files in the data directory.
     * Remove DATA_DIRNAME if it is empty after the operation.
     */
    _p.removeDataPath = function(async, path) {
        return this._removePath(async, DATA_DIRNAME, path);
    };

    return UFOWriter;
});

/* js-yaml 3.6.1 https://github.com/nodeca/js-yaml */
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define('yaml',[],e);else{var t;t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,t.jsyaml=e()}}(function(){return function e(t,n,i){function r(a,s){if(!n[a]){if(!t[a]){var c="function"==typeof require&&require;if(!s&&c)return c(a,!0);if(o)return o(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var l=n[a]={exports:{}};t[a][0].call(l.exports,function(e){var n=t[a][1][e];return r(n?n:e)},l,l.exports,e,t,n,i)}return n[a].exports}for(var o="function"==typeof require&&require,a=0;a<i.length;a++)r(i[a]);return r}({1:[function(e,t,n){"use strict";function i(e){return function(){throw new Error("Function "+e+" is deprecated and cannot be used.")}}var r=e("./js-yaml/loader"),o=e("./js-yaml/dumper");t.exports.Type=e("./js-yaml/type"),t.exports.Schema=e("./js-yaml/schema"),t.exports.FAILSAFE_SCHEMA=e("./js-yaml/schema/failsafe"),t.exports.JSON_SCHEMA=e("./js-yaml/schema/json"),t.exports.CORE_SCHEMA=e("./js-yaml/schema/core"),t.exports.DEFAULT_SAFE_SCHEMA=e("./js-yaml/schema/default_safe"),t.exports.DEFAULT_FULL_SCHEMA=e("./js-yaml/schema/default_full"),t.exports.load=r.load,t.exports.loadAll=r.loadAll,t.exports.safeLoad=r.safeLoad,t.exports.safeLoadAll=r.safeLoadAll,t.exports.dump=o.dump,t.exports.safeDump=o.safeDump,t.exports.YAMLException=e("./js-yaml/exception"),t.exports.MINIMAL_SCHEMA=e("./js-yaml/schema/failsafe"),t.exports.SAFE_SCHEMA=e("./js-yaml/schema/default_safe"),t.exports.DEFAULT_SCHEMA=e("./js-yaml/schema/default_full"),t.exports.scan=i("scan"),t.exports.parse=i("parse"),t.exports.compose=i("compose"),t.exports.addConstructor=i("addConstructor")},{"./js-yaml/dumper":3,"./js-yaml/exception":4,"./js-yaml/loader":5,"./js-yaml/schema":7,"./js-yaml/schema/core":8,"./js-yaml/schema/default_full":9,"./js-yaml/schema/default_safe":10,"./js-yaml/schema/failsafe":11,"./js-yaml/schema/json":12,"./js-yaml/type":13}],2:[function(e,t,n){"use strict";function i(e){return"undefined"==typeof e||null===e}function r(e){return"object"==typeof e&&null!==e}function o(e){return Array.isArray(e)?e:i(e)?[]:[e]}function a(e,t){var n,i,r,o;if(t)for(o=Object.keys(t),n=0,i=o.length;i>n;n+=1)r=o[n],e[r]=t[r];return e}function s(e,t){var n,i="";for(n=0;t>n;n+=1)i+=e;return i}function c(e){return 0===e&&Number.NEGATIVE_INFINITY===1/e}t.exports.isNothing=i,t.exports.isObject=r,t.exports.toArray=o,t.exports.repeat=s,t.exports.isNegativeZero=c,t.exports.extend=a},{}],3:[function(e,t,n){"use strict";function i(e,t){var n,i,r,o,a,s,c;if(null===t)return{};for(n={},i=Object.keys(t),r=0,o=i.length;o>r;r+=1)a=i[r],s=String(t[a]),"!!"===a.slice(0,2)&&(a="tag:yaml.org,2002:"+a.slice(2)),c=e.compiledTypeMap[a],c&&L.call(c.styleAliases,s)&&(s=c.styleAliases[s]),n[a]=s;return n}function r(e){var t,n,i;if(t=e.toString(16).toUpperCase(),255>=e)n="x",i=2;else if(65535>=e)n="u",i=4;else{if(!(4294967295>=e))throw new N("code point within a string may not be greater than 0xFFFFFFFF");n="U",i=8}return"\\"+n+F.repeat("0",i-t.length)+t}function o(e){this.schema=e.schema||M,this.indent=Math.max(1,e.indent||2),this.skipInvalid=e.skipInvalid||!1,this.flowLevel=F.isNothing(e.flowLevel)?-1:e.flowLevel,this.styleMap=i(this.schema,e.styles||null),this.sortKeys=e.sortKeys||!1,this.lineWidth=e.lineWidth||80,this.noRefs=e.noRefs||!1,this.noCompatMode=e.noCompatMode||!1,this.implicitTypes=this.schema.compiledImplicit,this.explicitTypes=this.schema.compiledExplicit,this.tag=null,this.result="",this.duplicates=[],this.usedDuplicates=null}function a(e,t){for(var n,i=F.repeat(" ",t),r=0,o=-1,a="",s=e.length;s>r;)o=e.indexOf("\n",r),-1===o?(n=e.slice(r),r=s):(n=e.slice(r,o+1),r=o+1),n.length&&"\n"!==n&&(a+=i),a+=n;return a}function s(e,t){return"\n"+F.repeat(" ",e.indent*t)}function c(e,t){var n,i,r;for(n=0,i=e.implicitTypes.length;i>n;n+=1)if(r=e.implicitTypes[n],r.resolve(t))return!0;return!1}function u(e){return e===q||e===D}function l(e){return e>=32&&126>=e||e>=161&&55295>=e&&8232!==e&&8233!==e||e>=57344&&65533>=e&&65279!==e||e>=65536&&1114111>=e}function p(e){return l(e)&&65279!==e&&e!==H&&e!==Q&&e!==X&&e!==te&&e!==ie&&e!==V&&e!==B}function f(e){return l(e)&&65279!==e&&!u(e)&&e!==G&&e!==z&&e!==V&&e!==H&&e!==Q&&e!==X&&e!==te&&e!==ie&&e!==B&&e!==W&&e!==$&&e!==Y&&e!==ne&&e!==Z&&e!==K&&e!==R&&e!==P&&e!==J&&e!==ee}function d(e,t,n,i,r){var o,a,s=!1,c=!1,d=-1!==i,h=-1,m=f(e.charCodeAt(0))&&!u(e.charCodeAt(e.length-1));if(t)for(o=0;o<e.length;o++){if(a=e.charCodeAt(o),!l(a))return le;m=m&&p(a)}else{for(o=0;o<e.length;o++){if(a=e.charCodeAt(o),a===U)s=!0,d&&(c=c||o-h-1>i&&" "!==e[h+1],h=o);else if(!l(a))return le;m=m&&p(a)}c=c||d&&o-h-1>i&&" "!==e[h+1]}return s||c?" "===e[0]&&n>9?le:c?ue:ce:m&&!r(e)?ae:se}function h(e,t,n,i){e.dump=function(){function r(t){return c(e,t)}if(0===t.length)return"''";if(!e.noCompatMode&&-1!==oe.indexOf(t))return"'"+t+"'";var o=e.indent*Math.max(1,n),s=-1===e.lineWidth?-1:Math.max(Math.min(e.lineWidth,40),e.lineWidth-o),u=i||e.flowLevel>-1&&n>=e.flowLevel;switch(d(t,u,e.indent,s,r)){case ae:return t;case se:return"'"+t.replace(/'/g,"''")+"'";case ce:return"|"+m(t,e.indent)+g(a(t,o));case ue:return">"+m(t,e.indent)+g(a(y(t,s),o));case le:return'"'+v(t,s)+'"';default:throw new N("impossible error: invalid scalar style")}}()}function m(e,t){var n=" "===e[0]?String(t):"",i="\n"===e[e.length-1],r=i&&("\n"===e[e.length-2]||"\n"===e),o=r?"+":i?"":"-";return n+o+"\n"}function g(e){return"\n"===e[e.length-1]?e.slice(0,-1):e}function y(e,t){for(var n,i,r=/(\n+)([^\n]*)/g,o=function(){var n=e.indexOf("\n");return n=-1!==n?n:e.length,r.lastIndex=n,x(e.slice(0,n),t)}(),a="\n"===e[0]||" "===e[0];i=r.exec(e);){var s=i[1],c=i[2];n=" "===c[0],o+=s+(a||n||""===c?"":"\n")+x(c,t),a=n}return o}function x(e,t){if(""===e||" "===e[0])return e;for(var n,i,r=/ [^ ]/g,o=0,a=0,s=0,c="";n=r.exec(e);)s=n.index,s-o>t&&(i=a>o?a:s,c+="\n"+e.slice(o,i),o=i+1),a=s;return c+="\n",c+=e.length-o>t&&a>o?e.slice(o,a)+"\n"+e.slice(a+1):e.slice(o),c.slice(1)}function v(e){for(var t,n,i="",o=0;o<e.length;o++)t=e.charCodeAt(o),n=re[t],i+=!n&&l(t)?e[o]:n||r(t);return i}function A(e,t,n){var i,r,o="",a=e.tag;for(i=0,r=n.length;r>i;i+=1)j(e,t,n[i],!1,!1)&&(0!==i&&(o+=", "),o+=e.dump);e.tag=a,e.dump="["+o+"]"}function b(e,t,n,i){var r,o,a="",c=e.tag;for(r=0,o=n.length;o>r;r+=1)j(e,t+1,n[r],!0,!0)&&(i&&0===r||(a+=s(e,t)),a+="- "+e.dump);e.tag=c,e.dump=a||"[]"}function w(e,t,n){var i,r,o,a,s,c="",u=e.tag,l=Object.keys(n);for(i=0,r=l.length;r>i;i+=1)s="",0!==i&&(s+=", "),o=l[i],a=n[o],j(e,t,o,!1,!1)&&(e.dump.length>1024&&(s+="? "),s+=e.dump+": ",j(e,t,a,!1,!1)&&(s+=e.dump,c+=s));e.tag=u,e.dump="{"+c+"}"}function C(e,t,n,i){var r,o,a,c,u,l,p="",f=e.tag,d=Object.keys(n);if(e.sortKeys===!0)d.sort();else if("function"==typeof e.sortKeys)d.sort(e.sortKeys);else if(e.sortKeys)throw new N("sortKeys must be a boolean or a function");for(r=0,o=d.length;o>r;r+=1)l="",i&&0===r||(l+=s(e,t)),a=d[r],c=n[a],j(e,t+1,a,!0,!0,!0)&&(u=null!==e.tag&&"?"!==e.tag||e.dump&&e.dump.length>1024,u&&(l+=e.dump&&U===e.dump.charCodeAt(0)?"?":"? "),l+=e.dump,u&&(l+=s(e,t)),j(e,t+1,c,!0,u)&&(l+=e.dump&&U===e.dump.charCodeAt(0)?":":": ",l+=e.dump,p+=l));e.tag=f,e.dump=p||"{}"}function k(e,t,n){var i,r,o,a,s,c;for(r=n?e.explicitTypes:e.implicitTypes,o=0,a=r.length;a>o;o+=1)if(s=r[o],(s.instanceOf||s.predicate)&&(!s.instanceOf||"object"==typeof t&&t instanceof s.instanceOf)&&(!s.predicate||s.predicate(t))){if(e.tag=n?s.tag:"?",s.represent){if(c=e.styleMap[s.tag]||s.defaultStyle,"[object Function]"===T.call(s.represent))i=s.represent(t,c);else{if(!L.call(s.represent,c))throw new N("!<"+s.tag+'> tag resolver accepts not "'+c+'" style');i=s.represent[c](t,c)}e.dump=i}return!0}return!1}function j(e,t,n,i,r,o){e.tag=null,e.dump=n,k(e,n,!1)||k(e,n,!0);var a=T.call(e.dump);i&&(i=e.flowLevel<0||e.flowLevel>t);var s,c,u="[object Object]"===a||"[object Array]"===a;if(u&&(s=e.duplicates.indexOf(n),c=-1!==s),(null!==e.tag&&"?"!==e.tag||c||2!==e.indent&&t>0)&&(r=!1),c&&e.usedDuplicates[s])e.dump="*ref_"+s;else{if(u&&c&&!e.usedDuplicates[s]&&(e.usedDuplicates[s]=!0),"[object Object]"===a)i&&0!==Object.keys(e.dump).length?(C(e,t,e.dump,r),c&&(e.dump="&ref_"+s+e.dump)):(w(e,t,e.dump),c&&(e.dump="&ref_"+s+" "+e.dump));else if("[object Array]"===a)i&&0!==e.dump.length?(b(e,t,e.dump,r),c&&(e.dump="&ref_"+s+e.dump)):(A(e,t,e.dump),c&&(e.dump="&ref_"+s+" "+e.dump));else{if("[object String]"!==a){if(e.skipInvalid)return!1;throw new N("unacceptable kind of an object to dump "+a)}"?"!==e.tag&&h(e,e.dump,t,o)}null!==e.tag&&"?"!==e.tag&&(e.dump="!<"+e.tag+"> "+e.dump)}return!0}function I(e,t){var n,i,r=[],o=[];for(S(e,r,o),n=0,i=o.length;i>n;n+=1)t.duplicates.push(r[o[n]]);t.usedDuplicates=new Array(i)}function S(e,t,n){var i,r,o;if(null!==e&&"object"==typeof e)if(r=t.indexOf(e),-1!==r)-1===n.indexOf(r)&&n.push(r);else if(t.push(e),Array.isArray(e))for(r=0,o=e.length;o>r;r+=1)S(e[r],t,n);else for(i=Object.keys(e),r=0,o=i.length;o>r;r+=1)S(e[i[r]],t,n)}function O(e,t){t=t||{};var n=new o(t);return n.noRefs||I(e,n),j(n,0,e,!0,!0)?n.dump+"\n":""}function E(e,t){return O(e,F.extend({schema:_},t))}var F=e("./common"),N=e("./exception"),M=e("./schema/default_full"),_=e("./schema/default_safe"),T=Object.prototype.toString,L=Object.prototype.hasOwnProperty,D=9,U=10,q=32,Y=33,R=34,B=35,P=37,W=38,K=39,$=42,H=44,G=45,V=58,Z=62,z=63,J=64,Q=91,X=93,ee=96,te=123,ne=124,ie=125,re={};re[0]="\\0",re[7]="\\a",re[8]="\\b",re[9]="\\t",re[10]="\\n",re[11]="\\v",re[12]="\\f",re[13]="\\r",re[27]="\\e",re[34]='\\"',re[92]="\\\\",re[133]="\\N",re[160]="\\_",re[8232]="\\L",re[8233]="\\P";var oe=["y","Y","yes","Yes","YES","on","On","ON","n","N","no","No","NO","off","Off","OFF"],ae=1,se=2,ce=3,ue=4,le=5;t.exports.dump=O,t.exports.safeDump=E},{"./common":2,"./exception":4,"./schema/default_full":9,"./schema/default_safe":10}],4:[function(e,t,n){"use strict";function i(e,t){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack||"",this.name="YAMLException",this.reason=e,this.mark=t,this.message=(this.reason||"(unknown reason)")+(this.mark?" "+this.mark.toString():"")}i.prototype=Object.create(Error.prototype),i.prototype.constructor=i,i.prototype.toString=function(e){var t=this.name+": ";return t+=this.reason||"(unknown reason)",!e&&this.mark&&(t+=" "+this.mark.toString()),t},t.exports=i},{}],5:[function(e,t,n){"use strict";function i(e){return 10===e||13===e}function r(e){return 9===e||32===e}function o(e){return 9===e||32===e||10===e||13===e}function a(e){return 44===e||91===e||93===e||123===e||125===e}function s(e){var t;return e>=48&&57>=e?e-48:(t=32|e,t>=97&&102>=t?t-97+10:-1)}function c(e){return 120===e?2:117===e?4:85===e?8:0}function u(e){return e>=48&&57>=e?e-48:-1}function l(e){return 48===e?"\x00":97===e?"":98===e?"\b":116===e?"	":9===e?"	":110===e?"\n":118===e?"\x0B":102===e?"\f":114===e?"\r":101===e?"":32===e?" ":34===e?'"':47===e?"/":92===e?"\\":78===e?"":95===e?" ":76===e?"\u2028":80===e?"\u2029":""}function p(e){return 65535>=e?String.fromCharCode(e):String.fromCharCode((e-65536>>10)+55296,(e-65536&1023)+56320)}function f(e,t){this.input=e,this.filename=t.filename||null,this.schema=t.schema||K,this.onWarning=t.onWarning||null,this.legacy=t.legacy||!1,this.json=t.json||!1,this.listener=t.listener||null,this.implicitTypes=this.schema.compiledImplicit,this.typeMap=this.schema.compiledTypeMap,this.length=e.length,this.position=0,this.line=0,this.lineStart=0,this.lineIndent=0,this.documents=[]}function d(e,t){return new B(t,new P(e.filename,e.input,e.position,e.line,e.position-e.lineStart))}function h(e,t){throw d(e,t)}function m(e,t){e.onWarning&&e.onWarning.call(null,d(e,t))}function g(e,t,n,i){var r,o,a,s;if(n>t){if(s=e.input.slice(t,n),i)for(r=0,o=s.length;o>r;r+=1)a=s.charCodeAt(r),9===a||a>=32&&1114111>=a||h(e,"expected valid JSON character");else X.test(s)&&h(e,"the stream contains non-printable characters");e.result+=s}}function y(e,t,n,i){var r,o,a,s;for(R.isObject(n)||h(e,"cannot merge mappings; the provided source object is unacceptable"),r=Object.keys(n),a=0,s=r.length;s>a;a+=1)o=r[a],$.call(t,o)||(t[o]=n[o],i[o]=!0)}function x(e,t,n,i,r,o){var a,s;if(r=String(r),null===t&&(t={}),"tag:yaml.org,2002:merge"===i)if(Array.isArray(o))for(a=0,s=o.length;s>a;a+=1)y(e,t,o[a],n);else y(e,t,o,n);else e.json||$.call(n,r)||!$.call(t,r)||h(e,"duplicated mapping key"),t[r]=o,delete n[r];return t}function v(e){var t;t=e.input.charCodeAt(e.position),10===t?e.position++:13===t?(e.position++,10===e.input.charCodeAt(e.position)&&e.position++):h(e,"a line break is expected"),e.line+=1,e.lineStart=e.position}function A(e,t,n){for(var o=0,a=e.input.charCodeAt(e.position);0!==a;){for(;r(a);)a=e.input.charCodeAt(++e.position);if(t&&35===a)do a=e.input.charCodeAt(++e.position);while(10!==a&&13!==a&&0!==a);if(!i(a))break;for(v(e),a=e.input.charCodeAt(e.position),o++,e.lineIndent=0;32===a;)e.lineIndent++,a=e.input.charCodeAt(++e.position)}return-1!==n&&0!==o&&e.lineIndent<n&&m(e,"deficient indentation"),o}function b(e){var t,n=e.position;return t=e.input.charCodeAt(n),(45===t||46===t)&&t===e.input.charCodeAt(n+1)&&t===e.input.charCodeAt(n+2)&&(n+=3,t=e.input.charCodeAt(n),0===t||o(t))}function w(e,t){1===t?e.result+=" ":t>1&&(e.result+=R.repeat("\n",t-1))}function C(e,t,n){var s,c,u,l,p,f,d,h,m,y=e.kind,x=e.result;if(m=e.input.charCodeAt(e.position),o(m)||a(m)||35===m||38===m||42===m||33===m||124===m||62===m||39===m||34===m||37===m||64===m||96===m)return!1;if((63===m||45===m)&&(c=e.input.charCodeAt(e.position+1),o(c)||n&&a(c)))return!1;for(e.kind="scalar",e.result="",u=l=e.position,p=!1;0!==m;){if(58===m){if(c=e.input.charCodeAt(e.position+1),o(c)||n&&a(c))break}else if(35===m){if(s=e.input.charCodeAt(e.position-1),o(s))break}else{if(e.position===e.lineStart&&b(e)||n&&a(m))break;if(i(m)){if(f=e.line,d=e.lineStart,h=e.lineIndent,A(e,!1,-1),e.lineIndent>=t){p=!0,m=e.input.charCodeAt(e.position);continue}e.position=l,e.line=f,e.lineStart=d,e.lineIndent=h;break}}p&&(g(e,u,l,!1),w(e,e.line-f),u=l=e.position,p=!1),r(m)||(l=e.position+1),m=e.input.charCodeAt(++e.position)}return g(e,u,l,!1),e.result?!0:(e.kind=y,e.result=x,!1)}function k(e,t){var n,r,o;if(n=e.input.charCodeAt(e.position),39!==n)return!1;for(e.kind="scalar",e.result="",e.position++,r=o=e.position;0!==(n=e.input.charCodeAt(e.position));)if(39===n){if(g(e,r,e.position,!0),n=e.input.charCodeAt(++e.position),39!==n)return!0;r=o=e.position,e.position++}else i(n)?(g(e,r,o,!0),w(e,A(e,!1,t)),r=o=e.position):e.position===e.lineStart&&b(e)?h(e,"unexpected end of the document within a single quoted scalar"):(e.position++,o=e.position);h(e,"unexpected end of the stream within a single quoted scalar")}function j(e,t){var n,r,o,a,u,l;if(l=e.input.charCodeAt(e.position),34!==l)return!1;for(e.kind="scalar",e.result="",e.position++,n=r=e.position;0!==(l=e.input.charCodeAt(e.position));){if(34===l)return g(e,n,e.position,!0),e.position++,!0;if(92===l){if(g(e,n,e.position,!0),l=e.input.charCodeAt(++e.position),i(l))A(e,!1,t);else if(256>l&&re[l])e.result+=oe[l],e.position++;else if((u=c(l))>0){for(o=u,a=0;o>0;o--)l=e.input.charCodeAt(++e.position),(u=s(l))>=0?a=(a<<4)+u:h(e,"expected hexadecimal character");e.result+=p(a),e.position++}else h(e,"unknown escape sequence");n=r=e.position}else i(l)?(g(e,n,r,!0),w(e,A(e,!1,t)),n=r=e.position):e.position===e.lineStart&&b(e)?h(e,"unexpected end of the document within a double quoted scalar"):(e.position++,r=e.position)}h(e,"unexpected end of the stream within a double quoted scalar")}function I(e,t){var n,i,r,a,s,c,u,l,p,f,d,m=!0,g=e.tag,y=e.anchor,v={};if(d=e.input.charCodeAt(e.position),91===d)a=93,u=!1,i=[];else{if(123!==d)return!1;a=125,u=!0,i={}}for(null!==e.anchor&&(e.anchorMap[e.anchor]=i),d=e.input.charCodeAt(++e.position);0!==d;){if(A(e,!0,t),d=e.input.charCodeAt(e.position),d===a)return e.position++,e.tag=g,e.anchor=y,e.kind=u?"mapping":"sequence",e.result=i,!0;m||h(e,"missed comma between flow collection entries"),p=l=f=null,s=c=!1,63===d&&(r=e.input.charCodeAt(e.position+1),o(r)&&(s=c=!0,e.position++,A(e,!0,t))),n=e.line,_(e,t,H,!1,!0),p=e.tag,l=e.result,A(e,!0,t),d=e.input.charCodeAt(e.position),!c&&e.line!==n||58!==d||(s=!0,d=e.input.charCodeAt(++e.position),A(e,!0,t),_(e,t,H,!1,!0),f=e.result),u?x(e,i,v,p,l,f):s?i.push(x(e,null,v,p,l,f)):i.push(l),A(e,!0,t),d=e.input.charCodeAt(e.position),44===d?(m=!0,d=e.input.charCodeAt(++e.position)):m=!1}h(e,"unexpected end of the stream within a flow collection")}function S(e,t){var n,o,a,s,c=z,l=!1,p=!1,f=t,d=0,m=!1;if(s=e.input.charCodeAt(e.position),124===s)o=!1;else{if(62!==s)return!1;o=!0}for(e.kind="scalar",e.result="";0!==s;)if(s=e.input.charCodeAt(++e.position),43===s||45===s)z===c?c=43===s?Q:J:h(e,"repeat of a chomping mode identifier");else{if(!((a=u(s))>=0))break;0===a?h(e,"bad explicit indentation width of a block scalar; it cannot be less than one"):p?h(e,"repeat of an indentation width identifier"):(f=t+a-1,p=!0)}if(r(s)){do s=e.input.charCodeAt(++e.position);while(r(s));if(35===s)do s=e.input.charCodeAt(++e.position);while(!i(s)&&0!==s)}for(;0!==s;){for(v(e),e.lineIndent=0,s=e.input.charCodeAt(e.position);(!p||e.lineIndent<f)&&32===s;)e.lineIndent++,s=e.input.charCodeAt(++e.position);if(!p&&e.lineIndent>f&&(f=e.lineIndent),i(s))d++;else{if(e.lineIndent<f){c===Q?e.result+=R.repeat("\n",l?1+d:d):c===z&&l&&(e.result+="\n");break}for(o?r(s)?(m=!0,e.result+=R.repeat("\n",l?1+d:d)):m?(m=!1,e.result+=R.repeat("\n",d+1)):0===d?l&&(e.result+=" "):e.result+=R.repeat("\n",d):e.result+=R.repeat("\n",l?1+d:d),l=!0,p=!0,d=0,n=e.position;!i(s)&&0!==s;)s=e.input.charCodeAt(++e.position);g(e,n,e.position,!1)}}return!0}function O(e,t){var n,i,r,a=e.tag,s=e.anchor,c=[],u=!1;for(null!==e.anchor&&(e.anchorMap[e.anchor]=c),r=e.input.charCodeAt(e.position);0!==r&&45===r&&(i=e.input.charCodeAt(e.position+1),o(i));)if(u=!0,e.position++,A(e,!0,-1)&&e.lineIndent<=t)c.push(null),r=e.input.charCodeAt(e.position);else if(n=e.line,_(e,t,V,!1,!0),c.push(e.result),A(e,!0,-1),r=e.input.charCodeAt(e.position),(e.line===n||e.lineIndent>t)&&0!==r)h(e,"bad indentation of a sequence entry");else if(e.lineIndent<t)break;return u?(e.tag=a,e.anchor=s,e.kind="sequence",e.result=c,!0):!1}function E(e,t,n){var i,a,s,c,u=e.tag,l=e.anchor,p={},f={},d=null,m=null,g=null,y=!1,v=!1;for(null!==e.anchor&&(e.anchorMap[e.anchor]=p),c=e.input.charCodeAt(e.position);0!==c;){if(i=e.input.charCodeAt(e.position+1),s=e.line,63!==c&&58!==c||!o(i)){if(!_(e,n,G,!1,!0))break;if(e.line===s){for(c=e.input.charCodeAt(e.position);r(c);)c=e.input.charCodeAt(++e.position);if(58===c)c=e.input.charCodeAt(++e.position),o(c)||h(e,"a whitespace character is expected after the key-value separator within a block mapping"),y&&(x(e,p,f,d,m,null),d=m=g=null),v=!0,y=!1,a=!1,d=e.tag,m=e.result;else{if(!v)return e.tag=u,e.anchor=l,!0;h(e,"can not read an implicit mapping pair; a colon is missed")}}else{if(!v)return e.tag=u,e.anchor=l,!0;h(e,"can not read a block mapping entry; a multiline key may not be an implicit key")}}else 63===c?(y&&(x(e,p,f,d,m,null),d=m=g=null),v=!0,y=!0,a=!0):y?(y=!1,a=!0):h(e,"incomplete explicit mapping pair; a key node is missed"),e.position+=1,c=i;if((e.line===s||e.lineIndent>t)&&(_(e,t,Z,!0,a)&&(y?m=e.result:g=e.result),y||(x(e,p,f,d,m,g),d=m=g=null),A(e,!0,-1),c=e.input.charCodeAt(e.position)),e.lineIndent>t&&0!==c)h(e,"bad indentation of a mapping entry");else if(e.lineIndent<t)break}return y&&x(e,p,f,d,m,null),v&&(e.tag=u,e.anchor=l,e.kind="mapping",e.result=p),v}function F(e){var t,n,i,r,a=!1,s=!1;if(r=e.input.charCodeAt(e.position),33!==r)return!1;if(null!==e.tag&&h(e,"duplication of a tag property"),r=e.input.charCodeAt(++e.position),60===r?(a=!0,r=e.input.charCodeAt(++e.position)):33===r?(s=!0,n="!!",r=e.input.charCodeAt(++e.position)):n="!",t=e.position,a){do r=e.input.charCodeAt(++e.position);while(0!==r&&62!==r);e.position<e.length?(i=e.input.slice(t,e.position),r=e.input.charCodeAt(++e.position)):h(e,"unexpected end of the stream within a verbatim tag")}else{for(;0!==r&&!o(r);)33===r&&(s?h(e,"tag suffix cannot contain exclamation marks"):(n=e.input.slice(t-1,e.position+1),ne.test(n)||h(e,"named tag handle cannot contain such characters"),s=!0,t=e.position+1)),r=e.input.charCodeAt(++e.position);i=e.input.slice(t,e.position),te.test(i)&&h(e,"tag suffix cannot contain flow indicator characters")}return i&&!ie.test(i)&&h(e,"tag name cannot contain such characters: "+i),a?e.tag=i:$.call(e.tagMap,n)?e.tag=e.tagMap[n]+i:"!"===n?e.tag="!"+i:"!!"===n?e.tag="tag:yaml.org,2002:"+i:h(e,'undeclared tag handle "'+n+'"'),!0}function N(e){var t,n;if(n=e.input.charCodeAt(e.position),38!==n)return!1;for(null!==e.anchor&&h(e,"duplication of an anchor property"),n=e.input.charCodeAt(++e.position),t=e.position;0!==n&&!o(n)&&!a(n);)n=e.input.charCodeAt(++e.position);return e.position===t&&h(e,"name of an anchor node must contain at least one character"),e.anchor=e.input.slice(t,e.position),!0}function M(e){var t,n,i;if(i=e.input.charCodeAt(e.position),42!==i)return!1;for(i=e.input.charCodeAt(++e.position),t=e.position;0!==i&&!o(i)&&!a(i);)i=e.input.charCodeAt(++e.position);return e.position===t&&h(e,"name of an alias node must contain at least one character"),n=e.input.slice(t,e.position),e.anchorMap.hasOwnProperty(n)||h(e,'unidentified alias "'+n+'"'),e.result=e.anchorMap[n],A(e,!0,-1),!0}function _(e,t,n,i,r){var o,a,s,c,u,l,p,f,d=1,m=!1,g=!1;if(null!==e.listener&&e.listener("open",e),e.tag=null,e.anchor=null,e.kind=null,e.result=null,o=a=s=Z===n||V===n,i&&A(e,!0,-1)&&(m=!0,e.lineIndent>t?d=1:e.lineIndent===t?d=0:e.lineIndent<t&&(d=-1)),1===d)for(;F(e)||N(e);)A(e,!0,-1)?(m=!0,s=o,e.lineIndent>t?d=1:e.lineIndent===t?d=0:e.lineIndent<t&&(d=-1)):s=!1;if(s&&(s=m||r),1!==d&&Z!==n||(p=H===n||G===n?t:t+1,f=e.position-e.lineStart,1===d?s&&(O(e,f)||E(e,f,p))||I(e,p)?g=!0:(a&&S(e,p)||k(e,p)||j(e,p)?g=!0:M(e)?(g=!0,null===e.tag&&null===e.anchor||h(e,"alias node should not have any properties")):C(e,p,H===n)&&(g=!0,null===e.tag&&(e.tag="?")),null!==e.anchor&&(e.anchorMap[e.anchor]=e.result)):0===d&&(g=s&&O(e,f))),null!==e.tag&&"!"!==e.tag)if("?"===e.tag){for(c=0,u=e.implicitTypes.length;u>c;c+=1)if(l=e.implicitTypes[c],l.resolve(e.result)){e.result=l.construct(e.result),e.tag=l.tag,null!==e.anchor&&(e.anchorMap[e.anchor]=e.result);break}}else $.call(e.typeMap,e.tag)?(l=e.typeMap[e.tag],null!==e.result&&l.kind!==e.kind&&h(e,"unacceptable node kind for !<"+e.tag+'> tag; it should be "'+l.kind+'", not "'+e.kind+'"'),l.resolve(e.result)?(e.result=l.construct(e.result),null!==e.anchor&&(e.anchorMap[e.anchor]=e.result)):h(e,"cannot resolve a node with !<"+e.tag+"> explicit tag")):h(e,"unknown tag !<"+e.tag+">");return null!==e.listener&&e.listener("close",e),null!==e.tag||null!==e.anchor||g}function T(e){var t,n,a,s,c=e.position,u=!1;for(e.version=null,e.checkLineBreaks=e.legacy,e.tagMap={},e.anchorMap={};0!==(s=e.input.charCodeAt(e.position))&&(A(e,!0,-1),s=e.input.charCodeAt(e.position),!(e.lineIndent>0||37!==s));){for(u=!0,s=e.input.charCodeAt(++e.position),t=e.position;0!==s&&!o(s);)s=e.input.charCodeAt(++e.position);for(n=e.input.slice(t,e.position),a=[],n.length<1&&h(e,"directive name must not be less than one character in length");0!==s;){for(;r(s);)s=e.input.charCodeAt(++e.position);if(35===s){do s=e.input.charCodeAt(++e.position);while(0!==s&&!i(s));break}if(i(s))break;for(t=e.position;0!==s&&!o(s);)s=e.input.charCodeAt(++e.position);a.push(e.input.slice(t,e.position))}0!==s&&v(e),$.call(se,n)?se[n](e,n,a):m(e,'unknown document directive "'+n+'"')}return A(e,!0,-1),0===e.lineIndent&&45===e.input.charCodeAt(e.position)&&45===e.input.charCodeAt(e.position+1)&&45===e.input.charCodeAt(e.position+2)?(e.position+=3,A(e,!0,-1)):u&&h(e,"directives end mark is expected"),_(e,e.lineIndent-1,Z,!1,!0),A(e,!0,-1),e.checkLineBreaks&&ee.test(e.input.slice(c,e.position))&&m(e,"non-ASCII line breaks are interpreted as content"),e.documents.push(e.result),e.position===e.lineStart&&b(e)?void(46===e.input.charCodeAt(e.position)&&(e.position+=3,A(e,!0,-1))):void(e.position<e.length-1&&h(e,"end of the stream or a document separator is expected"))}function L(e,t){e=String(e),t=t||{},0!==e.length&&(10!==e.charCodeAt(e.length-1)&&13!==e.charCodeAt(e.length-1)&&(e+="\n"),65279===e.charCodeAt(0)&&(e=e.slice(1)));var n=new f(e,t);for(n.input+="\x00";32===n.input.charCodeAt(n.position);)n.lineIndent+=1,n.position+=1;for(;n.position<n.length-1;)T(n);return n.documents}function D(e,t,n){var i,r,o=L(e,n);for(i=0,r=o.length;r>i;i+=1)t(o[i])}function U(e,t){var n=L(e,t);if(0!==n.length){if(1===n.length)return n[0];throw new B("expected a single document in the stream, but found more")}}function q(e,t,n){D(e,t,R.extend({schema:W},n))}function Y(e,t){return U(e,R.extend({schema:W},t))}for(var R=e("./common"),B=e("./exception"),P=e("./mark"),W=e("./schema/default_safe"),K=e("./schema/default_full"),$=Object.prototype.hasOwnProperty,H=1,G=2,V=3,Z=4,z=1,J=2,Q=3,X=/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,ee=/[\x85\u2028\u2029]/,te=/[,\[\]\{\}]/,ne=/^(?:!|!!|![a-z\-]+!)$/i,ie=/^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i,re=new Array(256),oe=new Array(256),ae=0;256>ae;ae++)re[ae]=l(ae)?1:0,oe[ae]=l(ae);var se={YAML:function(e,t,n){var i,r,o;null!==e.version&&h(e,"duplication of %YAML directive"),1!==n.length&&h(e,"YAML directive accepts exactly one argument"),i=/^([0-9]+)\.([0-9]+)$/.exec(n[0]),null===i&&h(e,"ill-formed argument of the YAML directive"),r=parseInt(i[1],10),o=parseInt(i[2],10),1!==r&&h(e,"unacceptable YAML version of the document"),e.version=n[0],e.checkLineBreaks=2>o,1!==o&&2!==o&&m(e,"unsupported YAML version of the document")},TAG:function(e,t,n){var i,r;2!==n.length&&h(e,"TAG directive accepts exactly two arguments"),i=n[0],r=n[1],ne.test(i)||h(e,"ill-formed tag handle (first argument) of the TAG directive"),$.call(e.tagMap,i)&&h(e,'there is a previously declared suffix for "'+i+'" tag handle'),ie.test(r)||h(e,"ill-formed tag prefix (second argument) of the TAG directive"),e.tagMap[i]=r}};t.exports.loadAll=D,t.exports.load=U,t.exports.safeLoadAll=q,t.exports.safeLoad=Y},{"./common":2,"./exception":4,"./mark":6,"./schema/default_full":9,"./schema/default_safe":10}],6:[function(e,t,n){"use strict";function i(e,t,n,i,r){this.name=e,this.buffer=t,this.position=n,this.line=i,this.column=r}var r=e("./common");i.prototype.getSnippet=function(e,t){var n,i,o,a,s;if(!this.buffer)return null;for(e=e||4,t=t||75,n="",i=this.position;i>0&&-1==="\x00\r\n\u2028\u2029".indexOf(this.buffer.charAt(i-1));)if(i-=1,this.position-i>t/2-1){n=" ... ",i+=5;break}for(o="",a=this.position;a<this.buffer.length&&-1==="\x00\r\n\u2028\u2029".indexOf(this.buffer.charAt(a));)if(a+=1,a-this.position>t/2-1){o=" ... ",a-=5;break}return s=this.buffer.slice(i,a),r.repeat(" ",e)+n+s+o+"\n"+r.repeat(" ",e+this.position-i+n.length)+"^"},i.prototype.toString=function(e){var t,n="";return this.name&&(n+='in "'+this.name+'" '),n+="at line "+(this.line+1)+", column "+(this.column+1),e||(t=this.getSnippet(),t&&(n+=":\n"+t)),n},t.exports=i},{"./common":2}],7:[function(e,t,n){"use strict";function i(e,t,n){var r=[];return e.include.forEach(function(e){n=i(e,t,n)}),e[t].forEach(function(e){n.forEach(function(t,n){t.tag===e.tag&&r.push(n)}),n.push(e)}),n.filter(function(e,t){return-1===r.indexOf(t)})}function r(){function e(e){i[e.tag]=e}var t,n,i={};for(t=0,n=arguments.length;n>t;t+=1)arguments[t].forEach(e);return i}function o(e){this.include=e.include||[],this.implicit=e.implicit||[],this.explicit=e.explicit||[],this.implicit.forEach(function(e){if(e.loadKind&&"scalar"!==e.loadKind)throw new s("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.")}),this.compiledImplicit=i(this,"implicit",[]),this.compiledExplicit=i(this,"explicit",[]),this.compiledTypeMap=r(this.compiledImplicit,this.compiledExplicit)}var a=e("./common"),s=e("./exception"),c=e("./type");o.DEFAULT=null,o.create=function(){var e,t;switch(arguments.length){case 1:e=o.DEFAULT,t=arguments[0];break;case 2:e=arguments[0],t=arguments[1];break;default:throw new s("Wrong number of arguments for Schema.create function")}if(e=a.toArray(e),t=a.toArray(t),!e.every(function(e){return e instanceof o}))throw new s("Specified list of super schemas (or a single Schema object) contains a non-Schema object.");if(!t.every(function(e){return e instanceof c}))throw new s("Specified list of YAML types (or a single Type object) contains a non-Type object.");return new o({include:e,explicit:t})},t.exports=o},{"./common":2,"./exception":4,"./type":13}],8:[function(e,t,n){"use strict";var i=e("../schema");t.exports=new i({include:[e("./json")]})},{"../schema":7,"./json":12}],9:[function(e,t,n){"use strict";var i=e("../schema");t.exports=i.DEFAULT=new i({include:[e("./default_safe")],explicit:[e("../type/js/undefined"),e("../type/js/regexp"),e("../type/js/function")]})},{"../schema":7,"../type/js/function":18,"../type/js/regexp":19,"../type/js/undefined":20,"./default_safe":10}],10:[function(e,t,n){"use strict";var i=e("../schema");t.exports=new i({include:[e("./core")],implicit:[e("../type/timestamp"),e("../type/merge")],explicit:[e("../type/binary"),e("../type/omap"),e("../type/pairs"),e("../type/set")]})},{"../schema":7,"../type/binary":14,"../type/merge":22,"../type/omap":24,"../type/pairs":25,"../type/set":27,"../type/timestamp":29,"./core":8}],11:[function(e,t,n){"use strict";var i=e("../schema");t.exports=new i({explicit:[e("../type/str"),e("../type/seq"),e("../type/map")]})},{"../schema":7,"../type/map":21,"../type/seq":26,"../type/str":28}],12:[function(e,t,n){"use strict";var i=e("../schema");t.exports=new i({include:[e("./failsafe")],implicit:[e("../type/null"),e("../type/bool"),e("../type/int"),e("../type/float")]})},{"../schema":7,"../type/bool":15,"../type/float":16,"../type/int":17,"../type/null":23,"./failsafe":11}],13:[function(e,t,n){"use strict";function i(e){var t={};return null!==e&&Object.keys(e).forEach(function(n){e[n].forEach(function(e){t[String(e)]=n})}),t}function r(e,t){if(t=t||{},Object.keys(t).forEach(function(t){if(-1===a.indexOf(t))throw new o('Unknown option "'+t+'" is met in definition of "'+e+'" YAML type.')}),this.tag=e,this.kind=t.kind||null,this.resolve=t.resolve||function(){return!0},this.construct=t.construct||function(e){return e},this.instanceOf=t.instanceOf||null,this.predicate=t.predicate||null,this.represent=t.represent||null,this.defaultStyle=t.defaultStyle||null,this.styleAliases=i(t.styleAliases||null),-1===s.indexOf(this.kind))throw new o('Unknown kind "'+this.kind+'" is specified for "'+e+'" YAML type.')}var o=e("./exception"),a=["kind","resolve","construct","instanceOf","predicate","represent","defaultStyle","styleAliases"],s=["scalar","sequence","mapping"];t.exports=r},{"./exception":4}],14:[function(e,t,n){"use strict";function i(e){if(null===e)return!1;var t,n,i=0,r=e.length,o=p;for(n=0;r>n;n++)if(t=o.indexOf(e.charAt(n)),!(t>64)){if(0>t)return!1;i+=6}return i%8===0}function r(e){var t,n,i=e.replace(/[\r\n=]/g,""),r=i.length,o=p,a=0,c=[];for(t=0;r>t;t++)t%4===0&&t&&(c.push(a>>16&255),c.push(a>>8&255),c.push(255&a)),a=a<<6|o.indexOf(i.charAt(t));return n=r%4*6,0===n?(c.push(a>>16&255),c.push(a>>8&255),c.push(255&a)):18===n?(c.push(a>>10&255),c.push(a>>2&255)):12===n&&c.push(a>>4&255),s?new s(c):c}function o(e){var t,n,i="",r=0,o=e.length,a=p;for(t=0;o>t;t++)t%3===0&&t&&(i+=a[r>>18&63],i+=a[r>>12&63],i+=a[r>>6&63],i+=a[63&r]),r=(r<<8)+e[t];return n=o%3,0===n?(i+=a[r>>18&63],i+=a[r>>12&63],i+=a[r>>6&63],i+=a[63&r]):2===n?(i+=a[r>>10&63],i+=a[r>>4&63],i+=a[r<<2&63],i+=a[64]):1===n&&(i+=a[r>>2&63],i+=a[r<<4&63],i+=a[64],i+=a[64]),i}function a(e){return s&&s.isBuffer(e)}var s;try{var c=e;s=c("buffer").Buffer;
}catch(u){}var l=e("../type"),p="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";t.exports=new l("tag:yaml.org,2002:binary",{kind:"scalar",resolve:i,construct:r,predicate:a,represent:o})},{"../type":13}],15:[function(e,t,n){"use strict";function i(e){if(null===e)return!1;var t=e.length;return 4===t&&("true"===e||"True"===e||"TRUE"===e)||5===t&&("false"===e||"False"===e||"FALSE"===e)}function r(e){return"true"===e||"True"===e||"TRUE"===e}function o(e){return"[object Boolean]"===Object.prototype.toString.call(e)}var a=e("../type");t.exports=new a("tag:yaml.org,2002:bool",{kind:"scalar",resolve:i,construct:r,predicate:o,represent:{lowercase:function(e){return e?"true":"false"},uppercase:function(e){return e?"TRUE":"FALSE"},camelcase:function(e){return e?"True":"False"}},defaultStyle:"lowercase"})},{"../type":13}],16:[function(e,t,n){"use strict";function i(e){return null===e?!1:!!u.test(e)}function r(e){var t,n,i,r;return t=e.replace(/_/g,"").toLowerCase(),n="-"===t[0]?-1:1,r=[],"+-".indexOf(t[0])>=0&&(t=t.slice(1)),".inf"===t?1===n?Number.POSITIVE_INFINITY:Number.NEGATIVE_INFINITY:".nan"===t?NaN:t.indexOf(":")>=0?(t.split(":").forEach(function(e){r.unshift(parseFloat(e,10))}),t=0,i=1,r.forEach(function(e){t+=e*i,i*=60}),n*t):n*parseFloat(t,10)}function o(e,t){var n;if(isNaN(e))switch(t){case"lowercase":return".nan";case"uppercase":return".NAN";case"camelcase":return".NaN"}else if(Number.POSITIVE_INFINITY===e)switch(t){case"lowercase":return".inf";case"uppercase":return".INF";case"camelcase":return".Inf"}else if(Number.NEGATIVE_INFINITY===e)switch(t){case"lowercase":return"-.inf";case"uppercase":return"-.INF";case"camelcase":return"-.Inf"}else if(s.isNegativeZero(e))return"-0.0";return n=e.toString(10),l.test(n)?n.replace("e",".e"):n}function a(e){return"[object Number]"===Object.prototype.toString.call(e)&&(e%1!==0||s.isNegativeZero(e))}var s=e("../common"),c=e("../type"),u=new RegExp("^(?:[-+]?(?:[0-9][0-9_]*)\\.[0-9_]*(?:[eE][-+][0-9]+)?|\\.[0-9_]+(?:[eE][-+][0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$"),l=/^[-+]?[0-9]+e/;t.exports=new c("tag:yaml.org,2002:float",{kind:"scalar",resolve:i,construct:r,predicate:a,represent:o,defaultStyle:"lowercase"})},{"../common":2,"../type":13}],17:[function(e,t,n){"use strict";function i(e){return e>=48&&57>=e||e>=65&&70>=e||e>=97&&102>=e}function r(e){return e>=48&&55>=e}function o(e){return e>=48&&57>=e}function a(e){if(null===e)return!1;var t,n=e.length,a=0,s=!1;if(!n)return!1;if(t=e[a],"-"!==t&&"+"!==t||(t=e[++a]),"0"===t){if(a+1===n)return!0;if(t=e[++a],"b"===t){for(a++;n>a;a++)if(t=e[a],"_"!==t){if("0"!==t&&"1"!==t)return!1;s=!0}return s}if("x"===t){for(a++;n>a;a++)if(t=e[a],"_"!==t){if(!i(e.charCodeAt(a)))return!1;s=!0}return s}for(;n>a;a++)if(t=e[a],"_"!==t){if(!r(e.charCodeAt(a)))return!1;s=!0}return s}for(;n>a;a++)if(t=e[a],"_"!==t){if(":"===t)break;if(!o(e.charCodeAt(a)))return!1;s=!0}return s?":"!==t?!0:/^(:[0-5]?[0-9])+$/.test(e.slice(a)):!1}function s(e){var t,n,i=e,r=1,o=[];return-1!==i.indexOf("_")&&(i=i.replace(/_/g,"")),t=i[0],"-"!==t&&"+"!==t||("-"===t&&(r=-1),i=i.slice(1),t=i[0]),"0"===i?0:"0"===t?"b"===i[1]?r*parseInt(i.slice(2),2):"x"===i[1]?r*parseInt(i,16):r*parseInt(i,8):-1!==i.indexOf(":")?(i.split(":").forEach(function(e){o.unshift(parseInt(e,10))}),i=0,n=1,o.forEach(function(e){i+=e*n,n*=60}),r*i):r*parseInt(i,10)}function c(e){return"[object Number]"===Object.prototype.toString.call(e)&&e%1===0&&!u.isNegativeZero(e)}var u=e("../common"),l=e("../type");t.exports=new l("tag:yaml.org,2002:int",{kind:"scalar",resolve:a,construct:s,predicate:c,represent:{binary:function(e){return"0b"+e.toString(2)},octal:function(e){return"0"+e.toString(8)},decimal:function(e){return e.toString(10)},hexadecimal:function(e){return"0x"+e.toString(16).toUpperCase()}},defaultStyle:"decimal",styleAliases:{binary:[2,"bin"],octal:[8,"oct"],decimal:[10,"dec"],hexadecimal:[16,"hex"]}})},{"../common":2,"../type":13}],18:[function(e,t,n){"use strict";function i(e){if(null===e)return!1;try{var t="("+e+")",n=s.parse(t,{range:!0});return"Program"===n.type&&1===n.body.length&&"ExpressionStatement"===n.body[0].type&&"FunctionExpression"===n.body[0].expression.type}catch(i){return!1}}function r(e){var t,n="("+e+")",i=s.parse(n,{range:!0}),r=[];if("Program"!==i.type||1!==i.body.length||"ExpressionStatement"!==i.body[0].type||"FunctionExpression"!==i.body[0].expression.type)throw new Error("Failed to resolve function");return i.body[0].expression.params.forEach(function(e){r.push(e.name)}),t=i.body[0].expression.body.range,new Function(r,n.slice(t[0]+1,t[1]-1))}function o(e){return e.toString()}function a(e){return"[object Function]"===Object.prototype.toString.call(e)}var s;try{var c=e;s=c("esprima")}catch(u){"undefined"!=typeof window&&(s=window.esprima)}var l=e("../../type");t.exports=new l("tag:yaml.org,2002:js/function",{kind:"scalar",resolve:i,construct:r,predicate:a,represent:o})},{"../../type":13}],19:[function(e,t,n){"use strict";function i(e){if(null===e)return!1;if(0===e.length)return!1;var t=e,n=/\/([gim]*)$/.exec(e),i="";if("/"===t[0]){if(n&&(i=n[1]),i.length>3)return!1;if("/"!==t[t.length-i.length-1])return!1}return!0}function r(e){var t=e,n=/\/([gim]*)$/.exec(e),i="";return"/"===t[0]&&(n&&(i=n[1]),t=t.slice(1,t.length-i.length-1)),new RegExp(t,i)}function o(e){var t="/"+e.source+"/";return e.global&&(t+="g"),e.multiline&&(t+="m"),e.ignoreCase&&(t+="i"),t}function a(e){return"[object RegExp]"===Object.prototype.toString.call(e)}var s=e("../../type");t.exports=new s("tag:yaml.org,2002:js/regexp",{kind:"scalar",resolve:i,construct:r,predicate:a,represent:o})},{"../../type":13}],20:[function(e,t,n){"use strict";function i(){return!0}function r(){}function o(){return""}function a(e){return"undefined"==typeof e}var s=e("../../type");t.exports=new s("tag:yaml.org,2002:js/undefined",{kind:"scalar",resolve:i,construct:r,predicate:a,represent:o})},{"../../type":13}],21:[function(e,t,n){"use strict";var i=e("../type");t.exports=new i("tag:yaml.org,2002:map",{kind:"mapping",construct:function(e){return null!==e?e:{}}})},{"../type":13}],22:[function(e,t,n){"use strict";function i(e){return"<<"===e||null===e}var r=e("../type");t.exports=new r("tag:yaml.org,2002:merge",{kind:"scalar",resolve:i})},{"../type":13}],23:[function(e,t,n){"use strict";function i(e){if(null===e)return!0;var t=e.length;return 1===t&&"~"===e||4===t&&("null"===e||"Null"===e||"NULL"===e)}function r(){return null}function o(e){return null===e}var a=e("../type");t.exports=new a("tag:yaml.org,2002:null",{kind:"scalar",resolve:i,construct:r,predicate:o,represent:{canonical:function(){return"~"},lowercase:function(){return"null"},uppercase:function(){return"NULL"},camelcase:function(){return"Null"}},defaultStyle:"lowercase"})},{"../type":13}],24:[function(e,t,n){"use strict";function i(e){if(null===e)return!0;var t,n,i,r,o,c=[],u=e;for(t=0,n=u.length;n>t;t+=1){if(i=u[t],o=!1,"[object Object]"!==s.call(i))return!1;for(r in i)if(a.call(i,r)){if(o)return!1;o=!0}if(!o)return!1;if(-1!==c.indexOf(r))return!1;c.push(r)}return!0}function r(e){return null!==e?e:[]}var o=e("../type"),a=Object.prototype.hasOwnProperty,s=Object.prototype.toString;t.exports=new o("tag:yaml.org,2002:omap",{kind:"sequence",resolve:i,construct:r})},{"../type":13}],25:[function(e,t,n){"use strict";function i(e){if(null===e)return!0;var t,n,i,r,o,s=e;for(o=new Array(s.length),t=0,n=s.length;n>t;t+=1){if(i=s[t],"[object Object]"!==a.call(i))return!1;if(r=Object.keys(i),1!==r.length)return!1;o[t]=[r[0],i[r[0]]]}return!0}function r(e){if(null===e)return[];var t,n,i,r,o,a=e;for(o=new Array(a.length),t=0,n=a.length;n>t;t+=1)i=a[t],r=Object.keys(i),o[t]=[r[0],i[r[0]]];return o}var o=e("../type"),a=Object.prototype.toString;t.exports=new o("tag:yaml.org,2002:pairs",{kind:"sequence",resolve:i,construct:r})},{"../type":13}],26:[function(e,t,n){"use strict";var i=e("../type");t.exports=new i("tag:yaml.org,2002:seq",{kind:"sequence",construct:function(e){return null!==e?e:[]}})},{"../type":13}],27:[function(e,t,n){"use strict";function i(e){if(null===e)return!0;var t,n=e;for(t in n)if(a.call(n,t)&&null!==n[t])return!1;return!0}function r(e){return null!==e?e:{}}var o=e("../type"),a=Object.prototype.hasOwnProperty;t.exports=new o("tag:yaml.org,2002:set",{kind:"mapping",resolve:i,construct:r})},{"../type":13}],28:[function(e,t,n){"use strict";var i=e("../type");t.exports=new i("tag:yaml.org,2002:str",{kind:"scalar",construct:function(e){return null!==e?e:""}})},{"../type":13}],29:[function(e,t,n){"use strict";function i(e){return null===e?!1:null!==s.exec(e)?!0:null!==c.exec(e)}function r(e){var t,n,i,r,o,a,u,l,p,f,d=0,h=null;if(t=s.exec(e),null===t&&(t=c.exec(e)),null===t)throw new Error("Date resolve error");if(n=+t[1],i=+t[2]-1,r=+t[3],!t[4])return new Date(Date.UTC(n,i,r));if(o=+t[4],a=+t[5],u=+t[6],t[7]){for(d=t[7].slice(0,3);d.length<3;)d+="0";d=+d}return t[9]&&(l=+t[10],p=+(t[11]||0),h=6e4*(60*l+p),"-"===t[9]&&(h=-h)),f=new Date(Date.UTC(n,i,r,o,a,u,d)),h&&f.setTime(f.getTime()-h),f}function o(e){return e.toISOString()}var a=e("../type"),s=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"),c=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");t.exports=new a("tag:yaml.org,2002:timestamp",{kind:"scalar",resolve:i,construct:r,instanceOf:Date,represent:o})},{"../type":13}],"/":[function(e,t,n){"use strict";var i=e("./lib/js-yaml.js");t.exports=i},{"./lib/js-yaml.js":1}]},{},[])("/")});

define('Atem-MOM/project/IOProjectPersistence',[
    'Atem-MOM/errors'
  , 'Atem-IO/errors'

  , 'ufojs/ufoLib/constants'
  , 'ufojs/ufoLib/UFOReader'
  , 'ufojs/ufoLib/UFOWriter'

  , 'obtain/obtain'
  , 'yaml'
  , 'path'
], function(
    errors
  , ioErrors

  , ufoConstants
  , UFOReader
  , UFOWriter

  , obtain
  , yaml
  , path
){
    var DATA_DIRNAME = ufoConstants.DATA_DIRNAME
      , FONTINFO_FILENAME = ufoConstants.FONTINFO_FILENAME
      , GROUPS_FILENAME = ufoConstants.GROUPS_FILENAME
      , MOMProjectError = errors.MOMProject
      , IONoEntryError = ioErrors.IONoEntry
      ;

    /**
     * Persistence API for a Atem-MOM/Project via an Atem-IO api.
     * I.e. read/write the file format.
     *
     * This exposes a "high level" public interface hat does not reveal whether
     * we are using a ufo structure or something else. So that the
     * Atem-MOM/Project dosen't have tp care.
     *
     * If interesting one day we can keep the api and switch the on disk format
     * or put the stuff into a database.
     *
     * Should this take care of routing IO events?
     *
     * The file format structure is based on an ufo v3 directory:
     *
     * metainfo.plist
     * fontinfo.plist
     * groups.plist
     * data/
     *     com.metapolator/
     *         project.yaml
     *         log.yaml
     *         CPS/
     *             lib/
     *                 MOM/
     *                 metapolator/
     *                 ...
     *             {mastername}.master.cps
     *         MOM/
     *             multivers.yaml // contains the data of multivers and the univers but skips the masters
     *             {base-name}.master.yaml
     *             {master-name}.master.yaml
     *             {instance-name}.master.yaml
     *
     *
     * -> This is an interesting thought:
     *     the glyphs in a master should not be stored by index but by id
     *     or: should not be indexed by position but by id
     *     AND the glyph order should be stored alphabetically
     *     so that we really can look at the essence and say if
     *     it is the same.
     *     in OMA/_Node there could be a flag for this
     *     also, this means every Node type that is indexed by
     *     id MUST have a (unique) id. There's no way to force a node to have an
     *     id at the moment. The uniqueness is no problem.
     *     Unless we just put the id in the list that has type, data
     *     then we can come around that requirement (but it's a bit pointless).
     *     Also, many dict implementations don't guarantee to keep order
     *     so a list is it probably.
     *     Maybe `idIsEssential` to change serialization
     *     And `childIdIsMandatory` to force nodes to have an id per parent type
     */
    function IOProjectPersistence(io, baseDir) {
        this._io = io;
        this.__ufoReader = null;
        this.__ufoWriter = null;
        Object.defineProperty(this, 'baseDir', {value: baseDir});
    }
    var _p = IOProjectPersistence.prototype;
    _p.constructor = IOProjectPersistence;

    Object.defineProperties(_p, {
        // some of these directories are initially empty, so we shouldn't
        // expect them to exist at all when trying to consume their contents
        // or when trying to write to them.
        dataDir:{ get: function(){ return [this.baseDir, DATA_DIRNAME, 'com.metapolator'].join('/');} }
      , projectFile: { get: function(){ return this.dataDir + '/project.yaml';} }
      , logFile: { get: function(){ return this.dataDir + '/log.yaml';} }
        // cps files are managed by rule controller?
      , cpsDir: { get: function(){ return this.dataDir + '/CPS';} }
      , momDir: { get: function(){ return this.dataDir + '/MOM';} }
      , cpsGeneratedDir: { get: function(){ return this.cpsDir + '/generated';} }
      , _ufoReader: { get: function() {
            if(!this.__ufoReader)
                throw new MOMProjectError('Not properly initialized, run "open" or "init" first.');
            return this.__ufoReader;
        }}
      , _ufoWriter: { get: function() {
            if(!this.__ufoWriter)
                throw new MOMProjectError('Not properly initialized, run "open" or "init" first.');
            return this.__ufoWriter;
        }}
    });

    _p._getUFOReader = obtain.factory(
        {
            io: [function(){ return this._io; }]
          , path: [function(){ return this.baseDir; }]
          , ufoReader:[false, 'io', 'path', UFOReader.factory]
        }
      , {
            ufoReader:[true, 'io', 'path', UFOReader.factory]
        }
      , []
      , function(obtain) { return  obtain('ufoReader'); }
    );

    _p._getUFOWriter = obtain.factory(
        {
            io: [function(){ return this._io; }]
          , path: [function(){ return this.baseDir; }]
          , ufoWriter:[false, 'io', 'path', UFOWriter.factory]
        }
      , {
            ufoWriter:[true, 'io', 'path', UFOWriter.factory]
        }
      , []
      , function(obtain) { return obtain('ufoWriter'); }
    );

    /**
     * TODO: this is very handy! Could be a helper attached to obtain itself.
     * obtain.callProxy
     * Even better, if the last argument of an obtain-getter dependecy
     * Array is not a function but an array, it is interpreted as argument
     * to callProxy.
     */
     function callProxy(callTarget /*, args , ... */) {
        /*jshint validthis:true*/
        var args = [], i, l
          , target = this[callTarget[0]]
          , method = target[callTarget[1]]
          ;
        for(i=1,l=arguments.length;i<l;i++)
            args.push(arguments[i]);
        return method.apply(target, args);
    }

    // update is updating the parts of the project
    /**
     * Create a new MP-UFO_3 and leave IOProjectPersistence in a ready state.
     */
    _p.init = obtain.factory(
        {
            baseDir: [function(){ return this.baseDir; }]
          , mkdir: [['_io', 'mkDir'], false, 'baseDir', callProxy]
          , reader: [false, _p._getUFOReader]
          , writer: [false, _p._getUFOWriter]
        }
      , {
            mkdir: [['_io', 'mkDir'], true, 'baseDir', callProxy]
          , reader: [true, _p._getUFOReader]
          , writer: [true, _p._getUFOWriter]
        }
      , []
      , function(obtain) {
            // Fails if baseDir already exists, which is good and intended!
            // UFOWriter would also create the dir but NOT fail if it existed.
            obtain('mkdir');
            // Init the basic ufo v3 structure where the mp format lives in.
            this.__ufoWriter = obtain('writer');
            this.__ufoReader = obtain('reader');
            // The project should now save project.yaml in it's init method.
        }
    );

    /**
     * Open an existing MP-UFO_3 and leave IOProjectPersistence in a ready state.
     */
    _p.open = obtain.factory(
        {
            reader: [false, _p._getUFOReader]
          , writer: [false, _p._getUFOWriter]
        }
      , {
            reader: [true, _p._getUFOReader]
          , writer: [true, _p._getUFOWriter]
        }
      , []
      , function(obtain) {
            // Will fail if baseDir is not a ufo (If metainfo.plist does not exist.)
            this.__ufoReader = obtain('reader');
            this.__ufoWriter = obtain('writer');
        }
    );

    _p._readYAMLFile = function(async, file, defaultVal) {
        var data;
        function onError(error) {
            if(error instanceof IONoEntryError && defaultVal !== undefined)
                return defaultVal;
            throw error;
        }
        function onData(data) {
            try {
                return yaml.safeLoad(data);
            }
            catch(e) {
                // Translate YAML errors
                throw new MOMProjectError('Invalid yaml file ' + e);
            }
        }
        try {
            data = this._io.readFile(async, file);
        }
        catch (error) {
            // this is for the sync execution path, the async error
            // will be handled via the promise
            return onError(error);
        }
        if(async)
            return data.then(onData, onError);
        return onData(data);
    };

    _p._writeYAMLFile = function(async, filename, obj) {
        // FIXME: safeDump could throw, make this obtain.js
        //        Maybe add some "obtain.sheath" method that adds well
        //        behaved error handling to adhoc obtain api functions
        //        like this. It sheathes the method so that thrown exceptions
        //        cannot just "come out" in async mode. A Decorator style
        //        function: obtain.sheath(function definition(args){ ... })
        var yamlStr = yaml.safeDump(obj)
          , dir = path.dirname(filename)
          , promise
          ;
        // TODO: assert(insert test here, 'path (' + path + ') must not '
        //                              + 'be above the base directory.');
        promise = this._io.ensureDirs(async, dir);
        if(async)
            return promise.then(this._io.writeFile
                              .bind(this._io, true, filename, yamlStr));
        return this._io.writeFile(false, filename, yamlStr);
    };

    _p._deleteFile = function (async, path, skipNoEntry) {
        var promise;
        function onError(error) {
            if(skipNoEntry && error instanceof IONoEntryError)
                return true;
            throw error;
        }
        try {
            promise = this._io.unlink(async, path);
        }
        catch(error) {
            return onError(error);
        }
        if(async)
            return promise.then(function(){return true;}, onError);
        return true;
    };

    _p._makeMOMDataFilename = function(basename) {
        return  [this.momDir, basename + '.yaml'].join('/');
    };

    _p._makeCPSFilename = function(filename) {
        return  [this.cpsDir, filename].join('/');
    };

    _p.readMOMData = function(async, name) {
        var path = this._makeMOMDataFilename(name);
        return this._readYAMLFile(async, path);
    };

    _p.writeMOMData = function(async, name, obj) {
        var path = this._makeMOMDataFilename(name);
        return this._writeYAMLFile(async, path, obj);
    };

    _p.deleteMOMData = function(async, name, skipNoEntry) {
        var path = this._makeMOMDataFilename(name);
        return this._deleteFile(async, path, skipNoEntry);
    };

    _p.listMOMItems = function(async) {
        var items = this._io.readDir(async, this.momDir);
        function onData(items) {
            var result = [], i, l, item, pos, suffix='.yaml';
            for(i=0,l=items.length;i<l;i++) {
                item = items[i];
                pos = item.lastIndexOf(suffix);
                if(pos === -1) continue;
                // This also allows a file that is called just '.yaml'
                // I'm not sure for what case that would be good for but
                // I think it is ok anyways.
                result.push(item.slice(0, pos));
            }
            return result;
        }
        if(async)
            return items.then(onData);
        return onData(items);
    };

    // CPS-files are read and written by RuleController.
    // New CPS-files are written via this interface (could be done via RuleController!)
    // maybe we should move the writing into here?
    // readCPSFile is never used.
    // At the moment deleteCPSFile is the only used method in Project
    // and t seems like it would be smart to move that also to RuleController.
    // Anyways, I wan't to keep the spread of the RuleController reference
    // lower than it is now. Metapolator itself should not need to talk directly
    // to ruleController.
    // see ui/metapolator/instanceTools (could be channeled via Project)
    _p.readCPSFile = function(async, name) {
        var path = this._makeCPSFilename(name);
        return this._io._readFile(async, path);
    };

    _p.writeCPSFile = function(async, name, data) {
        var path = this._makeCPSFilename(name)
          , promise = this._io.ensureDirs(async, this.cpsDir)
          ;
        if(async)
            return promise.then(this._io.writeFile
                              .bind(this._io, true, path, data));
        return this._io.writeFile(false, path, data);
    };

    _p.deleteCPSFile = function(async, filename, skipNoEntry) {
        var path = this._makeCPSFilename(filename);
        return this._deleteFile(async, path, skipNoEntry);
    };

    /**
     * Raises if projectFile can't be read (if we really have this file
     * in the end, it shouldn't be optional)
     */
    _p.readProject = function(async) {
        return this._readYAMLFile(async, this.projectFile);
    };

    _p.writeProject = function(async, data) {
        return this._writeYAMLFile(async, this.projectFile, data);
    };

    _p.readLog = function(async) {
        return this._readYAMLFile(async, this.logFile, null);
    };

    _p.appendLog = function(async, data) {
        return this._io.appendFile(async, this.logFile, data);
    };

    /**
     * Return a groups object:
     * Keys are group names and values are lists of glyph name strings
     * Returned object is empty if there was no groups file.
     */
    _p.readGroups = function(async) {
        return this._ufoReader.readGroups(async);
    };

    _p.writeGroups = function(async, data) {
        return this._ufoWriter.writeGroups(async, data);
    };

    _p.readFontInfo = function(async) {
        return this._ufoReader.readInfo(async);
    };

    _p.writeFootInfo = function(async, data) {
        return this._ufoWriter.writeInfo(async, data);
    };

    /**
     * If there is no 'targetFile' in the project but the import
     * has one, we do the import.
     *
     * If there is a 'targetFile' in the project and override is true
     * we overide by doing the import.
     * Otherwise, we skip importing the file.
     *
     * This rule may get changed in the future, but having the first
     * possible file also imported into the project is better than not
     * having it to happen.
     *
     * Also, ufoJS can't validate this file at the moment
     * however, we can try to parse it with plistlib and see if it works.
     */
    _p._importUFOData = obtain.factory(
        {
            funcNames:['type', function(type) {
                var readFuncs = {
                        fontinfo: 'readInfo'
                      , groups: 'readGroups'
                    }
                  , writeFuncs = {
                        fontinfo: 'writeInfo'
                      , groups: 'writeGroups'
                    }
                  ;
                return {
                    read: readFuncs[type]
                  , write: writeFuncs[type]
                };
            }]
          , read: ['sourceUFOReader', 'funcNames', function(sourceUFOReader, funcNames) {
                return sourceUFOReader[funcNames.read](false);
            }]
          , write: ['funcNames', 'read', function(funcNames, data) {
                return this._ufoWriter[funcNames.write](false, data);
            }]
        }
      , {
            read: ['sourceUFOReader', 'funcNames', function(sourceUFOReader, funcNames) {
                return sourceUFOReader[funcNames.read](true);
            }]
          , write: ['funcNames', 'read', function(funcNames, data) {
                return this._ufoWriter[funcNames.write](true, data);
            }]

        }
      , ['type', 'sourceUFOReader']
      , function(obtain, type) {
            obtain('read');
            this._log.debug('Importing "' + type + '" into project.');
            obtain('write');
        }
    );

    _p.importUFOData = function(async, io, sourceUFODir, override, fontinfo/*boolean*/, groups/*boolean*/) {
        var types = []
          , targets = {
                fontinfo: FONTINFO_FILENAME
              , groups: GROUPS_FILENAME
            }
          , i, l, exists, targetFile
          , data
          ;
        if(fontinfo) types.push('fontinfo');
        if(groups) types.push('groups');

        function filterIfExists(exists) {
            var i, l, result;
            for(i=0,l=exists.length;i<l;i++)
                if(!exists[i])
                    result.push(types[i]);
                else
                    this._log.debug(types[i] + ' exists in the project, skipping import.');
            return result;
        }

        if(!override) {
            exists = [];
            for(i=0,l=types.length;i<l;i++) {
                targetFile = [sourceUFODir, targets[types[i]]].join('/');
                exists.push(io.pathExists(!!async, targetFile));
            }
            if(async)
                targets = Promise.all(exists).then(filterIfExists);
            else
                targets = filterIfExists(exists);
        }

        data = [
            UFOReader.factory(async, io, sourceUFODir)
            // if this is a promise, in async, it will be resolved
            // but if this is just a value, Promise.all will call the
            // callback just with that value. Nice!
          , targets
        ];

        function onData(async, data) {
            var i, l, imports = []
              , sourceUFOReader = data[0]
              , targets = data[1]
              ;
            for(i=0,l=targets.length;i<l;i++)
                imports.push(this._importUFOData(async, sourceUFOReader, targets[i]));
            if(async)
                return Promise.all(imports);
            // else: nothing to do ...
        }

        if(async)
            return Promise.all(data)
                          .then(onData.bind(this, async));
        return onData.call(this, false, data);
    };


    return IOProjectPersistence;
});

/** 'util' nodejs core module browserify-ied with `--standalone util`. Should support all module systems (commonjs, AMD & `window.util`) - check browserify docs.

From [node2web](http://github.com/anodynos/node2web) collection,
should/will be exposed as 'util' to [bower](http://bower.io) for *browser* usage.

browserify version: '3.46.1', build date 'Wed Oct 08 2014 17:36:22 GMT+0300 (EEST)' 
**/
!function(e){if("object"==typeof exports)module.exports=e();else if("function"==typeof define&&define.amd)define('util',e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.util=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],2:[function(_dereq_,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],3:[function(_dereq_,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],4:[function(_dereq_,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = _dereq_('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = _dereq_('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,_dereq_("+xKvab"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"+xKvab":2,"./support/isBuffer":3,"inherits":1}],5:[function(_dereq_,module,exports){
module.exports = _dereq_('util');
},{"util":4}]},{},[5])
(5)
});
define('util-logging/level',['require','exports','module','util'],function (require, exports, module) {var util = require("util");

/**
 * This class represents a logging level.
 * @name Level
 * @param {object} [options] If provided, then both "name", and "value" fields must be given, otherwise it uses default values.
 * @param {String} [options.name="INFO"] Logging level name
 * @param {int} [options.value=4] Logging level value
 * @returns {Level}
 * @constructor
 */
var Level = function(options) {
  var self = this;
  (self.super_ = Level.super_).call(self);

  var options = options || {};

  if (options.name == undefined || options.value === undefined) {
    self._name = "INFO";
    self._value = 4;
    return self;
  }

  self._name = options.name;
  self._value = options.value;

  return self;
};

util.inherits(Level, Object);

/**
 * OFF is a special level that can be used to turn off logging.
 * @constant
 */
Level.OFF = new Level({"name": "OFF", "value": 7});
Level.prototype.OFF = Level.OFF;

/**
 * SEVERE is a message level indicating a serious failure.
 * @constant
 */
Level.SEVERE = new Level({"name": "SEVERE", "value": 6});
Level.prototype.SEVERE = Level.SEVERE;

/**
 * WARNING is a message level indicating a potential problem.
 * @constant
 */
Level.WARNING = new Level({"name":"WARNING", "value": 5});
Level.prototype.WARNING = Level.WARNING;

/**
 * INFO is a message level for informational messages.
 * @constant
 */
Level.INFO =  new Level({"name": "INFO", "value": 4});
Level.prototype.INFO = Level.INFO;

/**
 * CONFIG is a message level for static configuration messages.
 * @constant
 */
Level.CONFIG = new Level({"name": "CONFIG", "value": 3});
Level.prototype.CONFIG = Level.CONFIG;

/**
 * DEBUG is a message level for debug messages.
 * @constant
 */
Level.DEBUG = new Level({"name": "DEBUG", "value": 3});
Level.prototype.DEBUG = Level.DEBUG;

/**
 * FINER indicates a fairly detailed tracing message.
 * @constant
 */
Level.FINE = new Level({"name": "FINE", "value": 2});
Level.prototype.FINE = Level.FINE;

/**
 * FINE is a message level providing tracing information.
 * @constant
 */
Level.FINER = new Level({"name": "FINER", "value": 1});
Level.prototype.FINER = Level.FINER;

/**
 * FINEST indicates a highly detailed tracing message.
 * @constant
 */
Level.FINEST = new Level({"name": "FINEST", "value": 0});
Level.prototype.FINEST = Level.FINEST;

/**
 * ALL indicates that all messages should be logged.
 * @constant
 */
Level.ALL = new Level({"name":"ALL", "value": 0});
Level.prototype.ALL = Level.ALL;



/**
 * This function returns the integer value associated with the level
 * @returns {Number}
 */
Level.prototype.intValue = function() {
  return this._value;
};


/**
 * This function returns the string name associated with the level
 * @returns {String}
 */
Level.prototype.getName = function() {
  return this._name;
};

/**
 * This function checks if the name, and int value of this {@link Level} object matches
 * the name and value of the given [level]{@link Level} object.
 * @param {Level} level The {@link Level} object to compare against
 * @returns {boolean}
 * {@linkcode true} if equal
 * {@linkcode false} if not equal
 */
Level.prototype.equals = function(level) {
  if (!(level instanceof  Level)) {
    return false;
  }
  return (this.intValue() == level.intValue());
};



/**
 * This function compares the int value of this {@link Level} object against the
 * the int value of the given [level]{@link Level} object.
 * @param {Level} level The {@link Level} object to compare against
 * @returns {number | undefined}
 * {@linkcode <0} If this {@link Level} object's int value is less <br />
 * {@linkcode =0} If this {@link Level} object's int value is the same <br />
 * {@linkcode >0} If this {@link Level} object's int value is greater <br />
 * {@linkcode undefined} if the argument is not of {@link Level} type
 */
Level.prototype.compare = function(level) {
  if (!(level instanceof Level)) {
    return undefined;
  }

  var intA = this.intValue();
  var intB = level.intValue();

  if (intA == intB) {
    return 0;
  }

  if (intA > intB) {
    return 1;
  }

  if (intA <  intB) {
    return -1;
  }
};

Level.prototype.toString = function() {
  return this.getName();
};


Level.isValid =  function(level) {
  if (!level || !(level instanceof Level)) {
    return false;
  }
  return (level.intValue() >= Level.ALL.intValue() || level.intValue() <= Level.OFF.intValue());
};


Level.prototype.isValid = function() {
  return Level.isValid(this);
};

module.exports = Level;

});

define('util-logging/logrecord',['require','exports','module','./level','util'],function (require, exports, module) {"use strict";


var Level = require("./level");
var util = require("util");

/**
 * This class is equivalent to java.util.logging.LogRecord
 * @name LogRecord
 * @param {object} [options] Options used to initialize this {@link LogRecord}
 * @param {Level} [options.level=Level.INFO] logging {@link Level}
 * @param {string} [options.message=null] message string
 * @param {number} [options.millis=new Date().getTime()] time in milliseconds
 * @param {string} [options.loggerName=null] logger name
 * @param {Array} [options.parameters=null] {@link Array} of parameters
 * @param {Error} [options.thrown=null] {@link Error} object
 * @param {string} [options.sourceMethodName=null] source method name
 * @param {string} [options.sourceFileName=null] source file name
 * @constructor
 *
 */
var LogRecord = function(options) {
  var self = this;
  (self.super_ = LogRecord.super_).call(self);

  options = options || {};

  self._sourceStack = options._sourceStack || null;

  self._level = options.level || Level.INFO;
  self._message = options.message || null;
  self._millis = options.millis || (new Date()).getTime();
  self._loggerName = options.loggerName || null;
  self._parameters = options.parameters || null;
  self._thrown = options.thrown || null;
  self._sourceMethodName = options._sourceMethodName || null;
  self._sourceFileName = options._sourceFileName || null;

  return self;
};

util.inherits(LogRecord, Object);



/**
 * Sets the logging {@link Level} associated with this {@link LogRecord}
 * @param {Level} level Logging level
 * @returns {LogRecord}
 */
LogRecord.prototype.setLevel = function(level) {
  this._level = level;
  return this;
};

/**
 * Retrieves the logging {@link Level} associated with this {@link LogRecord}
 * @returns {Level}
 */
LogRecord.prototype.getLevel = function() {
  return this._level;
};

/**
 * Sets the message associated with this {@link LogRecord}
 * @param {string} message Message string
 * @returns {LogRecord}
 */
LogRecord.prototype.setMessage = function(message) {
  this._message = message;
  return this;
};

/**
 * Retrieves the message associated with this {@link LogRecord}
 * @returns {string}
 */
LogRecord.prototype.getMessage = function() {
  return this._message;
};

/**
 * Sets the time (in milliseconds) associated with this {@link LogRecord}
 * @param {number} millis Time in milliseconds
 * @returns {LogRecord}
 */
LogRecord.prototype.setMillis = function(millis) {
  this._millis = millis;
};

/**
 * Retrieves the time (in milliseconds) associated with this {@link LogRecord}
 * @returns {number}
 */
LogRecord.prototype.getMillis = function() {
  return this._millis;
};

/**
 * Sets the logger name associated with this {@link LogRecord}
 * @param {string} loggerName Logger name
 * @returns {LogRecord}
 */
LogRecord.prototype.setLoggerName = function(loggerName) {
  this._loggerName = loggerName;
  return this;
};

/**
 * Retrieves the logger name associated with this {@link LogRecord}
 * @returns {String}
 */
LogRecord.prototype.getLoggerName = function() {
  return this._loggerName;
};

/**
 * Sets the parameters array associated with this {@link LogRecord}
 * @param {Array} parameters Array of parameters
 * @returns {LogRecord}
 */
LogRecord.prototype.setParameters = function(parameters) {
  this._parameters = parameters;
  return this;
};

/**
 * Retrieves the parameters array associated with this {@link LogRecord}
 * @returns {Array}
 */
LogRecord.prototype.getParameters = function() {
  return this._parameters;
};

/**
 * Sets the thrown {@link Error} associated with this {@link LogRecord}
 * @param {Error} thrown Error object
 * @returns {LogRecord}
 */
LogRecord.prototype.setThrown = function(thrown) {
  if (!util.isError(thrown)) {
    return this;
  }

  this._thrown = thrown;

  return this;
};

/**
 * Retrieves the thrown {@link Error} associated with this {@link LogRecord}
 * @returns {Error}
 */
LogRecord.prototype.getThrown = function() {
  return this._thrown;
};

/**
 * Sets the source method name associated with this {@link LogRecord}
 * @param {string} methodName Method name
 * @returns {LogRecord}
 */
LogRecord.prototype.setSourceMethodName = function(methodName) {
  this._sourceMethodName = methodName;
  return this;
};

/**
 * Retrieves the source method name associated with this {@link LogRecord}
 * @returns {string}
 */
LogRecord.prototype.getSourceMethodName = function() {
  return this._sourceMethodName;
};

/**
 * Sets the source file name associated with this {@link LogRecord}
 * @param {string} fileName File name
 * @returns {LogRecord}
 */
LogRecord.prototype.setSourceFileName = function(fileName) {
  this._sourceFileName = fileName
  return this;
};

/**
 * Retrieves the source file name associated with this {@link LogRecord}
 * @return {String}
 */
LogRecord.prototype.getSourceFileName = function() {
  return this._sourceFileName;
};



LogRecord.prototype.setSourceStackFrame = function(sourceStack) {
  this._sourceStack = sourceStack
};


LogRecord.prototype.getSourceStackFrame = function() {
  return this._sourceStack;
};

module.exports = LogRecord;
});

define('util-logging/handler',['require','exports','module','./level','./logrecord','util'],function (require, exports, module) {"use strict";

var Level = require("./level");
var LogRecord = require("./logrecord");

var util = require("util");

/**
 * This class is equivalent to java.util.logging.Handler.
 *
 * It stores all the pushed {@link LogRecord} objects in memory, until flushed.
 *
 * @name Handler
 * @returns {Handler}
 * @constructor
 */
var Handler = function() {
  var self = this;
  (self.super_ = Handler.super_).call(self);
  self._level = Level.FINEST;
  self._formatter = undefined;
  self._logRecords = [];
  return self;
};


util.inherits(Handler, Object);
/**
 * Sets the logging {@link Level} for this {@link Handler}
 * @param {Level} level Logging level
 * @returns {Handler}
 */
Handler.prototype.setLevel = function(level) {
  if (!Level.isValid(level)) {
    return this;
  }
  this._level = level;
  return this;
};

/**
 * Retrieves the logging {@link Level} for this {@link Handler}
 * @returns {Level}
 */
Handler.prototype.getLevel = function() {
  return this._level;
};

/**
 * Checks if the specified {@link LogRecord} object can be logged given the current logging {@link Level} of this {@link Handler}
 * @param {LogRecord} logRecord {@link LogRecord} to be checked
 * @returns {boolean}
 * {@Linkcode true} if the {@link LogRecord} can be logged <br />
 * {@linkcode false} if the {@link LogRecord} cannot be logged
 */
Handler.prototype.isLoggable = function(logRecord) {
  if (!logRecord || !(logRecord instanceof  LogRecord)) {
    return false;
  }

  var level = logRecord.getLevel();
  return Level.isValid(level) && level.intValue() >= this.getLevel().intValue();
};

/**
 * This function stores the given {@link LogRecord} object internally in memory. <br />
 * <br />
 * Note that this function will not print the record. If you want to actually do something useful
 * with the {@link LogRecord} object, you must extend this class, and override this method. <br />
 * <br />
 * {@link ConsoleHandler} is an example of a class that extends this class.
 *
 * @param {LogRecord} logRecord {@link LogRecord} to be published
 * @returns {Handler}
 */
Handler.prototype.publish = function(logRecord) {
  if (!this.isLoggable(logRecord)) {
    return this;
  }
  //default-handler, store records in memory
  this._logRecords.push(logRecord);
  return this;
};

/**
 * This function clears the internal array of log records.
 * @returns {Handler}
 *
 */
Handler.prototype.flush = function() {
  this._logRecords = [];
  return this;
};

/**
 * This function sets the {@link Formatter} to use for this {@link LogRecord} {@link Handler}
 * @param {Formatter} formatter The {@link Formatter} object
 * @returns {Handler}
 */
Handler.prototype.setFormatter = function(formatter) {
  this._formatter = formatter;
  return this;
};

/**
 * This function retrieves the {@link Formatter} for this {@link LogRecord} {@link Handler}
 * @returns {Formatter}
 */
Handler.prototype.getFormatter = function() {
  return this._formatter;
};


module.exports = Handler;
});

define('util-logging/logger',['require','exports','module','path','util','./level','./handler','./logrecord'],function (require, exports, module) {"use strict";


var path = require("path");
var util = require("util");
var Level = require("./level");
var Handler = require("./handler");
var LogRecord = require("./logrecord");

/**
 * This class is the equivalent of java.util.logging.Logger
 * @name Logger
 * @param {object} [options]
 * @param {String} [options.name=null] Name to describe this logger
 * @param {Level} [options.level=Level.SEVERE] Default logging level
 *
 * @returns {Logger}
 * @constructor
 */
var Logger = function(options) {
  var self = this;
  (self.super_ = Logger.super_).call(self);

  var options = options || {};
  this._level = (Level.isValid(options.level)) ? options.level: Level.SEVERE;
  this._name = options.name;

  this._handlers = [];
  return this;
};

util.inherits(Logger, Object);

var fillStackInfo = function(/** LogRecord */ record) {
  var orig = Error.prepareStackTrace;
  try {
    var err = new Error();
    var caller;

    Error.prepareStackTrace = function (err, stack) {
      return stack;
    };

    var parentFrame = err.stack.shift();
    var current = parentFrame.getFileName();
    while (err.stack.length) {
      var currentFrame = err.stack.shift();
      caller = currentFrame.getFileName();
      if(current!==caller) {
        var info = currentFrame.toString();
        record.setSourceFileName(currentFrame.getFileName());
        record.setSourceMethodName(currentFrame.getMethodName());
        record.setSourceStackFrame(currentFrame);
        return info;
      }
    }
  } catch (err) {}
  finally {
    Error.prepareStackTrace = orig;
  }
  return undefined;
};


/**
 * Sets the logging {@link Level} for this {@link Logger}
 * @param {Level} level Logging level
 *
 * @returns {Logger}
 */
Logger.prototype.setLevel = function(level) {
  if (!Level.isValid(level)) {
    return this;
  }

  this._level = level;
  return this;
};

/**
 * Retrieves the logging {@link Level} for this {@link Logger}
 * @returns {Level} Logging level
 */
Logger.prototype.getLevel = function() {
  return this._level;
};

/**
 * Set the name of the logger
 * @param {string} name Logger name
 * @returns {Logger}
 */
Logger.prototype.setName = function(name) {
  if (!name || typeof "name" !== "string") {
    return this;
  }

  this._name = name;
  return this;
};

/**
 * Retrieves the name of the logger
 * @returns {string} Logger name
 */
Logger.prototype.getName = function() {
  return this._name;
};

/**
 * Adds a handler to the the logger
 * @param {Handler} handler The {@link Handler} to add
 * @returns {Logger}
 */
Logger.prototype.addHandler = function(handler) {
  if (!handler || !(handler instanceof  Handler)) {
    return this;
  }
  this._handlers.push(handler);
  return this;
};

/**
 * Removes the specified handler from the logger
 * @param {Handler} handler The {@link Handler} to remove
 * @returns {Logger}
 */
Logger.prototype.removeHandler = function(handler) {
  if (!handler || !(handler instanceof  Handler)) {
    return this;
  }

  var index = this._handlers.indexOf(handler);
  if (index < 0) {
    return this;
  }

  this._handlers.splice(index,1);
  return this;
};

/**
 * Retrieves the {@link Handler}s associated with the {@link Logger}
 * @returns {Array}
 */
Logger.prototype.getHandlers =  function() {
  return  this._handlers;
};


/**
 * Logs the given {@linkcode message} at the specified {@linkcode level}
 * @param {Level} level Logging level
 * @param {string} message Message to log
 *
 * @returns {Logger}
 */
Logger.prototype.log = function() {};
/**
 * Logs the given {@linkcode message} and error at the specified {@linkcode level}
 * @param {Level} level Logging level
 * @param {string} message Message to log
 * @param {Error} error Error object to log
 *
 * @returns {Logger}
 */
Logger.prototype.log = function() {};
/**
 * Logs the formatted message ({@linkcode format}) with the given {@linkcode params}
 * array as input to the {@linkcode format} at the specified {@linkcode level}
 * @param {Level} level Logging level
 * @param {string} format Format to use for the message
 * @param {...*} params Variable number of parameters as input to the {@linkcode format}
 *
 * @returns {Logger}
 */
/**
 * Logs the given {@linkcode object} at the specified {@linkcode level}
 * @param {Level} level Logging level
 * @param {object} object Object to log
 *
 * @returns {Logger}
 */
Logger.prototype.log = function() {};
Logger.prototype.log = function() {};
/**
 * Logs the formatted message ({@linkcode format}) with the given variable {@linkcode params}
 * as input to the {@linkcode format} at the specified {@linkcode level}
 * @param {Level} level Logging level
 * @param {string} format Format to use for the message
 * @param {...*} params Variable number of parameters as input to the {@linkcode format}
 *
 * @returns {Logger}
 */
Logger.prototype.log = function() {

  var args = Array.prototype.splice.call(arguments,0);

  if (args.length < 2) {
    return this;
  }

  var level = args.shift();
  var message = args.shift();
  var thrown;
  var parameters = [];

  if (util.isError(message) && args.length == 0) {
    thrown = message;
    message = "";
  }

  else if (args.length == 1 && util.isError(args[0])) {
    thrown = args[0];
  }
  else if (args.length == 1 && args[0] instanceof Array) {
    parameters = args[0];
  }
  else {
    parameters = args;
  }


  if (!Level.isValid(level) || message === undefined) {
    return this;
  }

  var handlers = this.getHandlers();

  if (level < this.getLevel()) {
    return this;
  }

  var logRecord = new LogRecord();
  logRecord.setLevel(level);
  logRecord.setLoggerName(this.getName());
  logRecord.setMessage(message);
  logRecord.setMillis(new Date().getTime());
  logRecord.setParameters(parameters);
  logRecord.setThrown(thrown);
  fillStackInfo(logRecord);

  handlers.forEach(function(handler) {
    handler.publish(logRecord);
  });

  return this;
};


Logger.prototype._log = function(level, args) {
  args = Array.prototype.splice.call(args, 0);
  args.unshift(level);
  this.log.apply(this, args);
  return this;
};


/**
 * Logs the given message, at {@linkCode Level.SEVERE} level
 * @param {string} message Message to log
 * @returns {Logger}
 */
Logger.prototype.severe =  function() {};
/**
 * Logs the given formatted message ({@linkcode format}) using the variable {@linkcode params} as input,
 * at {@linkCode Level.SEVERE} level
 * @param {string} format Format to use for the message
 * @param {...*} params Variable number of parameters as input to the {@linkcode format}
 * @returns {Logger}
 */
Logger.prototype.severe =  function() {};
/**
 * Logs the given {@linkcode object}, at {@linkCode Level.SEVERE} level
 * @param {object} object Object to log
 *
 * @returns {Logger}
 */
Logger.prototype.severe = function() {};
/**
 * Logs the given message, and error at {@linkCode Level.SEVERE} level
 * @param {string} message Message to log
 * @param {Error} error Error object to log
 * @returns {Logger}
 */
Logger.prototype.severe =  function() {
  return this._log(Level.SEVERE, arguments);
};

/**
 * Logs the given message, at {@linkCode Level.WARNING} level
 * @param {string} message Message to log
 * @returns {Logger}
 */
Logger.prototype.warning =  function() {};
/**
 * Logs the given formatted message ({@linkcode format}) using the variable {@linkcode params} as input,
 * at {@linkCode Level.WARNING} level
 * @param {string} format Format to use for the message
 * @param {...*} params Variable number of parameters as input to the {@linkcode format}
 * @returns {Logger}
 */
Logger.prototype.warning =  function() {};
/**
 * Logs the given {@linkcode object}, at {@linkCode Level.WARNING} level
 * @param {object} object Object to log
 *
 * @returns {Logger}
 */
Logger.prototype.warning =  function() {};

/**
 * Logs the given message, and error at {@linkCode Level.WARNING} level
 * @param {string} message Message to log
 * @param {Error} error Error object to log
 * @returns {Logger}
 */
Logger.prototype.warning =  function() {
  return this._log(Level.WARNING, arguments);
};

/**
 * Logs the given message, at {@linkCode Level.CONFIG} level
 * @param {string} message Message to log
 * @returns {Logger}
 */
Logger.prototype.config =  function() {};
/**
 * Logs the given formatted message ({@linkcode format}) using the variable {@linkcode params} as input,
 * at {@link Level.CONFIG} level
 * @param {string} format Format to use for the message
 * @param {...*} params Variable number of parameters as input to the {@linkcode format}
 * @returns {Logger}
 */
Logger.prototype.config =  function() {};
/**
 * Logs the given {@linkcode object}, at {@linkCode Level.CONFIG} level
 * @param {object} object Object to log
 *
 * @returns {Logger}
 */
Logger.prototype.config =  function() {};
/**
 * Logs the given message, and error at {@linkCode Level.CONFIG} level
 * @param {string} message Message to log
 * @param {Error} error Error object to log
 * @returns {Logger}
 */
Logger.prototype.config =  function() {
  return this._log(Level.CONFIG, arguments);
};

/**
 * Logs the given message, at {@linkCode Level.INFO} level
 * @param {string} message Message to log
 * @returns {Logger}
 */
Logger.prototype.info =  function() {}
/**
 * Logs the given formatted message ({@linkcode format}) using the variable {@linkcode params} as input,
 * at {@linkCode Level.INFO} level
 * @param {string} format Format to use for the message
 * @param {...*} params Variable number of parameters as input to the {@linkcode format}
 * @returns {Logger}
 */
Logger.prototype.info =  function() {}
/**
 * Logs the given {@linkcode object}, at {@linkCode Level.INFO} level
 * @param {object} object Object to log
 *
 * @returns {Logger}
 */
Logger.prototype.info =  function() {};
/**
 * Logs the given message, and error at {@linkCode Level.INFO} level
 * @param {string} message Message to log
 * @param {Error} error Error object to log
 * @returns {Logger}
 */
Logger.prototype.info =  function() {
  return this._log(Level.INFO, arguments);
};

/**
 * Logs the given message, at {@linkCode Level.DEBUG} level
 * @param {string} message Message to log
 * @returns {Logger}
 */
Logger.prototype.debug =  function() {};
/**
 * Logs the given formatted message ({@linkcode format}) using the variable {@linkcode params} as input,
 * at {@link Level.DEBUG} level
 * @param {string} format Format to use for the message
 * @param {...*} params Variable number of parameters as input to the {@linkcode format}
 * @returns {Logger}
 */
Logger.prototype.debug =  function() {};
/**
 * Logs the given {@linkcode object}, at {@linkCode Level.DEBUG} level
 * @param {object} object Object to log
 *
 * @returns {Logger}
 */
Logger.prototype.debug =  function() {};
/**
 * Logs the given message, and error at {@linkCode Level.DEBUG} level
 * @param {string} message Message to log
 * @param {Error} error Error object to log
 * @returns {Logger}
 */
Logger.prototype.debug =  function() {
  return this._log(Level.DEBUG, arguments);
};

/**
 * Logs the given message, at {@linkCode Level.FINE} level
 * @param {string} message Message to log
 * @returns {Logger}
 */
Logger.prototype.fine =  function() {}
/**
 * Logs the given formatted message ({@linkcode format}) using the variable {@linkcode params} as input,
 * at {@linkCode Level.FINE} level
 * @param {string} format Format to use for the message
 * @param {...*} params Variable number of parameters as input to the {@linkcode format}
 * @returns {Logger}
 */
Logger.prototype.fine =  function() {}
/**
 * Logs the given {@linkcode object}, at {@linkCode Level.FINE} level
 * @param {object} object Object to log
 *
 * @returns {Logger}
 */
Logger.prototype.fine =  function() {};
/**
 * Logs the given message, and error at {@linkCode Level.FINE} level
 * @param {string} message Message to log
 * @param {Error} error Error object to log
 * @returns {Logger}
 */
Logger.prototype.fine =  function() {
  return this._log(Level.FINE, arguments);
};

/**
 * Logs the given message, at {@linkCode Level.FINER} level
 * @param {string} message Message to log
 * @returns {Logger}
 */
Logger.prototype.finer =  function() {}
/**
 * Logs the given formatted message ({@linkcode format}) using the variable {@linkcode params} as input,
 * at {@linkCode Level.FINER} level
 * @param {string} format Format to use for the message
 * @param {...*} params Variable number of parameters as input to the {@linkcode format}
 * @returns {Logger}
 */
Logger.prototype.finer =  function() {}
/**
 * Logs the given {@linkcode object}, at {@linkCode Level.FINER} level
 * @param {object} object Object to log
 *
 * @returns {Logger}
 */
Logger.prototype.finer =  function() {};
/**
 * Logs the given message, and error at {@linkCode Level.FINER} level
 * @param {string} message Message to log
 * @param {Error} error Error object to log
 * @returns {Logger}
 */
Logger.prototype.finer =  function() {
  return this._log(Level.FINER, arguments);
};



/**
 * Logs the given message, at {@linkCode Level.FINEST} level
 * @param {string} message Message to log
 * @returns {Logger}
 */
Logger.prototype.finest = function() {};
/**
 * Logs the given formatted message ({@linkcode format}) using the variable {@linkcode params} as input,
 * at {@link Level.FINEST} level
 * @param {string} format Format to use for the message
 * @param {...*} params Variable number of parameters as input to the {@linkcode format}
 * @returns {Logger}
 */
Logger.prototype.finest = function() {};
/**
 * Logs the given {@linkcode object}, at {@linkCode Level.FINEST} level
 * @param {object} object Object to log
 *
 * @returns {Logger}
 */
Logger.prototype.finest =  function() {};
/**
 * Logs the given message, and error at {@linkCode Level.FINEST} level
 * @param {string} message
 * @param {Error} error Error object to log
 * @returns {Logger}
 */
Logger.prototype.finest =  function() {
  return this._log(Level.FINEST, arguments);
};

module.exports = Logger;

});

define('Atem-Logging/Logger',[
    'util-logging/logger'
], function (
    Parent
) {
"use strict";
    function Logger(options) {
        Parent.call(this, options);
    }
    var _p = Logger.prototype = Object.create(Parent.prototype);

    /**
     * Re-log the given {@link LogRecord} (with the original time stamp)
     * @param {LogRecord} record LogRecord to relog
     *
     * Used to reload a saved log.
     *
     * @returns {Logger}
     */
    _p.relog = function(record) {
      this.getHandlers().forEach(function(handler) {
        if (record.getLevel().intValue() >= this.getLevel().intValue())
          handler.publish(record);
      }, this);
      return this;
    };

    return Logger;
});

// preparing to fork util-logging
define('Atem-Logging/Level',['util-logging/level'], function(module){ return module; });

define('util-logging/formatter',['require','exports','module','util','./logrecord','path'],function (require, exports, module) {"use strict";

var util = require("util");
var LogRecord = require("./logrecord");
var path = require("path");


/**
 * This class is equivalent to java.util.logging.Formatter. <br />
 * <br />
 * It provides support for formatting LogRecord objects.
 *
 * @name Formatter
 * @constructor
 */
var Formatter = function() {
  var self = this;
  (self.super_ = Formatter.super_).call(self);
  return self;
};

util.inherits(Formatter, Object);


/**
 * This function formats a {@link LogRecord} object as follows:<br />
 * <br />
 * <pre>
 * {datetime} - [{logger-name}] [{level}] [{stack-location}] - {formatted-params}
 * </pre>
 * <br />
 * Internally it makes use of Node.js [util.format]{@link http://nodejs.org/api/util.html#util_util_format_format} to create the {formatted-params} section.
 *
 * @param  {LogRecord} logRecord Record to be formatted
 */
Formatter.prototype.formatMessage = function(logRecord) {
  if (!logRecord || !(logRecord instanceof  LogRecord)) {
    return;
  }


  var message = logRecord.getMessage() || "";

  //log errors as strings
  if (util.isError(message)) {
    message =  message.message || message.toString();
  }

  //for the message to be a string
  if (typeof message !== "string") {
    message = "\n" + JSON.stringify(message, null, 2);
  }

  var millis = logRecord.getMillis();
  var date = new Date();
  if (millis && (typeof  millis === "number")){
    date.setTime(millis);
  }

  var level = logRecord.getLevel();
  var levelName = (level)? level.getName():undefined;
  var loggerName = logRecord.getLoggerName();


  var prefix =  date.toISOString() + " - [" + levelName + "] ";
  if (levelName && typeof loggerName == "string") {
    prefix = prefix +   "[" + loggerName + "] ";
  }

  var stack =  logRecord.getSourceStackFrame();
  if (stack) {
    var actualFile = stack.getFileName();
    var baseFile = path.basename(actualFile);
    var info = stack.toString();
    info = info.replace(actualFile, baseFile);
    prefix = prefix + "[" + info + "] ";
  }

  var parameters = logRecord.getParameters();
  if (parameters &&  parameters instanceof Array) {
    parameters.unshift(message);
    message = util.format.apply(this, parameters);
    parameters.shift();
  }

  message = prefix + message;

  var thrown = logRecord.getThrown();
  if (thrown && util.isError(thrown)) {

    if (thrown.message) {
      message += thrown.message;
    }

    if (thrown.stack) {
      message += "\n" + thrown .stack;
    }
  }

  return message;
};

module.exports = Formatter;
});

define('util-logging/consolehandler',['require','exports','module','./level','./handler','./formatter','util'],function (require, exports, module) {"use strict";

var Level = require("./level");
var Handler = require("./handler");
var Formatter = require("./formatter");

var util = require("util");

/**
 * This class is equivalent to java.util.logging.ConsoleHandler. <br />
 * <br />
 * The published {@link LogRecord} objects are printed using Node.js [console.log]{@link http://nodejs.org/api/stdio.html#stdio_console_log_data} function.
 * <br />
 * Internally, the {@link ConsoleHandler} uses the {@link Formatter} class to generate the string.
 *
 * @name ConsoleHandler
 * @returns {ConsoleHandler}
 * @constructor
 * @extends Handler
 */
var ConsoleHandler =  function() {
  var self = this;
  (self.super_ = ConsoleHandler.super_).call(self);
  this._defaultFormatter = new Formatter();
  return this;
};

util.inherits(ConsoleHandler, Handler);


ConsoleHandler.prototype.getDefaultFormatter = function() {
  return this._defaultFormatter;
};

/**
 * Prints a formatted log record to the console using console.log.
 *
 * @param {LogRecord} logRecord {@link LogRecord} to be published
 */
ConsoleHandler.prototype.publish = function(logRecord) {
  if (!this.isLoggable(logRecord)) {
    return;
  }

  var formatter = this.getFormatter();
  if (!formatter || !(formatter instanceof Formatter)) {
    formatter = this.getDefaultFormatter();
  }

  var message = formatter.formatMessage(logRecord);
  if (!message || typeof message !== "string") {
    return;
  }
  // TODO: make this configurable: console.warn | console.info | console.log\
  // However, console.warn is most useful, because it goes to stderr
  console.warn(message);
};


module.exports = ConsoleHandler;

});

// preparing to fork util-logging
define('Atem-Logging/ConsoleHandler',['util-logging/consolehandler'], function(module){ return module; });

define('Atem-Logging/YAMLFormatter',[
    'util'
  , 'util-logging/formatter'
  , 'util-logging/logrecord'
  , 'yaml'
], function (
    util
  , Formatter
  , LogRecord
  , yaml
) {
"use strict";

/**
 * This class formats LogRecord objects as YAML.
 *
 * @name YAMLFormatter
 * @constructor
 */
var YAMLFormatter = function() {
  var self = this;
  (self.super_ = Formatter.super_).call(self);
  return self;
};

util.inherits(YAMLFormatter, Formatter);


/**
 * This function formats a {@link LogRecord} object in YAML as follows:
 *
 * time: {datetime}
 * message: {message}
 * [logger-name]: {string}
 * [level]: {level}
 * [parameters]: {parameters} (if more than 0)
 *
 * Each entry is returned as an array of length 1, which can be appended to
 * a log file (see FileLogger) as part of an "infinite" array.
 *
 * @param {LogRecord} logRecord Record to be formatted
 */
YAMLFormatter.prototype.formatMessage = function(logRecord) {
  if (!logRecord || !(logRecord instanceof LogRecord))
    return {};

  var record = {};
  record.message = logRecord.getMessage() || "";

  //log errors as strings
  if (util.isError(record.message))
    record.message = record.message.message || record.message.toString();

  var date = new Date();
  var millis = logRecord.getMillis();
  if (millis && (typeof millis === "number"))
    date.setTime(millis);
  record.date = date;

  var loggerName = logRecord.getLoggerName();
  if (loggerName && typeof loggerName == "string")
    record.name = loggerName;

  var level = logRecord.getLevel();
  if (level)
    record.level = {name: level.getName(), value: level.intValue()};

  var parameters = logRecord.getParameters();
  if (parameters && parameters instanceof Array && parameters.length > 0)
    record.parameters = parameters;

  // FIXME: dumping [stack-location]: {stack-location} makes YAML dumper recurse
  // var stack = logRecord.getSourceStackFrame();
  // if (stack)
  //   record.stack = stack;

  var thrown = logRecord.getThrown();
  if (thrown && util.isError(thrown))
    record.thrown = {message: thrown.message, stack: thrown.stack};

  return yaml.safeDump([record]);
};

return YAMLFormatter;
});

define('Atem-Logging/CallbackHandler',[
    'util'
  , 'util-logging/level'
  , 'util-logging/handler'
  , 'util-logging/formatter'
], function (
    util
  , Level
  , Handler
  , Formatter
) {
"use strict";

/**
 * The published {@link LogRecord} objects are fed to a callback
 *
 * Internally, the {@link CallbackHandler} uses the {@link Formatter} class to generate the string.
 *
 * @name CallbackHandler
 * @param cb callback to pass each formatted log entry to
 * @returns {CallbackHandler}
 * @constructor
 * @extends Handler
 */
var CallbackHandler = function(cb) {
  var self = this;
  (self.super_ = CallbackHandler.super_).call(self);
  self._defaultFormatter = new Formatter();
  self._callback = cb;
  return self;
};

util.inherits(CallbackHandler, Handler);


CallbackHandler.prototype.getDefaultFormatter = function() {
  return this._defaultFormatter;
};

/**
 * Logs formatted log record to a file.
 *
 * @param {LogRecord} logRecord {@link LogRecord} to be published
 */
CallbackHandler.prototype.publish = function(logRecord) {
  if (!this.isLoggable(logRecord)) {
    return;
  }

  var formatter = this.getFormatter();
  if (!formatter || !(formatter instanceof Formatter)) {
    formatter = this.getDefaultFormatter();
  }

  var message = formatter.formatMessage(logRecord);
  if (!message || typeof message !== "string") {
    return;
  }

  this._callback(message);
};


return CallbackHandler;
});

define('Atem-Logging/logRecordFromObject',[
    'util-logging/logrecord'
  , 'util-logging/level'
], function (
    LogRecord
  , Level
) {
    "use strict";

    function logRecordFromObject(obj) {
        var options = Object.create(obj);
        options.level = new Level(obj.level);
        options.millis = Date.parse(obj.date);
        return new LogRecord(options);
    }

    return logRecordFromObject;
});

define('gonzales/gonzales.cssp.node',['require','exports','module'],function (require, exports, module) {

var srcToCSSP = (function() {
var TokenType = {
    StringSQ: 'StringSQ',
    StringDQ: 'StringDQ',
    CommentML: 'CommentML',
    CommentSL: 'CommentSL',

    Newline: 'Newline',
    Space: 'Space',
    Tab: 'Tab',

    ExclamationMark: 'ExclamationMark',         // !
    QuotationMark: 'QuotationMark',             // "
    NumberSign: 'NumberSign',                   // #
    DollarSign: 'DollarSign',                   // $
    PercentSign: 'PercentSign',                 // %
    Ampersand: 'Ampersand',                     // &
    Apostrophe: 'Apostrophe',                   // '
    LeftParenthesis: 'LeftParenthesis',         // (
    RightParenthesis: 'RightParenthesis',       // )
    Asterisk: 'Asterisk',                       // *
    PlusSign: 'PlusSign',                       // +
    Comma: 'Comma',                             // ,
    HyphenMinus: 'HyphenMinus',                 // -
    FullStop: 'FullStop',                       // .
    Solidus: 'Solidus',                         // /
    Colon: 'Colon',                             // :
    Semicolon: 'Semicolon',                     // ;
    LessThanSign: 'LessThanSign',               // <
    EqualsSign: 'EqualsSign',                   // =
    GreaterThanSign: 'GreaterThanSign',         // >
    QuestionMark: 'QuestionMark',               // ?
    CommercialAt: 'CommercialAt',               // @
    LeftSquareBracket: 'LeftSquareBracket',     // [
    ReverseSolidus: 'ReverseSolidus',           // \
    RightSquareBracket: 'RightSquareBracket',   // ]
    CircumflexAccent: 'CircumflexAccent',       // ^
    LowLine: 'LowLine',                         // _
    LeftCurlyBracket: 'LeftCurlyBracket',       // {
    VerticalLine: 'VerticalLine',               // |
    RightCurlyBracket: 'RightCurlyBracket',     // }
    Tilde: 'Tilde',                             // ~

    Identifier: 'Identifier',
    DecimalNumber: 'DecimalNumber'
};

var getTokens = (function() {

    var Punctuation,
        urlMode = false,
        blockMode = 0;

    Punctuation = {
        ' ': TokenType.Space,
        '\n': TokenType.Newline,
        '\r': TokenType.Newline,
        '\t': TokenType.Tab,
        '!': TokenType.ExclamationMark,
        '"': TokenType.QuotationMark,
        '#': TokenType.NumberSign,
        '$': TokenType.DollarSign,
        '%': TokenType.PercentSign,
        '&': TokenType.Ampersand,
        '\'': TokenType.Apostrophe,
        '(': TokenType.LeftParenthesis,
        ')': TokenType.RightParenthesis,
        '*': TokenType.Asterisk,
        '+': TokenType.PlusSign,
        ',': TokenType.Comma,
        '-': TokenType.HyphenMinus,
        '.': TokenType.FullStop,
        '/': TokenType.Solidus,
        ':': TokenType.Colon,
        ';': TokenType.Semicolon,
        '<': TokenType.LessThanSign,
        '=': TokenType.EqualsSign,
        '>': TokenType.GreaterThanSign,
        '?': TokenType.QuestionMark,
        '@': TokenType.CommercialAt,
        '[': TokenType.LeftSquareBracket,
    //        '\\': TokenType.ReverseSolidus,
        ']': TokenType.RightSquareBracket,
        '^': TokenType.CircumflexAccent,
        '_': TokenType.LowLine,
        '{': TokenType.LeftCurlyBracket,
        '|': TokenType.VerticalLine,
        '}': TokenType.RightCurlyBracket,
        '~': TokenType.Tilde
    };

    function isDecimalDigit(c) {
        return '0123456789'.indexOf(c) >= 0;
    }

    function throwError(message) {
        throw message;
    }

    var buffer = '',
        tokens = [],
        pos,
        tn = 0,
        ln = 1;

    function _getTokens(s) {
        if (!s) return [];

        tokens = [];
        tn = 0;
        ln = 1;

        var c, cn;

        for (pos = 0; pos < s.length; pos++) {
            c = s.charAt(pos);
            cn = s.charAt(pos + 1);

            if (c === '/' && cn === '*') {
                parseMLComment(s);
            } else if (!urlMode && c === '/' && cn === '/') {
                if (blockMode > 0) parseIdentifier(s); 
                else parseSLComment(s);
            } else if (c === '"' || c === "'") {
                parseString(s, c);
            } else if (c === ' ') {
                parseSpaces(s)
            } else if (c in Punctuation) {
                pushToken(Punctuation[c], c);
                if (c === '\n' || c === '\r') ln++;
                if (c === ')') urlMode = false;
                if (c === '{') blockMode++;
                if (c === '}') blockMode--;
            } else if (isDecimalDigit(c)) {
                parseDecimalNumber(s);
            } else {
                parseIdentifier(s);
            }
        }

        mark();

        return tokens;
    }

    function pushToken(type, value) {
        tokens.push({ tn: tn++, ln: ln, type: type, value: value });
    }

    function parseSpaces(s) {
        var start = pos;

        for (; pos < s.length; pos++) {
            if (s.charAt(pos) !== ' ') break;
        }

        pushToken(TokenType.Space, s.substring(start, pos));
        pos--;
    }

    function parseMLComment(s) {
        var start = pos;

        for (pos = pos + 2; pos < s.length; pos++) {
            if (s.charAt(pos) === '*') {
                if (s.charAt(pos + 1) === '/') {
                    pos++;
                    break;
                }
            }
        }

        pushToken(TokenType.CommentML, s.substring(start, pos + 1));
    }

    function parseSLComment(s) {
        var start = pos;

        for (pos = pos + 2; pos < s.length; pos++) {
            if (s.charAt(pos) === '\n' || s.charAt(pos) === '\r') {
                pos++;
                break;
            }
        }

        pushToken(TokenType.CommentSL, s.substring(start, pos));
        pos--;
    }

    function parseString(s, q) {
        var start = pos;

        for (pos = pos + 1; pos < s.length; pos++) {
            if (s.charAt(pos) === '\\') pos++;
            else if (s.charAt(pos) === q) break;
        }

        pushToken(q === '"' ? TokenType.StringDQ : TokenType.StringSQ, s.substring(start, pos + 1));
    }

    function parseDecimalNumber(s) {
        var start = pos;

        for (; pos < s.length; pos++) {
            if (!isDecimalDigit(s.charAt(pos))) break;
        }

        pushToken(TokenType.DecimalNumber, s.substring(start, pos));
        pos--;
    }

    function parseIdentifier(s) {
        var start = pos;

        while (s.charAt(pos) === '/') pos++;

        for (; pos < s.length; pos++) {
            if (s.charAt(pos) === '\\') pos++;
            else if (s.charAt(pos) in Punctuation) break;
        }

        var ident = s.substring(start, pos);

        urlMode = urlMode || ident === 'url';

        pushToken(TokenType.Identifier, ident);
        pos--;
    }

    // ====================================
    // second run
    // ====================================

    function mark() {
        var ps = [], // Parenthesis
            sbs = [], // SquareBracket
            cbs = [], // CurlyBracket
            t;

        for (var i = 0; i < tokens.length; i++) {
            t = tokens[i];
            switch(t.type) {
                case TokenType.LeftParenthesis:
                    ps.push(i);
                    break;
                case TokenType.RightParenthesis:
                    if (ps.length) {
                        t.left = ps.pop();
                        tokens[t.left].right = i;
                    }
                    break;
                case TokenType.LeftSquareBracket:
                    sbs.push(i);
                    break;
                case TokenType.RightSquareBracket:
                    if (sbs.length) {
                        t.left = sbs.pop();
                        tokens[t.left].right = i;
                    }
                    break;
                case TokenType.LeftCurlyBracket:
                    cbs.push(i);
                    break;
                case TokenType.RightCurlyBracket:
                    if (cbs.length) {
                        t.left = cbs.pop();
                        tokens[t.left].right = i;
                    }
                    break;
            }
        }
    }

    return function(s) {
        return _getTokens(s);
    };

}());
// version: 1.0.0

var getCSSPAST = (function() {

    var tokens,
        pos,
        failLN = 0,
        currentBlockLN = 0,
        needInfo = false;

    var CSSPNodeType,
        CSSLevel,
        CSSPRules;

    CSSPNodeType = {
        IdentType: 'ident',
        AtkeywordType: 'atkeyword',
        StringType: 'string',
        ShashType: 'shash',
        VhashType: 'vhash',
        NumberType: 'number',
        PercentageType: 'percentage',
        DimensionType: 'dimension',
        CdoType: 'cdo',
        CdcType: 'cdc',
        DecldelimType: 'decldelim',
        SType: 's',
        AttrselectorType: 'attrselector',
        AttribType: 'attrib',
        NthType: 'nth',
        NthselectorType: 'nthselector',
        NamespaceType: 'namespace',
        ClazzType: 'clazz',
        PseudoeType: 'pseudoe',
        PseudocType: 'pseudoc',
        DelimType: 'delim',
        StylesheetType: 'stylesheet',
        AtrulebType: 'atruleb',
        AtrulesType: 'atrules',
        AtrulerqType: 'atrulerq',
        AtrulersType: 'atrulers',
        AtrulerType: 'atruler',
        BlockType: 'block',
        RulesetType: 'ruleset',
        CombinatorType: 'combinator',
        SimpleselectorType: 'simpleselector',
        SelectorType: 'selector',
        DeclarationType: 'declaration',
        PropertyType: 'property',
        ImportantType: 'important',
        UnaryType: 'unary',
        OperatorType: 'operator',
        BracesType: 'braces',
        ValueType: 'value',
        ProgidType: 'progid',
        FiltervType: 'filterv',
        FilterType: 'filter',
        CommentType: 'comment',
        UriType: 'uri',
        RawType: 'raw',
        FunctionBodyType: 'functionBody',
        FunktionType: 'funktion',
        FunctionExpressionType: 'functionExpression',
        UnknownType: 'unknown'
    };

    CSSPRules = {
        'ident': function() { if (checkIdent(pos)) return getIdent() },
        'atkeyword': function() { if (checkAtkeyword(pos)) return getAtkeyword() },
        'string': function() { if (checkString(pos)) return getString() },
        'shash': function() { if (checkShash(pos)) return getShash() },
        'vhash': function() { if (checkVhash(pos)) return getVhash() },
        'number': function() { if (checkNumber(pos)) return getNumber() },
        'percentage': function() { if (checkPercentage(pos)) return getPercentage() },
        'dimension': function() { if (checkDimension(pos)) return getDimension() },
//        'cdo': function() { if (checkCDO()) return getCDO() },
//        'cdc': function() { if (checkCDC()) return getCDC() },
        'decldelim': function() { if (checkDecldelim(pos)) return getDecldelim() },
        's': function() { if (checkS(pos)) return getS() },
        'attrselector': function() { if (checkAttrselector(pos)) return getAttrselector() },
        'attrib': function() { if (checkAttrib(pos)) return getAttrib() },
        'nth': function() { if (checkNth(pos)) return getNth() },
        'nthselector': function() { if (checkNthselector(pos)) return getNthselector() },
        'namespace': function() { if (checkNamespace(pos)) return getNamespace() },
        'clazz': function() { if (checkClazz(pos)) return getClazz() },
        'pseudoe': function() { if (checkPseudoe(pos)) return getPseudoe() },
        'pseudoc': function() { if (checkPseudoc(pos)) return getPseudoc() },
        'delim': function() { if (checkDelim(pos)) return getDelim() },
        'stylesheet': function() { if (checkStylesheet(pos)) return getStylesheet() },
        'atruleb': function() { if (checkAtruleb(pos)) return getAtruleb() },
        'atrules': function() { if (checkAtrules(pos)) return getAtrules() },
        'atrulerq': function() { if (checkAtrulerq(pos)) return getAtrulerq() },
        'atrulers': function() { if (checkAtrulers(pos)) return getAtrulers() },
        'atruler': function() { if (checkAtruler(pos)) return getAtruler() },
        'block': function() { if (checkBlock(pos)) return getBlock() },
        'ruleset': function() { if (checkRuleset(pos)) return getRuleset() },
        'combinator': function() { if (checkCombinator(pos)) return getCombinator() },
        'simpleselector': function() { if (checkSimpleselector(pos)) return getSimpleSelector() },
        'selector': function() { if (checkSelector(pos)) return getSelector() },
        'declaration': function() { if (checkDeclaration(pos)) return getDeclaration() },
        'property': function() { if (checkProperty(pos)) return getProperty() },
        'important': function() { if (checkImportant(pos)) return getImportant() },
        'unary': function() { if (checkUnary(pos)) return getUnary() },
        'operator': function() { if (checkOperator(pos)) return getOperator() },
        'braces': function() { if (checkBraces(pos)) return getBraces() },
        'value': function() { if (checkValue(pos)) return getValue() },
        'progid': function() { if (checkProgid(pos)) return getProgid() },
        'filterv': function() { if (checkFilterv(pos)) return getFilterv() },
        'filter': function() { if (checkFilter(pos)) return getFilter() },
        'comment': function() { if (checkComment(pos)) return getComment() },
        'uri': function() { if (checkUri(pos)) return getUri() },
        'raw': function() { if (checkRaw(pos)) return getRaw() },
        'funktion': function() { if (checkFunktion(pos)) return getFunktion() },
        'functionExpression': function() { if (checkFunctionExpression(pos)) return getFunctionExpression() },
        'unknown': function() { if (checkUnknown(pos)) return getUnknown() }
    };

    function fail(token) {
        if (token && token.ln > failLN) failLN = token.ln;
    }

    function throwError() {
        throw new Error('Please check the validity of the CSS block starting from the line #' + currentBlockLN);
    }

    function _getAST(_tokens, rule, _needInfo) {
        tokens = _tokens;
        needInfo = _needInfo;
        pos = 0;

        markSC();

        return rule ? CSSPRules[rule]() : CSSPRules['stylesheet']();
    }

//any = braces | string | percentage | dimension | number | uri | functionExpression | funktion | ident | unary
    function checkAny(_i) {
        return checkBraces(_i) ||
               checkString(_i) ||
               checkPercentage(_i) ||
               checkDimension(_i) ||
               checkNumber(_i) ||
               checkUri(_i) ||
               checkFunctionExpression(_i) ||
               checkFunktion(_i) ||
               checkIdent(_i) ||
               checkUnary(_i);
    }

    function getAny() {
        if (checkBraces(pos)) return getBraces();
        else if (checkString(pos)) return getString();
        else if (checkPercentage(pos)) return getPercentage();
        else if (checkDimension(pos)) return getDimension();
        else if (checkNumber(pos)) return getNumber();
        else if (checkUri(pos)) return getUri();
        else if (checkFunctionExpression(pos)) return getFunctionExpression();
        else if (checkFunktion(pos)) return getFunktion();
        else if (checkIdent(pos)) return getIdent();
        else if (checkUnary(pos)) return getUnary();
    }

//atkeyword = '@' ident:x -> [#atkeyword, x]
    function checkAtkeyword(_i) {
        var l;

        if (tokens[_i++].type !== TokenType.CommercialAt) return fail(tokens[_i - 1]);

        if (l = checkIdent(_i)) return l + 1;

        return fail(tokens[_i]);
    }

    function getAtkeyword() {
        var startPos = pos;

        pos++;

        return needInfo?
            [{ ln: tokens[startPos].ln }, CSSPNodeType.AtkeywordType, getIdent()]:
            [CSSPNodeType.AtkeywordType, getIdent()];
    }

//attrib = '[' sc*:s0 ident:x sc*:s1 attrselector:a sc*:s2 (ident | string):y sc*:s3 ']' -> this.concat([#attrib], s0, [x], s1, [a], s2, [y], s3)
//       | '[' sc*:s0 ident:x sc*:s1 ']' -> this.concat([#attrib], s0, [x], s1),
    function checkAttrib(_i) {
        if (tokens[_i].type !== TokenType.LeftSquareBracket) return fail(tokens[_i]);

        if (!tokens[_i].right) return fail(tokens[_i]);

        return tokens[_i].right - _i + 1;
    }

    function checkAttrib1(_i) {
        var start = _i;

        _i++;

        var l = checkSC(_i); // s0

        if (l) _i += l;

        if (l = checkIdent(_i)) _i += l; // x
        else return fail(tokens[_i]);

        if (l = checkSC(_i)) _i += l; // s1

        if (l = checkAttrselector(_i)) _i += l; // a
        else return fail(tokens[_i]);

        if (l = checkSC(_i)) _i += l; // s2

        if ((l = checkIdent(_i)) || (l = checkString(_i))) _i += l; // y
        else return fail(tokens[_i]);

        if (l = checkSC(_i)) _i += l; // s3

        if (tokens[_i].type === TokenType.RightSquareBracket) return _i - start;

        return fail(tokens[_i]);
    }

    function getAttrib1() {
        var startPos = pos;

        pos++;

        var a = (needInfo? [{ ln: tokens[startPos].ln }, CSSPNodeType.AttribType] : [CSSPNodeType.AttribType])
                .concat(getSC())
                .concat([getIdent()])
                .concat(getSC())
                .concat([getAttrselector()])
                .concat(getSC())
                .concat([checkString(pos)? getString() : getIdent()])
                .concat(getSC());

        pos++;

        return a;
    }

    function checkAttrib2(_i) {
        var start = _i;

        _i++;

        var l = checkSC(_i);

        if (l) _i += l;

        if (l = checkIdent(_i)) _i += l;

        if (l = checkSC(_i)) _i += l;

        if (tokens[_i].type === TokenType.RightSquareBracket) return _i - start;

        return fail(tokens[_i]);
    }

    function getAttrib2() {
        var startPos = pos;

        pos++;

        var a = (needInfo? [{ ln: tokens[startPos].ln }, CSSPNodeType.AttribType] : [CSSPNodeType.AttribType])
                .concat(getSC())
                .concat([getIdent()])
                .concat(getSC());

        pos++;

        return a;
    }

    function getAttrib() {
        if (checkAttrib1(pos)) return getAttrib1(); 
        if (checkAttrib2(pos)) return getAttrib2(); 
    }

//attrselector = (seq('=') | seq('~=') | seq('^=') | seq('$=') | seq('*=') | seq('|=')):x -> [#attrselector, x]
    function checkAttrselector(_i) {
        if (tokens[_i].type === TokenType.EqualsSign) return 1;
        if (tokens[_i].type === TokenType.VerticalLine && (!tokens[_i + 1] || tokens[_i + 1].type !== TokenType.EqualsSign)) return 1;

        if (!tokens[_i + 1] || tokens[_i + 1].type !== TokenType.EqualsSign) return fail(tokens[_i]);

        switch(tokens[_i].type) {
            case TokenType.Tilde:
            case TokenType.CircumflexAccent:
            case TokenType.DollarSign:
            case TokenType.Asterisk:
            case TokenType.VerticalLine:
                return 2;
        }

        return fail(tokens[_i]);
    }

    function getAttrselector() {
        var startPos = pos,
            s = tokens[pos++].value;

        if (tokens[pos] && tokens[pos].type === TokenType.EqualsSign) s += tokens[pos++].value;

        return needInfo?
                [{ ln: tokens[startPos].ln }, CSSPNodeType.AttrselectorType, s] :
                [CSSPNodeType.AttrselectorType, s];
    }

//atrule = atruler | atruleb | atrules
    function checkAtrule(_i) {
        var start = _i,
            l;

        if (tokens[start].atrule_l !== undefined) return tokens[start].atrule_l;

        if (l = checkAtruler(_i)) tokens[_i].atrule_type = 1;
        else if (l = checkAtruleb(_i)) tokens[_i].atrule_type = 2;
        else if (l = checkAtrules(_i)) tokens[_i].atrule_type = 3;
        else return fail(tokens[start]);

        tokens[start].atrule_l = l;

        return l;
    }

    function getAtrule() {
        switch (tokens[pos].atrule_type) {
            case 1: return getAtruler();
            case 2: return getAtruleb();
            case 3: return getAtrules();
        }
    }

//atruleb = atkeyword:ak tset*:ap block:b -> this.concat([#atruleb, ak], ap, [b])
    function checkAtruleb(_i) {
        var start = _i,
            l;

        if (l = checkAtkeyword(_i)) _i += l;
        else return fail(tokens[_i]);

        if (l = checkTsets(_i)) _i += l;

        if (l = checkBlock(_i)) _i += l;
        else return fail(tokens[_i]);

        return _i - start;
    }

    function getAtruleb() {
        return (needInfo?
                    [{ ln: tokens[pos].ln }, CSSPNodeType.AtrulebType, getAtkeyword()] :
                    [CSSPNodeType.AtrulebType, getAtkeyword()])
                        .concat(getTsets())
                        .concat([getBlock()]);
    }

//atruler = atkeyword:ak atrulerq:x '{' atrulers:y '}' -> [#atruler, ak, x, y]
    function checkAtruler(_i) {
        var start = _i,
            l;

        if (l = checkAtkeyword(_i)) _i += l;
        else return fail(tokens[_i]);

        if (l = checkAtrulerq(_i)) _i += l;

        if (_i < tokens.length && tokens[_i].type === TokenType.LeftCurlyBracket) _i++;
        else return fail(tokens[_i]);

        if (l = checkAtrulers(_i)) _i += l;

        if (_i < tokens.length && tokens[_i].type === TokenType.RightCurlyBracket) _i++;
        else return fail(tokens[_i]);

        return _i - start;
    }

    function getAtruler() {
        var atruler = needInfo?
                        [{ ln: tokens[pos].ln }, CSSPNodeType.AtrulerType, getAtkeyword(), getAtrulerq()] :
                        [CSSPNodeType.AtrulerType, getAtkeyword(), getAtrulerq()];

        pos++;

        atruler.push(getAtrulers());

        pos++;

        return atruler;
    }

//atrulerq = tset*:ap -> [#atrulerq].concat(ap)
    function checkAtrulerq(_i) {
        return checkTsets(_i);
    }

    function getAtrulerq() {
        return (needInfo? [{ ln: tokens[pos].ln }, CSSPNodeType.AtrulerqType] : [CSSPNodeType.AtrulerqType]).concat(getTsets());
    }

//atrulers = sc*:s0 ruleset*:r sc*:s1 -> this.concat([#atrulers], s0, r, s1)
    function checkAtrulers(_i) {
        var start = _i,
            l;

        if (l = checkSC(_i)) _i += l;

        while ((l = checkRuleset(_i)) || (l = checkAtrule(_i)) || (l = checkSC(_i))) {
            _i += l;
        }

        tokens[_i].atrulers_end = 1;

        if (l = checkSC(_i)) _i += l;

        return _i - start;
    }

    function getAtrulers() {
        var atrulers = (needInfo? [{ ln: tokens[pos].ln }, CSSPNodeType.AtrulersType] : [CSSPNodeType.AtrulersType]).concat(getSC()),
            x;

        while (!tokens[pos].atrulers_end) {
            if (checkSC(pos)) {
                atrulers = atrulers.concat(getSC());
            } else if (checkRuleset(pos)) {
                atrulers.push(getRuleset());
            } else {
                atrulers.push(getAtrule());
            }
        }

        return atrulers.concat(getSC());
    }

//atrules = atkeyword:ak tset*:ap ';' -> this.concat([#atrules, ak], ap)
    function checkAtrules(_i) {
        var start = _i,
            l;

        if (l = checkAtkeyword(_i)) _i += l;
        else return fail(tokens[_i]);

        if (l = checkTsets(_i)) _i += l;

        if (_i >= tokens.length) return _i - start;

        if (tokens[_i].type === TokenType.Semicolon) _i++;
        else return fail(tokens[_i]);

        return _i - start;
    }

    function getAtrules() {
        var atrules = (needInfo? [{ ln: tokens[pos].ln }, CSSPNodeType.AtrulesType, getAtkeyword()] : [CSSPNodeType.AtrulesType, getAtkeyword()]).concat(getTsets());

        pos++;

        return atrules;
    }

//block = '{' blockdecl*:x '}' -> this.concatContent([#block], x)
    function checkBlock(_i) {
        if (_i < tokens.length && tokens[_i].type === TokenType.LeftCurlyBracket) return tokens[_i].right - _i + 1;

        return fail(tokens[_i]);
    }

    function getBlock() {
        var block = needInfo? [{ ln: tokens[pos].ln }, CSSPNodeType.BlockType] : [CSSPNodeType.BlockType],
            end = tokens[pos].right;

        pos++;

        while (pos < end) {
            if (checkBlockdecl(pos)) block = block.concat(getBlockdecl());
            else throwError();
        }

        pos = end + 1;

        return block;
    }

//blockdecl = sc*:s0 (filter | declaration):x decldelim:y sc*:s1 -> this.concat(s0, [x], [y], s1)
//          | sc*:s0 (filter | declaration):x sc*:s1 -> this.concat(s0, [x], s1)
//          | sc*:s0 decldelim:x sc*:s1 -> this.concat(s0, [x], s1)
//          | sc+:s0 -> s0

    function checkBlockdecl(_i) {
        var l;

        if (l = _checkBlockdecl0(_i)) tokens[_i].bd_type = 1;
        else if (l = _checkBlockdecl1(_i)) tokens[_i].bd_type = 2;
        else if (l = _checkBlockdecl2(_i)) tokens[_i].bd_type = 3;
        else if (l = _checkBlockdecl3(_i)) tokens[_i].bd_type = 4;
        else return fail(tokens[_i]);

        return l;
    }

    function getBlockdecl() {
        switch (tokens[pos].bd_type) {
            case 1: return _getBlockdecl0();
            case 2: return _getBlockdecl1();
            case 3: return _getBlockdecl2();
            case 4: return _getBlockdecl3();
        }
    }

    //sc*:s0 (filter | declaration):x decldelim:y sc*:s1 -> this.concat(s0, [x], [y], s1)
    function _checkBlockdecl0(_i) {
        var start = _i,
            l;

        if (l = checkSC(_i)) _i += l;

        if (l = checkFilter(_i)) {
            tokens[_i].bd_filter = 1;
            _i += l;
        } else if (l = checkDeclaration(_i)) {
            tokens[_i].bd_decl = 1;
            _i += l;
        } else return fail(tokens[_i]);

        if (_i < tokens.length && (l = checkDecldelim(_i))) _i += l;
        else return fail(tokens[_i]);

        if (l = checkSC(_i)) _i += l;

        return _i - start;
    }

    function _getBlockdecl0() {
        return getSC()
                .concat([tokens[pos].bd_filter? getFilter() : getDeclaration()])
                .concat([getDecldelim()])
                .concat(getSC());
    }

    //sc*:s0 (filter | declaration):x sc*:s1 -> this.concat(s0, [x], s1)
    function _checkBlockdecl1(_i) {
        var start = _i,
            l;

        if (l = checkSC(_i)) _i += l;

        if (l = checkFilter(_i)) {
            tokens[_i].bd_filter = 1;
            _i += l;
        } else if (l = checkDeclaration(_i)) {
            tokens[_i].bd_decl = 1;
            _i += l;
        } else return fail(tokens[_i]);

        if (l = checkSC(_i)) _i += l;

        return _i - start;
    }

    function _getBlockdecl1() {
        return getSC()
                .concat([tokens[pos].bd_filter? getFilter() : getDeclaration()])
                .concat(getSC());
    }

    //sc*:s0 decldelim:x sc*:s1 -> this.concat(s0, [x], s1)
    function _checkBlockdecl2(_i) {
        var start = _i,
            l;

        if (l = checkSC(_i)) _i += l;

        if (l = checkDecldelim(_i)) _i += l;
        else return fail(tokens[_i]);

        if (l = checkSC(_i)) _i += l;

        return _i - start;
    }

    function _getBlockdecl2() {
        return getSC()
                 .concat([getDecldelim()])
                 .concat(getSC());
    }

    //sc+:s0 -> s0
    function _checkBlockdecl3(_i) {
        return checkSC(_i);
    }

    function _getBlockdecl3() {
        return getSC();
    }

//braces = '(' tset*:x ')' -> this.concat([#braces, '(', ')'], x)
//       | '[' tset*:x ']' -> this.concat([#braces, '[', ']'], x)
    function checkBraces(_i) {
        if (_i >= tokens.length ||
            (tokens[_i].type !== TokenType.LeftParenthesis &&
             tokens[_i].type !== TokenType.LeftSquareBracket)
            ) return fail(tokens[_i]);

        return tokens[_i].right - _i + 1;
    }

    function getBraces() {
        var startPos = pos,
            left = pos,
            right = tokens[pos].right;

        pos++;

        var tsets = getTsets();

        pos++;

        return needInfo?
                [{ ln: tokens[startPos].ln }, CSSPNodeType.BracesType, tokens[left].value, tokens[right].value].concat(tsets) :
                [CSSPNodeType.BracesType, tokens[left].value, tokens[right].value].concat(tsets);
    }

    function checkCDC(_i) {}

    function checkCDO(_i) {}

    // node: Clazz
    function checkClazz(_i) {
        var l;

        if (tokens[_i].clazz_l) return tokens[_i].clazz_l;

        if (tokens[_i].type === TokenType.FullStop) {
            if (l = checkIdent(_i + 1)) {
                tokens[_i].clazz_l = l + 1;
                return l + 1;
            }
        }

        return fail(tokens[_i]);
    }

    function getClazz() {
        var startPos = pos;

        pos++;

        return needInfo?
                [{ ln: tokens[startPos].ln }, CSSPNodeType.ClazzType, getIdent()] :
                [CSSPNodeType.ClazzType, getIdent()];
    }

    // node: Combinator
    function checkCombinator(_i) {
        if (tokens[_i].type === TokenType.PlusSign ||
            tokens[_i].type === TokenType.GreaterThanSign ||
            tokens[_i].type === TokenType.Tilde) return 1;

        return fail(tokens[_i]);
    }

    function getCombinator() {
        return needInfo?
                [{ ln: tokens[pos].ln }, CSSPNodeType.CombinatorType, tokens[pos++].value] :
                [CSSPNodeType.CombinatorType, tokens[pos++].value];
    }

    // node: Comment
    function checkComment(_i) {
        if (tokens[_i].type === TokenType.CommentML) return 1;

        return fail(tokens[_i]);
    }

    function getComment() {
        var startPos = pos,
            s = tokens[pos].value.substring(2),
            l = s.length;

        if (s.charAt(l - 2) === '*' && s.charAt(l - 1) === '/') s = s.substring(0, l - 2);

        pos++;

        return needInfo?
                [{ ln: tokens[startPos].ln }, CSSPNodeType.CommentType, s] :
                [CSSPNodeType.CommentType, s];
    }

    // declaration = property:x ':' value:y -> [#declaration, x, y]
    function checkDeclaration(_i) {
        var start = _i,
            l;

        if (l = checkProperty(_i)) _i += l;
        else return fail(tokens[_i]);

        if (_i < tokens.length && tokens[_i].type === TokenType.Colon) _i++;
        else return fail(tokens[_i]);

        if (l = checkValue(_i)) _i += l;
        else return fail(tokens[_i]);

        return _i - start;
    }

    function getDeclaration() {
        var declaration = needInfo?
                [{ ln: tokens[pos].ln }, CSSPNodeType.DeclarationType, getProperty()] :
                [CSSPNodeType.DeclarationType, getProperty()];

        pos++;

        declaration.push(getValue());

        return declaration;
    }

    // node: Decldelim
    function checkDecldelim(_i) {
        if (_i < tokens.length && tokens[_i].type === TokenType.Semicolon) return 1;

        return fail(tokens[_i]);
    }

    function getDecldelim() {
        var startPos = pos;

        pos++;

        return needInfo?
                [{ ln: tokens[startPos].ln }, CSSPNodeType.DecldelimType] :
                [CSSPNodeType.DecldelimType];
    }

    // node: Delim
    function checkDelim(_i) {
        if (_i < tokens.length && tokens[_i].type === TokenType.Comma) return 1;

        if (_i >= tokens.length) return fail(tokens[tokens.length - 1]);

        return fail(tokens[_i]);
    }

    function getDelim() {
        var startPos = pos;

        pos++;

        return needInfo?
                [{ ln: tokens[startPos].ln }, CSSPNodeType.DelimType] :
                [CSSPNodeType.DelimType];
    }

    // node: Dimension
    function checkDimension(_i) {
        var ln = checkNumber(_i),
            li;

        if (!ln || (ln && _i + ln >= tokens.length)) return fail(tokens[_i]);

        if (li = checkNmName2(_i + ln)) return ln + li;

        return fail(tokens[_i]);
    }

    function getDimension() {
        var startPos = pos,
            n = getNumber(),
            dimension = needInfo ?
                [{ ln: tokens[pos].ln }, CSSPNodeType.IdentType, getNmName2()] :
                [CSSPNodeType.IdentType, getNmName2()];

        return needInfo?
                [{ ln: tokens[startPos].ln }, CSSPNodeType.DimensionType, n, dimension] :
                [CSSPNodeType.DimensionType, n, dimension];
    }

//filter = filterp:x ':' filterv:y -> [#filter, x, y]
    function checkFilter(_i) {
        var start = _i,
            l;

        if (l = checkFilterp(_i)) _i += l;
        else return fail(tokens[_i]);

        if (tokens[_i].type === TokenType.Colon) _i++;
        else return fail(tokens[_i]);

        if (l = checkFilterv(_i)) _i += l;
        else return fail(tokens[_i]);

        return _i - start;
    }

    function getFilter() {
        var filter = needInfo?
                [{ ln: tokens[pos].ln }, CSSPNodeType.FilterType, getFilterp()] :
                [CSSPNodeType.FilterType, getFilterp()];

        pos++;

        filter.push(getFilterv());

        return filter;
    }

//filterp = (seq('-filter') | seq('_filter') | seq('*filter') | seq('-ms-filter') | seq('filter')):t sc*:s0 -> this.concat([#property, [#ident, t]], s0)
    function checkFilterp(_i) {
        var start = _i,
            l,
            x;

        if (_i < tokens.length) {
            if (tokens[_i].value === 'filter') l = 1;
            else {
                x = joinValues2(_i, 2);

                if (x === '-filter' || x === '_filter' || x === '*filter') l = 2;
                else {
                    x = joinValues2(_i, 4);

                    if (x === '-ms-filter') l = 4;
                    else return fail(tokens[_i]);
                }
            }

            tokens[start].filterp_l = l;

            _i += l;

            if (checkSC(_i)) _i += l;

            return _i - start;
        }

        return fail(tokens[_i]);
    }

    function getFilterp() {
        var startPos = pos,
            x = joinValues2(pos, tokens[pos].filterp_l),
            ident = needInfo? [{ ln: tokens[startPos].ln }, CSSPNodeType.IdentType, x] : [CSSPNodeType.IdentType, x];

        pos += tokens[pos].filterp_l;

        return (needInfo? [{ ln: tokens[startPos].ln }, CSSPNodeType.PropertyType, ident] : [CSSPNodeType.PropertyType, ident])
                    .concat(getSC());

    }

//filterv = progid+:x -> [#filterv].concat(x)
    function checkFilterv(_i) {
        var start = _i,
            l;

        if (l = checkProgid(_i)) _i += l;
        else return fail(tokens[_i]);

        while (l = checkProgid(_i)) {
            _i += l;
        }

        tokens[start].last_progid = _i;

        if (_i < tokens.length && (l = checkSC(_i))) _i += l;

        if (_i < tokens.length && (l = checkImportant(_i))) _i += l;

        return _i - start;
    }

    function getFilterv() {
        var filterv = needInfo? [{ ln: tokens[pos].ln }, CSSPNodeType.FiltervType] : [CSSPNodeType.FiltervType],
            last_progid = tokens[pos].last_progid;

        while (pos < last_progid) {
            filterv.push(getProgid());
        }

        filterv = filterv.concat(checkSC(pos) ? getSC() : []);

        if (pos < tokens.length && checkImportant(pos)) filterv.push(getImportant());

        return filterv;
    }

//functionExpression = ``expression('' functionExpressionBody*:x ')' -> [#functionExpression, x.join('')],
    function checkFunctionExpression(_i) {
        var start = _i;

        if (!tokens[_i] || tokens[_i++].value !== 'expression') return fail(tokens[_i - 1]);

        if (!tokens[_i] || tokens[_i].type !== TokenType.LeftParenthesis) return fail(tokens[_i]);

        return tokens[_i].right - start + 1;
    }

    function getFunctionExpression() {
        var startPos = pos;

        pos++;

        var e = joinValues(pos + 1, tokens[pos].right - 1);

        pos = tokens[pos].right + 1;

        return needInfo?
                [{ ln: tokens[startPos].ln }, CSSPNodeType.FunctionExpressionType, e] :
                [CSSPNodeType.FunctionExpressionType, e];
    }

//funktion = ident:x '(' functionBody:y ')' -> [#funktion, x, y]
    function checkFunktion(_i) {
        var start = _i,
            l = checkIdent(_i);

        if (!l) return fail(tokens[_i]);

        _i += l;

        if (_i >= tokens.length || tokens[_i].type !== TokenType.LeftParenthesis) return fail(tokens[_i - 1]);

        return tokens[_i].right - start + 1;
    }

    function getFunktion() {
        var startPos = pos,
            ident = getIdent();

        pos++;

        var body = ident[needInfo? 2 : 1] !== 'not'?
            getFunctionBody() :
            getNotFunctionBody(); // ok, here we have CSS3 initial draft: http://dev.w3.org/csswg/selectors3/#negation

        return needInfo?
                [{ ln: tokens[startPos].ln }, CSSPNodeType.FunktionType, ident, body] :
                [CSSPNodeType.FunktionType, ident, body];
    }

    function getFunctionBody() {
        var startPos = pos,
            body = [],
            x;

        while (tokens[pos].type !== TokenType.RightParenthesis) {
            if (checkTset(pos)) {
                x = getTset();
                if ((needInfo && typeof x[1] === 'string') || typeof x[0] === 'string') body.push(x);
                else body = body.concat(x);
            } else if (checkClazz(pos)) {
                body.push(getClazz());
            } else {
                throwError();
            }
        }

        pos++;

        return (needInfo?
                    [{ ln: tokens[startPos].ln }, CSSPNodeType.FunctionBodyType] :
                    [CSSPNodeType.FunctionBodyType]
                ).concat(body);
    }

    function getNotFunctionBody() {
        var startPos = pos,
            body = [],
            x;

        while (tokens[pos].type !== TokenType.RightParenthesis) {
            if (checkSimpleselector(pos)) {
                body.push(getSimpleSelector());
            } else {
                throwError();
            }
        }

        pos++;

        return (needInfo?
                    [{ ln: tokens[startPos].ln }, CSSPNodeType.FunctionBodyType] :
                    [CSSPNodeType.FunctionBodyType]
                ).concat(body);
    }

    // node: Ident
    function checkIdent(_i) {
        if (_i >= tokens.length) return fail(tokens[_i]);

        var start = _i,
            wasIdent = false;

        if (tokens[_i].type === TokenType.LowLine) return checkIdentLowLine(_i);

        // start char / word
        if (tokens[_i].type === TokenType.HyphenMinus ||
            tokens[_i].type === TokenType.Identifier ||
            tokens[_i].type === TokenType.DollarSign ||
            tokens[_i].type === TokenType.Asterisk) _i++;
        else return fail(tokens[_i]);

        wasIdent = tokens[_i - 1].type === TokenType.Identifier;

        for (; _i < tokens.length; _i++) {
            if (tokens[_i].type !== TokenType.HyphenMinus &&
                tokens[_i].type !== TokenType.LowLine) {
                    if (tokens[_i].type !== TokenType.Identifier &&
                        (tokens[_i].type !== TokenType.DecimalNumber || !wasIdent)
                        ) break;
                    else wasIdent = true;
            }   
        }

        if (!wasIdent && tokens[start].type !== TokenType.Asterisk) return fail(tokens[_i]);

        tokens[start].ident_last = _i - 1;

        return _i - start;
    }

    function checkIdentLowLine(_i) {
        var start = _i;

        _i++;

        for (; _i < tokens.length; _i++) {
            if (tokens[_i].type !== TokenType.HyphenMinus &&
                tokens[_i].type !== TokenType.DecimalNumber &&
                tokens[_i].type !== TokenType.LowLine &&
                tokens[_i].type !== TokenType.Identifier) break;
        }

        tokens[start].ident_last = _i - 1;

        return _i - start;
    }

    function getIdent() {
        var startPos = pos,
            s = joinValues(pos, tokens[pos].ident_last);

        pos = tokens[pos].ident_last + 1;

        return needInfo?
                [{ ln: tokens[startPos].ln }, CSSPNodeType.IdentType, s] :
                [CSSPNodeType.IdentType, s];
    }

//important = '!' sc*:s0 seq('important') -> [#important].concat(s0)
    function checkImportant(_i) {
        var start = _i,
            l;

        if (tokens[_i++].type !== TokenType.ExclamationMark) return fail(tokens[_i - 1]);

        if (l = checkSC(_i)) _i += l;

        if (tokens[_i].value !== 'important') return fail(tokens[_i]);

        return _i - start + 1;
    }

    function getImportant() {
        var startPos = pos;

        pos++;

        var sc = getSC();

        pos++;

        return (needInfo? [{ ln: tokens[startPos].ln }, CSSPNodeType.ImportantType] : [CSSPNodeType.ImportantType]).concat(sc);
    }

    // node: Namespace
    function checkNamespace(_i) {
        if (tokens[_i].type === TokenType.VerticalLine) return 1;

        return fail(tokens[_i]);
    }

    function getNamespace() {
        var startPos = pos;

        pos++;

        return needInfo?
                [{ ln: tokens[startPos].ln }, CSSPNodeType.NamespaceType] :
                [CSSPNodeType.NamespaceType];
    }

//nth = (digit | 'n')+:x -> [#nth, x.join('')]
//    | (seq('even') | seq('odd')):x -> [#nth, x]
    function checkNth(_i) {
        return checkNth1(_i) || checkNth2(_i);
    }

    function checkNth1(_i) {
        var start = _i;

        for (; _i < tokens.length; _i++) {
            if (tokens[_i].type !== TokenType.DecimalNumber && tokens[_i].value !== 'n') break;
        }

        if (_i !== start) {
            tokens[start].nth_last = _i - 1;
            return _i - start;
        }

        return fail(tokens[_i]);
    }

    function getNth() {
        var startPos = pos;

        if (tokens[pos].nth_last) {
            var n = needInfo?
                        [{ ln: tokens[startPos].ln }, CSSPNodeType.NthType, joinValues(pos, tokens[pos].nth_last)] :
                        [CSSPNodeType.NthType, joinValues(pos, tokens[pos].nth_last)];

            pos = tokens[pos].nth_last + 1;

            return n;
        }

        return needInfo?
                [{ ln: tokens[startPos].ln }, CSSPNodeType.NthType, tokens[pos++].value] :
                [CSSPNodeType.NthType, tokens[pos++].value];
    }

    function checkNth2(_i) {
        if (tokens[_i].value === 'even' || tokens[_i].value === 'odd') return 1;

        return fail(tokens[_i]);
    }

//nthf = ':' seq('nth-'):x (seq('child') | seq('last-child') | seq('of-type') | seq('last-of-type')):y -> (x + y)
    function checkNthf(_i) {
        var start = _i,
            l = 0;

        if (tokens[_i++].type !== TokenType.Colon) return fail(tokens[_i - 1]); l++;

        if (tokens[_i++].value !== 'nth' || tokens[_i++].value !== '-') return fail(tokens[_i - 1]); l += 2;

        if ('child' === tokens[_i].value) {
            l += 1;
        } else if ('last-child' === tokens[_i].value +
                                    tokens[_i + 1].value +
                                    tokens[_i + 2].value) {
            l += 3;
        } else if ('of-type' === tokens[_i].value +
                                 tokens[_i + 1].value +
                                 tokens[_i + 2].value) {
            l += 3;
        } else if ('last-of-type' === tokens[_i].value +
                                      tokens[_i + 1].value +
                                      tokens[_i + 2].value +
                                      tokens[_i + 3].value +
                                      tokens[_i + 4].value) {
            l += 5;
        } else return fail(tokens[_i]);

        tokens[start + 1].nthf_last = start + l - 1;

        return l;
    }

    function getNthf() {
        pos++;

        var s = joinValues(pos, tokens[pos].nthf_last);

        pos = tokens[pos].nthf_last + 1;

        return s;
    }

//nthselector = nthf:x '(' (sc | unary | nth)*:y ')' -> [#nthselector, [#ident, x]].concat(y)
    function checkNthselector(_i) {
        var start = _i,
            l;

        if (l = checkNthf(_i)) _i += l;
        else return fail(tokens[_i]);

        if (tokens[_i].type !== TokenType.LeftParenthesis || !tokens[_i].right) return fail(tokens[_i]);

        l++;

        var rp = tokens[_i++].right;

        while (_i < rp) {
            if (l = checkSC(_i)) _i += l;
            else if (l = checkUnary(_i)) _i += l;
            else if (l = checkNth(_i)) _i += l;
            else return fail(tokens[_i]);
        }

        return rp - start + 1;
    }

    function getNthselector() {
        var startPos = pos,
            nthf = needInfo?
                    [{ ln: tokens[pos].ln }, CSSPNodeType.IdentType, getNthf()] :
                    [CSSPNodeType.IdentType, getNthf()],
            ns = needInfo?
                    [{ ln: tokens[pos].ln }, CSSPNodeType.NthselectorType, nthf] :
                    [CSSPNodeType.NthselectorType, nthf];

        pos++;

        while (tokens[pos].type !== TokenType.RightParenthesis) {
            if (checkSC(pos)) ns = ns.concat(getSC());
            else if (checkUnary(pos)) ns.push(getUnary());
            else if (checkNth(pos)) ns.push(getNth());
        }

        pos++;

        return ns;
    }

    // node: Number
    function checkNumber(_i) {
        if (_i < tokens.length && tokens[_i].number_l) return tokens[_i].number_l;

        if (_i < tokens.length && tokens[_i].type === TokenType.DecimalNumber &&
            (!tokens[_i + 1] ||
             (tokens[_i + 1] && tokens[_i + 1].type !== TokenType.FullStop))
        ) return (tokens[_i].number_l = 1, tokens[_i].number_l); // 10

        if (_i < tokens.length &&
             tokens[_i].type === TokenType.DecimalNumber &&
             tokens[_i + 1] && tokens[_i + 1].type === TokenType.FullStop &&
             (!tokens[_i + 2] || (tokens[_i + 2].type !== TokenType.DecimalNumber))
        ) return (tokens[_i].number_l = 2, tokens[_i].number_l); // 10.

        if (_i < tokens.length &&
            tokens[_i].type === TokenType.FullStop &&
            tokens[_i + 1].type === TokenType.DecimalNumber
        ) return (tokens[_i].number_l = 2, tokens[_i].number_l); // .10

        if (_i < tokens.length &&
            tokens[_i].type === TokenType.DecimalNumber &&
            tokens[_i + 1] && tokens[_i + 1].type === TokenType.FullStop &&
            tokens[_i + 2] && tokens[_i + 2].type === TokenType.DecimalNumber
        ) return (tokens[_i].number_l = 3, tokens[_i].number_l); // 10.10

        return fail(tokens[_i]);
    }

    function getNumber() {
        var s = '',
            startPos = pos,
            l = tokens[pos].number_l;

        for (var i = 0; i < l; i++) {
            s += tokens[pos + i].value;
        }

        pos += l;

        return needInfo?
                [{ ln: tokens[startPos].ln }, CSSPNodeType.NumberType, s] :
                [CSSPNodeType.NumberType, s];
    }

    // node: Operator
    function checkOperator(_i) {
        if (_i < tokens.length &&
            (tokens[_i].type === TokenType.Solidus ||
            tokens[_i].type === TokenType.Comma ||
            tokens[_i].type === TokenType.Colon ||
            tokens[_i].type === TokenType.EqualsSign)) return 1;

        return fail(tokens[_i]);
    }

    function getOperator() {
        return needInfo?
                [{ ln: tokens[pos].ln }, CSSPNodeType.OperatorType, tokens[pos++].value] :
                [CSSPNodeType.OperatorType, tokens[pos++].value];
    }

    // node: Percentage
    function checkPercentage(_i) {
        var x = checkNumber(_i);

        if (!x || (x && _i + x >= tokens.length)) return fail(tokens[_i]);

        if (tokens[_i + x].type === TokenType.PercentSign) return x + 1;

        return fail(tokens[_i]);
    }

    function getPercentage() {
        var startPos = pos,
            n = getNumber();

        pos++;

        return needInfo?
                [{ ln: tokens[startPos].ln }, CSSPNodeType.PercentageType, n] :
                [CSSPNodeType.PercentageType, n];
    }

//progid = sc*:s0 seq('progid:DXImageTransform.Microsoft.'):x letter+:y '(' (m_string | m_comment | ~')' char)+:z ')' sc*:s1
//                -> this.concat([#progid], s0, [[#raw, x + y.join('') + '(' + z.join('') + ')']], s1),
    function checkProgid(_i) {
        var start = _i,
            l,
            x;

        if (l = checkSC(_i)) _i += l;

        if ((x = joinValues2(_i, 6)) === 'progid:DXImageTransform.Microsoft.') {
            _start = _i;
            _i += 6;
        } else return fail(tokens[_i - 1]);

        if (l = checkIdent(_i)) _i += l;
        else return fail(tokens[_i]);

        if (l = checkSC(_i)) _i += l;

        if (tokens[_i].type === TokenType.LeftParenthesis) {
            tokens[start].progid_end = tokens[_i].right;
            _i = tokens[_i].right + 1;
        } else return fail(tokens[_i]);

        if (l = checkSC(_i)) _i += l;

        return _i - start;
    }

    function getProgid() {
        var startPos = pos,
            progid_end = tokens[pos].progid_end;

        return (needInfo? [{ ln: tokens[startPos].ln }, CSSPNodeType.ProgidType] : [CSSPNodeType.ProgidType])
                .concat(getSC())
                .concat([_getProgid(progid_end)])
                .concat(getSC());
    }

    function _getProgid(progid_end) {
        var startPos = pos,
            x = joinValues(pos, progid_end);

        pos = progid_end + 1;

        return needInfo?
                [{ ln: tokens[startPos].ln }, CSSPNodeType.RawType, x] :
                [CSSPNodeType.RawType, x];
    }

//property = ident:x sc*:s0 -> this.concat([#property, x], s0)
    function checkProperty(_i) {
        var start = _i,
            l;

        if (l = checkIdent(_i)) _i += l;
        else return fail(tokens[_i]);

        if (l = checkSC(_i)) _i += l;
        return _i - start;
    }

    function getProperty() {
        var startPos = pos;

        return (needInfo?
                [{ ln: tokens[startPos].ln }, CSSPNodeType.PropertyType, getIdent()] :
                [CSSPNodeType.PropertyType, getIdent()])
            .concat(getSC());
    }

    function checkPseudo(_i) {
        return checkPseudoe(_i) ||
               checkPseudoc(_i);
    }

    function getPseudo() {
        if (checkPseudoe(pos)) return getPseudoe();
        if (checkPseudoc(pos)) return getPseudoc();
    }

    function checkPseudoe(_i) {
        var l;

        if (tokens[_i++].type !== TokenType.Colon) return fail(tokens[_i - 1]);

        if (tokens[_i++].type !== TokenType.Colon) return fail(tokens[_i - 1]);

        if (l = checkIdent(_i)) return l + 2;

        return fail(tokens[_i]);
    }

    function getPseudoe() {
        var startPos = pos;

        pos += 2;

        return needInfo?
                [{ ln: tokens[startPos].ln }, CSSPNodeType.PseudoeType, getIdent()] :
                [CSSPNodeType.PseudoeType, getIdent()];
    }

//pseudoc = ':' (funktion | ident):x -> [#pseudoc, x]
    function checkPseudoc(_i) {
        var l;

        if (tokens[_i++].type !== TokenType.Colon) return fail(tokens[_i - 1]);

        if ((l = checkFunktion(_i)) || (l = checkIdent(_i))) return l + 1;

        return fail(tokens[_i]);
    }

    function getPseudoc() {
        var startPos = pos;

        pos++;

        return needInfo?
                [{ ln: tokens[startPos].ln }, CSSPNodeType.PseudocType, checkFunktion(pos)? getFunktion() : getIdent()] :
                [CSSPNodeType.PseudocType, checkFunktion(pos)? getFunktion() : getIdent()];
    }

    //ruleset = selector*:x block:y -> this.concat([#ruleset], x, [y])
    function checkRuleset(_i) {
        var start = _i,
            l;

        if (tokens[start].ruleset_l !== undefined) return tokens[start].ruleset_l;

        while (l = checkSelector(_i)) {
            _i += l;
        }

        if (l = checkBlock(_i)) _i += l;
        else return fail(tokens[_i]);

        tokens[start].ruleset_l = _i - start;

        return _i - start;
    }

    function getRuleset() {
        var ruleset = needInfo? [{ ln: tokens[pos].ln }, CSSPNodeType.RulesetType] : [CSSPNodeType.RulesetType];

        while (!checkBlock(pos)) {
            ruleset.push(getSelector());
        }

        ruleset.push(getBlock());

        return ruleset;
    }

    // node: S
    function checkS(_i) {
        if (tokens[_i].ws) return tokens[_i].ws_last - _i + 1;

        return fail(tokens[_i]);
    }

    function getS() {
        var startPos = pos,
            s = joinValues(pos, tokens[pos].ws_last);

        pos = tokens[pos].ws_last + 1;

        return needInfo? [{ ln: tokens[startPos].ln }, CSSPNodeType.SType, s] : [CSSPNodeType.SType, s];
    }

    function checkSC(_i) {
        var l,
            lsc = 0;

        while (_i < tokens.length) {
            if (!(l = checkS(_i)) && !(l = checkComment(_i))) break;
            _i += l;
            lsc += l;
        }

        if (lsc) return lsc;

        if (_i >= tokens.length) return fail(tokens[tokens.length - 1]);

        return fail(tokens[_i]);
    }

    function getSC() {
        var sc = [];

        while (pos < tokens.length) {
            if (checkS(pos)) sc.push(getS());
            else if (checkComment(pos)) sc.push(getComment());
            else break;
        }

        return sc;
    }

    //selector = (simpleselector | delim)+:x -> this.concat([#selector], x)
    function checkSelector(_i) {
        var start = _i,
            l;

        if (_i < tokens.length) {
            while (l = checkSimpleselector(_i) || checkDelim(_i)) {
                _i += l;
            }

            tokens[start].selector_end = _i - 1;

            return _i - start;
        }
    }

    function getSelector() {
        var selector = needInfo? [{ ln: tokens[pos].ln }, CSSPNodeType.SelectorType] : [CSSPNodeType.SelectorType],
            selector_end = tokens[pos].selector_end;

        while (pos <= selector_end) {
            selector.push(checkDelim(pos) ? getDelim() : getSimpleSelector());
        }

        return selector;
    }

    // node: Shash
    function checkShash(_i) {
        if (tokens[_i].type !== TokenType.NumberSign) return fail(tokens[_i]);

        var l = checkNmName(_i + 1);

        if (l) return l + 1;

        return fail(tokens[_i]);
    }

    function getShash() {
        var startPos = pos;

        pos++;

        return needInfo?
                [{ ln: tokens[startPos].ln }, CSSPNodeType.ShashType, getNmName()] :
                [CSSPNodeType.ShashType, getNmName()];
    }

//simpleselector = (nthselector | combinator | attrib | pseudo | clazz | shash | any | sc | namespace)+:x -> this.concatContent([#simpleselector], [x])
    function checkSimpleselector(_i) {
        var start = _i,
            l;

        while (_i < tokens.length) {
            if (l = _checkSimpleSelector(_i)) _i += l;
            else break;
        }

        if (_i - start) return _i - start;

        if (_i >= tokens.length) return fail(tokens[tokens.length - 1]);

        return fail(tokens[_i]);
    }

    function _checkSimpleSelector(_i) {
        return checkNthselector(_i) ||
               checkCombinator(_i) ||
               checkAttrib(_i) ||
               checkPseudo(_i) ||
               checkClazz(_i) ||
               checkShash(_i) ||
               checkAny(_i) ||
               checkSC(_i) ||
               checkNamespace(_i);
    }

    function getSimpleSelector() {
        var ss = needInfo? [{ ln: tokens[pos].ln }, CSSPNodeType.SimpleselectorType] : [CSSPNodeType.SimpleselectorType],
            t;

        while (pos < tokens.length && _checkSimpleSelector(pos)) {
            t = _getSimpleSelector();

            if ((needInfo && typeof t[1] === 'string') || typeof t[0] === 'string') ss.push(t);
            else ss = ss.concat(t);
        }

        return ss;
    }

    function _getSimpleSelector() {
        if (checkNthselector(pos)) return getNthselector();
        else if (checkCombinator(pos)) return getCombinator();
        else if (checkAttrib(pos)) return getAttrib();
        else if (checkPseudo(pos)) return getPseudo();
        else if (checkClazz(pos)) return getClazz();
        else if (checkShash(pos)) return getShash();
        else if (checkAny(pos)) return getAny();
        else if (checkSC(pos)) return getSC();
        else if (checkNamespace(pos)) return getNamespace();
    }

    // node: String
    function checkString(_i) {
        if (_i < tokens.length &&
            (tokens[_i].type === TokenType.StringSQ || tokens[_i].type === TokenType.StringDQ)
        ) return 1;

        return fail(tokens[_i]);
    }

    function getString() {
        var startPos = pos;

        return needInfo?
                [{ ln: tokens[startPos].ln }, CSSPNodeType.StringType, tokens[pos++].value] :
                [CSSPNodeType.StringType, tokens[pos++].value];
    }

    //stylesheet = (cdo | cdc | sc | statement)*:x -> this.concat([#stylesheet], x)
    function checkStylesheet(_i) {
        var start = _i,
            l;

        while (_i < tokens.length) {
            if (l = checkSC(_i)) _i += l;
            else {
                currentBlockLN = tokens[_i].ln;
                if (l = checkAtrule(_i)) _i += l;
                else if (l = checkRuleset(_i)) _i += l;
                else if (l = checkUnknown(_i)) _i += l;
                else throwError();
            }
        }

        return _i - start;
    }

    function getStylesheet(_i) {
        var t,
            stylesheet = needInfo? [{ ln: tokens[pos].ln }, CSSPNodeType.StylesheetType] : [CSSPNodeType.StylesheetType];

        while (pos < tokens.length) {
            if (checkSC(pos)) stylesheet = stylesheet.concat(getSC());
            else {
                currentBlockLN = tokens[pos].ln;
                if (checkRuleset(pos)) stylesheet.push(getRuleset());
                else if (checkAtrule(pos)) stylesheet.push(getAtrule());
                else if (checkUnknown(pos)) stylesheet.push(getUnknown());
                else throwError();
            }
        }

        return stylesheet;
    }

//tset = vhash | any | sc | operator
    function checkTset(_i) {
        return checkVhash(_i) ||
               checkAny(_i) ||
               checkSC(_i) ||
               checkOperator(_i);
    }

    function getTset() {
        if (checkVhash(pos)) return getVhash();
        else if (checkAny(pos)) return getAny();
        else if (checkSC(pos)) return getSC();
        else if (checkOperator(pos)) return getOperator();
    }

    function checkTsets(_i) {
        var start = _i,
            l;

        while (l = checkTset(_i)) {
            _i += l;
        }

        return _i - start;
    }

    function getTsets() {
        var tsets = [],
            x;

        while (x = getTset()) {
            if ((needInfo && typeof x[1] === 'string') || typeof x[0] === 'string') tsets.push(x);
            else tsets = tsets.concat(x);
        }

        return tsets;
    }

    // node: Unary
    function checkUnary(_i) {
        if (_i < tokens.length &&
            (tokens[_i].type === TokenType.HyphenMinus ||
            tokens[_i].type === TokenType.PlusSign)
        ) return 1;

        return fail(tokens[_i]);
    }

    function getUnary() {
        var startPos = pos;

        return needInfo?
                [{ ln: tokens[startPos].ln }, CSSPNodeType.UnaryType, tokens[pos++].value] :
                [CSSPNodeType.UnaryType, tokens[pos++].value];
    }

    // node: Unknown
    function checkUnknown(_i) {
        if (_i < tokens.length && tokens[_i].type === TokenType.CommentSL) return 1;

        return fail(tokens[_i]);
    }

    function getUnknown() {
        var startPos = pos;

        return needInfo?
                [{ ln: tokens[startPos].ln }, CSSPNodeType.UnknownType, tokens[pos++].value] :
                [CSSPNodeType.UnknownType, tokens[pos++].value];
    }

//    uri = seq('url(') sc*:s0 string:x sc*:s1 ')' -> this.concat([#uri], s0, [x], s1)
//        | seq('url(') sc*:s0 (~')' ~m_w char)*:x sc*:s1 ')' -> this.concat([#uri], s0, [[#raw, x.join('')]], s1),
    function checkUri(_i) {
        var start = _i,
            l;

        if (_i < tokens.length && tokens[_i++].value !== 'url') return fail(tokens[_i - 1]);

        if (!tokens[_i] || tokens[_i].type !== TokenType.LeftParenthesis) return fail(tokens[_i]);

        return tokens[_i].right - start + 1;
    }

    function getUri() {
        var startPos = pos,
            uriExcluding = {};

        pos += 2;

        uriExcluding[TokenType.Space] = 1;
        uriExcluding[TokenType.Tab] = 1;
        uriExcluding[TokenType.Newline] = 1;
        uriExcluding[TokenType.LeftParenthesis] = 1;
        uriExcluding[TokenType.RightParenthesis] = 1;

        if (checkUri1(pos)) {
            var uri = (needInfo? [{ ln: tokens[startPos].ln }, CSSPNodeType.UriType] : [CSSPNodeType.UriType])
                        .concat(getSC())
                        .concat([getString()])
                        .concat(getSC());

            pos++;

            return uri;
        } else {
            var uri = (needInfo? [{ ln: tokens[startPos].ln }, CSSPNodeType.UriType] : [CSSPNodeType.UriType])
                        .concat(getSC()),
                l = checkExcluding(uriExcluding, pos),
                raw = needInfo?
                        [{ ln: tokens[pos].ln }, CSSPNodeType.RawType, joinValues(pos, pos + l)] :
                        [CSSPNodeType.RawType, joinValues(pos, pos + l)];

            uri.push(raw);

            pos += l + 1;

            uri = uri.concat(getSC());

            pos++;

            return uri;
        }
    }

    function checkUri1(_i) {
        var start = _i,
            l = checkSC(_i);

        if (l) _i += l;

        if (tokens[_i].type !== TokenType.StringDQ && tokens[_i].type !== TokenType.StringSQ) return fail(tokens[_i]);

        _i++;

        if (l = checkSC(_i)) _i += l;

        return _i - start;
    }

    // value = (sc | vhash | any | block | atkeyword | operator | important)+:x -> this.concat([#value], x)
    function checkValue(_i) {
        var start = _i,
            l;

        while (_i < tokens.length) {
            if (l = _checkValue(_i)) _i += l;
            else break;
        }

        if (_i - start) return _i - start;

        return fail(tokens[_i]);
    }

    function _checkValue(_i) {
        return checkSC(_i) ||
               checkVhash(_i) ||
               checkAny(_i) ||
               checkBlock(_i) ||
               checkAtkeyword(_i) ||
               checkOperator(_i) ||
               checkImportant(_i);
    }

    function getValue() {
        var ss = needInfo? [{ ln: tokens[pos].ln }, CSSPNodeType.ValueType] : [CSSPNodeType.ValueType],
            t;

        while (pos < tokens.length && _checkValue(pos)) {
            t = _getValue();

            if ((needInfo && typeof t[1] === 'string') || typeof t[0] === 'string') ss.push(t);
            else ss = ss.concat(t);
        }

        return ss;
    }

    function _getValue() {
        if (checkSC(pos)) return getSC();
        else if (checkVhash(pos)) return getVhash();
        else if (checkAny(pos)) return getAny();
        else if (checkBlock(pos)) return getBlock();
        else if (checkAtkeyword(pos)) return getAtkeyword();
        else if (checkOperator(pos)) return getOperator();
        else if (checkImportant(pos)) return getImportant();
    }

    // node: Vhash
    function checkVhash(_i) {
        if (_i >= tokens.length || tokens[_i].type !== TokenType.NumberSign) return fail(tokens[_i]);

        var l = checkNmName2(_i + 1);

        if (l) return l + 1;

        return fail(tokens[_i]);
    }

    function getVhash() {
        var startPos = pos;

        pos++;

        return needInfo?
                [{ ln: tokens[startPos].ln }, CSSPNodeType.VhashType, getNmName2()] :
                [CSSPNodeType.VhashType, getNmName2()];
    }

    function checkNmName(_i) {
        var start = _i;

        // start char / word
        if (tokens[_i].type === TokenType.HyphenMinus ||
            tokens[_i].type === TokenType.LowLine ||
            tokens[_i].type === TokenType.Identifier ||
            tokens[_i].type === TokenType.DecimalNumber) _i++;
        else return fail(tokens[_i]);

        for (; _i < tokens.length; _i++) {
            if (tokens[_i].type !== TokenType.HyphenMinus &&
                tokens[_i].type !== TokenType.LowLine &&
                tokens[_i].type !== TokenType.Identifier &&
                tokens[_i].type !== TokenType.DecimalNumber) break;
        }

        tokens[start].nm_name_last = _i - 1;

        return _i - start;
    }

    function getNmName() {
        var s = joinValues(pos, tokens[pos].nm_name_last);

        pos = tokens[pos].nm_name_last + 1;

        return s;
    }

    function checkNmName2(_i) {
        var start = _i;

        if (tokens[_i].type === TokenType.Identifier) return 1;
        else if (tokens[_i].type !== TokenType.DecimalNumber) return fail(tokens[_i]);

        _i++;

        if (!tokens[_i] || tokens[_i].type !== TokenType.Identifier) return 1;

        return 2;
    }

    function getNmName2() {
        var s = tokens[pos].value;

        if (tokens[pos++].type === TokenType.DecimalNumber &&
                pos < tokens.length &&
                tokens[pos].type === TokenType.Identifier
        ) s += tokens[pos++].value;

        return s;
    }

    function checkExcluding(exclude, _i) {
        var start = _i;

        while(_i < tokens.length) {
            if (exclude[tokens[_i++].type]) break;
        }

        return _i - start - 2;
    }

    function joinValues(start, finish) {
        var s = '';

        for (var i = start; i < finish + 1; i++) {
            s += tokens[i].value;
        }

        return s;
    }

    function joinValues2(start, num) {
        if (start + num - 1 >= tokens.length) return;

        var s = '';

        for (var i = 0; i < num; i++) {
            s += tokens[start + i].value;
        }

        return s;
    }

    function markSC() {
        var ws = -1, // whitespaces
            sc = -1, // ws and comments
            t;

        for (var i = 0; i < tokens.length; i++) {
            t = tokens[i];
            switch (t.type) {
                case TokenType.Space:
                case TokenType.Tab:
                case TokenType.Newline:
                    t.ws = true;
                    t.sc = true;

                    if (ws === -1) ws = i;
                    if (sc === -1) sc = i;

                    break;
                case TokenType.CommentML:
                    if (ws !== -1) {
                        tokens[ws].ws_last = i - 1;
                        ws = -1;
                    }

                    t.sc = true;

                    break;
                default:
                    if (ws !== -1) {
                        tokens[ws].ws_last = i - 1;
                        ws = -1;
                    }

                    if (sc !== -1) {
                        tokens[sc].sc_last = i - 1;
                        sc = -1;
                    }
            }
        }

        if (ws !== -1) tokens[ws].ws_last = i - 1;
        if (sc !== -1) tokens[sc].sc_last = i - 1;
    }

    return function(_tokens, rule, _needInfo) {
        return _getAST(_tokens, rule, _needInfo);
    }

}());
    return function(s, rule, _needInfo) {
        return getCSSPAST(getTokens(s), rule, _needInfo);
    }
}());
exports.srcToCSSP = srcToCSSP;

});

define('gonzales/cssp.translator.node',['require','exports','module'],function (require, exports, module) {

// version: 1.0.0

function csspToSrc(tree, hasInfo) {

    var _m_simple = {
            'unary': 1, 'nth': 1, 'combinator': 1, 'ident': 1, 'number': 1, 's': 1,
            'string': 1, 'attrselector': 1, 'operator': 1, 'raw': 1, 'unknown': 1
        },
        _m_composite = {
            'simpleselector': 1, 'dimension': 1, 'selector': 1, 'property': 1, 'value': 1,
            'filterv': 1, 'progid': 1, 'ruleset': 1, 'atruleb': 1, 'atrulerq': 1, 'atrulers': 1,
            'stylesheet': 1
        },
        _m_primitive = {
            'cdo': 'cdo', 'cdc': 'cdc', 'decldelim': ';', 'namespace': '|', 'delim': ','
        };

    function _t(tree) {
        var t = tree[hasInfo? 1 : 0];
        if (t in _m_primitive) return _m_primitive[t];
        else if (t in _m_simple) return _simple(tree);
        else if (t in _m_composite) return _composite(tree);
        return _unique[t](tree);
    }

    function _composite(t, i) {
        var s = '';
        i = i === undefined ? (hasInfo? 2 : 1) : i;
        for (; i < t.length; i++) s += _t(t[i]);
        return s;
    }

    function _simple(t) {
        return t[hasInfo? 2 : 1];
    }

    var _unique = {
        percentage: function(t) {
            return _t(t[hasInfo? 2 : 1]) + '%';
        },
        comment: function (t) {
            return '/*' + t[hasInfo? 2 : 1] + '*/';
        },
        clazz: function(t) {
            return '.' + _t(t[hasInfo? 2 : 1]);
        },
        atkeyword: function(t) {
            return '@' + _t(t[hasInfo? 2 : 1]);
        },
        shash: function (t) {
            return '#' + t[hasInfo? 2 : 1];
        },
        vhash: function(t) {
            return '#' + t[hasInfo? 2 : 1];
        },
        attrib: function(t) {
            return '[' + _composite(t) + ']';
        },
        important: function(t) {
            return '!' + _composite(t) + 'important';
        },
        nthselector: function(t) {
            return ':' + _simple(t[hasInfo? 2 : 1]) + '(' + _composite(t, hasInfo? 3 : 2) + ')';
        },
        funktion: function(t) {
            return _simple(t[hasInfo? 2 : 1]) + '(' + _composite(t[hasInfo? 3: 2]) + ')';
        },
        declaration: function(t) {
            return _t(t[hasInfo? 2 : 1]) + ':' + _t(t[hasInfo? 3 : 2]);
        },
        filter: function(t) {
            return _t(t[hasInfo? 2 : 1]) + ':' + _t(t[hasInfo? 3 : 2]);
        },
        block: function(t) {
            return '{' + _composite(t) + '}';
        },
        braces: function(t) {
            return t[hasInfo? 2 : 1] + _composite(t, hasInfo? 4 : 3) + t[hasInfo? 3 : 2];
        },
        atrules: function(t) {
            return _composite(t) + ';';
        },
        atruler: function(t) {
            return _t(t[hasInfo? 2 : 1]) + _t(t[hasInfo? 3 : 2]) + '{' + _t(t[hasInfo? 4 : 3]) + '}';
        },
        pseudoe: function(t) {
            return '::' + _t(t[hasInfo? 2 : 1]);
        },
        pseudoc: function(t) {
            return ':' + _t(t[hasInfo? 2 : 1]);
        },
        uri: function(t) {
            return 'url(' + _composite(t) + ')';
        },
        functionExpression: function(t) {
            return 'expression(' + t[hasInfo? 2 : 1] + ')';
        }
    };

    return _t(tree);
}
exports.csspToSrc = csspToSrc;

});

define('gonzales/gonzales',['require','exports','module','./gonzales.cssp.node','./cssp.translator.node'],function (require, exports, module) {

// CSSP
exports.srcToCSSP = require('./gonzales.cssp.node').srcToCSSP;

exports.csspToSrc = require('./cssp.translator.node').csspToSrc;

exports.csspToTree = function(tree, level) {
    var spaces = dummySpaces(level),
        level = level ? level : 0,
        s = (level ? '\n' + spaces : '') + '[';

    tree.forEach(function(e) {
        if (e.ln === undefined) {
            s += (Array.isArray(e) ? exports.csspToTree(e, level + 1) : ('\'' + e.toString() + '\'')) + ', ';
        }
    });

    return s.substr(0, s.length - 2) + ']';
}

function dummySpaces(num) {
    return '                                                  '.substr(0, num * 2);
}

});

define('Atem-CPS/CPS/parsing/curry',[

], function (

) {
    "use strict";
    /**
     * similar to function.prototype.bind, but it doesn't set
     * the value of 'this'
     *
     */
    function curry(func/* args */) {
        var args = Array.prototype.slice.call(arguments, 1);
        return function() {
           return func.apply(this, args.concat(
                        Array.prototype.slice.call(arguments)));
        };
    }
    return curry;
});

define('Atem-CPS/CPS/parsing/Source',[

], function(

) {
    "use strict";
    /**
     * The source of a all _Nodes in one PropertyCollection.
     * Currently only the name. To trace later where a value
     * comes from.
     */
    function Source(name) {
        this._name = name;
    }

    var _p = Source.prototype;

    _p.toString = function() {
        return ['<Source:', this._name, '>'].join(' ');
    };

    Object.defineProperty(_p, 'name', {
        get: function(){ return this._name; }
    });

    return Source;
});

define('Atem-CPS/emitterMixin',[
    'Atem-CPS/errors'
], function(
    errors
) {
    "use strict";
    var EmitterError = errors.Emitter;
    /**
     * usage:
     *
     * ```
     * var emitterSetup = {
     *     stateProperty: '_channel'
     *   , onAPI: 'on'
     *   , offAPI: 'off'
     *   , triggerAPI: '_trigger'
     * };
     *
     * function Emitter() {
     *     // sets the this._channel property
     *     emitterMixin.init(this, emitterSetup);
     * }
     * var _p = Emitter.prototype;
     * emitterMixin(_p, emitterSetup);
     * ```
     * API:
     *
     * ```
     * var e = new Emitter();
     * ```
     *
     * *************
     * subscribe default name: on
     * on(channelName, callback, subscriberData {optional})
     * returns subscriptionID
     *
     * ```
     * var subscriberData = 'data the subscriber will get back ...';
     * // note 'hello' is the channel name
     * var subscriptionID = e.on('hello', callback, subscriberData);
     *```
     *
     * *************
     * a callback should have the following signature:
     * `function(subscriberData, channelName, eventData)`
     *
     * The `callback` argument of `on` may have one of two forms
     *   - a function
     *   - [instance, 'methodName']
     *
     * subscriberData is set by the subscriber when calling `e.on`
     * eventData can be sent by the caller of `e.trigger` but is optional.
     *           This is part of the contract that a subscriber makes with
     *           the sender.
     * *************
     *
     * trigger default name: trigger
     * trigger(channelName, eventData {optional} )
     * ```
     * eventData = {any: 'value'};
     * e.trigger('hello', eventData);
     *
     * // a callback will be called like this: callback(subscriberData, eventData);
     * // or, like this callback[0][callback[1]](subscriberData, eventData);
     *
     * ************
     * unsubscribe default name: off
     * off(subscriptionID);
     * ```
     * e.off(subscriptionID);
     * ```
     *
     * *************
     *
     * the state property that is created has the following structure and adress:
     *
     * this[stateProperty] = {}
     * this[stateProperty][ channelName ] = a subscribers object
     *
     *  the subscribers object is created in _getChannel:
     * ```
     *  {
     *      idCounter: number
     *      subscriberId: [
     *             callback // a function of an array of [object, 'string methodname']
     *           , data // <= anything, will the first argument for callback
     *      ]
     *    , subscriberId: [callback, data]
     *    , ...
     *  }
     * ```
     */
    function emitterMixin(host, _setup) {
        var setup = _setup || {}
          , stateProperty = setup && setup.stateProperty || '_channel'
          , onAPI = setup && setup.onAPI || 'on'
          , offAPI = setup && setup.offAPI || 'off'
          , triggerAPI = setup && setup.triggerAPI || '_trigger'
          ;
        if(host.hasOwnProperty(onAPI))
            throw new EmitterError('The property name "' + onAPI
                    + '" is already used by this host object (' + host.constructor.name + ').');
        host[onAPI] = _mixinOn(stateProperty);
        if(host.hasOwnProperty(offAPI))
            throw new EmitterError('The property name "' + offAPI
                    + '" is already used by this host object (' + host.constructor.name + ').');
        host[offAPI] = _mixinOff(stateProperty);
        if(host.hasOwnProperty(triggerAPI))
            throw new EmitterError('The property name "' + triggerAPI
                    + '" is already used by this host object (' + host.constructor.name + ').');
        host[triggerAPI] = _mixinTrigger(stateProperty);
    }

    function init(thisVal, _setup) {
        var setup = _setup || {}
          , stateProperty = setup.stateProperty || '_channel'
          ;
        if(thisVal.hasOwnProperty(stateProperty))
            throw new EmitterError('The property name "' + stateProperty
                    + '" is already used by this object (' + thisVal.constructor.name + ': ' + thisVal+').');
        Object.defineProperty(thisVal, stateProperty, {
            value: Object.create(null)
          , writable: false
          , enumerable: true
        });
    }
    emitterMixin.init = init;

    function _getChannel(state, channelKey) {
        var channel = state[channelKey];
        if(!channel) {
            channel = state[channelKey] = Object.create(null);
            Object.defineProperty(channel, 'idCounter', {
                value: 0
              , writable: true
              , enumerable: false
              , configurable: false
            });
            Object.defineProperty(channel, 'length', {
                value: 0
              , writable: true
              , enumerable: false
              , configurable: false
            });
        }
        return channel;
    }

    function __on(state, channelKey, subscription) {
        var channel = _getChannel(state, channelKey)
          , subscriberID = channel.idCounter++
          ;
        channel.length += 1;
        channel[subscriberID] = subscription;
        return subscriberID;
    }
    function __off(state, channelKey, subscriberID) {
        var channel = state[channelKey];
        if(!channel || !channel[subscriberID]){
            console.trace();
            throw new EmitterError('Unsubscription without subscription from channel: '
                    + '"' + channelKey + '" with subscriberID: "' + subscriberID + '".');
            }
        delete channel[subscriberID];
        channel.length -= 1;
        if(channel.length === 0)
            delete state[channelKey];
    }
    function __trigger(state, channelKey, eventData) {
        var channel = state[channelKey]
          , subscribers, subscriberID, i, l
          , callback, subscriberData
          ;
        if(!channel) return;
        subscribers = Object.keys(channel);
        for(i=0,l=subscribers.length;i<l;i++) {
            subscriberID = subscribers[i];
            // subscriber may be undefined because of an unsubscription
            // since we copied the subscribers
            if(!(subscriberID in channel)) continue;
            callback = channel[subscriberID][0];
            subscriberData = channel[subscriberID][1];
            if(typeof callback === 'function' || callback instanceof Function)
                callback(subscriberData, channelKey, eventData);
            else if(callback instanceof Array)
                // callback = [object, 'methodName']
                // this is done to avoid to many new bound functions
                callback[0][callback[1]](subscriberData, channelKey, eventData);
            else
                throw new EmitterError('Unkown callback type: ' + callback);
        }
    }

    function _on(state, channelKey, callback, subscriberData) {
        var subscription = [callback, subscriberData]
          , i, l, results
          ;
        if(channelKey instanceof Array) {
            results = [];
            for(i=0,l=channelKey.length;i<l;i++)
                results.push([channelKey[i], __on(state, channelKey[i], subscription)]);
            return results;
        }
        return [channelKey, __on(state, channelKey, subscription)];
    }
    function _mixinOn(stateProperty) {
        return function on(channelKey, callback, subscriberData) {
            var state = this[stateProperty];
            if(state === undefined)
                throw new EmitterError('state "'+stateProperty+'" is undefined.');
            return _on(state, channelKey, callback, subscriberData);
        };
    }
    function _off(state, subscriberID) {
        var i, l;
        if(subscriberID[0] instanceof Array) {
            for(i=0,l=subscriberID.length;i<l;i++)
                __off(state, subscriberID[i][0], subscriberID[i][1]);
            return;
        }
        __off(state, subscriberID[0], subscriberID[1]);
    }
    function _mixinOff(stateProperty) {
        return function off(subscriberID) {
            var state = this[stateProperty];
            if(state === undefined)
                throw new EmitterError('state "'+stateProperty+'" is undefined.');
            return _off(state, subscriberID);
        };
    }
    function _trigger(host, stateProperty, channelKey, eventData) {
        var i,l, state = host[stateProperty];
        if(state === undefined)
            throw new EmitterError('state "'+stateProperty+'" is undefined.');
        if(channelKey instanceof Array) {
            for(i=0,l=channelKey.length;i<l;i++)
                __trigger(state, channelKey[i], eventData);
            return;
        }
        __trigger(state, channelKey, eventData);
    }
    function _mixinTrigger(stateProperty) {
        return function trigger(channelKey, data) {
            return _trigger(this, stateProperty, channelKey, data);
        };
    }

    return emitterMixin;
});

define('Atem-CPS/CPS/elements/_Node',[
    'Atem-CPS/errors'
  , 'Atem-CPS/emitterMixin'
], function(
    errors
  , emitterMixin
) {
    "use strict";

    var AbstractInterfaceError = errors.AbstractInterface;

    var _id_counter = 0
      , emitterMixinSetup
      ;
    function getUniqueID() {
        return _id_counter++;
    }

    /**
     * All Elements in a PropertyCollection have this base type OR
     * should at least expose the same Interface (ducktyping).
     */
    function _Node(source, lineNo) {
        /*jshint validthis:true*/
        this._source = source;
        this._lineNo = lineNo;

        // the `reset` method of PropertyCollection will call this constructor
        // repeatedly. So we need a way to detect if this is was already
        // applied or not
        if(!this.__firstTimeInitFlag) {
            emitterMixin.init(this);
            Object.defineProperty(this, '__firstTimeInitFlag', {value: true});
            // FIXME: the uniqueID should only be available for CPS-Nodes
            // that are not considered immutable! We shouldn't use it for
            // Properties or Selectorlists
            Object.defineProperty(this, 'nodeID', {value: getUniqueID()});
        }
    }
    var _p = _Node.prototype;
    _p.constructor = _Node;

    emitterMixin(_p);

    _p.toString = function() {
        throw new AbstractInterfaceError('This interface is abstract and'
            + 'needs an implementation (CPS/elements/_Node.toString)');
    };

    /**
     * Trigger the destroy event and let the _Node clean up if needed.
     * When destroy is called, this _Node is probably alredy removed from
     * its hosting structure.
     *
     * Only the parent of this _Node may call destroy, when the node is
     * deleted. So don't use it anywhere else!
     * We will probably not have all nodes using this method, it depends
     * on the context.
     *
     * An `immutable` CPS-Node (like Paramter) must not change it's state
     * or the state when running this method. Because, after removal it
     * may be reused. Probably this is also true for `mutable` CPS-Nodes.
     * FIXME: Get the semantics straight io this. Maybe it needs renaming,
     * maybe we can remove it.
     */
    _p.destroy = function(data) {
        this._trigger('destroy', data);
    };

    function _getterCreator(item) {
        /*jshint validthis:true*/
        var external = item[0]
          , internal = item[1]
          ;
        Object.defineProperty(this, external, {
            get: function(){ return this[internal]; }
        });
    }

    ([
        ['source', '_source']
      , ['lineNo', '_lineNo']
    ].forEach(_getterCreator, _p));

    return _Node;
});

define('Atem-CPS/CPS/elements/SelectorList',[
    './_Node'
], function(
    Parent
) {
    "use strict";
    /**
     * A list of ComplexSelectors
     *
     * An instance of this must be treated as immutable, it will not
     * change its content/selectors.
     */
    function SelectorList(selectors, source, lineNo) {
        var i, l, selector, count=0, invalid=false, message;
        Parent.call(this, source, lineNo);

        // Keeping this private. The value property returns a copy of
        // the this._selectors array and that's the public interface.
        this._selectors = selectors.slice();

        for(i=0,l=selectors.length;i<l;i++) {
            selector = selectors[i];
            if(selector.invalid) {
                invalid = true;
                message = selector.message;
                break;
            }
            if(!selector.selects)
                continue;
            count +=1;
        }
        if(!invalid && !count) {
            invalid = true;
            message = 'SelectorList has no valid selector';
        }

        Object.defineProperties(this,{
            'selects': {
                value: !invalid
              , enumerable: true
            }
          , 'invalid': {
                value: !!invalid
              , enumerable: true
            }
          , 'length': {
                value: selectors.length
              , enumerable: true
            }
          , 'message': {
                value: message
              , enumerable: true
            }
        });
        Object.freeze(this);
        Object.freeze(this._selectors);
    }
    var _p = SelectorList.prototype = Object.create(Parent.prototype);
    _p.constructor = SelectorList;

    Object.defineProperty(_p, 'value', {
        get: function(){ return this._selectors.slice(); }
    });

    var _filterValid = function(selector) {
        return !selector.invalid;
    };

    _p.toString = function() {
        return this._selectors.join(',\n');
        //.filter(_filterValid).join(',\n') || 'invalidSelectorList';
    };

    return SelectorList;
});

define('Atem-CPS/CPS/elements/Rule',[
    'Atem-CPS/errors'
  , './_Node'
], function(
    errors
  , Parent
) {
    "use strict";

    var ValueError = errors.Value;

    /**
     * The container for selectors and properties.
     */
    function Rule(selectorList, propertyDict, source, lineNo) {
        Parent.call(this, source, lineNo);
        this._selectorList = selectorList;
        Object.defineProperty(this, 'properties', {
            value: propertyDict
          , enumerable: true
        });

        // a receiver of this event is called as
        // handler(subscriberData, 'update', 'update')
        // 1st arg is subscription defined
        // 2nd arg === this channelKey
        // 3rd arg === eventData, injected by the original this.properties event channelKey
        this.properties.on('update', [this, '_trigger'], 'update');
    }

    var _p = Rule.prototype = Object.create(Parent.prototype);
    _p.constructor = Rule;

    _p.toString = function() {
        return [this._selectorList, ' ', this.properties].join('');
    };

    Object.defineProperty(_p, 'invalid', {
        get: function(){
            return this._selectorList.invalid;
        }
    });

    /**
     * If no namespaces are provided, the result of this method equals
     * this._selectorList.
     */
    _p.getSelectorList = function(namespaces) {
        var selectorList = this._selectorList
          , i, l
          ;
        // Multiply the selectorList on the left by each namespace in turn
        if (namespaces !== undefined) {
            for(i=0, l=namespaces.length;i<l;i++)
                if(namespaces[i] !== null)
                    selectorList = namespaces[i].multiply(selectorList);
        }
        return selectorList;
    };

    _p.setSelectorList = function(selectorList) {
        if(selectorList.invalid)
            throw new ValueError('Trying to set an invalid selectorList: ' + selectorList);
        this._selectorList = selectorList;
        this._trigger(['selector-change', 'update']);
    };

    return Rule;
});

define('Atem-CPS/CPS/elements/Comment',[
    './_Node'
], function(
    Parent
) {
    "use strict";
    /**
     * Any comment in the CPS.
     */
    function Comment(comment, source, lineNo) {
        Parent.call(this, source, lineNo);
        Object.defineProperties(this, {
            value: {
                value: comment
              , enumerable: true
            }
          , invalid: {
                value: !this.isValid(comment)
              , enumerable: true
            }
            // Use this for cases where the Comment should be identified
            // this represents the value of this comment, don't use it
            // for representation. Note: `value` is similar, but not used
            // for comparison. The implementation of this could change to be just
            // a checksum. Probably only "immutable" cps-nodes will have a `hash`
            // property. In turn only mutable cps-nodes will have a nodeID.
          , hash: {
                value: comment
              , enumerable: true
            }
        });
    }
    var _p = Comment.prototype = Object.create(Parent.prototype);
    _p.constructor = Comment;

    _p.toString = function() {
        // TODO: escape */ within this.comment, or remove it if escaping doesn't work.
        return ['/*', this.value, '*/'].join('');
    };

    _p.isValid = function(value) {
        return value.indexOf('*/') === -1;
    };

    Object.defineProperty(_p, 'unescaped', {
        get: function(){ return unescape(this.value);}
      , enumerable: true
    });

    // static functions:

    /**
     * '*​/' ends a comment, thus it is illegal inside a comment value
     * we replace it with "*" + "\u200B" + "/"
     * \u200B is ZERO WIDTH SPACE
     * so it will look right, this is a convenience for the ui.
     * for hand editing in a text editor it would be smarter to not write
     * "*​/" inside a comment, and people hardly do so.
     */
    function escape(string) {
        return string.replace(/\*\//g, '*\u200B/' );
    }
    Comment.escape = escape;

    /**
     * replace '*' + '\u200B' + '/' with "*​/"
     * see escape for more information
     */
    function unescape(string) {
        return string.replace(/\*\u200B\//g, '*/' );
    }
    Comment.unescape = unescape;

    return Comment;
});

define('Atem-CPS/CPS/elements/PropertyCollection',[
    'Atem-CPS/errors'
  , './_Node'
  , './SelectorList'
  , './Rule'
  , './Comment'
], function(
    errors
  , Parent
  , SelectorList
  , Rule
  , Comment
) {
    "use strict";
    var CPSError = errors.CPS
      , ValueError = errors.Value
      ;
    /**
     * A list of Rule, PropertyCollection (also @namespace, @import) and
     * Comment Elements
     */
    function PropertyCollection(items, source, lineNo) {
        Parent.call(this, source, lineNo);
        this._items = [];

        this._subscriptions = new Map();

        this._name = null;
        this._rules = null;
        this._rulesCacheSubscriptions = [];
        if(!this._allowNamespace) {
            // lock this.name
            this.name = undefined;
        }
        // insert the items.
        // triggers structural-change
        this.splice(0, 0, items);
    }
    var _p = PropertyCollection.prototype = Object.create(Parent.prototype);
    _p.constructor = PropertyCollection;

    // called in RuleController._set
    _p.reset = function(/* same as constructor ! */) {
        // the internal method won't trigger anything.
        var result = this._splice(0, this._items.length);

        // reset all own, enumerable, configurable properties
        Object.keys(this).forEach(function(key) {
            if(Object.getOwnPropertyDescriptor(this, key).configurable)
                delete this[key];
        }, this);

        if(result[1]) this._trigger('delete');
        // This will trigger structural-change the reset brought
        // any items, also "add" will be triggered then.
        this.constructor.apply(this, arguments);
        // if the reset did not add items, but we deleted any
        if(result[1] && !this._items.length) this._trigger('structural-change');
    };

    _p.toString = function() {
        return this._items.join('\n\n');
    };

    /**
     * subclasses of this will have to overide this definition
     */
    Object.defineProperty(_p, 'invalid', {
        value: false
    });

    /**
     * for display in the ui
     */
    Object.defineProperty(_p, 'items', {
        get: function(){return this._items.slice();}
    });

    Object.defineProperty(_p, 'length', {
        get: function(){ return this._items.length;}
    });

    Object.defineProperty(_p, 'name', {
        enumerable: true
      , get: function() {
            return (this._name ? this._name : null);
        }
      , set: function(name) {
            if(this._name !== null)
                throw new CPSError('Name is already set: ' + this._name);
            if(name === undefined) {
                this._name = undefined;
                return;
            }
            else if(typeof name !== 'string')
                throw new CPSError('Name has the wrong type, expected '
                    + 'string but got: '
                    + (name.constructor
                        ? name.constructor.name
                        : name + ' typeof: ' + (typeof name)));
            this._name = name;
        }
    });

    /**
     * this returns all rules that are direct children of this collection
     * AND all rules of PropertyCollection instances that are
     * direct children of this collection, a "flattened" list in the form:
     * [
     *    [namespace Selectorlist, Rule]
     *  , [namespace Selectorlist, Rule]
     *  , ...
     * ]
     *
     */
    Object.defineProperty(_p, 'rules', {
        get: function() {
            if(!this._rules)
                this._rules = this._getRules();
            return this._rules;
        }
    });

    _p._subscribeItem = function(item) {
        var callback, channel;
        if(item instanceof Rule)
            channel = 'selector-change';
        else if(item instanceof PropertyCollection)
            channel = 'structural-change';
        else
            return;
        callback = [this, '_itemChangeHandler'];
        this._subscribe(item, ['update', channel], callback);
    };

    _p._subscribe = function(item, channel, callback, data) {
        var subscriptionID = item.on(channel, callback, data);
        this._subscriptions.set(item, subscriptionID);
    };

    _p._unsubscribe = function(item) {
        var subscriptionID = this._subscriptions.get(item);
        if(!subscriptionID) return;
        item.off(subscriptionID);
        this._subscriptions.delete(item);
    };

    _p._itemChangeHandler = function(data, channelName, eventData) {
        //jshint unused:vars
        if(channelName === 'update')
            this._trigger('update');
        else
            this._trigger('structural-change');
    };


    function _checkItem(item) {
        return (
                (item instanceof Rule && !item.invalid)
             || (item instanceof PropertyCollection && !item.invalid)
             || item instanceof Comment
        );
    }

    /**
     * FIXME: this is copy and pasted from models/PropertyDict but the
     *        implementation should be shared!
     *
     * Calculate the start index where Array.prototype.splice really starts.
     *
     * > start:
     * > Index at which to start changing the array. If greater than the
     * > length of the array, actual starting index will be set to the
     * > length of the array. If negative, will begin that many elements
     * > from the end.
     *
     * Not in that documentation, if negative after length-start: start = 0
     */
    _p._getCanonicalStartIndex = function(start, length) {
        if(start >= length)
            return length;
        if(start < 0)
            return Math.max(0, length - start);
        return start;
    };

    _p._splice = function(startIndex, deleteCount, _insertions /* single item or array of items */) {
        var insertions = _insertions instanceof Array
            ? _insertions
            : (_insertions === undefined
                    ? []
                    : [_insertions]
              )
          , deleted
          , args
          , i, l
          , item
          , canonicalStartIndex = this._getCanonicalStartIndex(startIndex, this._items.length)
          ;
        for(i=0,l=insertions.length;i<l; i++) {
            item = insertions[i];
            if(!_checkItem(item))
                throw new ValueError('Trying to insert an invalid item: ' + item);
            this._subscribeItem(item);
        }

        args = [startIndex, deleteCount];
        Array.prototype.push.apply(args, insertions);
        deleted = Array.prototype.splice.apply(this._items, args);
        for(i=0,l=deleted.length;i<l;i++) {
            this._unsubscribe(deleted[i]);
            deleted[i].destroy();
        }
        return [canonicalStartIndex, deleted.length, insertions.length, deleted];
    };

    /**
     * One to rule them all:
     *
     * insert a Rule (which must have a valid SelectorList)
     * remove a Rule
     * replace a rule
     * Add/remove @namespace (with valid SelectorList) or @import
     * Add/remove comments
     * Remove invalid hunks of data. <= just don't allow inserting invalid hunks
     *
     * all is done with Array.prototype.splice
     * see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice
     *
     * emits:
     *      "delete" if there where deletions
     *      "add" if there where insertion
     *      "structural-change" if there where insertion or deletions
     */
    _p.splice = function(startIndex, deleteCount, insertions /* single item or array of items */) {
        var result = this._splice(startIndex, deleteCount, insertions)
          , deleted = result[1]
          , inserted = result[2]
          , events = []
          ;
        if(deleted)
            events.push('delete');
        if(inserted)
            events.push('add');
        if(events.length) {
            // FIXME: should this last part be a separate method, that just returns
            // the deleted array? Check the usage of this, see how splice in
            // PropertyDict behaves and is splitted into two methods.
            // NOTE: metapolatorStandAlone.cpsAPITools.addNewRule and addNewAtImport
            // use canonicalStartIndex!
            // (and I just backported propertyDict to comply with this API because
            // it was less effort for the moment)

            // NOTE: now "update" is taken. It is triggered when any "own"
            // item of a PropertyCollection changes. This is meant to trace
            // changes that change the representation of the PropertyCollection
            // itself. I.e. After an "update" event the PropertyCollection
            // source file should be rewritten. In contrast, "structural-change"
            // means the value of the property collection has changed, which
            // included imported PropertyCollections from other files.
            // "structural-change" could still be "deep-update" or so, but it is
            // maybe not such a bad name after all.
            events.push('structural-change', 'update');
            // TODO: Add maybe information like three numbers:
            //      index, deletedCount, insertedCount
            // That could help to update the ui, however, usually a ui is not
            // that delicate!.
            // NOTE: index and deletedCount must be calculated see the
            // docs for Array.prototype.slice
            this._trigger(events);
        }
        return result;
    };

    _p.getItem = function(index) {
        return this._items[index];
    };

    return PropertyCollection;
});

define('Atem-CPS/CPS/parsing/engine',[
    'Atem-CPS/errors'
  , './Source'
  , 'Atem-CPS/CPS/elements/PropertyCollection'

], function (
    errors
  , Source
  , PropertyCollection
) {
    "use strict";
    var CPSError = errors.CPS;
    // FIXME: handle errors!
    // especially erros thrown by gonzales, due to bad CSS input need
    // some attention

    var _pattern_linebreak = /\n/g;
    function _countLinebreaks(data) {
        switch (data) {
            // cheaper shortcuts
            case ' ':
                return 0;
            case '\n':
            case ' \n':
            case '\n ':
            case ' \n ':
                return 1;
            default:
                // this is the most expensive one
                return (data.match(_pattern_linebreak) || [] ).length;
        }
    }

    /**
     * Create a node as used in engine.
     */
    function _makeNode(nodeConstructors, parent, lineNo, data) {
        var ASTType = data[0];
        if(!parent)
            // this creates a root node
            parent = {
                depth: -1 //  +1 will be 0
              , makeInstance: true
              , type: '__init__' // can be anything but '__GenericAST__'
            };
        var node = {
            type: (ASTType in nodeConstructors)
                // create a known entity
                ? ASTType
                // just save the raw AST data
                : '__GenericAST__'
          , depth: parent.depth + 1
          , lineNo: lineNo
          , rawData: data
          , makeInstance: (
              // if the parent will not be instantiated there's no
              // need to instantiate this node, it won't persist
              // anywhere
              parent.makeInstance
              // AND if the parent is a __GenericAST__ type, it won't
              // save any children, so we don't need to make an instance
              // of this node. This--above all--is because we save
              //  __GenericAST__s children at the 'data' key.
              && parent.type !== '__GenericAST__'
            )
        };
        return node;
    }

    /**
     * Create a property node (PropertyCollection) from an Abstract
     * Syntax Tree(AST) like the one that is returned by gonzales.srcToCSSP
     * see: https://github.com/css/gonzales/blob/master/doc/AST.CSSP.en.md
     *
     * In the ParameterList Tree, there will be some arrays of the AST
     * referenced. SO if you are going to change the AST, you might change
     * ParameterList items, too. Create a deep copy of the AST if you
     * don't want this side effect.
     */
    function parserEngine(defaultNodeConstructors, factorySwitches, ast
                                    , sourceName, ruleController) {
        if(sourceName === undefined)
            sourceName = '(unknown source)';
        var source = new Source(sourceName)
          , stack = []
          , lineNo = 1
          , frame
          , ASTType
          , node, data, childNode
          , root
          // I added a way to change the node constructors object
          // depending on the context, currently only used for @dictionary
          , nodeConstructors = defaultNodeConstructors
          , oldNodeConstructors
          , i
          ;

        // initial frame
        root = _makeNode(nodeConstructors, false, lineNo, ast);
        // use slice to make a copy of the ast array
        stack.push([ast.slice(), root]);

        // we want to walk the complete tree, because we want to detect all
        // ["s", " \n "] etc. so we can count line breaks. I hope the gonzales
        // parser doesn't hide line breaks from us.
        // Line numbers are VERY helpful when working with a CSS file
        // that's why I want to keep them
        while((frame = stack.pop())) {
            // if frame 2 is set this means that the element switched
            // nodeConstructors for its own object, and that the
            // old nodeConstructors object is in frame[2]

            ASTType = frame[0][0];
            //remove the 2nd item from frame[0] and return it encapsulated
            // into an array
            data = frame[0].splice(1, 1);
            node = frame[1];

            // only ASTType is left; frame[0].splice(1, 1) returned and empty array
            if(!data.length) {
                // ASCENDING
                // All children are already initialized.
                if(node.makeInstance)
                    node.instance = nodeConstructors[node.type](node, source, ruleController);

                //switch back nodeConstructors if this element switched it
                if(frame[2])
                    nodeConstructors = frame[2];
                continue;
            }
            // there may still be data left, we have to revisit this frame
            stack.push(frame);
            data = data[0];
            if(!(data instanceof Array)) {
                // DEEPEST POINT, this node has no children
                // assert(!('children' in node), 'A data node must not have a children key')
                // save the data
                node.data = data;

                if (ASTType in {'comment':null, 's':null})
                    // count linebreaks
                    lineNo += _countLinebreaks(data);
                continue;
            }
            // data is an array
            // DESCENDING

            // switch nodeConstructors if it's the right element
            // currently only used for @dictionary, but this mechanism
            // is very generic
            oldNodeConstructors = undefined;
            for(i=0; i<factorySwitches.length;i++) {
                if(factorySwitches[i][0](data)){
                    oldNodeConstructors = nodeConstructors;
                    // keep this until childNode is finalized, then switch back
                    nodeConstructors = factorySwitches[i][1];
                    break;
                }
            }

            childNode = _makeNode(nodeConstructors, node, lineNo, data);
            // Each frame needs to be visited, because we want to count
            // lines.
            // Use slice to make a copy of the data array
            stack.push([data.slice(), childNode, oldNodeConstructors]);
            if(!childNode.makeInstance)
                continue;
            // keep the childNode
            if(!node.children)
                // assert(!('data' in node), 'A structural node must not have a data key')
                node.children = [];
            node.children.push(childNode);
        }
        //return root
        if(!(root.instance instanceof PropertyCollection))
            throw new CPSError('Parser was expected to create an instance '
                                + 'of PropertyCollection but it delivered '
                                + 'a ' + root.instance.constructor.name);

        return root.instance;
    }
    return parserEngine;
});

define('Atem-CPS/CPS/elements/GenericCPSNode',[
    './_Node'
  , 'gonzales/gonzales'
], function(
    Parent
  , gonzales
) {
    "use strict";
    /**
     * We keep the CPS declarations that we don't understand as Generic
     * CPS object around. These objects can be turned into a CPS string
     * that equals their source from a semantic point of view. The
     * GenericCPSNode makes it possible to be non-destructive and forgiving
     * with CPS originating from other applications etc.
     */
    function GenericCPSNode(ast, source, lineNo) {
        Parent.call(this, source, lineNo);
        this._ast = ast;
    }
    var _p = GenericCPSNode.prototype = Object.create(Parent.prototype);
    _p.constructor = GenericCPSNode;

    // should this return a deep copy to protect its data??
    // since we are not about changing a GenericCPSNode at all,
    // it shouldn't be possible to change the _ast data!
    // Object.defineProperty(_p, 'ast', {
    //     get: function(){ return this._ast.slice(); }
    // })

    _p.toString = function() {
        return gonzales.csspToSrc(this._ast);
    };

    Object.defineProperty(_p, 'type', {
        get: function(){ return this._ast[0]; }
    });

    return GenericCPSNode;
});

define('Atem-CPS/CPS/parsing/baseFactories',[
    'Atem-CPS/errors'
  , 'Atem-CPS/CPS/elements/PropertyCollection'
  , 'Atem-CPS/CPS/elements/Comment'
  , 'Atem-CPS/CPS/elements/GenericCPSNode'

], function (
    errors
  , PropertyCollection
  , Comment
  , GenericCPSNode
) {
    "use strict";
    var CPSError = errors.CPS;
    /**
     * Constructors OR factory functions
     * this can be both because JavaScript allows to call a factory function
     * using the new operator like in `new myfactory()`. The factory must
     * return a new object in this case.
     *
     * all constructors take the following arguments: (node, source)
     * @node: object as created by parserEngine._makeNode and augmented by
     * parserEngine
     * @source: instance of parsing/Source
     *
     * We'll use mostly factories, because the "node" we use as argument
     * is not exactly a nice interface. However, its called _nodeConstructors
     * because that implies that these functions are beeing called using
     * the `new` keyword.
     *
     * see: https://github.com/css/gonzales/blob/master/doc/AST.CSSP.en.md
     */
    return {
        /**
         * stylesheet:
         *
         * A list of rulesets, comments and __GenericAST__
         * We will delete __GenericAST__ of type 's'
         *
         * From the docs:
         * Consists of ruleset (a set of rules with selectors),
         * atrules (single-line at-rule),
         * atruleb (block at-rule)
         * and atruler (at-rule with ruleset).
         *
         * Also there are s (whitespace) and comment (comments).
         */
        'stylesheet': function(node, source) {
            var items = []
              , i=0
              , child
              ;

            if(node.children)
                for(;i<node.children.length;i++) {
                    if(node.children[i].type === '__GenericAST__'
                                    && node.children[i].instance.type === 's')
                        continue;
                    child = node.children[i].instance;
                    if(child instanceof PropertyCollection && !child.name)
                        // This is to compensate the PropertyCollection created
                        // by the deperecated @dictionary rule. A PropertyCollection
                        // without a name is a plain PropertyCollection, it
                        // can be flattened into the list of children.
                        // FIXME: remove @dictionary for good and then this code.
                        Array.prototype.push.apply(items, child.items)
                    else
                        items.push(child);
                }

            return new PropertyCollection(items, source, node.lineNo);
        }
        /**
         * comment:
         *
         * A comment. We keep comments in the most cases around.
         *
         * Nodes aware of comments are:
         *
         * stylesheet
         * simpleselector
         * block
         * property
         * value
         */
      , 'comment': function (node, source) {
            return new Comment(node.data, source, node.lineNo);
        }
      /**
       * Everything we refuse to understand at this point or later.
       *
       * We use this constructor to keep alien data around and to be able
       * to reproduce it upon serialization.
       */
      , '__GenericAST__': function (node, source) {
            return new GenericCPSNode(node.rawData, source, node.lineNo);
        }
    };
});

define('Atem-CPS/CPS/elements/Combinator',[
    './_Node'
], function(
    Parent
) {
    "use strict";
    /**
     * Any Combinator in the CPS is part of a ComplexSelector.
     */
    function Combinator(value, source, lineNo) {
        Parent.call(this, source, lineNo);
        Object.defineProperties(this, {
            'type': {
                value: this._types[value] || 'unknown'
              , enumerable: true
            }
          , 'value': {
                value: value
              , enumerable: true
            }
        });
    }
    var _p = Combinator.prototype = Object.create(Parent.prototype);
    _p.constructor = Combinator;

    _p.toString = function() {
        return (this.value === ' '
             ? ' '
             : ' ' + this.value + ' '
        );
    };

    _p._types = {
        '>': 'child'
      , ' ': 'descendant'
      , '+': 'next-sibling'
      , '~': 'following-sibling'
    };

    return Combinator;
});

define('Atem-CPS/CPS/elements/ComplexSelector',[
    'Atem-CPS/errors'
  , './_Node'
  , './Combinator'
], function(
    errors
  , Parent
  , Combinator
) {
    "use strict";

    var CPSError = errors.CPS;
    /**
     * A ComplexSelector is a chain of one or more compound selectors
     * separated by combinators.
     *
     * TODO: we will need to extract the meaning of the elements
     *
     * so far, we extract:
     *
     * simple selectors:
     *          universal, type, id, class, id, pseudo-class pseudo-element
     *
     *
     * A selector may be invalid, which would mark its selectorList invalid
     * (and thus all selectors in that list)
     *
     *  reasons for invalid selectors:
     *      it's empty
     *      a child of it is invalid
     *      it has two consecutive combinators
     *          only possible for > at the moment
     *          invalid: master>>penstroke
     *          valid: master>*>penstroke
     *
     * a compound selector is invalid if
     *      - it has more than one of universal or type selector
     *      - a universal or type selector occurs not as first
     */
    function ComplexSelector(value, source, lineNo) {
        Parent.call(this, source, lineNo);
        this._value = value;
        this._specificity = null;
        this._normalizedName = null;

        var i, l, item, invalid = false, message;
        if(!this._value.length) {
            invalid = true;
            message =  'A selector must not be empty';
        }
        else if(this._value[this._value.length-1] instanceof Combinator) {
                invalid = true;
                message ='The last item of a selector must not '
                                +'be a combinator, found: '
                                + this._value[this._value.length-1].value;
        } else for(i=0,l=this._value.length;i<l;i++) {
            item = value[i];
            if(item instanceof Combinator) {
                if(i === 0) {
                    invalid = true;
                    message = 'The first item in a selector must '
                                                +'not be a combinator';
                }
                else if(!(item.type in this._combinators)) {
                    invalid = true;
                    message = 'The combinator type "'+ item.type
                                                    +'" is alien to us';
                }
                // if this is a combinator and the last item in values
                // is a combinator, too, this is inavlid
                else if(this._value[this._value.length-1] instanceof Combinator) {
                    invalid = true;
                    message = ['Two subsequent combinators in a'
                                    , 'selector are not valid. Found:'
                                    , this._value[this._value.length-1].value
                                    , 'followed by:' + item.value
                                    ].join(' ');
                }
            }
            else if(item.invalid) {
               invalid = true;
               message = item.message;
            }

            if (invalid) break;
        }

        Object.defineProperties(this, {
            'selects': {
                value: !invalid
              , enumerable: true
            }
          , 'invalid': {
                value: invalid
              , enumerable: true
            }
          , 'message': {
                value: message
              , enumerable: true
            }
        });
    }

    ComplexSelector.add = function(a, b) {
        var value = a.value;
        value.push(new Combinator(' ', a.source, a.lineNo));
        Array.prototype.push.apply(value, b._value);
        return new ComplexSelector(value, a.source, a.lineNo);
    };

    var _p = ComplexSelector.prototype = Object.create(Parent.prototype);
    _p.constructor = ComplexSelector;

    _p.toString = function() {
        return this._value.join('');
    };

    Object.defineProperty(_p, 'normalizedName', {
        get: function() {
            return this._normalizedName || (
                this._normalizedName = this._value.map(function(item) {
                    return item.normalizedName || item.toString();
                }).join('')
            );
        }
    });

    _p._combinators = {
        // the child combinator
        'child' : true
      , 'descendant': true
    };

    Object.defineProperty(_p, 'value', {
        get: function() {
            // if _value is truthy return a copy of the _value array
            // if value is falsy, return its falsy value (probably undefiend)
            return this._value && this._value.slice();}
    });

    Object.defineProperty(_p, 'specificity', {
        get: function() {
            var a, b, c, i=0, specificity;
            a = b = c = 0;
            if(!this._specificity) {
                for(;i<this._value.length;i++) {
                    if(this._value[i] instanceof Combinator)
                        continue;
                    specificity = this._value[i].specificity;
                    a += specificity[0];
                    b += specificity[1];
                    c += specificity[2];
                }
                this._specificity = [a, b, c];
            }
            return this._specificity;
        }
    });

    _p.add = function(complexSelector) {
        return this.constructor.add(this, complexSelector);
    };

    return ComplexSelector;
});

define('Atem-CPS/CPS/elements/SimpleSelector',[
    'Atem-CPS/errors'
  , './_Node'
], function(
    errors
  , Parent
) {
    "use strict";

    /**
     * This may become an interface for enhancement via plugins.
     *
     * simple selectors:
     *          universal, type, id, class, id, pseudo-class pseudo-element
     */
    function SimpleSelector(type, name, value, source, lineNo) {
        Parent.call(this, source, lineNo);
        this._specificity = null;
        var invalid = false, message;

        // remove escaping
        if(name && name.indexOf('\\') !== -1)
            name = name.replace('\\', '');

        if(!(type in this._supportedTypes)) {
            invalid = true;
            message = 'Type of SimpleSelector is unsupported:' + type;
        }
        else if(name === undefined) {
            invalid = true;
            message = 'Name of SimpleSelector is unkown!';
        }
        else if(type === 'pseudo-class' && name === 'i') {
            if(value === undefined || value !== value || typeof value !== 'number') {
                invalid = true;
                message = 'No valid value for pseudoclass "i": ('
                                            + typeof value +') '  + value;
            }
        }
        Object.defineProperties(this, {
            'selects': {
                value: !invalid
              , enumerable: true
            }
          , 'invalid': {
                value: invalid
              , enumerable: true
            }
          , 'message': {
                value: message
              , enumerable: true
            }
          , 'type': {
                value: type
              , enumerable: true
            }
          , 'name': {
                value: name
              , enumerable: true
            }
          , 'value': {
                value: value
              , enumerable: true
            }
        });
    }

    var _p = SimpleSelector.prototype = Object.create(Parent.prototype);
    _p.constructor = SimpleSelector;

    _p.escape = function(string) {
        // FIXME: it'd be much better to define what needs no escaping
        // having '\\' first is important.
        var needsEscaping = '\\#.: (){}>+'
          , i, l, char
          , result = string
          ;
        for(i=0,l=needsEscaping.length;i<l;i++) {
            char = needsEscaping[i];
            result = result.replace(char, '\\' + char);
        }
        return result;
    };

    _p.toString = function(unescaped) {
        // FIXME: Add back escaping, where needed.
        // maybe we need a flag to switch that on and off
        // the rule below is not enough
        // also, when building selectors from element properties,
        // well need a escpape method.
        var name = unescaped ? this.name : this.escape(this.name);
        switch(this.type) {
            case 'universal':
            case 'type':
                return name;
            case 'class':
                return '.' + name;
            case 'id':
                return '#' + name;
            case 'pseudo-element':
                return '::' + name;
            case 'pseudo-class':
                return ':'  + name
                            + (this.value !== undefined
                                    ? '('+this.value+')'
                                    : '');
        }
    };

    _p._supportedTypes = {
        'universal': null
      , 'type': null
      , 'class': null
      , 'id': null
      , 'pseudo-class': null
      , 'pseudo-element': null
    };
    Object.defineProperty(_p, 'specificity', {
        get: function() {
            var s = this._specificity;
            if(!s) {
                var a, b, c;
                a = b = c = 0;
                switch(this.type) {
                    case 'id':
                        a = 1;
                        break;
                    case 'class':
                    case 'attribute': // unsupported at the moment
                    case 'pseudo-class':
                        b = 1;
                        break;
                    case 'type':
                    case 'pseudo-element':
                        c = 1;
                        break;
                }
                this._specificity = s = [a, b, c];
            }
            return s;
        }
    });

    return SimpleSelector;
});

define('Atem-CPS/CPS/elements/CompoundSelector',[
    'Atem-CPS/errors'
  , './_Node'
  , './GenericCPSNode'
  , './SimpleSelector'
], function(
    errors
  , Parent
  , GenericCPSNode
  , SimpleSelector
) {
    "use strict";

    var CPSError = errors.CPS;

    /**
     * A CompoundSelector is a chain of one or more `SimpleSelector`s
     *
     * a compound selector is invalid if
     *      - it has more than one of universal or type selector
     *      - a universal or type selector occurs at a later than
     *        the first position
     *      - if it is empty
     *
     * simple selectors:
     *          universal, type, id, class, id, pseudo-class pseudo-element
     */
    function CompoundSelector(selectors, source, lineNo) {
        Parent.call(this, source, lineNo);
        this._specificity = undefined;

        if(selectors.length === 0)
            throw new CPSError('CompoundSelector has no SimpleSelector items');

        this._value = selectors.slice();
        if(!(this._value[0].type in {'universal': null, 'type': null})) {
            this._value.unshift(new SimpleSelector('universal', '*',
                                            undefined, source, lineNo));
            this._value[0].___implicit = true;
        }

        var i,l
          , selector
          , invalid = false
          , message
          ;
        for(i=0,l=this._value.length;i<l;i++) {
            selector = this._value[i];
            if(selector.invalid) {
                invalid = true;
                message = 'Invalid selector: ' + selector;
                break;
            }
            if(i !== 0
                    && selector.type in {'universal': null, 'type': null}) {
                invalid = true;
                message = ['Type Selector and Universal selector'
                                , 'can only be the first in a CompoundSelector'
                                , 'but found "'+ selector +'" at position:'
                                , (i+1)].join(' ');
                break;
            }
        }

        Object.defineProperties(this, {
            'selects': {
                value: !invalid
              , enumerable: true
            }
          , 'invalid': {
                value: invalid
              , enumerable: true
            }
          , 'message': {
                value: message
              , enumerable: true
            }
          , 'type': {
                // a element type name or *
                value: this._value[0].name
              , enumerable: true
            }
        });
        this._normalizedValue = undefined;
        this._normalizedName = undefined;
        this.compiled = false;
        this.matches = matchesPlaceholder;
    }

    function matchesPlaceholder(element, selectorEngine) {
        /*jshint validthis: true */
        if(selectorEngine) {
            this.compile(selectorEngine);
            return this.matches(element);
        }
        throw new CPSError('Not yet compiled, use the `compile` method '
                        + 'or supply an instance of SelectorEngine to '
                        + 'this method as a second argument');
    }

    var _p = CompoundSelector.prototype = Object.create(Parent.prototype);
    _p.constructor = CompoundSelector;

    _p.toString = function() {
        // don't serialize the first item if it's marked as implicit
        return (this._value[0] && this._value[0].___implicit
                    ? this._value.slice(1)
                    : this._value
            ).join('');
    };

    _p.compile = function(selectorEngine) {
        this.matches = selectorEngine.compileCompoundSelector(this);
        this.compiled = true;
    };

    Object.defineProperty(_p, 'value', {
        get: function() {
            // if _value is truthy return a copy of the _value array
            // if value is falsy, return its falsy value (probably undefiend)
            return this._value && this._value.slice();}
    });

    /**
     *  sort by type, then by name if type equals.
     */
    function normalize(a, b) {
        var order = {'type':0, 'universal':0, 'id':1, 'pseudo-class':2, 'class':3}
          , val = order[b.type] - order[a.type]
          ;
        return val || (a.name < b.name) ? -1 : (a.name > b.name ? 1 : 0);
    }

    Object.defineProperty(_p, 'normalizedValue', {
        get: function() {
            if(!this._normalizedValue)
                this._normalizedValue = this.value.sort(normalize);
            return this._normalizedValue.slice();
        }
    });
    Object.defineProperty(_p, 'normalizedName', {
        get: function() {
            return this._normalizedName || (this._normalizedName = this.normalizedValue.join(''));
        }
    });

    Object.defineProperty(_p, 'specificity', {
        get: function() {
            var a, b, c, i=0, specificity;
            a = b = c = 0;
            for(;i<this._value.length;i++) {
                specificity = this._value[i].specificity;
                a += specificity[0];
                b += specificity[1];
                c += specificity[2];
            }
            return [a, b, c];
        }
    });

    return CompoundSelector;
});

define('Atem-CPS/CPS/parsing/selectorFactories',[
    'Atem-CPS/errors'
  , './baseFactories'
  , 'Atem-CPS/CPS/elements/Rule'
  , 'Atem-CPS/CPS/elements/SelectorList'
  , 'Atem-CPS/CPS/elements/ComplexSelector'
  , 'Atem-CPS/CPS/elements/CompoundSelector'
  , 'Atem-CPS/CPS/elements/SimpleSelector'
  , 'Atem-CPS/CPS/elements/Combinator'
  , 'Atem-CPS/CPS/elements/GenericCPSNode'
  , 'Atem-CPS/CPS/elements/Comment'

], function (
    errors
  , baseFactories
  , Rule
  , SelectorList
  , ComplexSelector
  , CompoundSelector
  , SimpleSelector
  , Combinator
  , GenericCPSNode
  , Comment
) {
    "use strict";
    var CPSParserError = errors.CPSParser;
    /**
     * Constructors OR factory functions
     * this can be both because JavaScript allows to call a factory function
     * using the new operator like in `new myfactory()`. The factory must
     * return a new object in this case.
     *
     * all constructors take the following arguments: (node, source)
     * @node: object as created by parserEngine._makeNode and augmented by
     * parserEngine
     * @source: instance of parsing/Source
     *
     * We'll use mostly factories, because the "node" we use as argument
     * is not exactly a nice interface. However, its called _nodeConstructors
     * because that implies that these functions are beeing called using
     * the `new` keyword.
     *
     * see: https://github.com/css/gonzales/blob/master/doc/AST.CSSP.en.md
     */

    // inherit from baseFactories
    var selectorFactories = Object.create(baseFactories);
    (function(factories){
        var k;
        for(k in factories) selectorFactories[k] = factories[k];
    })({
        /**
         * ruleset:
         *
         * Has a "selector" as first child and a "block" as second child.
         *
         * From the docs:
         * Consists of selector (selector) and block (a set of rules).
         */
        'ruleset': function(node, source) {
            var selectorList, propertyDict;
            if(node.children[0].type !== 'selector')
                throw new CPSParserError('The first child of "ruleset" is '
                + 'expected to be a "selector", but got "' + node.children[0].type +'" '
                +'" in a ruleset from: ' + source + 'line: '
                + node.lineNo
                +'.', (new Error()).stack);

            if(node.children[1].type !== 'block')
                throw new CPSParserError('The second child of "ruleset" is '
                + 'expected to be a "block", but got "' + node.children[1].type +'" '
                +'" in a ruleset from: ' + source + 'line: '
                + node.lineNo
                +'.', (new Error()).stack);
            selectorList = node.children[0].instance;
            propertyDict = node.children[1].instance;

            return new Rule(selectorList, propertyDict, source, node.lineNo);
        }
        // just a stub
      , 'block': function(node, source){
            /*jshint sub:true*/
            var item = baseFactories['__GenericAST__'](node, source);
            item.selects = true;
            return item;
        }
        /**
         * selector:
         *
         * A list of selectors.
         *
         * It contains 'simpleselector' and divides these by 'delim'.
         * delim is a comma in the serialization. Comments are not in here,
         * as these map to the 'simpleselector's.
         *
         * From the docs:
         * Node to store simpleselector groups.
         */
      , 'selector': function(node, source) {
            var items
              , selectorList
              ;
            items = node.children
                .filter(function(item){return item.type === 'simpleselector';})
                .map(function(item){return item.instance;});
            return new SelectorList(items, source, node.lineNo);
        }
        /**
         * simpleselector:
         *
         * An item in a list of selectors "selector".
         *
         * This has a lot different elements, also whitespace 's' AND
         * comments 'comment' etc.
         *
         * creates a ComplexSelector
         */
      , 'simpleselector': function(node, source, ruleController) {
            var elements = node.children
                    .map(function(item){return item.instance;})
              , value = []
              , i=0
              , item
              , compoundSelectorElements = null
              , isWhitespace
              ;
            for(; i<elements.length; i++) {
                item = elements[i];
                isWhitespace = (item instanceof GenericCPSNode && item.type === 's');
                if(isWhitespace && value.length === 0)
                    // skip all whitespaces at the beginning
                    continue;
                else if(item instanceof Comment)
                    // skip all comments
                    // we can get them back in if we want though
                    continue;

                if(item instanceof Combinator) {
                    // close the current simple selector
                    compoundSelectorElements = null;
                    value.push(item);
                    continue;
                }

                // may be whitespace, or a simple selector
                if(isWhitespace) {
                    // close the current simple selector
                    compoundSelectorElements = null;
                    continue;
                }

                // must be a simple selector (or invalid)
                if(compoundSelectorElements === null) {
                    // if no other combinator is already there:
                    if(value.length && !(value[value.length-1] instanceof Combinator))
                        // push a simple 'descendant' Combinator
                        // it's somehow pointless to use this._source, this._lineNo
                        // in this case. we could have remembered the source and line
                        // of the last whitespace
                        value.push(new Combinator(' ', source, node.lineNo));

                    // make a new one
                    compoundSelectorElements = [];
                    value.push(compoundSelectorElements);
                }
                compoundSelectorElements.push(item);
            }
            // build the CompoundSelectors
            for(i=0; i<value.length; i++) {
                if(value[i] instanceof Combinator)
                    continue;
                // replace directly
                value[i] = compoundSelectorFactory(value[i],
                                value[i][0]._source, value[i][0]._lineNo
                              , ruleController && ruleController.selectorEngine);
            }
            return new ComplexSelector(value, source, node.lineNo);
        }
        /**
         *
         * Combinator: +, >, ~
         * is a child of ComplexSelector
         *
         */
      , 'combinator': function (node, source) {
            return new Combinator(node.data, source, node.lineNo);
        }
    });


    function _getImplicitUniversalSelector(source, lineNo) {
        var ast = new GenericCPSNode(['ident', '*'])
          , selector = new SimpleSelector({type: 'universal', name: '*'}
                                                    , source, lineNo)
          ;
          // mark as implicit, so we can let it out when serializing again
          // this is not very 'clean' but very 'practical'
          Object.defineProperty(selector, '___implicit', {value: true});
        return selector;
    }

    /**
     * selectorEngine is optional if not present the selector will be compiled
     * lazily when used first.
     */
    function compoundSelectorFactory(elements, source, lineNo, selectorEngine) {
        var i = 0
          , selectors = []
          , cs
          ;
        for(;i<elements.length;i++) {
            if(!(elements[i] instanceof GenericCPSNode))
                throw new CPSParserError(['Unknown type for a simple selector:'
                                  , item.constructor.name, 'typeof:'
                                  , typeof item].join(' ')
                                  );
            selectors.push(simpleSelectorFactory(elements[i]));
        }
        cs = new CompoundSelector(selectors, source, lineNo);
        // compiling now moves the load to the parsing process
        if(selectorEngine)
            cs.compile(selectorEngine);
        return cs;
    }


    function _getSimpleSelectorType(type, name) {
        switch(type) {
          case 'ident':
            if(name === '*')
                return 'universal';
            return 'type';
          case 'clazz':
            return 'class';
          case 'shash':
            return 'id';
          case 'pseudoc':
            return 'pseudo-class';
          case 'pseudoe':
            return 'pseudo-element';
        }
        return undefined;
    }

    function _getSimpleSelectorName(element) {
        var name = name;
        if(typeof element._ast[1] === 'string') {
            name = element._ast[1];
        }
        else if(element._ast[1] instanceof Array) {
            if(element._ast[1][0] === 'ident')
                name = element._ast[1][1];
            else if(element._ast[1][0] === 'funktion'
                    && element._ast[1][1] instanceof Array
                    && element._ast[1][1][0] === 'ident')
                name = element._ast[1][1][1];
        }
        if(typeof name !== 'string' && name !== undefined)
            throw new CPSParserError('Can\'t find a name for SimpleSelector ('
                            + element + ')');
        return name;
    }

    function _getSimpleSelectorClassValueForIndex(element) {
        var body
          , number
          , sign
          ;
        if(element._ast[1][0] !== 'funktion'
                    || element._ast[1][2][0] !== 'functionBody')
            return;
        body = element._ast[1][2].slice(1)
                   .filter(function(item) {
                        return !(item[0] in {'s':null,'comment':null});
                    });

        sign = '+';
        if(body.length === 2 && body[0][0] === 'unary') {
            //  as the docs say: unary is either - or +
            sign = body[0][1];
            body.shift();
        }
        if(body.length === 1 && body[0][0] === 'number')
            number = parseInt(sign + body[0][1], 10);
            // if the result is NaN return undefined
            return (number === number) ? number : undefined;
    }

    function simpleSelectorFactory(element) {
        var name = _getSimpleSelectorName(element)
          , type = _getSimpleSelectorType(element.type, name)
          , value
          ;

        if(type === 'pseudo-class' && name === 'i')
            value = _getSimpleSelectorClassValueForIndex(element);
        return new SimpleSelector(type, name, value);
    }

    return selectorFactories;
});

define('Atem-CPS/CPS/elements/Property',[
    './_Node'
], function(
    Parent
) {
    "use strict";
    /**
     * A Property: name and value
     *
     * This is essentially immutable, to change it replace it with a new
     * Property via its parent (PropertyDict).
     */
    function Property(propertyName, propertyValue, source, lineNo) {
        Parent.call(this, source, lineNo);
        this._value = propertyValue;

        Object.defineProperties(this, {
            'name': {
                value: propertyName.name
              , enumerable: true
            }
          , 'value': {
                value: propertyValue
              , enumerable: true
            }
          , 'invalid': {
                value: propertyValue.invalid
              , enumerable: true
          }
        });

        // Use this for cases where the Property should be identified
        // this represents the value of this property, don't use it
        // for representation. Note: toString is similar, but used
        // for serialization, not for comparison. The implementation of
        // this could change to be just a checksum.
        // Probably only "immutable" cps-nodes will have a `hash` property.
        // In turn only mutable cps-nodes will have a nodeID.
        Object.defineProperty(this, 'hash', {
            value: [this.name, ': ', this._value].join('')
          , enumerable: true
        });
    }
    var _p = Property.prototype = Object.create(Parent.prototype);
    _p.constructor = Property;

    _p.toString = function() {
        return [this.name, ': ', this._value,';'].join('');
    };

    Object.defineProperty(_p, 'message', {
        get: function(){ return this._value.message; }
    });

    return Property;
});

define('Atem-CPS/CPS/elements/PropertyDict',[
    'Atem-CPS/errors'
  , 'Atem-CPS/emitterMixin'
  , './_Node'
  , './GenericCPSNode'
  , './Property'
  , './Comment'
], function(
    errors
  , emitterMixin
  , Parent
  , GenericCPSNode
  , Property
  , Comment
) {
    "use strict";

    /*jshint sub:true*/

    var ValueError = errors.Value
      , KeyError = errors.Key
      , AssertionError = errors.Assertion
      , propertyChangeEmitterSetup
      ;

    // TODO:
    // Make this an ordered dict. Ordered to keep the comments where
    // they belong. Dict for access to the Propertys themselves!
    // There is the possibility to declare two properties of the same
    // name. We merge multiply defined Property like so:
    // the last one wins, the other previous ones are not available via
    // keys, the index interface would work.
    // If this is not fancy enough we can still think of another approach.

    propertyChangeEmitterSetup = {
          stateProperty: '_propertyChannels'
        , onAPI: 'onPropertyChange'
        , offAPI: 'offPropertyChange'
        , triggerAPI: '_triggerPropertyChange'
    };

    /**
     * A dictionary of properties and a list of properties, comments and
     * GenericCPSNodes
     *
     * channels for the on/off interface:
     *
     * "add" data: key
     *      A new active property was added.
     * "change" data: key
     *      An active property was changed, there is a new value at key.
     * "delete" data: key
     *      There used to be an active property for key, but there is
     *      no active property for key anymore.
     * "erase" data:key
     *      All active, inactive and invalid properties for key have been
     *      removed. This is preceded by "delete" if there used to be
     *      an active property for key. See "delete"
     *
     * "update"
     *      This indicated that the data of this PropertyDict has changed.
     *      This is a very general event, that even covers insertions or
     *      removals of comments or shadowed or invalid properties. The
     *      purpose is that a UI element that displays all propertyDict.items
     *      can be update its state.
     *
     * Channels named after the active key/property-names are available
     * via the onPropertyChange/offPropertyChange interface.
     * They fire on "add", "delete", "change" for the respective key.
     */

    function PropertyDict(items, source, lineNo) {
        Parent.call(this, source, lineNo);
        this._items = items.slice();
        this._dict = undefined;
        this._keys = null;
        this._indexes = Object.create(null);
        emitterMixin.init(this, propertyChangeEmitterSetup);
    }

    var _p = PropertyDict.prototype = Object.create(Parent.prototype);
    _p.constructor = PropertyDict;

    emitterMixin(_p, propertyChangeEmitterSetup);

    _p.toString = function() {
        var prepared = this._items.map(function(item) {
            if(!item)
                return '';
            if(item instanceof GenericCPSNode)
                return ['    ', item, ';'].join('');
            return '    ' + item;
        });

        prepared.unshift('{');
        prepared.push('}');
        return prepared.join('\n');
    };

    function _isValidProperty(item) {
        return (item instanceof Property && !item.invalid);
    }

    Object.defineProperty(_p, 'items', {
        get: function() {
            return this._items.slice();
        }
    });

    _p._getItemValue = function(index) {
        // NOTE: index must be in this._dict, then it can be guaranteed
        // that this._items[index] has a value.
        return this._items[index].value;
    };

    /**
     * dictionary of active items:
     * {
     *      key: itemValue
     * }
     */
    Object.defineProperty(_p, 'dict', {
        get: function() {
            if(!this._dict)
                this._buildIndex();
            var result = Object.create(null), k, dict = this._dict;
            for(k in dict)
                result[k] = this._getItemValue(dict[k]);
            return result;
        }
    });

    Object.defineProperty(_p, 'length', {
        get: function(){ return this._items.length; }
    });

    _p._buildIndex = function() {
        var items = this._items
          , item
          , i, key, dict, keys, indexes
          ;
        this._dict = dict = Object.create(null);
        this._keys = keys = [];
        this._indexes = indexes = Object.create(null);
        // searching backwards, because the last item with key === name has
        // the highest precedence
        for(i=items.length-1;i>=0;i--) {
            item = items[i];
            if(!(item instanceof Property))
                // filter out unwanted stuff (and maybe other stuff if that happens)
                // comments, valid and invalid properties are expected yet
                continue;
            key = item.name;

            // this._indexes contains invalid properties, so we can erase them
            if(!indexes[key]) indexes[key] = [];
            // Keep the order so that the lowest index comes first
            // Thus the active index for will always be the last one!
            indexes[key].unshift(i);

            if(item.invalid)
                continue;
            if(!(key in dict)) {
                dict[key] = i;
                keys.push(key);
            }
        }
    };

    // START helpers for _p.splice
    _p._getInsertedDict = function (insertions, canonicalStartIndex) {
        var insertedDict = Object.create(null)
          , i, l, item, key, insertedIndexes
          ;

        for(i=0,l=insertions.length;i<l;i++) {
            item = insertions[i];
            if(!(item instanceof Property))
                continue;
            key = item.name;
            insertedIndexes = insertedDict[key];
            if(!insertedIndexes)
                insertedDict[key] = insertedIndexes = [];
            insertedIndexes.push(i + canonicalStartIndex);
        }
        return insertedDict;
    };

    _p._updateIndexes = function(indexes, canonicalStartIndex, removedRangeEnd, changeRate, insertedIndexes) {
        var start = null
          , removedCount = 0
          , insertedCount = insertedIndexes.length
          , i, length, index
          , erase = false
          , args
          ;
        length = indexes.length;

        // the last index must be bigger than canonicalStartIndex
        if(length && indexes[length-1] >= canonicalStartIndex) {
            for(i=0;i<length;i++) {
                index = indexes[i];
                if(index < canonicalStartIndex)
                    continue;
                // index >= canonicalStartIndex
                if(start === null)
                    // if there were removals and/or insertions
                    // this is the first affected item
                    start = i;

                if(index < removedRangeEnd)
                    removedCount += 1;
                else // index >= removedRangeEnd
                    indexes[i] = index + changeRate;
            }
        }

        if(start === null) {
            if(insertedCount)
                Array.prototype.push.apply(indexes, insertedIndexes);
            return false; // not erased
        }

        if(start === 0 && insertedCount === 0 && removedCount === indexes.length)
            return true; // erased

        args = [start, removedCount];
        Array.prototype.push.apply(args, insertedIndexes);
        Array.prototype.splice.apply(indexes, args);
        return false; // not erased
    };

    _p._getActiveIndex = function(key) {
        var indexes = this._indexes[key]
          , i, index;
        for(i=indexes.length-1;i>=0;i--) {
            index = indexes[i];
            if(!this._items[index].invalid)
                return index;
        }
        return -1;
    };

    _p._updateDict = function(key, canonicalStartIndex, removedRangeEnd, changeRate) {
        var index = this._dict[key]
          , active = this._getActiveIndex(key)
          ;

        if(active === -1)
            return 'delete';

        if(index >= canonicalStartIndex) {
            if(index < removedRangeEnd)
                // a delete for now, may become a change
                index = -1;
            else // index >= removedRangeEnd
                index += changeRate;
        }

        if(active !== index) {
            this._dict[key] = active;
            return 'change';
        }
        // No event: maybe an updated index number, but it's the same item
        this._dict[key] = index;
        return null;
    };

    /**
     * Calculate the start index where Array.prototype.splice really starts.
     *
     * > start:
     * > Index at which to start changing the array. If greater than the
     * > length of the array, actual starting index will be set to the
     * > length of the array. If negative, will begin that many elements
     * > from the end.
     *
     *  Not in that documentation, if negative after length-start: start = 0
     */
    _p._getCanonicalStartIndex = function(start, length) {
        if(start >= length)
            return length;
        if(start < 0)
            return Math.max(0, length - start);
        return start;
    };

    function _checkItem(item) {
        return (item instanceof Comment || _isValidProperty(item));
    }

    _p._triggerEvents = function(events) {
        var event, keys, i,l;
        for(event in events) {
            keys = events[event];

            // first trigger the propertyChange family, it's less confusing
            // for listeners when they don't get a propertyChange 'add' event
            // after having added the property already because of the normal on channel
            // FIXME: can there be a reasonable rule, like is it always better to
            // _triggerPropertyChange before _trigger or so?

            // Don't trigger PropertyChange for "erase"
            // because erase doesn't change property values. If that happens,
            // "delete" is also being triggered
            if(event !== 'erase')
                this._triggerPropertyChange(keys, event);

            this._trigger(event, keys);
        }
    };

    _p._splice = function(startIndex, deleteCount, _insertions /* single item or array of items */) {
        if(!this._dict)
            this._buildIndex();

        var insertions = _insertions instanceof Array
            ? _insertions
            : (_insertions === undefined
                    ? []
                    : [_insertions]
              )
          , removals
          , args
          , i, l
          , item
          , events = Object.create(null)
          , oldLength = this._items.length
          , insertionsLength = insertions.length
          , removalsLength
          ;
        for(i=0,l=insertionsLength;i<l; i++)
            if(!_checkItem(insertions[i]))
                throw new ValueError('Trying to insert an invalid item: '
                                        + '"'+insertions[i]+'"'
                                        + (insertions[i].message ? ' message: "' + insertions[i].message+'"' : ''));

        args = [startIndex, deleteCount];
        Array.prototype.push.apply(args, insertions);
        removals = Array.prototype.splice.apply(this._items, args);
        removalsLength = removals.length;

        if(insertionsLength === 0 && removalsLength === 0)
            return [null, 0, 0];

        for(i=0;i<removalsLength;i++)
            // FIXME: apparently in a move action, this destroy would have the wrong semantics
            // is this used in the StyleDict?
            // it is important that the *immutable* Properties don't get unusable
            // by this!
            removals[i].destroy();

        // update the existing indexes: this._dict and this.__indexes
        // record the event's

        var changeRate = insertionsLength - removalsLength
          , canonicalStartIndex = this._getCanonicalStartIndex(startIndex, oldLength)
          , removedRangeEnd = canonicalStartIndex + removalsLength
          , insertedDict = this._getInsertedDict(insertions, canonicalStartIndex)
          , key, active, insertedIndexes, indexes
          , createdKeys = []
          , erase, event
          ;

        for(key in insertedDict) {
            if(!(key in this._indexes))
                createdKeys.push(key);
        }

        // update the existing entries in this._indexes
        for(key in this._indexes) {
            indexes = this._indexes[key];
            insertedIndexes = insertedDict[key] || [];
            erase = this._updateIndexes(indexes, canonicalStartIndex
                            , removedRangeEnd, changeRate, insertedIndexes);
            if(!erase) continue;

            delete this._indexes[key];
            if(!events['erase']) events['erase'] = [];
            events['erase'].push(key);
        }

        // update the existing entries in this._dict
        for(key in this._dict) {
            event = key in this._indexes
                ? this._updateDict(key, canonicalStartIndex, removedRangeEnd, changeRate)
                // it is no more in this._indexes so this is a delete
                : 'delete'
                ;
            if(!event) continue;

            if(event === 'delete')
                delete this._dict[key];

            if(!events[event]) events[event] = [];
            events[event].push(key);
        }

        // insert new entries into this._dict and this._indexes
        for(i=0,l=createdKeys.length;i<l;i++) {
            key = createdKeys[i];
            this._indexes[key] = insertedDict[key];
            active = this._getActiveIndex(key);

            if(active === -1) continue;

            this._dict[key] = active;
            if(!events['add']) events['add'] = [];
            events['add'].push(key);
        }

        if('add' in events || 'delete' in events)
            // mark for update
            this._keys = null;

        this._triggerEvents(events);
        return [startIndex, removalsLength, insertionsLength, removals];
    };

    _p.splice = function(startIndex, deleteCount, _insertions /* single item or array of items */) {
        var result = this._splice(startIndex, deleteCount, _insertions);
        if(result[1] || result[2])
            this._trigger('update');
        return result;
    };

    /**
     * replace or add
     * override the active item or create new entry
     *
     * emits: "add", "change" or nothing
     */
    _p.setProperty = function(item) {
        var key = item.name
          , items = this._items
          , index
          , eventName
          , event = Object.create(null)
          , old
          ;
        if(!_isValidProperty(item))
            throw new ValueError('Trying to set an invalid property: ' + item);
        if(!this.has(key)) {
            eventName = 'add';
            index = items.length;
            items.push(item);
            if(!this._indexes[key])
                this._indexes[key] = [index];
            else
                this._indexes[key].push(index);
            this._dict[key] = index;
            this._keys.push(key);
        }
        else {
            eventName = 'change';
            index = this._dict[key];
            old = items[index];
            items[index] = item;
        }
        // emit events
        if(old) old.destroy();

        event[eventName] = [key];
        this._triggerEvents(event);
        this._trigger('update');
    };

    /**
     * Remove all items with key as name (valid, invalid, active, inactive)
     * return number of removed items
     *
     * emits: ["delete", "erase"], "erase" or nothing
     */
    _p.erase = function(key) {
        var deleteCount, total, i, length, index, indexes;
        if(!this._indexes) this._buildIndex();

        deleteCount = 0;
        total = 0;
        while(key in this._indexes) {
            indexes = this._indexes[key];
            length = indexes.length;
            if(length === 0)
                throw new AssertionError('There MUST NOT be a key without any index');
            deleteCount = 1;
            index = indexes[0];
            // find all indexes that follow directly after index
            // because they can be removed with the same splice
            for(i=1;i<length;i++) {
                if(indexes[i] === index + deleteCount)
                    deleteCount++;
            }
            // NOTE: this uses _splice, because the update event should
            // be triggert only once at the end of an action (or as seldom as possible)
            this._splice(index, deleteCount);
            total += deleteCount;
        }
        if(total)
            this._trigger('update');
        return total;
    };

    /**
     * Remove/delete the currently active item for key.
     * May make another valid property with the same name active,
     * if there is any.
     *
     * emits: "change" or "delete" or noting
     */
    _p.removeCurrentActiveProperty = function(key) {
        if(!this.has(key))
            return 0;
        // delete the currently active item for key
        var index = this._dict[key];

        this.splice(index, 1);
        return 1;
    };

    /**
     * NOTE: In an async environment this will likely create a race condition.
     */
    _p.keys = function() {
        if(!this._dict)
            this._buildIndex();
        else if(!this._keys)
            this._keys = Object.keys(this._dict);
        return this._keys.slice();
    };

    _p.get = function(key) {
        if(!this._dict)
            this._buildIndex();
        if(!(key in this._dict))
            throw new KeyError('Key "'+key+'" not in PropertyDict.');
        return this._getItemValue(this._dict[key]);
    };

    _p.getItem = function(index) {
        return this._items[index];
    };

    /**
     * NOTE: In an async environment this will likely create a race condition.
     */
    _p.has = function(key) {
        if(!this._dict)
            this._buildIndex();
        return key in this._dict;
    };

    /**
     * NOTE: In an async environment this will likely create a race condition.
     */
    _p.find = function(key) {
        if(!this._dict)
            this._buildIndex();
        return this._indexes[key].slice() || [];
    };

    return PropertyDict;
});

define('Atem-CPS/CPS/elements/_Name',[
    './_Node'
], function(
    Parent
) {
    "use strict";
    /**
     * Used as base of AtRuleName and PropertyName.
     */
    function _Name(name, comments ,source, lineNo) {
        /*jshint validthis:true*/
        Parent.call(this, source, lineNo);
        this._comments = comments;
        Object.defineProperty(this, 'name', {
            value: name
          , enumerable: true
        });
    }
    var _p = _Name.prototype = Object.create(Parent.prototype);
    _p.constructor = _Name;

    /**
     * Prints all comments after the name.
     */
    _p.toString = function() {
        return [this.name,
                this._comments.length ? ' ': '',
                this._comments.join('\n')].join('');
    };
    return _Name;
});

define('Atem-CPS/CPS/elements/PropertyName',[
    './_Name'
], function(
    Parent
) {
    "use strict";
    /**
     * The name of a Property.
     */
    function PropertyName(name, comments ,source, lineNo) {
        Parent.call(this, name, comments ,source, lineNo);
        // FIXME: detect invalid names!
        // Then set and use this.invalid and this message
        // For usage, modify Property to include the names status as well.
    }
    var _p = PropertyName.prototype = Object.create(Parent.prototype);
    _p.constructor = PropertyName;

    return PropertyName;
});

define('Atem-CPS/CPS/elements/PropertyValue',[
    'Atem-CPS/errors'
  , './_Node'
], function(
    errors
  , Parent
) {
    "use strict";
    /**
     * The value of a Property.
     *
     * TODO: the value needs to be examined, we need a canonical version
     * of it. Otherwise one effect is, that we add too much whitespace
     * when serializing with toString (because we don't remove whitespace
     * when extracting the comments)
     * This will probably happen when we start to really process the values.
     */
    function PropertyValue(valueData, comments ,source, lineNo) {
        Parent.call(this, source, lineNo);

        this._valueData = valueData;
        this._comments = comments;
        this.value = undefined;
        this.invalid = false;
        this.message = undefined;
    }
    var _p = PropertyValue.prototype = Object.create(Parent.prototype);
    _p.constructor = PropertyValue;

    _p._setInvalid = function(message) {
        Object.defineProperty(this, 'invalid', {
            value: true
          , enumerable: true
        });

        Object.defineProperty(this, 'message', {
            value: message
          , enumerable: true
        });
    };

    _p._setValue = function(value) {
        if(value === undefined)
            throw new errors.CPS('value may not be undefined');

        Object.defineProperty(this, 'value', {
            value: value
          , enumerable: true
        });
    };

    _p.initialize = function(name, valueFactory) {
        if(this.value !== undefined)
            throw new errors.CPS('this.value is already set!');
        if(this.invalid)
            throw new errors.CPS('Can\'t set value: value is already '
                    + 'marked as invalid: ' + this._message);

        var result = valueFactory(this.valueString);
        if(result[0]) // invalidMessage
            this._setInvalid(result[0]);
        else
            // result[1] is commonly expected an object with
            // _FormulaeValue API but not enforced yet. This may be
            // an angle for making this more reusable. So we use Ducktyping
            // and just expect the right thing to be in result[1]
            // But, undefined is not allowed, see _setValue.
            this._setValue(result[1]);
    };

    // this property ommits the comments on purpose
    Object.defineProperty(_p, 'valueString', {
        get: function(){ return this._valueData.join(''); }
    });

    Object.defineProperty(_p, 'astTokens', {
        get: function() {
            return this._valueData.map(
                                function(item){ return item._ast; });
            }
    });

    /**
     * Prints all comments before the value.
     */
    _p.toString = function() {
        return [this._comments.join('\n'),
                this._comments.length ? ' ': '',
                this.valueString.trim()].join('');
    };

    return PropertyValue;
});

define('Atem-CPS/CPS/elements/AtRuleName',[
    './_Name'
], function(
    Parent
) {
    "use strict";
    /**
     * The name of an AtRule.
     */
    function AtRuleName(name, comments ,source, lineNo) {
        Parent.call(this, name, comments ,source, lineNo);
    }
    var _p = AtRuleName.prototype = Object.create(Parent.prototype);
    _p.constructor = AtRuleName;

    return AtRuleName;
});

define('Atem-CPS/CPS/elements/AtNamespaceCollection',[
    'Atem-CPS/errors'
  , './PropertyCollection'
  , './SelectorList'
], function(
    errors
  , Parent
  , SelectorList
) {
    "use strict";
    var CPSError = errors.CPS
      , ValueError = errors.Value
      ;
    /**
     * A list of Rule, AtRuleCollection, PropertyCollection, and
     * Comment Elements
     */
    function AtNamespaceCollection(name, selectorList, items, source, lineNo) {
        // The _allowNamespace property of this prototype tells the Parent
        // constructor to not look up this.name
        Parent.call(this, items, source, lineNo);
        this._selectorList = null;
        if(name)
            this.name = name;
        if(selectorList)
            this.selectorList = selectorList;
    }

    var _p = AtNamespaceCollection.prototype = Object.create(Parent.prototype);
    _p.constructor = AtNamespaceCollection;

    _p._allowNamespace = true;

    _p.toString = function() {
        return ['@',this.name, '(', this.selectorList,')', ' {\n',
            this._items.join('\n\n') ,'\n}'].join('');
    };

    Object.defineProperty(_p, 'invalid', {
        get: function() {
            return !this._selectorList || this._selectorList.invalid;
        }
    });

    /**
     * Selectorlist may be invalid when it is set initially.
     * This is that the parser can set selectorlist even if it
     * was invalid in the source file, but the API should not be allowed
     * to do so dynamically.
     * If the api creates a new AtNamespaceCollection it still
     * can set an invalid selectorlist (or none). There is however little
     * use for it because an invalid AtNamespaceCollection wont be accepted
     * by a parent PropertyCollection. If there's a problem with this
     * behavior we may change it.
     */
    function setSelectorList (selectorList) {
        /*jshint validthis: true*/
        if(!(selectorList instanceof SelectorList)) {
            throw new CPSError('selectorList has the wrong type, expected '
                + 'SelectorList but got: '
                + (selectorList ? (selectorList.constructor.name
                    ? selectorList.constructor.name
                    : selectorList.constructor): selectorList));
        }
        else if(selectorList.invalid && this._selectorList !== null)
            throw new ValueError('trying to set an invalid selectorList: '+ selectorList);

        this._selectorList = selectorList;
        this._trigger(['selector-change', 'structural-change', 'update']);
    }

    _p.setSelectorList = setSelectorList;

    function getSelectorList() {
        /*jshint validthis: true*/
        return this._selectorList;
    }

    _p.getSelectorList = getSelectorList;

    Object.defineProperty(_p, 'selectorList', {
        enumerable: true
      , set: setSelectorList
      , get: getSelectorList
    });

    return AtNamespaceCollection;
});

define('Atem-CPS/CPS/parsing/parseSelectorList',[
    'Atem-CPS/errors'
  , 'gonzales/gonzales'
  , './engine'
  , './selectorFactories'
  , 'Atem-CPS/CPS/elements/Rule'
  , 'Atem-CPS/CPS/elements/Comment'
], function (
    errors
  , gonzales
  , parserEngine
  , selectorFactories
  , Rule
  , Comment
) {
    "use strict";
    var CPSError = errors.CPS
      , CPSParserError = errors.CPSParser
      ;

    /**
     * selectorEngine is optional if not present the selector will be compiled
     * lazily when used first.
     */
    function selectorListFromString(string, sourceName, selectorEngine) {
        var ast;
        try {
            ast = gonzales.srcToCSSP(string + '{}');
        } catch(error) {
            throw new CPSParserError('Error parsing "' + string + '" as a selector. '
                + 'Message: ' + error.message);
        }
        return selectorListFromAST(ast, sourceName, selectorEngine);
    }

    /**
     * selectorEngine is optional if not present the selector will be compiled
     * lazily when used first.
     */
    function selectorListFromAST(ast, sourceName, selectorEngine) {
        var rules
          , selectorList
          , i=0
          ;
        rules = parserEngine(selectorFactories, [], ast
                                    , sourceName || 'selector parser'
                                    , {selectorEngine: selectorEngine});
        rules = rules.items;
        // search the first instance of SelectorList
        // and verify that nothing else was submitted.
        for(;i<rules.length;i++) {
            if(rules[i] instanceof Comment)
                // accept comments
                continue;
            else if(!(rules[i] instanceof Rule))
                throw new CPSParserError('The argument string described a '
                        + rules[i].constructor.name + ' but it should be a'
                        + 'SelectorList.');
            else if(selectorList !== undefined)
                throw new CPSParserError('The argument string described more than '
                    + 'a selectorlist is contained: ' + rules[i]);
            else if(rules[i].paramters)
                throw new CPSParserError('Found properties where there should '
                            + 'be only a SelectorList: ' + rules[i].paramters);
            selectorList = rules[i].getSelectorList();
            // don't break! we want to validate the rules, if there is
            // awkward stuff in it it's better to complain, because it
            // might be a programming error.
        }
        if(!selectorList)
            throw new CPSParserError('No selector found.');
        if(!selectorList.selects)
            throw new CPSParserError('SelectorList will not select anything: '
                    + selectorList.message);
        return selectorList;
    }

    return {
        fromString: selectorListFromString
      , fromAST: selectorListFromAST
    };
});

define('Atem-CPS/CPS/parsing/propertyFactories',[
    'Atem-CPS/errors'
  , './curry'
  , './selectorFactories'
  , 'Atem-CPS/CPS/elements/PropertyCollection'
  , 'Atem-CPS/CPS/elements/PropertyDict'
  , 'Atem-CPS/CPS/elements/Property'
  , 'Atem-CPS/CPS/elements/PropertyName'
  , 'Atem-CPS/CPS/elements/PropertyValue'
  , 'Atem-CPS/CPS/elements/AtRuleName'
  , 'Atem-CPS/CPS/elements/AtNamespaceCollection'
  , 'Atem-CPS/CPS/elements/SelectorList'
  , 'gonzales/gonzales'
  , './parseSelectorList'
], function (
    errors
  , curry
  , selectorFactories
  , PropertyCollection
  , PropertyDict
  , Property
  , PropertyName
  , PropertyValue
  , AtRuleName
  , AtNamespaceCollection
  , SelectorList
  , gonzales
  , parseSelectorList
) {
    "use strict";
    /*jshint sub:true*/
    var CPSError = errors.CPS;

    /**
     * Constructors OR factory functions
     * this can be both because JavaScript allows to call a factory function
     * using the new operator like in `new myfactory()`. The factory must
     * return a new object in this case.
     *
     * all constructors take the following arguments: (node, source)
     * @node: object as created by parserEngine._makeNode and augmented by
     * parserEngine
     * @source: instance of parsing/Source
     *
     * We'll use mostly factories, because the "node" we use as argument
     * is not exactly a nice interface. However, it's called _nodeConstructors
     * because that implies that these functions are being called using
     * the `new` keyword.
     *
     * see: https://github.com/css/gonzales/blob/master/doc/AST.CSSP.en.md
     */

    function genericNameFactory (Constructor, node, source) {
        var comments = node.children
                .filter(function(item) {
                    return (item.type === 'comment');
                }).
                map(function(item){
                    return item.instance;
                }
            )
          , name
          ;

        if(node.children[0].type !== '__GenericAST__'
                && node.children[0].instance.type !== 'ident')
            throw new CPSError(['The first child of "'+node.type+'" is '
                , 'expected to be an __GenericAST__ of type "ident", '
                , 'but got "', node.children[0].type, '" '
                , 'type: "', (node.children[0].instance
                        ? node.children[0].instance.type
                        : '<no instance>'), '" '
                ,'in a '+node.type+' from: ', source, 'line: '
                , node.lineNo
                ,'.'].join(''), (new Error()).stack);
        name = node.children[0].data;
        return new Constructor(name, comments ,source, node.lineNo);
    }

    // inherit from selectorFactories
    var propertyFactories = Object.create(selectorFactories);

    (function(factories){
        var k;
        for(k in factories) propertyFactories[k] = factories[k];
    })({
        /**
         * block:
         *
         * A list of
         * "declaration"
         * "decldelim" (semicolon)
         * "s" (whitespace)
         * and "comment".
         *
         * IMPORTANT: "filter" can occur, which is a like "declaration"
         * but has a special name. This was a rather random pick, I suppose.
         * We can use "filter" AS "declaration", if we need it, OR just let
         * it be a __GenericAST__. Filter has, instead of a "value" a "filterv"
         * This is a bugging inconsequence in gonzales. But we can shield
         * it from higher levels.
         *
         * We rename "declaration" as "Property"
         *
         * We throw away "decldelim" and "s", we keep "declaration",
         * "comment" and __GenericAST__ (which will be produced by from
         * unkown "declaration"s/properties)
         *
         * From the docs: Part of the style in the braces.
         */
        'block': function(node, source) {
            var i=0
              , items = []
              , whitelist = {
                    'comment': null,
                    'declaration': null
                }
              , astBlacklist = {
                    'decldelim': null,
                    's': null
                }
              , children = ('children' in node)
                            ? node.children
                            : []
              , instance
              ;
            for(;i<children.length; i++)
                if(children[i].type in whitelist
                        || (children[i].type === '__GenericAST__'
                            && !(children[i].instance.type in astBlacklist)
                        )
                ) {
                    instance = children[i].instance;
                    items.push(instance);
                    if(instance.invalid) {
                        console.info('FIXME: Get a logger object here, to enable cleaner messaging of this:')
                        console.warn(['adding invalid'
                          , instance.constructor.name + ':'
                          , '"' + instance + '"'
                          , instance.message
                          , instance.source
                          , instance.lineNo].join(' ')
                        );
                    }
                }
            return new PropertyDict(items, source, node.lineNo);
        }

        /**
         * declaration // Property:
         *
         * Key value pair of "property" and "value"
         * We rename "declaration" to "Property" and "property" to "PropertyName"
         *
         * We convert unkown "declaration"s into __GenericAST__
         * objects. But for performance reasons, this decision is made in
         * _makeNode.
         */
      , 'declaration': function (node, source, ruleController) {
            var name, value;

            if(node.children[0].type !== 'property')
                throw new CPSError('The first child of "declaration" is '
                + 'expected to be a "property", but got "' + node.children[0].type +'" '
                +'" in a declaration from: ' + source + 'line: '
                + node.lineNo
                +'.', (new Error()).stack);

            if(node.children[1].type !== 'value')
                throw new CPSError('The second child of "declaration" is '
                + 'expected to be a "value", but got "' + node.children[1].type +'" '
                +'" in a declaration from: ' + source + 'line: '
                + node.lineNo
                +'.', (new Error()).stack);

            name = node.children[0].instance;
            value = node.children[1].instance;
            // selectorListFromString uses the parser but doesn't need
            // initialized properties
            if(ruleController)
                ruleController.initializePropertyValue(name.name, value);
            return new Property(name, value, source, node.lineNo);
        }
        /**
         * property // PropertyName
         *
         * The name of a property.
         *
         * It has as first child an ident, which value is the actual name:
         *          ["ident", "margin"]
         * But it also can have subsequent "s" (whitespace) and "comment"
         * nodes:
         */
         // any{ background-color /*property comment*/: #fff;\n\ }
        /**
         * yields in:
         * ['property',
         *    ['ident', 'background-color'],
         *    ['s', ' '],
         *    ['comment', 'property comment']
         * ]
         *
         * The whitespace is going to be removed.
         *
         * I would try to keep the comments here, however, this is a low
         * priority, because comments are not often used at this position.
         *
         * When printing, all comments go between the name and the colon.
         */
      , 'property': curry(genericNameFactory, PropertyName)
        /**
         * value:
         *
         * The value of a property.
         *
         * It's a list of a lot of different nodes. Besides all things
         * meaningful for the value, Comments can go in here, too.
         * I propose to keep the comments, but print them at the beginning
         * of the value, followed by the value itself. Because we won't be
         * able to restore the correct place in most cases anyways.
         */
      , 'value': function(node, source) {
            var comments = []
              , value = []
              , i=0
              , children = ('children' in node)
                                ? node.children
                                : []
              ;
            for(;i<children.length;i++)
                if(children[i].type === 'comment')
                    comments.push(children[i].instance);
                else
                    value.push(children[i].instance);
            return new PropertyValue(value, comments ,source, node.lineNo);
        }
      // tinker on @namespace
      , 'atruler': function(node, source) {
            var name
              , collection
              , selectorList
              , i=0
              ;
            for(;i<node.children.length; i++)
                if(name && collection && selectorList)
                    break;
                else if(!collection
                        && node.children[i].instance instanceof AtNamespaceCollection)
                    collection = node.children[i].instance;
                else if(!name && node.children[i].instance instanceof AtRuleName)
                    name = node.children[i].instance;
                else if(!selectorList && node.children[i].instance instanceof SelectorList)
                    selectorList = node.children[i].instance;
            if ( !name
                    // we only know @namespace here!
                    || name.name !== 'namespace'
                    || !collection)
                return this['__GenericAST__'](node, source);
            // may be undefined
            // if it is, we couldn't parse it
            // an example would be: @namespace("point){}
            // note the " doesn't close
            // TODO: it would be nice to preserve the broken information.
            // so that the AtNamespaceCollection can be repaired better
            // in the ui
            if(selectorList !== undefined)
                collection.selectorList = selectorList;
            collection.name = name.name;
            return collection;
        }
      , 'atkeyword': curry(genericNameFactory, AtRuleName)
      , 'atrulerq': function(node, source, ruleController) {
            var i
              , braces
              , selectorString
              , selectorList
              ;

            // find 'braces'
            for(i=1;i<node.rawData.length;i++)
                if(node.rawData[i][0] && node.rawData[i][0] === 'braces') {
                    braces = node.rawData[i];
                    break;
                }
            if(!braces)
                return this['__GenericAST__'](node, source);

            // we need the quotes only to not break the gonzales parsing
            // in selectorsString, no qotes are necessary. So we simply
            // throw them away at this point, without checking semantics
            // gonzales will fail with non matching quotes anyways
            selectorString = gonzales.csspToSrc(braces)
                // remove the braces
                .slice(1,-1)
                // remove quotes
                .replace(/(\'|\")/gm, '')
                .split(',')
                // remove surrounding whitespace
                .map(function(item){return item.trim();})
                // remove empty entries
                .filter(function(item){return !!item.length;})
                // create a 'normalized' selectorString
                .join(', ');

            try {
                return parseSelectorList.fromString(selectorString, undefined
                        , ruleController && ruleController.selectorEngine);
            }
            catch(error) {
                if(!(error instanceof CPSError))
                    throw error;
            }

            // don't return anything particular
            return this['__GenericAST__'](node, source);
        }
        /***
         * return an AtNamespaceCollection
         * NOTE: at this moment we don't know whether or not this
         * is the collection of AtNamespace or something made up!
         * the aim is to eventually replace AtNamespaceCollection
         * with an enhanced version of PropertyCollection.
         */
      , 'atrulers': function(node, source) {
            var items = []
              , i=0
              , child
              ;
            if(!node.children)
                return this['__GenericAST__'](node, source);
            for(;i<node.children.length;i++) {
                if(node.children[i].type === '__GenericAST__'
                                && node.children[i].instance.type === 's')
                    continue;
                child = node.children[i].instance
                if(child instanceof PropertyCollection && !child.name)
                    // This is to compensate the PropertyCollection created
                    // by the deperecated @dictionary rule. A PropertyCollection
                    // without a name is a plain PropertyCollection, it
                    // can be flattened into the list of children.
                    // FIXME: remove @dictionary for good and then this code.
                    Array.prototype.push.apply(items, child.items)
                else
                    items.push(child);
            }
            // name, selectorList
            return new AtNamespaceCollection(undefined, undefined, items, source, node.lineNo);
        }
    });

    return {
        factories: propertyFactories
      , genericNameFactory: genericNameFactory
    };
});

define('Atem-CPS/CPS/parsing/atDictionaryFactories',[
    'Atem-CPS/errors'
  , './curry'
  , './propertyFactories'
  , 'Atem-CPS/CPS/elements/Property'
  , 'Atem-CPS/CPS/elements/PropertyCollection'
  , 'Atem-CPS/CPS/elements/AtRuleName'
], function (
    errors
  , curry
  , propertyFactories
  , Property
  , PropertyCollection
  , AtRuleName
) {
    "use strict";
    var CPSError = errors.CPS
      , genericNameFactory = propertyFactories.genericNameFactory
      ;


    /**
     * Constructors OR factory functions
     * this can be both because JavaScript allows to call a factory function
     * using the new operator like in `new myfactory()`. The factory must
     * return a new object in this case.
     *
     * all constructors take the following arguments: (node, source)
     * @node: object as created by parserEngine._makeNode and augmented by
     * parserEngine
     * @source: instance of properties/Source
     *
     * We'll use mostly factories, because the "node" we use as argument
     * is not exactly a nice interface. However, it's called _nodeConstructors
     * because that implies that these functions are beeing called using
     * the `new` keyword.
     *
     * see: https://github.com/css/gonzales/blob/master/doc/AST.CSSP.en.md
     */

    /**
     * override constructors for the purpose of @dictionary.
     * This means for all children of @dictionary we can define other rules.
     * If we don't do so, the regular rules apply. JavaScript Prototype
     * Inheritance.
     *
     * like a module pattern, to not pollute the namespace with
     * temporary variables
     */
    var atDictionaryFactories = Object.create(propertyFactories.factories)
      , atDictionaryParsingSwitch
      , _atDictionaryDeprecationWarning
      ;
    (function(factories) {
            var k;
            for(k in factories) atDictionaryFactories[k] = factories[k];
    })({
        /*jshint sub:true*/
        /**
         * Augments the AtRuleCollection created by atrulers with a name.
         */
        'atruler': function(node, source) {
            // this is an @dictionary root node
            var i = 0
              , collection
              , name
              ;
            // FIXME: remove all this ASAP, it will make the codebase
            // much smaller!
            /*globals console:true*/

            if(!_atDictionaryDeprecationWarning) {
                _atDictionaryDeprecationWarning = true;
                console.warn("@dictionary is deprecated!\n"
                    , 'Remove all occurences of "@dictionary {" and it\'s'
                    , 'closing "}" and you should be good to go.\nThe contents of '
                    , '@dictionary will continue to work as normal properties.'
                );
            }
            for(;i<node.children.length; i++)
                if(name && collection)
                    break;
                else if(!collection
                        && node.children[i].instance instanceof PropertyCollection)
                    collection = node.children[i].instance;
                else if(!name && node.children[i].instance instanceof AtRuleName)
                    name = node.children[i].instance;
            if(!collection || !name)
                return this['__GenericAST__'](node, source);
            //collection.name = name;
            return collection;
        }
      , 'atkeyword': curry(genericNameFactory, AtRuleName)
      , 'atrulers': function(node, source) {
            var items = []
              , i=0
              , child
              ;
            for(;i<node.children.length;i++) {
                if(node.children[i].type === '__GenericAST__'
                                && node.children[i].instance.type === 's')
                    continue;
                child = node.children[i].instance;
                if(child instanceof PropertyCollection && !child.name)
                    // This is to compensate the PropertyCollection created
                    // by the deperecated @dictionary rule (children of the one
                    // found here). A PropertyCollection without a name is
                    // a plain PropertyCollection, it can be flattened into
                    // the list of children.
                    // FIXME: remove @dictionary for good and then this code.
                    Array.prototype.push.apply(items, child.items);
                else
                    items.push(child);
            }
            //return new AtRuleCollection(undefined, items, source, node.lineNo);
            // We are NOT creating AtRuleCollections anymore!
            return new PropertyCollection(items, source, node.lineNo);
        }
      , 'declaration': function(node, source, ruleController) {
            // this is an @dictionary declaration
            var name, value, typeDefinition;

            if(node.children[0].type !== 'property')
                throw new CPSError('The first child of "declaration" is '
                + 'expected to be a "property", but got "' + node.children[0].type +'" '
                +'" in a declaration from: ' + source + 'line: '
                + node.lineNo
                +'.', (new Error()).stack);

            if(node.children[1].type !== 'value')
                throw new CPSError('The second child of "declaration" is '
                + 'expected to be a "value", but got "' + node.children[1].type +'" '
                +'" in a declaration from: ' + source + 'line: '
                + node.lineNo
                +'.', (new Error()).stack);
            name = node.children[0].instance;
            value = node.children[1].instance;
            ruleController.initializePropertyValue(name.name, value);
            return new Property(name, value, source, node.lineNo);
        }
    });

    function test_switchToAtDictionary(data) {
        return (data[0] === 'atruler'
              && data[1] && data[1][0] === 'atkeyword'
              && data[1][1] && data[1][1][0] === 'ident'
              && data[1][1][1] === 'dictionary'
        );
    }

    atDictionaryParsingSwitch = [test_switchToAtDictionary, atDictionaryFactories];

    return {
        factories: atDictionaryFactories
      , atDictionaryParsingSwitch: atDictionaryParsingSwitch
    };
});

define('Atem-CPS/CPS/elements/AtImportCollection',[
    'Atem-CPS/errors'
  , './PropertyCollection'
  , './_Node'
  , 'obtain/obtain'
], function(
    errors
  , Parent
  , GrandParent
  , obtain
) {
    "use strict";
    var CPSError = errors.CPS;
    /**
     * Essentially a proxy for the PropertyCollection intance it references.
     *
     * The serialization results in an @import Rule, not in the actual
     * cps that the propertyCollection would produce, but we can still
     * use it as if it was the propertyCollection directly.
     *
     * Most importantly, the "rules" getter is proxied.
     *
     * Use `setResource` to initialize this object.
     *
     */
    function AtImportCollection(ruleController, source, lineNo) {
        GrandParent.call(this, source, lineNo);// setup the emitter
        this._selectorList = null;
        this._name = null;
        this.name = 'import';
        this._resourceName = null;
        this._reference = null;
        this._ruleController = ruleController;
    }
    var _p = AtImportCollection.prototype = Object.create(Parent.prototype);
    _p.constructor = AtImportCollection;

    function _makeProxyForProperty(name, description) {
        var proxy = {};
        proxy.enumerable = description.enumerable;
        proxy.configurable = description.configurable;
        if('value' in description) {
            if(typeof description === 'function') {
                // proxy call
                proxy.value = function() {
                    this._reference[0][name].apply(this._reference[0], arguments);
                };
            }
            else {
                // simple getter
                proxy.get = function() {
                    return this._reference[0][name];
                };
                // simple setter
                proxy.set = function(value) {
                    this._reference[0][name] = value;
                };
            }
        }
        else {
            if('get' in description) {
                // simple getter
                proxy.get = function() {
                    return this._reference[0][name];
                };
            }
            if('set' in description) {
                // proxy setter
                proxy.set = function(value) {
                    this._reference[0][name] = value;
                };
            }
        }
        if(!('set' in proxy))
            proxy.writable = description.writable;

        return proxy;
    }

    _p._proxyEventHandler = function(data, channelName, eventData) {
        this._trigger(channelName, eventData);
    };
    /**
     * Use the public method "setResource" rather than this.
     *
     * propertyCollection: the instance of the PropertyCollection that
     * is loaded for resourceName.
     *
     * propertyCollection is returned from this._ruleController.getRule
     */
    _p._setResource = function(resourceName, propertyCollection) {
        // assert(!propertyCollection.invalid); <= should be valid, it's from ruleController
        if(this._reference) {
            if(this._reference[0] === propertyCollection)
                return;
            this._reference[0].off(this._reference[1]);
        }

        // assert(this._resourceName !== resourceName) <= that would be a flaw in the logic somewhere
        this._resourceName = resourceName;

        // NOTE: We should subscribe on all this._reference events and
        // proxy them. At the moment, however, PropertyCollection will
        // only trigger 'structural-change', so this is it.
        // UPDATE: Don't proxy the "update" event! It should be local
        // to changes within the file that contains the PropertyCollection
        // so that we can monitor when the file changed. I.e. structural-change
        // informs of any changes within the property collection that require
        // re-evaluation of the rules that are applied to the OMA Nodes,
        // update just means the file that contains the rules changed.
        this._reference = [
            propertyCollection
          , propertyCollection.on('structural-change', [this, '_proxyEventHandler'])
        ];
        // resource-change in here is roughly equal to update. But update
        // has a broader meaning.
        this._trigger(['resource-change', 'structural-change', 'update']);
    };

    _p._getRule = function(async, resourceName) {
        return this._ruleController.getRule(async, resourceName);
    };
    /**
     * A lot of errors can happen here but we won't handle them!
     * As a last resort we can present the user what actually happened
     * but that is not happening here.
     *
     * async: the first argument, this is a obatainJS interface
     *
     * resourceName: the resource name of the @import rule
     * in `@import "bold.cps";` "bold.cps" is the resourceName
     *
     * FIXME: This can causes an unhandled "too much recursion" error.
     * For example when setting in the CPS-Panel an import to the same
     * name as the containing file. This case bypasses the recursion
     * detection of RuleController, because it happens after loading!
     * Probably we should know which files are not allowed to load for
     * a import collection, then we can besides of doing the checking
     * also don't display these options in the interface.
     */
    _p.setResource = obtain.factory(
        {
            propertyCollection:[false, 'resourceName', _p._getRule]
        }
      , {
            propertyCollection:[true, 'resourceName', _p._getRule]
        }
      , ['resourceName']
      , function(obtain, resourceName) {
            var propertyCollection = obtain('propertyCollection');
            this._setResource(resourceName, propertyCollection);
            return true;
        }
    );

    _p.toString = function() {
        return '@import "' + this.resourceName + '";';
    };

    Object.defineProperty(_p, 'invalid', {
        get: function() {
            return (!this._reference || this._reference[0].invalid);
        }
    });

    Object.defineProperty(_p, 'resourceName', {
        get: function(){ return this._resourceName; }
      , enumerable: true
    });

    // create some proxy properties
    (function(_p, parent) {
        var names = Object.getOwnPropertyNames(parent), i, l
          , name, description, proxyDescription
          ;
        for(i=0,l=names.length;i<l;i++) {
            name = names[i];
            // FIXME: a whitelist may be better
            // currently we make proxies for:
            // reset, items, length, rules, splice
            // reset should maybe throw an error
            if(     // only public interfaces
                    name[0] === '_'
                    // use the inherited name getter/setter
                    || name === 'name'
                    // only interfaces that are not ownProperties of this prototype
                    // so inherited stuff will be overidden
                    || _p.hasOwnProperty(name))
                continue;
            description = Object.getOwnPropertyDescriptor(parent, name);
            proxyDescription = _makeProxyForProperty(name, description);
            Object.defineProperty(_p, name, proxyDescription);
        }
    })(_p, Parent.prototype);

    return AtImportCollection;
});

define('Atem-CPS/CPS/parsing/atImportFactories',[
    'Atem-CPS/errors'
  , './curry'
  , './propertyFactories'
  , 'Atem-CPS/CPS/elements/AtImportCollection'
  , 'Atem-CPS/CPS/elements/AtRuleName'
  , 'Atem-CPS/CPS/elements/GenericCPSNode'
], function (
    errors
  , curry
  , propertyFactories
  , AtImportCollection
  , AtRuleName
  , GenericCPSNode
) {
    "use strict";
    var CPSError = errors.CPS
      , genericNameFactory = propertyFactories.genericNameFactory
      ;

    /**
     * override constructors for the purpose of @import.
     * This means for all children of @import we can define other rules.
     * If we don't do so, the regular rules apply. JavaScript Prototype
     * Inheritance.
     *
     * like a module pattern, to not pollute the namespace with
     * temporary variables
     */
    var atImportFactories = Object.create(propertyFactories.factories)
      , atImportParsingSwitch
      ;
    (function(factories) {
            var k;
            for(k in factories) atImportFactories[k] = factories[k];
    })({
        /**
         * Find the name of the resource to load and return a PropertyCollection
         */
        'atrules': function(node, source, ruleController) {
            /*jshint sub:true*/
            var args, resource, atImportCollection;
            // filter all whitespace
            args = node.children.slice(1).filter(function(child) {
                if(child.instance instanceof GenericCPSNode && child.instance.type === 's')
                    return false;
                return true;
            });

            // accept only one argument which must be a string
            if(args.length !== 1
                || !(args[0].instance instanceof GenericCPSNode
                                    && args[0].instance.type === 'string'))
                return this['__GenericAST__'](node, source);
            resource = args[0].data.slice(1,-1);

            atImportCollection = new AtImportCollection(ruleController, source, node.lineNo);
            atImportCollection.setResource(false, resource);
            // TODO: we can set up the parser easier for asynchronisity,
            // since the AtImportCollection now handles receiving the
            // property collection from ruleController. we could just
            // register the promise somewhere central that central place
            // would wait for all registered promises to "end (successful
            // or not, we must handle then)
            // Useful is the atImportCollection only when
            // !atImportCollection.invalid otherwise it can't be queried
            // for contents
            return atImportCollection;

        }
      , 'atkeyword': curry(genericNameFactory, AtRuleName)
    });

    function test_switchToAtImport(data) {
        return (data[0] === 'atrules'
              && data[1] && data[1][0] === 'atkeyword'
              && data[1][1] && data[1][1][0] === 'ident'
              && data[1][1][1] === 'import'
        );
    }

    atImportParsingSwitch = [test_switchToAtImport, atImportFactories];

    return {
        factories: atImportFactories
      , atImportParsingSwitch: atImportParsingSwitch
    };
});

define('Atem-CPS/CPS/parsing/parseRules',[
    'Atem-CPS/errors'
  , 'gonzales/gonzales'
  , './curry'
  , './engine'
  , './propertyFactories'
  , './atDictionaryFactories'
  , './atImportFactories'
], function (
    errors
  , gonzales
  , curry
  , parserEngine
  , propertyFactoriesModule
  , atDictionaryFactories
  , atImportFactories
) {
    "use strict";
    var CPSError = errors.CPS
      , CPSParserError = errors.CPSParser
      , propertyFactories = propertyFactoriesModule.factories
      , module = {
          parser: gonzales.srcToCSSP
      }
      ;

    var factorySwitches = [
            atDictionaryFactories.atDictionaryParsingSwitch,
            atImportFactories.atImportParsingSwitch
        ]
      , rulesFromAST = curry(parserEngine, propertyFactories, factorySwitches)
      ;
    /**
     * Create a PropertyCollection from a CSS string
     */
    function rulesFromString(css, sourceName, ruleController) {
        var ast;
        try {
            ast = module.parser(css);
        }
        catch (error) {
            // gonzales throws a pure JavaScript Error, but we want more
            // certainty in the rest of our application
            throw new CPSParserError("("+sourceName+") "+error.message, error.stack);
        }

        // An empty string as input to gonzales creates an undefined ast.
        // FIXME: this should be the output of gonzales for an empty string!
        if(ast === undefined) ast = ['stylesheet'];

        return module.fromAST(ast, sourceName, ruleController);
    }

    module.fromString = rulesFromString;
    module.fromAST = rulesFromAST;

    return module;
});

define('Atem-CPS/CPS/RuleController',[
    'Atem-CPS/errors'
  , './parsing/parseRules'
  , 'obtain/obtain'
  , 'Atem-IO/tools/readDirRecursive'
], function(
    errors
  , parseRules
  , obtain
  , readDirRecursive
) {
    "use strict";
    /* global setTimeout:true*/

    var KeyError = errors.Key
      , CPSRecursionError = errors.CPSRecursion
      , NotImplementedError  = errors.NotImplemented
      , ValueError = errors.Value
      ;

    // FIXME: note that we have a race condition in here:
    //        One request with an older result can respond after
    //        a newer result was cached, the most obvious example
    //        is:
    //              ruleController.getRule(true, name)
    //              ruleController.getRule(false, name)
    //
    //        The second call will write the cache before the first call.
    //        This problem exists with all asynchronous requests, of
    //        course, but in this case it is more probable.
    //        See the implementation of `getRule` (the `rule` getter)
    //        for an attempt to improve the situation, and a further comment.

    function RuleController(io, cpsDir, initializePropertyValue, selectorEngine) {
        this._io = io;
        this._cpsDir = cpsDir;
        this._commissionIdCounter = 0;
        this._rules = Object.create(null);
        this._cpsGenerators = Object.create(null);
        this._generatedRules = Object.create(null);
        Object.defineProperty(this, 'initializePropertyValue', {
            value: initializePropertyValue
          , enumarable: true
          , writable: false
        });
        Object.defineProperty(this, 'selectorEngine', {
            value: selectorEngine
          , enumarable: true
          , writable: false
        });
        this._markDirtyCallback = [this, '_markDirtyHandler'];
    }

    var _p = RuleController.prototype;

    _p._isCached = function(sourceName) {
        return (sourceName in this._rules) && this._rules[sourceName].cached;
    };

    _p._markDirtyHandler = function(sourceName, channelKey, eventData) {
        //jshint unused: vars
        this._rules[sourceName].dirty = true;
    };

    _p._set = function(sourceName, rule, commissionId) {
        var record;
        if(!(sourceName in this._rules))
            record = this._rules[sourceName] = {
                propertyCollection: rule
              , subscription: rule.on('update', this._markDirtyCallback, sourceName)
            };
        else {
            record = this._rules[sourceName];
            record.propertyCollection.reset(rule.items, rule.source, rule.lineNo);
        }
        record.commissionId = commissionId;
        record.cached = true;
        record.dirty = false;
    };

    /**
     * CAUTION: This can create unresolved dependencies and other kinds
     * of trouble!
     *
     * TODO: Figure out a smart/safer way to handle rule removal if possible.
     * What can go wrong?
     */
    _p.purgeRule = function(sourceName) {
        var record = this._rules[sourceName];
        if(!record) return;
        // Ideally no dependency of this rule exists anymore, however
        // here is a last resort to inform dependencies of the rule being
        // gone. E.g. an interface still displaying the ParameterCollection
        // should shut down now.
        record.propertyCollection.destroy();
        delete this._rules[sourceName];
    };

    _p._readFile = function(async, fileName) {
                            return this._io.readFile(async, fileName); };

    _p._getFilePath = function(sourceName) {
        return [this._cpsDir, sourceName].join('/');
    };

    _p._getParseRulesArgumentAPI = function(importing) {
        // return the api needed by parseRules.fromString
        // but create a version of `_getRule` that is aware of the
        // @import history `importing`
        var api = {
              initializePropertyValue: this.initializePropertyValue
            , selectorEngine: this.selectorEngine
            , getRule: function ruleControllerGetRuleAPI(async, sourceName) {
                        return this._getRule(async, importing, sourceName);
              }.bind(this)
        };
        return api;
    };

    _p._getRule = obtain.factory(
        {
            fileName: ['importing', 'sourceName', function(importing, sourceName) {
                if(sourceName in importing)
                    throw new CPSRecursionError(sourceName + ' @imports itself: '
                                    + Object.keys(importing).join(' » '));
                importing[sourceName] = true;
                return this._getFilePath(sourceName);
            }]
          , cps: [false, 'fileName', 'commissionId', _p._readFile]
          , rule: ['cps', 'sourceName', 'commissionId', 'importing',
                function(cps, sourceName, commissionId, importing) {
                    if(!this._isCached(sourceName)
                            // There is a current cache but it was commissioned
                            // before this request, and finished loading before it.
                            // FIXME: a maybe better alternative would be
                            //        to fail here!
                            || this._isCached(sourceName) && commissionId >= this._rules[sourceName].commissionId)
                    {
                        var api = this._getParseRulesArgumentAPI(importing)
                          , rule = parseRules.fromString(cps, sourceName, api);
                        this._set(sourceName, rule, commissionId);
                    }
                    delete importing[sourceName];
                    return this._rules[sourceName].propertyCollection;
                }]
          , commissionId:[function(){ return this._commissionIdCounter++;}]
        }
      , {cps: [true, 'fileName', 'commissionId', _p._readFile]}
      , [ 'importing', 'sourceName']
      , function job(obtain, importing, sourceName) {
            if(this._isGeneratorPath(sourceName))
                return this._getGeneratedRule(sourceName, importing);
            if(!this._isCached(sourceName))
                obtain('rule');
            return this._rules[sourceName].propertyCollection;
        }
    );

    _p.getRule = function(async, sourceName) {
        // initial recursion detection stack
        var importing = Object.create(null);
        return this._getRule(async, importing, sourceName);
    };

    /**
     * FIXME: Make these rules write-only!
     */
    _p._generateRule = function(path, importing) {
        var generatorArgs = this._parseGeneratorPath(path)
          , name = generatorArgs[0]
          , version = generatorArgs[1]
          , args = generatorArgs[2]
          , cps, api, rule
          ;
        if(version !== 0)
            throw new NotImplementedError('There\'s yet no versioning API '
                                + 'for CPS generators. Version: ' + version);
        if(!(name in this._cpsGenerators))
            throw new KeyError('Unknown CPS generator "' + name + '"');
        if(path in importing)
            throw new CPSRecursionError(path + ' @imports itself: '
                                    + Object.keys(importing).join(' » '));
        importing[path] = true;
        cps = this._cpsGenerators[name].apply(null, args);
        api = this._getParseRulesArgumentAPI(importing);
        rule = parseRules.fromString(cps, path, api);
        delete importing[path];
        return rule;
    };

    _p._getGeneratedRule = function(path, importing) {
        var rule = this._generatedRules[path];
        if(!rule)
            this._generatedRules[path] = rule = this._generateRule(path, importing);
        return rule;
    };

    /**
     * Reload an existing CPS rule
     *
     * This is used with an file system monitoring event emitter.
     * But the concept as it is now plays bad with an interactive
     * environment. So that not both "sources of change" should be
     * used at the same time.
     *
     * It would be better to have just one "source of change",
     * a change in the file system source should be channeled into
     * the stream of changes of the the PropertyCollection itself,
     * just like user interaction. Thus, having a good diffing algorithm
     * would be a blast! And skipping all the updating in the case
     * of this.saveChangedRules is called would be wise!
     */
    _p.reloadRule = function(async, sourceName) {
        if(!(sourceName in this._rules))
            throw new KeyError('Can\'t reload rule "'+ sourceName
                                +'" because it\'s not in this controller');
        // mark as uncached
        this._rules[sourceName].cached = false;
        return this.getRule(async, sourceName);
    };

    /**
     * Create a new file or override an existing one
     *
     * FIXME/TODO:
     * Initially RuleController did only reading and re-reading of cps files.
     * Eventually we will also need creating, updating and removing of cps files
     * and PropertyCollections.
     * This will need some concept to work without race conditions and
     * in a reliable fashion.
     *
     * This method is very simple, it will create a new file or overide
     * an existing file. There is no guard that keeps this method from
     * overiding existing files, because the io api doesn't suppport that.
     *
     * Keep that in mind when using this method and if this behavior creates
     * a problem for your case, please report it, so that we can think of a
     * sound solution.
     */
    _p.write = function(async, sourceName, content) {
        var path
          , _content = content === undefined ? '' : content
          ;

        if(this._isGeneratorPath(sourceName))
            throw new ValueError('Can\'t write to generator path "' + sourceName + '".');

        path = this._getFilePath(sourceName);
        return this._io.writeFile(async, path, _content);
    };

    _p.saveRuleIfChanged = function(async, sourceName) {
        var rule = this._rules[sourceName], promise;
        if(rule && rule.dirty) {
            promise = this.write(async, sourceName, '' + rule.propertyCollection);
            rule.dirty = false;
        }
        if(async)
            return promise;
    };

    _p.saveChangedRules = function(async) {
        // FIXME: when there is a filesystem change handler, via reloadRule
        // the here saved files will be updated immediately.
        // We got to break that for performance reasons. Invalidating
        // and reloading all rules is a big performance hit and in this
        // case just unnecessary.
        var sourceName, rule, promises = [];
        for(sourceName in this._rules) {
            rule = this._rules[sourceName];
            if(rule.dirty) {
                promises.push(this.write(async, sourceName, '' + rule.propertyCollection));
                rule.dirty = false;
            }
        }
        if(!async) return;
        if(promises.length) return Promise.all(promises);
        return new Promise(function(resolve){setTimeout(resolve, 0);});
    };

    /**
     * Return all cps filenames within the cps directory.
     *
     * There may be more loadable rules when loaded with a relative sourceName.
     * But that is not supported by this method.
     *
     * FIXME: we'll need a solution for generated cps where this information
     *        is offered to the user as a list to chose from.
     */
    _p.getAvailableRules = obtain.factory(
        {
            files: [function() {
                return readDirRecursive(false, this._io, this._cpsDir);
            }]
          , trimmed: ['files', function(files) {
                var i,l
                  , result = []
                  , trimLength =  this._cpsDir.length+1
                  , file
                  ;
                for(i=0,l=files.length;i<l;i++) {
                    file = files[i];
                    if(file.slice(-4) !== '.cps')
                        continue;
                    result.push(file.slice(trimLength));
                }
                return result;
            }]
        }
      , {
            files: [function() {
                return readDirRecursive(true, this._io, this._cpsDir);
            }]
        }
      , []
      , function job (obtain) {
            return obtain('trimmed');
        }
    );

    _p.registerCPSGenerator = function(name, generator) {
        if(name in this._cpsGenerators)
            // To allow this would mean our caches are invalid.
            // If there's a need for this we may be able to develop
            // a way to do it.
            throw new ValueError('A generator with name "' + name + '" '
                                            + 'is already registered.');
        this._cpsGenerators[name] = generator;
    };

    /**
     * Actually we don't generate the CPS here, just the key.
     * The CPS is generate on demand.
     */
    _p._getGeneratorCPSKey = function(version, name, args) {
        if(version !== 0)
            throw new NotImplementedError('There\'s yet no versioning API '
                                + 'for CPS generators. Version: ' + version);
        if(!(name in this._cpsGenerators))
            throw new KeyError('Unknown CPS generator "'+name+'"');

        var keyArgs = args.join(',')
          , key = ['generated://', name, '/', version, '/',keyArgs].join('')
          ;
        return key;
    };

    /**
     * Return the "name" or "key" that ensures that the CPS will always
     * be the same.
     *
     * This creates a "virtual" rule only. I.E. RuleController
     * will intercept loading calls to it and generate the CPS on the fly,
     * instead of saving the CPS to IO.
     *
     * Call like: `ruleController.generateCPS('metapolation', [4]);`
     *
     * TODO: the key incudes a version argument placeholder.
     * We can establish versions when needed, for now, 0 is the default
     * and a new generator does not need to care. Once a second generator
     * version is introduced we'll have to implement it. Only if the
     * generator changes its meaning though.
     *
     * FIXME: That rule should be readOnly, once we can express that.
     */
    _p.generateCPS = function(name, args) {
        var version = 0
          // args must still work in an @import rule, so, for now just simple
          // stuff is allowed. More advanced parsing could be done in the
          // generator though. Eventually it would be nice to have this done
          // here, so that a generator can mind its own business and doesn't
          // have to parse.
          // If you have a good example where more expressiveness is needed,
          // please open an issue!
          // We might end up doing a "@generated" rule, instead of overloading
          // "@import" eventually.
          , key = this._getGeneratorCPSKey(version, name, args)
          ;
        return key;
    };

    _p._isGeneratorPath = function(path) {
        return (path.indexOf('generated://') === 0);
    };

    var _isFloatStringTest = /^([+-]?(((\d+(\.)?)|(\d*\.\d+))([eE][+-]?\d+)?))$/;
    function _parseCPSGeneratorArgument(arg) {
        var number;
        // does it look like a number?
        if(_isFloatStringTest.test(arg)) {
            number = parseFloat(arg);
            // did it parse as a number?
            if(number === number)
                return number;
        }
        // treat as a string
        return arg;
    }

    _p._parseGeneratorPath = function(path) {
        var data = path.slice('generated://'.length).split('/')
          , name = data[0]
          , version = parseInt(data[1], 10)
          , args = data[2] ? data[2].split(',') : []
          ;
        // TODO: this._cpsGenerators[ruleName] could provide its own parser.(?)
        args = args.map(_parseCPSGeneratorArgument);
        return [name, version, args];
    };

    return RuleController;
});

(function (global, factory) {
  if (typeof exports === "object" && exports) {
    factory(exports); // CommonJS
  } else if (typeof define === "function" && define.amd) {
    define('bloomfilter',['exports'], factory); // AMD
  } else {
    factory(global); // <script>
  }
}(this, function(exports) {
  exports.BloomFilter = BloomFilter;
  exports.fnv_1a = fnv_1a;
  exports.fnv_1a_b = fnv_1a_b;

  var typedArrays = typeof ArrayBuffer !== "undefined";

  // Creates a new bloom filter.  If *m* is an array-like object, with a length
  // property, then the bloom filter is loaded with data from the array, where
  // each element is a 32-bit integer.  Otherwise, *m* should specify the
  // number of bits.  Note that *m* is rounded up to the nearest multiple of
  // 32.  *k* specifies the number of hashing functions.
  function BloomFilter(m, k) {
    var a;
    if (typeof m !== "number") {
      a = m;
      m = a.length * 32;
    }

    var n = Math.ceil(m / 32),
        i = -1;
    this.m = m = n * 32;
    this.k = k;

    if (typedArrays) {
      var kbytes = 1 << Math.ceil(Math.log(Math.ceil(Math.log(m) / Math.LN2 / 8)) / Math.LN2),
          array = kbytes === 1 ? Uint8Array : kbytes === 2 ? Uint16Array : Uint32Array,
          kbuffer = new ArrayBuffer(kbytes * k);
      this._locations = new array(kbuffer);
    }
    else
      this._locations = [];

    this.buckets = a
          ? (a instanceof Array
              ? a.slice()
              // in older nodejs typed arrays don't have slice
              // and in node 10.x.x slice does not copy, but this seems
              // to work.
              : new a.constructor(a)
            )
          : [];
  }

  BloomFilter.prototype.clone = function() {
      return new BloomFilter(this.buckets, this.k);
  };

  // See http://willwhim.wpengine.com/2011/09/03/producing-n-hash-functions-by-hashing-only-once/
  BloomFilter.prototype.locations = function(v) {
    var k = this.k,
        m = this.m,
        r = this._locations,
        a = fnv_1a(v),
        b = fnv_1a_b(a),
        x = a % m;
    for (var i = 0; i < k; ++i) {
      r[i] = x < 0 ? (x + m) : x;
      x = (x + b) % m;
    }
    return r;
  };

  BloomFilter.prototype.getLocations = function(v) {
    var l = this.locations(v);
    return (l instanceof Array
                      ? l.slice()
                      // in older nodejs typed arrays don't have slice
                      // and in node 10.x.x slice does not copy
                      : new l.constructor(l)
            );
  };

  BloomFilter.prototype.add = function(v) {
    var l = this.locations(v + ""),
        k = this.k,
        buckets = this.buckets;
    for (var i = 0; i < k; ++i) buckets[Math.floor(l[i] / 32)] |= 1 << (l[i] % 32);
  };

  BloomFilter.prototype.test = function(v) {
    var l = this.locations(v + "");
    return this.testByLocations(l);
  };

  BloomFilter.prototype.testByLocations = function(locations) {
    var l = locations,
        k = this.k,
        buckets = this.buckets;
    for (var i = 0; i < k; ++i) {
      var b = l[i];
      if ((buckets[Math.floor(b / 32)] & (1 << (b % 32))) === 0) {
        return false;
      }
    }
    return true;
  };

  // Estimated cardinality.
  BloomFilter.prototype.size = function() {
    var buckets = this.buckets,
        bits = 0;
    for (var i = 0, n = buckets.length; i < n; ++i) bits += popcnt(buckets[i]);
    return -this.m * Math.log(1 - bits / this.m) / this.k;
  };

  // http://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetParallel
  function popcnt(v) {
    v -= (v >> 1) & 0x55555555;
    v = (v & 0x33333333) + ((v >> 2) & 0x33333333);
    return ((v + (v >> 4) & 0xf0f0f0f) * 0x1010101) >> 24;
  }

  // Fowler/Noll/Vo hashing.
  function fnv_1a(v) {
    var a = 2166136261;
    for (var i = 0, n = v.length; i < n; ++i) {
      var c = v.charCodeAt(i),
          d = c & 0xff00;
      if (d) a = fnv_multiply(a ^ d >> 8);
      a = fnv_multiply(a ^ c & 0xff);
    }
    return fnv_mix(a);
  }

  // a * 16777619 mod 2**32
  function fnv_multiply(a) {
    return a + (a << 1) + (a << 4) + (a << 7) + (a << 8) + (a << 24);
  }

  // One additional iteration of FNV, given a hash.
  function fnv_1a_b(a) {
    return fnv_mix(fnv_multiply(a));
  }

  // See https://web.archive.org/web/20131019013225/http://home.comcast.net/~bretm/hash/6.html
  function fnv_mix(a) {
    a += a << 13;
    a ^= a >>> 7;
    a += a << 3;
    a ^= a >>> 17;
    a += a << 5;
    return a & 0xffffffff;
  }
}));

define('Atem-CPS/CPS/SelectorEngine',[
    'Atem-CPS/errors'
  , './parsing/parseSelectorList'
  , './elements/PropertyCollection'
  , './elements/Rule'
  , './elements/SelectorList'
  , './elements/ComplexSelector'
  , './elements/CompoundSelector'
  , './elements/SimpleSelector'
  , 'bloomfilter'
], function(
    errors
  , parseSelectorList
  , PropertyCollection
  , Rule
  , SelectorList
  , ComplexSelector
  , CompoundSelector
  , SimpleSelector
  , bloomfilter
) {

    "use strict";
    var CPSError = errors.CPS
      , selectorListFromString = parseSelectorList.fromString
      , stringify = JSON.stringify
      ;

    // start selector engine
    function SelectorEngine() {
        this._compoundSelectorCache = Object.create(null);
        this._compoundSelectorBloomLocationsCache = Object.create(null);
        this._complexSelectorsCache = Object.create(null);
        // This must be the same as in OMA/_Node getBloomFilter
        // FIXME: put this in a shared module, so that the
        // synchronization of this setup is explicit!
        // This instance is never used for filtering, it just calculates
        // locations in _getCompoundSelectorBloomLocations.
        this._bloomFilter = new bloomfilter.BloomFilter(512, 5);
    }
    var _p = SelectorEngine.prototype;

    _p._complexSelectorMatches = function(complexSelector, element, scopeElement) {
        if(!(complexSelector instanceof ComplexSelector))
            throw new CPSError('complexSelector is not of type '
                                         + 'ComplexSelector: ' + complexSelector);
        var compoundSelectors = complexSelector.value
          , compoundSelector
          , combinator
          , combinatorType
          ;
        // first round: fake a child combinator, so we don't go on
        // if the first selector doesn't match
        combinatorType = 'child';
        // this is a compound selector

        compoundSelector = compoundSelectors.pop();
        while(element) {
            if(compoundSelector.matches(element, this)) {
                //  we got a hit
                combinator = compoundSelectors.pop();
                if(combinator === undefined)
                    // that's it all compoundSelectors are consumed
                    return true;
                // there are selectors left, prepare the next round
                // combinatorType is 'child' or 'descendant'
                combinatorType = combinator.type;
                compoundSelector = compoundSelectors.pop();

                element = (scopeElement && scopeElement === element)
                        // do not search above scopeElement
                        ? undefined
                        // may be undefined. if so it will halt the while loop
                        : element.parent;
            }
            // no match
            else if(combinatorType === 'child')
                // this will halt the while loop
                // FIXME: this wouldn't match a selector like "body > div  p"
                // if there is actually another div between body > div and p
                // as in <body> <div> <div> <p> ...
                // Maybe a child combinator should match all elements
                // it's connected to (also with other child combinators)
                // and rollback to the previous descendant state if it fails.
                // HOWEVER: at the moment, the MOM/BEOM doesn't have
                // such a stucture
                element = undefined;
            else if (combinatorType === 'descendant')
                // may be undefined. if so it will halt the while loop
                element = element.parent;
            else
                throw new CPSError('Combinator type "'+combinatorType
                                                    +'" is unsuported');
        }
        return false;
    };

    function _compileCompoundSelector(compoundSelector) {
        /*jshint evil:true*/
        var simpleSelectors = compoundSelector.normalizedValue
          , simpleSelector
          , body = ['"use strict";', 'var result = (true']
          , tests = []
          // I let this in place, it is handy to inject code for debugging
          // it executes just before return. I'd usually log something.
          , debug = []
          , i,l
          , val
          , varname
          , name
          ;
        for(i=0, l=simpleSelectors.length;i<l;i++) {
            simpleSelector = simpleSelectors[i];
            name = simpleSelector.name;

            if(simpleSelector.invalid)
                throw new CPSError('simpleSelector "'+ simpleSelector +'" is invalid: ' + simpleSelector.message);
            switch(simpleSelector.type) {
                case 'type':
                    body.push(' && (element.type === ', stringify(name), ')');
                    break;
                case 'id':
                    body.push(' && (element.id === ', stringify(name), ')');
                    break;
                case 'class':
                    body.push(' && (element.hasClass(', stringify(name), '))');
                    break;
                case 'pseudo-class':
                    if(name === 'i') {
                        // must have a parent for this
                        body.push(' && (!!element.parent)');
                        val = simpleSelector.value;
                        if(val < 0)
                            body.push(' && (element.parent.children.length + ', val, ' === element.index)');
                        else
                            body.push(' && (', val, ' === element.index)');
                    }
                    else
                        // we know only :i right now
                        body.push('&& false');
                    break;
                case 'universal':
                    // this is always true
                    break;
                default:
                    throw new CPSError('simpleSelector.type "'+ simpleSelector.type +'" is not implemented.');
            }
        }
        body.push(');', debug.join('') ,'return result;');
        return new Function(['element'], body.join(''));
    }

    /**
     * A compound selector is a chain (list) of simple selectors that
     * are not separated by a combinator.
     *
     * It always begins with a type selector or a (possibly implied)
     * universal selector. No other type selector or universal
     * selector is allowed in the sequence.
     *
     * If one item of the  simple selectors list is no simple selector
     * this method raises a CPSError.
     */
    _p.compileCompoundSelector = function(compoundSelector) {
        var key = compoundSelector.normalizedName
          , compiled = this._compoundSelectorCache[key]
          ;
        if(!compiled)
            this._compoundSelectorCache[key] = compiled = _compileCompoundSelector(compoundSelector);
        return compiled;
    };


    /**
     * A (complex) selector's specificity is calculated as follows:
     *     count the number of ID selectors in the selector (= a)
     *     count the number of class selectors, attributes selectors, and pseudo-classes in the selector (= b)
     *     count the number of type selectors and pseudo-elements in the selector (= c)
     *     ignore the universal selector
     *
     * Specificities are compared by comparing the three components in
     * order: the specificity with a larger A value is more specific;
     * if the two A values are tied, then the specificity with a larger
     * B value is more specific; if the two B values are also tied, then
     * the specificity with a larger c value is more specific;
     * if all the values are tied, the two specifities are equal.
     *
     * Array.prototype.sort: "The sort is not necessarily stable."
     * https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/sort
     * https://en.wikipedia.org/wiki/Sorting_algorithm#Stability
     *
     * To ensure stability it is possible to introduce more than the above
     * mentioned three elements of specificity.
     */
    function compareSpecificity(sA, sB) {
        for(var i=0, len = Math.min(sA.length, sB.length);i<len;i++) {
            if(sA[i] !== sB[i])
                // id return value is < 0 selectorA will get a lower index
                // id return value is > 0 selectorB will get a lower index
                return sB[i]-sA[i];
        }
        return 0;
    }
    function compareSelectorSpecificity (itemA, itemB) {
        return compareSpecificity(itemA.specificity, itemB.specificity);
    }
    // export static functions
    SelectorEngine.compareSpecificity = compareSpecificity;
    SelectorEngine.compareSelectorSpecificity = compareSelectorSpecificity;

    function _rulesCompareSpecificity (itemA, itemB) {
        return compareSpecificity(itemA[0], itemB[0]);
    }

    /**
     * This is analogous to what happens in OMA/_Node
     */
    _p._getCompoundSelectorBloomLocations = function(compoundSelector) {
        var key = compoundSelector.normalizedName
          , bloomLocations = this._compoundSelectorBloomLocationsCache[key]
          , bf, types, items, i, l, item
          ;
        if(!bloomLocations) {
            bf = this._bloomFilter;
            types = {'type': true, 'class': true, 'id': true};
            bloomLocations = [];
            items = compoundSelector.value;
            for(i=0,l=items.length;i<l;i++) {
                item = items[i];
                if(!(item.type in types))
                    continue;
                bloomLocations.push(bf.getLocations(item.toString(true)));
            }
            this._compoundSelectorBloomLocationsCache[key] = bloomLocations;
        }
        return bloomLocations;
    };

    /**
     * Filter by using the bloomfilter of an element
     * the filter will have false positives but no false negatives
     * Thus when it returns false it is save to remove the
     * complexSelector from the list of possibly matching elements;
     */
    _p._bloomfilterComplexSelector = function (bloomfilter, complexSelector) {
        var compoundSelectors = complexSelector.value
          , compoundSelector
          , bloomLocations
          , i,l,j,jl
          ;
        for(i=0,l=compoundSelectors.length;i<l;i+=2) {
            compoundSelector = compoundSelectors[i];
            bloomLocations = this._getCompoundSelectorBloomLocations(compoundSelector);
            for(j=0,jl=bloomLocations.length;j<jl;j++) {
                if(!bloomfilter.testByLocations(bloomLocations[j])) {
                    return false;
                }
            }
        }
        return true;
    };

    /**
     * TODO: To save some memory probably all Selector related elements could
     * be created by SelectorEngine. We could then reuse instances with the
     * same value. Especially when it comes to these cached values a little
     * performance and some memory could be shared.
     * Selector related items are a good fit for this, because they
     * are all immutable.
     *
     * TODO: this adhoc class IDSelectorList could be integral to each
     * SelectorList item.
     */
    var IDSelectorList = (function() {
        // asserting that complexSelectors come in sorted by specificity
        // this is that the hash of this item stays the same for the same
        // value. Order is no in itself for SelectorLists
        // also assert that all complexSelectors are valid (!invalid)
        function IDSelectorList(complexSelectors) {
            var i, l;
            for(i=0,l=complexSelectors.length;i<l;i++)
                Object.defineProperty(this, i, { value: complexSelectors[i] });
            Object.defineProperty(this, 'length', {
                value: l
              , enumerable: true
            });
            Object.defineProperty(this, 'normalizedName', {
                value: Array.prototype.join.call(this, ',\n')
              , enumerable: true
            });
        }
        var _p = IDSelectorList.prototype;

        _p.toString = function() {
            return this.normalizedName;
        };

        return IDSelectorList;
    })();

    _p._multiplyComplexSelectorLists = function(selectorsA_, selectorsB_) {
        var x, y, l, ll
          , result = []
          , superKeyA
          , superCacheA
          , superKeyB
          , keyA, keyB
          , cacheA, product, sum
          , selectorsA = selectorsA_ instanceof IDSelectorList ? selectorsA_ : new IDSelectorList(selectorsA_)
          , selectorsB = selectorsB_ instanceof IDSelectorList ? selectorsB_ : new IDSelectorList(selectorsB_)
          ;

        superKeyA = '!' + selectorsA.normalizedName;
        superKeyB = '!' + selectorsB.normalizedName;
        superCacheA = this._complexSelectorsCache[superKeyA];
        if(!superCacheA)
            this._complexSelectorsCache[superKeyA] = superCacheA = Object.create(null);
        product = superCacheA[superKeyB];
        if(!product) {
            for(x=0,l=selectorsA.length;x<l;x++) {
                keyA = selectorsA[x].normalizedName;
                cacheA = this._complexSelectorsCache[keyA];
                if(!cacheA)
                    this._complexSelectorsCache[keyA] = cacheA = Object.create(null);
                for(y=0, ll=selectorsB.length;y<ll;y++) {
                    keyB = selectorsB[y].normalizedName;
                    sum = cacheA[keyB];
                    if(!sum)
                        sum = selectorsA[x].add(selectorsB[y]);
                    result.push(sum);
                }
            }
            product = new IDSelectorList(result);
            superCacheA[superKeyB] = product;
        }
        return product;
    };

    /**
     * Eliminate selectors rules as soon as possible, using the bloomfilter
     * before resolving all the namspaces and running _complexSelectorMatches.
     * This will reduce the number of selectors that we have to check
     * for each element a lot.
     * This is best when @namespaces are used, because then we can bulk
     * remove a lot of false candidates at once.
     * We could also  think about a way of clustering SelectorList items
     * into common virtual-namespaces. But that clustering would be costly
     * by itself and would also have to keep the original rule order in tact.
     * Maybe just some sort of greasy clustering could be used, that
     * clusters on the way if there is something compatible just in order.
     * (greasy could mean a lot here: take the longest common sequence of
     * compound selectors to increase the likelihood of not matching, or
     * take the longest possible subsequent complex selectors by just picking
     * the first compound selector for clustering to increase the likelihood
     * of discarding many items at once). Sounds not easy to do though.
     */
    _p._getNamespacedRules = function(propertyCollection, element) {
        var bloomfilter = this._bloomfilterComplexSelector.bind(this, element.getBloomFilter())
          , filterInvalid = function (item){ return !item.invalid; }
          , namespace = null
          , trace
          , namespacedRules = [] // result
          , stack = []
          , frame, items, item, selectors, i, l, j, n, sl, sli
          ;
        stack = [];
        frame = [0, propertyCollection.items, propertyCollection, null, [propertyCollection]];
        do {
            i=frame[0];
            items = frame[1];
            namespace = frame[3];
            trace = frame[4];
            l=items.length;
            // check all items
            while(i<l) {
                item = items[i];
                i++;
                if(item.invalid)
                    continue;
                selectors = null;
                if(typeof item.getSelectorList === 'function') {
                    selectors = [];
                    sl = item.getSelectorList().value;
                    for(j=0, n=sl.length;j<n;j++) {
                        sli = sl[j];
                        if(!sli.invalid && bloomfilter(sli))
                            selectors.push(sli);
                    }
                    if(!selectors.length)
                        // this @namespace or rule won't match
                        continue;

                    // Faster sorting would be good.
                    selectors.sort(compareSelectorSpecificity);
                    selectors = namespace
                        ? this._multiplyComplexSelectorLists(namespace, selectors)
                        : new IDSelectorList(selectors)
                        ;

                    if(item instanceof Rule) {
                        namespacedRules.push([selectors, item, trace]);
                        continue;
                    }
                }
                if(item instanceof PropertyCollection) {
                    if(i<l) {
                        // we are not finished yet with this scope
                        // save this frame
                        frame[0]=i;
                        stack.push(frame);
                    }
                    // setup the next frame
                    // depth first! next iteration work on this item
                    trace = trace.slice();
                    trace.push(item);
                    stack.push([0, item.items, item, selectors || namespace, trace]);
                    break;
                }
            }
        } while( (frame = stack.pop()) );
        return namespacedRules;
    };

    _p.getMatchingRules = function(propertyCollection, element) {
        var namespacedRules = this._getNamespacedRules(propertyCollection, element)
          , result
          ;
        result = this._getMatchingNamespacedRules(namespacedRules, element);
        return result;
    };


    /**
     * Returns a list of all of the rules currently applying to the element,
     * sorted from most specific to least.
     */
    _p._getMatchingNamespacedRules = function(namespacedRules, element) {
        var matchingRules = []
          , namespacedRule
          , complexSelectors
          , specificity
          , i, j, length, lengthCS
          ;
        for(i=0, length = namespacedRules.length;i<length;i++) {
            namespacedRule = namespacedRules[i];
            complexSelectors = namespacedRule[0];
            for(j=0, lengthCS = complexSelectors.length;j<lengthCS;j++) {
                if(this._complexSelectorMatches(complexSelectors[j], element)) {
                    // got a match with the most specific selector
                    // augment the specifity with the index number, so we can
                    // make sure, that the order of rules with otherwise
                    // equal specifity is not mixed up. The later rules
                    // are more specific/overide the previous one, so it
                    // is a good match for the sorting function that we use
                    // anyways
                    specificity = complexSelectors[j].specificity.slice();
                    specificity.push(i);
                    matchingRules.push([specificity, namespacedRule]);
                    break;
                }
            }
        }
        matchingRules.sort(_rulesCompareSpecificity);
        return matchingRules.map(function(item){return item[1];});
    };

    function _combinateAll(type, element, complexSelectorArray, seen, selectorEngine) {
        var compoundSelector = complexSelectorArray[0]
          , stack = []
          , frame
          , combinator = null
          , nextComplexSelectorArray
          , result
          , results = []
          , child
          , descendant = type === 'descendant'
          , i,l
          ;
        if(!descendant && type !== 'child')
            throw new CPSError('Combinator type "' + type +'" is unsuported');
        //initial frame setup
        frame = [element.children, 0, 0];
        frame[2] = frame[0].length;
        do {
            i=frame[1];
            l=frame[2];
            while(i<l) {
                child = frame[0][i];
                i++;
                if(compoundSelector.matches(child, selectorEngine)) {
                    // it matches
                    if(combinator === null) // do this lazy and only once
                        combinator = complexSelectorArray[1];
                    if(!combinator) {
                        // no more selectors. we got a hit
                        if(!(child.nodeID in seen)) {
                            results.push(child);
                            seen[child.nodeID] = null;
                        }
                        continue;
                    }
                    if(!nextComplexSelectorArray) // do this lazy and only once
                        nextComplexSelectorArray = complexSelectorArray.slice(2);
                    result = _combinateAll(combinator.type, child, nextComplexSelectorArray, seen, selectorEngine);
                    if(result.length)
                        Array.prototype.push.apply(results, result);
                }
                if(!descendant) continue;
                if(i<l) {
                    // save this frame
                    frame[1]=i;
                    frame[2]=l;
                    stack.push(frame);
                }
                // setup the next frame
                frame = [child.children, 0, 0];
                frame[2] = frame[0].length;
                i=frame[1];
                l=frame[2];
            }
        } while((frame = stack.pop()));
        return results;
    }

    /**
     * return only the first hit in depth first order
     * complexSelectorArray is an array of the form compoundSelectors
     * separated by combinator.
     * [compoundSelector, combinator, compoundSelector, combinator, compoundSelector]
     * min length is 1. length has to be odd always
     */
    function _combinateFirst(type, element, complexSelectorArray, selectorEngine) {
        var compoundSelector = complexSelectorArray[0]
          , stack = []
          , frame
          , combinator = null
          , nextComplexSelectorArray
          , result
          , child
          , descendant = type === 'descendant'
          , i,l
          ;
        if(!descendant && type !== 'child')
            throw new CPSError('Combinator type "' + type +'" is unsuported');
        //initial frame setup
        frame = [element.children, 0, 0];
        frame[2] = frame[0].length;
        do {
            i=frame[1];
            l=frame[2];
            while(i<l) {
                child = frame[0][i];
                i++;
                if(compoundSelector.matches(child, selectorEngine)) {
                    // it matches
                    if(combinator === null) // do this lazy and only once
                        combinator = complexSelectorArray[1];
                    if(!combinator)
                        // no more selectors. we got a hit
                        return child;
                    if(!nextComplexSelectorArray) // do this lazy and only once
                        nextComplexSelectorArray = complexSelectorArray.slice(2);
                    result = _combinateFirst(combinator.type, child, nextComplexSelectorArray, selectorEngine);
                    if(result)
                        return result;
                }
                if(!descendant) continue;
                if(i<l) {
                    // save this frame
                    frame[1]=i;
                    frame[2]=l;
                    stack.push(frame);
                }
                // setup the next frame
                frame = [child.children, 0, 0];
                frame[2] = frame[0].length;
                i=frame[1];
                l=frame[2];
            }
        } while((frame = stack.pop()));
        // nothing found
        return null;
    }

    /**
     * selector may be a string or a SelectorList
     * Returns a set of elements in scope matching at least one of
     * the selectors in selector.
     *
     * scope is an array of zero or more elements, we will search only
     * within the scope elements
     */
    _p.queryAll = function(scope, _selector) {
        var complexSelectors
          , complexSelectorArray
          , i,l, k, ll, j
          , seen = Object.create(null)
          , result = []
          , matches, node
          , selector
          ;
        if(typeof _selector === 'string')
            selector = selectorListFromString(_selector, undefined, this);
        else if(_selector instanceof SelectorList)
            selector = _selector;
        else
             throw new CPSError('SelectorList expected, but got a '
                            + _selector + ' typeof: '+ typeof _selector);
        if(!(scope instanceof Array))
            throw new CPSError('scope must be an Array');
        complexSelectors = selector.value;
        for(i=0,l=complexSelectors.length;i<l;i++) {
            complexSelectorArray = complexSelectors[i].value;
            for(k=0,ll=scope.length;k<ll;k++) {
                matches = _combinateAll('descendant', scope[k], complexSelectorArray, seen, this);
                Array.prototype.push.apply(result, matches);
            }
        }
        return result;
    };

    /**
     * Returns the first element within the scope that matches.
     *
     * Matching only one element could be better optimized, especially
     * further down: queryComplexSelector, doesn't know anything about
     * selecting only one element.
     */
    _p.query = function(scope, _selector) {
        var complexSelectors
          , complexSelectorArray
          , i,l, k, ll
          , match
          , selector
          ;
        if(typeof _selector === 'string')
            selector = selectorListFromString(_selector, undefined, this);
        else if(_selector instanceof SelectorList)
            selector = _selector;
        else
             throw new CPSError('SelectorList expected, but got a '
                            + _selector + ' typeof: '+ typeof _selector);
        if(!(scope instanceof Array))
            throw new CPSError('scope must be an Array');

        complexSelectors = selector.value;
        for(i=0,l=complexSelectors.length;i<l;i++) {
            complexSelectorArray = complexSelectors[i].value;
            for(k=0,ll=scope.length;k<ll;k++) {
                match = _combinateFirst('descendant', scope[k], complexSelectorArray, this);
                if(match) return match;
            }
        }
        return null;
    };

    return SelectorEngine;
});

define('Atem-CPS-whitelisting/whitelisting',[
    'Atem-Errors/errors'
], function(
    errors
) {
    "use strict";

    var KeyError = errors.Key;

    /**
     * check whether val is an integer
     */
    function isInt (n) {
        // n === n NaN will return false
        // n|0 rounds
        return typeof n === 'number' && n === n && n === (n|0);
    }

    /**
     * check whether the string is formatted like a propper int
     */
    var _isIntStringTest = /^[+-]?[0-9]+$/;
    function isIntString(str){
        if( typeof str != 'string') return false;
        return _isIntStringTest.test(str);
    }

    function _validate(whitelist, target, key) {
        if(!whitelist)
            return [false, 'Key "' +  key + '" is not whitelisted because the '
                                                + 'whitelist is missing.'];
        if(typeof key !== 'string')
            return [false, 'name must be string but it is: '+ typeof key];

        if(!whitelist.hasOwnProperty(key))
            return [false ,'Name "'+ key +'" is not whitelisted '
                            + 'for item "'+ target +'" '
                            + Object.keys(whitelist).join(', ')];
        return [true, whitelist[key]];
    }

    function has(whitelist, target, name) {
        return _validate(whitelist, target, name)[0];
    }

    function get (whitelist, target, name) {
        var result = _validate(whitelist, target, name);
        if(!result[0])
            throw new KeyError(result[1]);

        return target[result[1]];
    }

    function hasMethod (name) {
        /* jshint validthis: true */
        return has(this._cps_whitelist, this, name);
    }

    function getMethod (name) {
        /* jshint validthis: true */
        return get(this._cps_whitelist, this, name);
    }

    function _validateArray(target, key) {
        var processedKey;
        if(key === 'length')
            return [true, key];

        if(isIntString(key))
            key = parseInt(key, 10);

        if(!isInt(key))
            return [false, 'Key must be "length" or an integer but it is: '
                                            + key + ' '+ typeof key];
        else if(key<0)
            processedKey = target.length + key;
        else
            processedKey = key;

        if(processedKey<0 || processedKey>=target.length)
             throw new KeyError('The index "'+ key +'" is not in the array. '
                                        + 'Length: ' + target.length);
        return [true, processedKey];
    }

    function arrayHas (target, key) {
        return _validateArray(target, key)[0];
    }

    function arrayGet (target, key) {
        var result = _validateArray(target, key);
        if(!result[0])
            throw new KeyError(result[1]);

        return target[result[1]];
    }


    return {
        has: has
      , get: get
      , hasMethod: hasMethod
      , getMethod: getMethod
      , arrayHas: arrayHas
      , arrayGet: arrayGet
    };
});

define('Atem-CPS/OMA/_Node',[
    'Atem-CPS/errors'
  , 'Atem-CPS-whitelisting/whitelisting'
  , 'Atem-CPS/emitterMixin'
  , 'Atem-CPS/CPS/elements/PropertyDict'
  , 'bloomfilter'
], function(
    errors
  , whitelisting
  , emitterMixin
  , PropertyDict
  , bloomfilter
) {
    "use strict";

    /*global clearTimeout:true, setTimeout:true */

    var OMAError = errors.OMA
      , OMAIdError = errors.OMAId
      , ValueError = errors.Value
      , KeyError = errors.Key
      , NotImplementedError = errors.NotImplemented
      , assert = errors.assert
      ;

    var _id_counter = 0
      , emitterMixinSetup
      , propertyChangeEmitterSetup
      ;

    function getUniqueID() {
        return _id_counter++;
    }

    emitterMixinSetup = {
          stateProperty: '_channel'
        , onAPI: '_on'
        , offAPI: '_off'
        , triggerAPI: '_trigger'
    };

    propertyChangeEmitterSetup = {
          stateProperty: '_dependants'
        , onAPI: 'onPropertyChange'
        , offAPI: 'offPropertyChange'
        , triggerAPI: '_triggerPropertyChange'
    };

    /**
     * The OMA—Object Model API is the base structure against which we can run
     * the selector queries of CPS. We must be able to answer the the question
     * "is this element selected by that selector" for each item of the OMA-Tree.
     *
     * All Elements of a OMA-Tree inherit from _Node.
     * This means, that a test like `item instanceof _Node` must return true.
     */
    function _Node() {
        /*jshint validthis:true*/
        if(this.constructor.prototype === _p)
            throw new OMAError('OMA _Node must not be instantiated directly');
        Object.defineProperty(this, 'nodeID', {value: getUniqueID()});

        this._children = [];
        this._childrenData = new Map();
        this._ids = this.idManager ? Object.create(null) : null;

        this._attachedData = null;

        // Todo: all these dependencies to parent should be managed together
        // This also includes references to multiverse, universe etc.
        // Managed together means we could store them lazily at a this._parentDeps
        // object and could then bulk delete them when parent changes and such.
        this._parent = null;
        this._index = null;
        this._tailIndex = null; // index from the end, needed for cache invalidation
        this._indexPaths = Object.create(null);

        this._id = null;
        this._classes = Object.create(null);
        // FIXME: Will go into SelectorEngine
        this._bloomFilter = null;

        // this has higher precedence than any rule loaded by CPS
        // and it is unique to this _Node.
        // DOM Elements have element.style, this is analogous
        Object.defineProperty(this, 'properties', {
            value: new PropertyDict([], '*element properties*')
          , enumerable: true
        });

        this._changeSubscriptions = null;
        emitterMixin.init(this, emitterMixinSetup);
        emitterMixin.init(this, propertyChangeEmitterSetup);

        this._cpsChange = {
            timeoutId: null
          , eventData: []
          , trigger: this._triggerCpsChange.bind(this)
        };
    }
    var _p = _Node.prototype;
    _p.constructor = _Node;

    /**
     * CPS-Name -> OMA-Name. The keys are used from within CPS. That way
     * the naming decisions in OMA are decoupled from CPS, if needed.
     *
     * Note, if the naming is indeed different, and the OMA properties
     * change then the  _triggerPropertyChange must use the CPS-name.
     *
     * All here white listed properties must trigger _triggerPropertyChange
     * when they change. In some applications some properties never change,
     * then it's not indicated to implement calls to _triggerPropertyChange.
     *
     * "type" can't change ever
     *
     * "subtree" may never be an actual property, it is used as a virtual
     * property via the onPropertyChange channel.
     */
    _p._cps_whitelist = {
        parent: 'parent'
      , children: 'children'
      , root: 'root'
      , index: 'index'
      , id: 'id'
      , type: 'type'
      , baseNode: 'baseNode'
    };

    _p.cpsGet = whitelisting.getMethod;
    _p.cpsHas = whitelisting.hasMethod;

    // Only necessary if the properties are on the _cps_whitelist
    // The value here should also be the key in _cps_whitelist
    // *NOT* the value.
    // This is needed for cache invalidation in StyleDict.
    _p._propertiesDependentOnParent = ['parent', 'root'];

    /* This is very unspecific on purpose, I can think of lots of
     * options to define validators for different purposes.
     * One of the biggest alternatives was to inject them via
     * the CPS-Controller into StyleDict, which would make the
     * validators of an OMA implementation configurable per application.
     * If that kind of freedom is needed (I think this is rather
     * a bad idea), then the object model could add a setValidator
     * method, operated by the CPS-Controller, for example.
     * However, to make an OM behave constantly across applications
     * (I think this is desirable) it is good to attch these
     * validators to the object model.
     */
    _p._getValidator = function(key) {
        //jshint unused:false
        return null;
    };

    /**
     * Used by StyleDict! There is not much use for this elsewhere.
     *
     * Throw ValueError if invalid.
     *
     * (However, StyleDict will make a KeyError out of almost any error,
     * regardless.)
     *
     * checkPropertyValue may perform post processing on the result e.g.
     * if  it eases further usage of the value. It's the decision
     * of the OMA implementor.
     * If not, checkPropertyValue returns the result unaltered on success.
     *
     * The JavaScript `undefined` value is never valid. Instead, `null` can
     * be used. Undefined is very JavaScript specific and often used where
     * other languages would throw errors. `null` has almost the same
     * semantics. If this is going to be implemented in another language
     * I think it's good to have just `null` and never `undefined`.
     */
    _p.checkPropertyValue = function(key, value) {
        var validate = this._getValidator(key)
          , _value = value
          ;

        if(validate)
            // key is in the signature for better error messages
            _value = validate.call(this, key, _value);

        if(_value === undefined)
            throw new ValueError('The formula of "' + key + '" in a ' + this
                            + ' returned `undefined` which is never valid');
        return _value;
    };

    /**
     * A bitmask (integer number) with the flags:
     *      cloneId           =    1
     *      cloneClasses      =    2
     *      cloneProperties   =    4
     *      cloneAttachedData =    8
     *      setBaseNode       = 0x10
     *      cloneBaseNode     = 0x20
     *
     * If both flags "setBaseNode" and "cloneBaseNode" are set
     * "setBaseNode" wins.
     */
    _p.clone = function(cloneFlags) {
        var clone = new this.constructor();
        this.finishClone(clone, cloneFlags);
        return clone;
    };

    _p.finishClone = function(clone, cloneFlags) {
        var frozenChildren = Object.isFrozen(this._children), i, l
          , child, cloneChild
          ;
        this.cloneProperties(clone, cloneFlags);
        for(i=0,l=this._children.length;i<l;i++) {
            child = this._children[i];
            if(!frozenChildren)
                // back on track!
                clone.add(child.clone(cloneFlags));
            else {
                // the constructor made that child
                cloneChild = clone.getChild(i);
                child.finishClone(cloneChild, cloneFlags);
            }
        }
    };

    _p._cloneAttachedData = function(clone) {
        var data = this._dumpAttachment();
        if(data)
            clone.attachData(data);
    };

    _p.cloneProperties = function(clone, cloneFlags) {
        var flags = cloneFlags === undefined
                ? (1|2|4|8) // default: all but base nodes
                : cloneFlags
          , cloneId = flags & 1
          , cloneClasses = flags & 2
          , cloneProperties = flags & 4
          , cloneAttachedData = flags & 8
          , setBaseNode = flags & 0x10
          , cloneBaseNode = flags & 0x20
          ;
        if(cloneId && this._id)
            clone.id = this._id;

        if(cloneClasses)
            clone.setClasses(this.classes);

        if(cloneProperties)
            clone.properties.splice( 0, clone.properties.length
                                   , this.properties.items );

        if(cloneAttachedData)
            this._cloneAttachedData(clone);

        if(setBaseNode)
            clone.baseNode = this;
        else if(cloneBaseNode && this._baseNode)
            clone.baseNode = this._baseNode;
    };

    _p._dumpClasses = function() {
        var k;
        for(k in this._classes)
            // we have classes
            return this.classes;
        return null;
    };

    _p._loadClasses = function(classes) {
        // do only if necessary and in a way that the 'classes' event
        // is triggered just once.
        var seen = new Set(), i, l, name;
        for(i=0,l=classes.length;i<l;i++) {
            // check if there are new class names
            name = classes[i];
            seen.add(name);
            if(!(name in this._classes)) {
                // mark for reset
                this._classes = null;
                break;
            }
        }
        if(this._classes !== null) {
            for(name in this._classes)
                // check if there are superfluous class names
                if(!seen.has(name)) {
                    // mark for reset
                    this._classes = null;
                    break;
                }
        }
        if(this._classes === null) {
            // reset
            this._classes = Object.create(null);
            this.setClasses(classes);
        }
    };

    _p._dumpProperties = function(simpleProperties) {
        var properties, result = null, i, l, k, keys, items;
        if(simpleProperties) {
            // Do a key: value serialization, looses double key entries
            // but is easier to read and write for humans
            properties = Object.create(null);
            keys =  this.properties.keys();
            for(i=0,l=keys.length;i<l;i++) {
                k = keys[i];
                properties[k] = this.properties.get(k).valueString;
            }
            if(l)
                result = properties;
        }
        else {
            // Put each [key, value] pair as a list into a list.
            // This preserves all information of the PropertyDict, but
            // it's harder to read/modify for some humans, because there
            // are more brackets and such.
            properties = [];
            items = this.properties.items;
            for(i=0,l=items.length;i<l;i++)
                properties.push([items[i].name, items[i].value.valueString]);
            if(l)
                result = properties;
        }
        return result;
    };

    _p._loadProperties = function(makeProperty, properties) {
        // TODO: similar to _loadClasses, this should only trigger a change
        // event if necessary. I keep this for another iteration.
        // Should maybe be implemented in the PropertyDict.
        var newProperties = []
          , k, i, l
          ;
        if(!(properties instanceof Array))
            // used simpleProperties=true in
            for(k in properties)
                newProperties.push(makeProperty(k, properties[k]));
        else
            for(i=0,l=properties.length;i<l;i++)
                newProperties.push(makeProperty(properties[i][0], properties[i][1]));
        this.properties.splice(0, this.properties.length, newProperties);
    };

    _p._dumpAttachment = function() {
        var k;
        if(this._attachedData)
            // check if there is at least one key in this._attachedData prior
            // to setting it. Hence 'for(k in ...) do(); break;' instead of just
            // 'if(this._attachedData) do();'
            for(k in this._attachedData)
                // In _loadAttachment we do the same "deep clone"
                // But here we do it so that the returned data doesn't
                // change when this._attachedData changes.
                return JSON.parse(JSON.stringify(this._attachedData));
        return null;
    };

    _p._loadAttachment = function(attachment) {
        // This is a bit paranoid: serialize then deserialize
        // (poor mans deep clone ...) to break unwanted shared references
        // to attachment with other users of it. Otherwise, using
        // this.attachData(attachment) would do the thing just fine.
        this.attachData(JSON.parse(JSON.stringify(attachment)));
    };

    /**
     * Returns an object if there is any data to be serialized, otherwise null.
     *
     * The object is meant to be consumed by loadData and must be de-/serializable
     * by methods like JSON.stringify or yaml.safeDump without loss.
     *
     * dumpFlags: A bitmask (integer number) with the flags:
     *      dumpId           =    1
     *      dumpClasses      =    2
     *      dumpProperties   =    4
     *      dumpAttachedData =    8
     * default: dump all
     */
    _p.dumpData = function(simpleProperties, dumpFlags) {
        var result = Object.create(null)
          , data, k
          , flags = dumpFlags === undefined
                ? (1|2|4|8)//all
                : dumpFlags
          , dumpId = flags & 1
          , dumpClasses = flags & 2
          , dumpProperties = flags & 4
          , dumpAttachedData = flags & 8
          ;

        if(dumpId && this._id)
            result.id = this._id;

        if(dumpClasses) {
            data = this._dumpClasses();
            if(data)
                result.classes = data;
        }

        if(dumpProperties) {
            data = this._dumpProperties(simpleProperties);
            if(data)
                result.properties = data;
        }

        if(dumpAttachedData) {
            data = this._dumpAttachment();
            if(data)
                result.attachment = data;
        }

        for(k in result)
            // only return result if there is any content
            return result;
        return null;
    };

    _p._loadData = function(makeProperty, data) {
        // FIXME: delay StyleDict invalidation
        if('id' in data)
            this.id = data.id;

        if('classes' in data)
            this._loadClasses(data.classes);

        if('properties' in data)
            this._loadProperties(makeProperty, data.properties);

        if('attachment' in data)
            this._loadAttachment(data.attachment);
    };

    _p._dumpChildren = function(dumpFunc, dumpFuncArguments) {
        var frozenChildren = Object.isFrozen(this._children)
          , childrenData, child, childData, i, l
          ;

        if(!this._children.length)
            return null;

            childrenData = [];
        for(i=0,l=this._children.length;i<l;i++) {
            child = this._children[i];
            childData = child[dumpFunc].apply(child, dumpFuncArguments || []);
            if(!frozenChildren)
                // we need the type to know what node type to rebuild
                childData = [child.type, childData];
            // else: having the type in data is redundant.
            childrenData.push(childData);
        }
        return childrenData;
    };

    _p._loadChildren = function(loadFunc, factoryFunc, childrenData) {
        var frozenChildren = Object.isFrozen(this._children)
          , children, i, l, child, type, childData, Constructor
          ;
        if(!frozenChildren)
            children = [];
        for(i=0,l=childrenData.length;i<l;i++) {
            if(frozenChildren) {
                // we don't build this, the constructor should have done
                // so before.
                child = this._children[i];
                if(!child)
                    // The data is invalid (or the concrete OMA
                    // implementation is flawed).
                    throw new OMAError('Child is missing. The data suggests '
                                + 'that a child should be at index '+ i
                                + 'in ' + this);
                childData = childrenData[i];
                if(childData !== null)
                    child[loadFunc](childData);
                continue;
            }

            // Not frozen children.
            type = childrenData[i][0];
            childData = childrenData[i][1];
            Constructor = this.getChildConstructor(type);
            if(typeof Constructor[factoryFunc] === 'function')
                // A factory function is a mighty way to make more customized
                // constructors, because the standard is having no constructor
                // arguments. If using this, you probably want to customize
                // the accoding dump methods as well, to include extra data
                // factory and, in consequence, the constructor.
                child = Constructor[factoryFunc](childData);
            // this is the default
            else {
                child = new Constructor();
                if(childData !== null)
                    child[loadFunc](childData);
            }
            children.push(child);
        }
        if(!frozenChildren)
            this.splice(0, this._children.length, children);
    };

    /**
     * Return an array of arrays [
     *      [this.children[n].type, this.children[n].getEssence()],
     *      ...
     * ]
     * NOTE: there is some variation possible in the return value for
     * OMA implementations. However, the return value of this method will
     * likely be used to compare essences and to perform distinct actions
     * based on that and thus should really only be altered when carefully
     * considered. It is much safer to change dumpData/loadData and
     * in most cases the right thing to do anyways.
     *
     * If you don't change the semantic of the "essence" it should be fine.
     *
     * The return value must be serializable via JSON.stringify or yaml.safeDump
     *
     * TODO: write and link to documentation about the "essence" concept.
     *
     * In short, essence is the tree information without the data.
     * I.e. amount, type and and order of all descendants but not ids,
     * classes, properties and attachment.
     */
    _p.dumpEssence = function() {
        return this._dumpChildren('dumpEssence');
    };

    _p.dumpTree = function(simpleProperties) {
        var data = this.dumpData(simpleProperties)
          , childrenData = this._dumpChildren('dumpTree', [simpleProperties])
          ;
        if(childrenData) {
            if(!data)
                data = Object.create(null);
            data.children = childrenData;
        }
        return data;
    };

    /**
     * Implement this like so:
     *
     * ```
     * _p.loadData = function(data) {
     *     this._loadData(cpsTools.makeProperty, data):
     * }
     * ```
     *
     * NOTE: cpsTools.makeProperty is dependent on the actual setup of
     * your object model. That's why it is not defined in here.
     */
    _p.loadData = function(data) {
        // jshint unused:vars
        throw new NotImplementedError('A subclass must implement loadData');
    };

    /**
     * This replaces all children with new ones created from the information
     * in "essences"
     *
     * If essences is an empty array, this deletes all children, just like
     * node.splice(0, node.childrenLength);
     */
    _p.loadEssence = function(essences) {
        if(essences)
            this._loadChildren('loadEssence', 'fromEssence', essences);
    };

    _p.loadTree = function(data) {
        if(data)
            this.loadData(data);
        if(data.children)
            this._loadChildren('loadTree', 'fromTree', data.children);
    };

    _p.walkTreeDepthFirst = function(callback) {
        var i,l;
        callback(this);
        for(i=0,l=this._children.length;i<l;i++)
            this._children[i].walkTreeDepthFirst(callback);
    };

    /**
     * Attach custom data to the node.
     * When called with just one argument, a typeof 'object' the internal
     * object is replaced.
     * Otherwise two arguments: key, value are expected and written to
     * the internal object.
     *
     * This data can be anything but it should survive serialization
     * to JSON and YAML. The data won't be available to CPS and
     * not trigger any events on change (that could be changed).
     * ES6 Proxies may be an option to patch the observation yourself.
     * As of Feb 2015 they are in Firefox and Chrome/V8.
     *
     * Returns undefined.
     */
    _p.attachData = function(key, value) {
        if(arguments.length === 1 && typeof key === 'object') {
            this._attachedData = key;
            return;
        }
        if(!this._attachedData)
            this._attachedData = Object.create(null);
        this._attachedData[key] = value;
    };
    /**
     * When called without arguments, the internal object is deleted.
     * When called with one argument "key" the entry at key
     * of the internal object is deleted.
     *
     * Returns undefined.
     */
    _p.detachData = function(key) {
        if(arguments.length === 0)
            this._attachedData = null;
        else if(this._attachedData)
            delete this._attachedData[key];
    };
    /**
     * When called without arguments the internal object is returned.
     * When called with one argument "key" the value at key
     * of the internal object is returned.
     */
    _p.getAttachment = function(key, searchInBaseNodeChain) {
        if(arguments.length === 0)
            return this._attachedData;
        if(this._attachedData && key in this._attachedData)
            return this._attachedData[key];
        if(searchInBaseNodeChain && this._baseNode)
            return this._baseNode.getAttachment(key, searchInBaseNodeChain);
    };

    _p.hasBaseNode = function() {
        return !!this._baseNode;
    };

    /**
     * baseNode gives this node it's essence and some of the data.
     * FIXME: It will require a bigger effort to straighten this concept
     * out. Consider this as a stub, at the moment, the application has
     * to do the work for this. MOM-Project uses this.
     * I keep this open for a later iteration.
     */
    Object.defineProperty(_p, 'baseNode', {
        get: function() {
            if(!this._baseNode)
                throw new KeyError(this + ' has no baseNode.');
            return this._baseNode;
        }
        // Note: the semantics of this baseNode concept are not yet fully
        // thought out. That's why I'm very stringent now with what
        // can be done with this thing.
      , set: function(node) {
            // I think this is set very short after creation of the
            // node. There won't be a kind of late base node setting.
            // We could even do this via the constructor. Then a node
            // could also lock this setter when it has no baseNode.
            // We wouldn't even need a setter in the first place.
            if(this._baseNode === node)
                return;
            if(this._baseNode && this._baseNode !== node)
                // I maybe want to make this the api to control metacomponents
                // then, setting this would have tremendous effects on the
                // children structure of this node. Until then, or until there
                // is a solution, re-setting is forbidden.
                throw new OMAError(this + 'already has already a baseNode '
                            + '('+node+') it is not allowed to change it.');
            if(node.type !== this.type)
                throw new OMAError('Node must be a "'+this.type+'", '
                                        + 'but it is "'+node.type+'".');
            // Prevent recursion! "this" must not equal node nor must
            // "this" be in the baseNode chain of node.
            var check = node;
            do {
                if(this === check)
                    throw new OMAError('Recursion in baseNode chain: '
                            + this + ' is already in the base nodes of '
                            + node + '.');
                check = check.hasBaseNode() && check.baseNode;
            } while(check);

            this._baseNode = node;
        }
    });

    // TODO: add standard serialize/deserialize methods here.
    // And, add a switch for a "simplified" export, where the data is
    // better human readable, just like the font data in BEF.

    emitterMixin(_p, emitterMixinSetup);
    emitterMixin(_p, propertyChangeEmitterSetup);

    /**
     * Implement a getter for CPS Type in children of _Node, we need it
     * for the cps selector engine.
     *
     * cpsType should be a simple string, minuses are ok, don't do
     * anything fancy. Don't use already taken names.
     */
    Object.defineProperty(_p, 'type', {
        get: function() {
            // this should be implemented by items inheriting from _Node
            throw new NotImplementedError('Implement CPS-Type name!');
        }
    });

    Object.defineProperty(_p, 'children', {
        /**
         * returns a copy of this._children so we can't mess around
         * with the list of children via public interfaces.
         */
        get: function(){ return this._children.slice(); }
    });

    Object.defineProperty(_p, 'childrenLength', {
        /**
         * Faster than calling node.children.length, because that creates
         * a copy of this._children
         */
        get: function(){ return this._children.length; }
    });

    _p.getChild = function(index) {
        return this._children[index];
    };

    /**
     * Set this to true in a subclass if it should manage the ids of
     * it's descendants.
     */
    Object.defineProperty(_p, 'idManager', {
        value: false
    });

   _p.requestSetId = function(descendant, id) {
        if(!this.idManager)
            // this moves to root if no Node on the way is an idManager.
            return this.parent && this.parent.requestSetId(descendant, id);

        if(descendant.getIdManager() !== this)
            return false;
        // this node is responsible
        return this._setDescendantId(descendant, id);
    };

    _p._setDescendantId = function(descendant, id, newNode) {
        var registered = this._ids[id];
        if(registered)
            throw new OMAIdError('Id "' + id + '" is already taken by: '
                                        + registered + ' ' + registered.particulars);
        if(descendant.id) {
            if(!newNode)
                // When the descendant has an id and is then added to a subtree
                // controlled by this idManager, then the descendant id is not
                // yet registered here.
                assert(this._ids[descendant.id] === descendant, 'The nodes '
                                        + 'id should be registered here.');
            if(this._ids[descendant.id] === descendant)
                delete this._ids[descendant.id];
        }

        if(id !== null) {
            this._ids[id] = descendant;
            descendant.updateId(id);
        }
        return true;
    };


    _p.removeSubtreeIds = function(descendant) {
        if(!this.idManager)
            // this moves to root if no Node on the way is an idManager.
            return this.parent && this.parent.removeSubtreeIds(descendant);
        var nodes = [descendant], node;
        while((node=nodes.pop())) {
            if(node.id && this._ids[node.id] === node
                       && node.getIdManager() !== this)
                delete this._ids[descendant.id];
            if(!node.idManager)
                Array.prototype.push.apply(nodes, node.children);
        }
    };

    _p.addSubtreeIds = function(descendant) {
        if(!this.idManager)
            // this moves to root if no Node on the way is an idManager.
            return this.parent && this.parent.addSubtreeIds(descendant);
        if(descendant.getIdManager() !== this)
            return false;
        var nodes = [descendant], node;
        while((node=nodes.pop())) {
            if(node.id)
                // FIXME: Here we could handle collisions (OMAIdError) gracefully.
                this._setDescendantId(node, node.id, true);
            // if node is not an idManager this is responsible.
            if(!node.idManager)
                // this results in a breadth first traversal
                Array.prototype.unshift.apply(nodes, node.children.reverse());
        }
    };

    _p.getById = function(id) {
        if(!this.idManager)
            // this moves to root if no Node on the way is an idManager.
            return this.parent && this.parent.getById(id);
        return this._ids[id];
    };

    _p.getIdManager = function() {
        var parent = this.parent;
        while(parent) {
            if(parent.idManager)
                return parent;
            parent = parent.parent;
        }
        return false;
    };

    // don't use this directly ever, it's just here for DRY in
    // updateId and the _p.id setter
    function _setId(id) {
        //jshint validthis:true
        if(id !== this.id) {
            this._bloomFilter = null;
            this._id = id || null;
            this._triggerPropertyChange('id');
        }
    }

    _p.updateId = function(id) {
        if(!this.parent)
            return;
        var node = this.parent.getById(id);
        if (node === this)
            _setId.call(this, id);
    };

    Object.defineProperty(_p, 'id', {
        /**
         * The Mechanism how id's are verified etc. need to be defined,
         * probably on a per OMA-Element base. And probably always the
         * parent is responsible for id checking and setting. At the
         * moment, I need id's to write the selector engine, and for that,
         * I don't need properly checked IDs
         */
        set: function(id) {
            // will call updateId on success
            var managed = this.parent && this.parent.requestSetId(this, id);
            if(!managed || id === null)
                _setId.call(this, id);
        }
      , get: function(){ return this._id; }
    });

    _p._rootType = 'root';

    _p.isRoot = function(){
        return (this.type === this._rootType);
    };

    /***
     * get the root element of this node.
     */
    Object.defineProperty(_p, 'root', {
        get: function() {
            if(!this._parent)
                return null;
            if(this._parent.isRoot())
                return this._parent;
            return this._parent.root;
        }
    });

    /**
     * FIXME: I was always not too happy with this in MOM, for
     *        no particular reason. Maybe it can  be changed a bit.
     *        It's used a lot in MOM, so analyzing for what cases
     *        it's used woud be a good start,
     *
     *
     * returns a selector for this element, currently it is used for
     * display puposes, so the additionial information "(no parent) "
     * is prepended if the item has no parent
     * The selector is valid and selects only this element.
     */
    Object.defineProperty(_p, 'particulars', {
        get: function() {
            return [
                    this._parent ? this._parent.particulars : '(no parent)'
                  , ' '
                  , this.type
                  , (this.id ? '#' + this.id : '')
                  , (this._parent
                        ? ':i(' + this.index + ')'
                        : '')
                ].join('');
        }
    });

    _p._setCLass = function(name) {
        this._bloomFilter = null;
        if(!(name in this._classes)){
            this._classes[name] = null;
            return true;
        }
        return false;

    };
    _p.setClass = function(name) {
        if(this._setCLass(name))
            this._triggerPropertyChange('classes');
    };

    _p.setClasses = function(classes) {
        var i, l, changed;
        for(i=0,l=classes.length;i<l;i++) {
            changed = this._setCLass(classes[i]) || changed;
        }
        if(changed)
            this._triggerPropertyChange('classes');
    };

    _p.removeClass = function(name) {
        this._bloomFilter = null;
        if(name in this._classes[name]) {
            delete this._classes[name];
            this._triggerPropertyChange('classes');
        }
    };

    _p.hasClass = function(name) {
        return name in this._classes;
    };

    Object.defineProperty(_p, 'classes', {
        get: function() {
            return Object.keys(this._classes);
        }
      , enumerable: true
    });

    _p.toString = function() { return ['<', this.type, ' ', this.nodeID, '>'].join('');};

    _p.isOMANode = function(item) {
        return item instanceof _Node;
    };

    /**
     *  enhance this dict with accepted children type: Constructor pairs
     */
    _p._acceptedChildren = Object.create(null);

    _p.qualifiesAsChild = function(item) {
        if(!this.isOMANode(item) || item === this)
            return false;

        if(item.type in this._acceptedChildren
                    && item instanceof this._acceptedChildren[item.type])
            return true;
        return false;
    };

    _p.getChildConstructor = function(type) {
        var Constructor = this._acceptedChildren[type];
        if(!Constructor)
            throw new KeyError('No child constructor found for type "'
                                            + type + '" in ' + this);
        return Constructor;
    };

    /**
     * Note: this is currently running very often when adding or deleting
     * children, I wonder if we need to come up with some tricky shortcut
     * to make the search faster.
     * One thing I already made is searching from back to front, because
     * a child node will call parent.find(this) exactly after beeing
     * added to the parent, to verify that it is indeed entitled to change
     * it's parent property. In that case searching from back to front is
     * the faster path.
     * Maybe a Map item->index is just the thing to do.
     */
    _p.find = function(item) {
        var data = this._childrenData.get(item);
        return data === undefined ? false : data[0];
    };

    Object.defineProperty(_p, 'index', {
        get: function(){ return this._index;}
    });

    /**
     *  This is used to have an address for the serialization of the
     * _Node.properties (an probably other data). For some applications
     * it may be OK to use unique #ids instead of indexes. I.e. When
     * serializing a master in metapolator its glyph could be indexed by
     * names, and thus make it easier to inspect such a serialization by
     * looking at the file.
     * However, it's not the most important part of this to be human readable.
     * But it could become the second most important part!
     * Maybe The data that is serialized can contain a hint about its origin.
     * Using YAML it may be possible to add a comment (after all, comments
     * are the one reason why I prefer YAML over JSON).
     */
    _p.getIndexPath = function(stopNode) {
        // if there is no stopNode the cache address is an empty string
        var key = stopNode && stopNode.nodeID || ''
          , indexPath = this._indexPaths[key]
          , parentIndexPath
          ;
        if(!indexPath) {
            if(this.isRoot())
                // makes this an "absolute" path, analogous to how a
                // filesystem path would look like, i.e. starting with
                // a slash.
                indexPath = '/';
            if(this === stopNode)
                indexPath = '.';
            else if(!this.parent)
                indexPath = this._index;
            else {
                parentIndexPath = this.parent.getIndexPath(stopNode);
                indexPath = [parentIndexPath, this._index]
                                // don't make an absolute path that starts
                                // with two slashes
                                .join(parentIndexPath !== '/' ? '/' : '');
            }
            this._indexPaths[key] = indexPath;
        }
        return indexPath;
    };

    Object.defineProperty(_p, 'parent', {
        /**
         * Use parent for reading only.
         *
         * Setting the parent property performs some checks if the new
         * property is indeed valid. The Parent is authoritative in this
         * case.
         *
         * In short: We made it hard to set the parent property because
         * we want you to use the 'add' method of the parent.
         */
        set: function(parent) {
            if(parent === null) {
                if(this._parent === null)
                    // already done
                    return;
                if(this._parent.find(this) !== false)
                    throw new OMAError('Can\'t unset the parent property '
                        +'when the parent still has this Node as a child');

                this._bloomFilter = null;
                this._parent = null;
                this.updateIndex();
                // root depends on parent, as much as index

                this._triggerPropertyChange(this._propertiesDependentOnParent);
                return;
            }
            else if(this._parent !== null)
                throw new OMAError([this, 'is still a child of a', this._parent
                  , 'you can\'t set a new parent Node. Use "newParent.add(child)"'
                  , 'to move the child to another parent'].join(' '));
            else if (!this.isOMANode(parent))
                throw new OMAError('The parent property must be an OMA Node, '
                    +'but it is: "' + parent + '" typeof: ' + typeof parent);
            else if(parent.find(this) === false)
                throw new OMAError('A OMA Node must already be a child '
                    + 'of its parent when trying to set its parent property. '
                    + 'Use "parent.add(child)" instead.');

            this._bloomFilter = null;
            this._parent = parent;
            this.updateIndex();
            // root depends on parent, as much as index
            this._triggerPropertyChange(this._propertiesDependentOnParent);
        }
      , get: function(){ return this._parent; }
    });

    /**
     * This method is only called by the node and the parent node and
     * has no effect if index did not change for real!
     */
    _p.updateIndex = function() {
        var index = this._parent // if there is a parent, there is an index.
                    ? this._parent.find(this)
                    : null
          , tailIndex = index !== null
                    ? this._parent.childrenLength - index - 1
                    : null
          , changed = []
          ;

        if(index !== this._index) {
            this._index = index;
            this._indexPaths = Object.create(null);
            changed.push('index');
        }

        if(tailIndex !== this._tailIndex) {
            this._tailIndex = tailIndex;
            changed.push('tail-index');
        }

        this._triggerPropertyChange(changed);
    };


    _p._getCanonicalStartIndex = function(start, length) {
        if(start >= length)
            return length;
        if(start < 0)
            return Math.max(0, length - start);
        return start;
    };


    _p._childSubtreeChangeHandler = function() {
        this._triggerPropertyChange('subtree');
    };

    /**
     * Remove doubles, the last position wins.
     *
     * This is similar to running add with an existing item, it will
     * be positioned at the end then.
     *
     * The items-list argument is changed in place.
     */
    _p._removeDoubles = function(items) {
        var seen = new Set()
          , i, item
          ;
        for(i=items.length-1;i>=0;i--) {
            item = items[i];
            if(!seen.has(item))
                seen.add(item);
            else
                items.splice(i, 1);
        }
    };

    _p.splice = function(startIndex, deleteCount, _insertions /* single item or array of items */) {
        if(Object.isFrozen(this._children))
            throw new OMAError('Adding or removing children is not allowed in this element.');

        var insertions = _insertions instanceof Array
            ? _insertions
            : (_insertions === undefined
                    ? []
                    : [_insertions]
              )
          , deleted
          , args
          , i, l
          , item
          , canonicalStartIndex = this._getCanonicalStartIndex(startIndex, this._children.length)
          , moveIndexes
          , idx, data
          , insertionsEndIndex, delta, indexChanged
          , subscription
          , root = this.root
          ;

        this._removeDoubles(insertions);

        for(i=0,l=insertions.length;i<l; i++) {
            item = insertions[i];
            if(!this.qualifiesAsChild(item))
                throw new OMAError([this, 'doesn\'t accept', item
                                        , 'as a child object.'].join(' '));
        }

        // MOVING WITHIN THIS NODE

        // If item is already a child of this it's a "move"
        moveIndexes = insertions.map(function(item) {
                return (item.parent === this) ? item.index : -1;
            }, this);
        // The order is important!
        moveIndexes.sort();
        for(i=moveIndexes.length-1;i>=0;i--) {
            idx = moveIndexes[i];
            if(idx === -1) continue;
            // moveIndexes is ordered so that the higher indexes is this._children
            // are coming first (Note:iterating from the end), thus preserving
            // the validity of lower indexes
            this._children.splice(idx, 1);

            // Changing deleteCount makes two equivalent cases:
            //     Delete + Insert: [A,B,C].splice(1,1,[B]) => [A,B,C] // not [A, B] return [C]
            //     Move: [A,B,C].splice(1,0,[B]) => [A,B,C]
            // To replace C: [A,B,C].splice(2,1,[B]) => [A,B]
            // In the former case, removing C seems counter intuitive,
            // because it is not at index 1 when calling splice.
            // We do this before changing canonicalStartIndex, so that the
            // intention is still included in the value
            if(idx >= canonicalStartIndex && idx < canonicalStartIndex + deleteCount)
                // don't delete this two times ...
                // I think this makes sense, because
                deleteCount -= 1;

            // We change canonicalStartIndex here, because I think that we
            // we can preserve a semantic of insert one node after another
            // I.e. for drag and drop interfaces or so:
            //      In: [A,B,C,D,E] to insert B:(1) after D:i(3)
            //      Do: [A,B,C,D,E].splice(D.index + 1, 0, [B]) => [A,C,D,B,E]
            // FIXME: For PropertyCollection this is not implemented in splice
            // and the Atem-CPS-DeveloperTool/cpsPanel/collection-controller
            // takes care of this case (in moveCPSElement) so this is a
            // deviation of that splice API! I'm not sure which version
            // is better, so I implement changing canonicalStartIndex
            // here and we'll have to re-evaluate later.
            // Eventually I wan't to have all splice APIs implemented consistently!

            // don't make it smaller than 0!
            if(idx <= canonicalStartIndex && canonicalStartIndex > 0)
                canonicalStartIndex -= 1;
        }
        // this._children.length might have changed while preparing the moves
        canonicalStartIndex = Math.min(canonicalStartIndex, this._children.length);

        // END MOVING

        // PERFORM
        args = [canonicalStartIndex, deleteCount];
        Array.prototype.push.apply(args, insertions);
        deleted = Array.prototype.splice.apply(this._children, args);

        // CLEANUP DELETIONS
        for(i=0,l=deleted.length;i<l;i++) {
            // assert item not in insertions!
            item = deleted[i];
            data = this._childrenData.get(item);
            this._childrenData.delete(item);
            item.offPropertyChange(data[1]);
            item.parent = null;
            this.removeSubtreeIds(item);
            if(root) {
                // must also clean all children
                item.lostRoot();
                root.removeFromTree(item);
            }
            this._unsubscribeFromStyleChange(item);
        }

        // REGISTER INSERTIONS
        for(i=0,l=insertions.length;i<l;i++) {
            item = insertions[i];
            idx = canonicalStartIndex + i;

            if(item.parent === this) {
                // This was a move (same parent)
                // Keep the subscription, and just update index.
                this._childrenData.get(item)[0] = idx;
                item.updateIndex();
                continue;
            }

            if(item.parent !== null)
                // Came from another parent.
                item.parent.remove(item);

            // property changes in ['subtree', 'id', 'classes'] trigger themselves
            // a property change event for subtree in this node.
            subscription = item.onPropertyChange(['subtree', 'id', 'classes']
                                    , [this, '_childSubtreeChangeHandler']);
            this._childrenData.set(item, [idx, subscription]);
            item.parent = this; // calls item.updateIndex();
            this.addSubtreeIds(item);
            this._subscribeToStyleChange(item);
            if(root)
                item.gainedRoot();
        }

        delta = insertions.length - deleted.length - moveIndexes.length;
        insertionsEndIndex = canonicalStartIndex + insertions.length;
        for(i=0,l=this._children.length;i<l;i++) {
            item = this._children[i];
            if(i>=canonicalStartIndex && i<insertionsEndIndex)
                // we just covered that in the insertions loop.
                continue;

            if((indexChanged = item.index !== i))
                // update index
                this._childrenData.get(item)[0] = i;

            if(delta || indexChanged)
                // if delta: tailIndex changed for all
                item.updateIndex();
        }

        // TODO: edge case: If there was a move but it didn't
        // change anything, this would still _triggerPropertyChange.
        // we could save a list of children ids or something at the
        // beginning and compare to at the end to be certain.
        if(deleted.length || insertions.length || moveIndexes.length)
            this._triggerPropertyChange(['children', 'subtree']);
        return deleted;
    };

    _p.remove = function(item) {
        var idx = this.find(item);
        if(idx === false)
            throw new OMAError([this, 'can\'t remove', item ,'because',
                                'it is not a child.'].join(' '));
        this.splice(idx, 1);
        return true;
    };

    _p.add = function(item) {
        this.splice(this._children.length, 0, item);
    };

    _p.query = function(selector) {
        return this.root.query(selector, this);
    };

    _p.queryAll = function(selector) {
        return this.root.queryAll(selector, this);
    };

    _p.getComputedStyle = function() {
        return this.root.getComputedStyleFor(this);
    };

    _p._triggerCpsChange = function(){
       clearTimeout(this._cpsChange.timeoutId);
       var eventData = this._cpsChange.eventData;
       this._cpsChange.timeoutId = null;
       this._cpsChange.eventData = [];
       this._trigger('CPS-change', eventData);
    };

    _p._cpsChangeHandler = function(subscriberData, channelKey, eventData) {
        // The styledicts are already debounced so that they fire only
        // once after all sync tasks are done. Debouncing here could still
        // be useful to create less events, however, the subscriber will
        // have to debounce as well. Maybe, we could try to shift the
        // StyleDict debouncing to here then also changes of this item's
        // children will be held back (but they do the same, so a propper
        // waiting time for 10 ms in the subscriber is maybe best)
        if(eventData)
            this._cpsChange.eventData.push(eventData);
        if(this._cpsChange.timeoutId)
            // FIXME: not sure if I should throttle or debounce here
            // OR nothing and let an upper level decide.
            // A similar situation is with the "change" event in StyleDict
            // clearTimeout here is "debouncing"
            // return here is "throttling"
            clearTimeout(this._cpsChange.timeoutId);
            //return;

            // Now an event is scheduled, so there's no need for a further
            // action. In the future, we may pass a promise around to trigger
            // when the current task has finished. Similar considerations
            // are in StyleDict.js at Styledict.prototype._nextTrigger
            //clearTimeout(this._cpsChange.timeoutId);
        this._cpsChange.timeoutId = setTimeout(this._cpsChange.trigger);
    };

    _p.flushStyleChanges = function() {
        var style, i, l;
        if(this._cpsChange.timeoutId)
            clearTimeout(this._cpsChange.timeoutId);
        this._cpsChange.timeoutId = null;
        this._cpsChange.eventData = [];
        style = this.getComputedStyle();
        style.flushStyleChanges('change');
        for(i=0,l=this._children.length;i<l;i++)
            this._children[i].flushStyleChanges();
    };

    _p._unsubscribeFromStyleChange = function(item) {
        var changeSubscriptions = this._changeSubscriptions
          , subscription, k
          ;
        if(!changeSubscriptions)
            return;
        if(!item) {
            // without item remove all subscriptions
            for(k in changeSubscriptions) {
                subscription = changeSubscriptions[k];
                subscription[0].off(subscription[1]);
                delete changeSubscriptions[k];
            }
        }
        else {
            k = item === this ? '_styleDict_' : item.nodeID;
            subscription = changeSubscriptions[k];
            if(subscription) {
                subscription[0].off(subscription[1]);
                delete changeSubscriptions[k];
            }
            // else: not subscribed, should we fail here?
        }
    };

    _p._subscribeToStyleChange = function(item) {
        var changeSubscriptions = this._changeSubscriptions
          , callback
          , style
          , k, subscription
          ;
        if(!changeSubscriptions)
            return;
        // TODO: that callback array could be a fixed property of this.
        callback = [this, '_cpsChangeHandler'];
        k = item === this ? '_styleDict_' : item.nodeID;
        if(k in changeSubscriptions)
            // already subscribed, should we fail here?
            return;
        if(item === this) {
            // If this node loses root. We must handle that.
            style = this.getComputedStyle();
            subscription = [style, style.on('change', callback)];
        } else
            subscription = [item, item.on('CPS-change', callback)];
        changeSubscriptions[k] = subscription;
    };

    _p.lostRoot = function() {
        var i, l;
        assert(!this.root, this + 'must not have a root.');
        this._unsubscribeFromStyleChange(this);
        for(i=0,l=this._children.length;i<l;i++)
            this._children[i].lostRoot();
    };

    _p.gainedRoot = function() {
        var i, l;
        assert(!!this.root, this + 'must have a root.');
        this._subscribeToStyleChange(this);
        for(i=0,l=this._children.length;i<l;i++)
            this._children[i].gainedRoot();
    };

    /**
     * When there is a listener for CPS-change the first time, this will
     * subscribe to all it's children and to its computedStyle to get the
     * message. The children will subscribe themselve to all their children.
     *
     * NOTE: currently we only register changes from StyleDict, that means
     * the CPS model, we don't know about changes in the OMA.
     *
     * FIXME! we need to "clean up" subscriptions when an element looses
     * root (i.e. is removed from parent).
     */
    _p._initCPSChangeEvent = function() {
        var changeSubscriptions = this._changeSubscriptions
          , children, i, l
          ;
        if(changeSubscriptions === null) {
            // only if this is the first subscription:
            changeSubscriptions = this._changeSubscriptions = Object.create(null);
            Object.defineProperty(changeSubscriptions, 'counter', {
                value: 0
              , writable: true
              , enumerable: false
            });
            if(this.root)
                // only if we have root
                this._subscribeToStyleChange(this);
            children = this._children;
            for(i=0,l=children.length;i<l;i++)
                this._subscribeToStyleChange(children[i]);
        }
        changeSubscriptions.counter += 1;
    };

    _p._deinitCPSChangeEvent = function(subscriberID) {
        //jshint unused:false
        var k, subscription
          , changeSubscriptions = this._changeSubscriptions
          ;
        if(!changeSubscriptions)
            return;
        changeSubscriptions.counter -= 1;
        if(changeSubscriptions.counter === 0)
            this._unsubscribeFromStyleChange();
        this._changeSubscriptions = null;
    };

    /**
     * Use "CPS-change" this as an indicator to schedule a redraw;
     */
    _p.on = function(channel, subscriberCallback, subscriberData) {
        // TODO: a beforeOnHook('change', method) would be nice here
        // See also the comment in _p.off
        var i,l;
        if(channel instanceof Array) {
            for(i=0,l=channel.length;i<l;i++)
                if(channel[i] === 'CPS-change') {
                    this._initCPSChangeEvent();
                    break;
                }
        }
        else if(channel === 'CPS-change')
            this._initCPSChangeEvent();

        return this._on(channel, subscriberCallback, subscriberData);
    };

    _p.off = function(subscriberID) {
        // will raise if not subscribed, so it happen before _deinitChangeEvent
        var result = this._off(subscriberID), i,l;
        // TODO: this requires knowledge of the structure of emitterMixin
        // subscriberIDs! That is a bit unfortunate.
        // A solution would be a afterOffHook('change', method) here.
        // I consider that overengineering for the moment.
        if(subscriberID[0] instanceof Array)
            for(i=0,l=subscriberID.length;i<l;i++)
                if(subscriberID[i][0] === 'CPS-change') {
                    this._deinitCPSChangeEvent();
                    break;
                }
        else if(subscriberID[0] === 'CPS-change')
            this._deinitCPSChangeEvent();

        return result;// usually undefined
    };

    // FIXME: I'd prefer the bloomfilter stuff within
    // SelectorEngine. Using probably a central WeakMap
    // and an event when the bloomfilter needs to be
    // pruned. _getBloomFilterData could stay a part
    // of _Node tough??? we'll, it's tighly connected
    // to the selectors, so no, can all be in selector
    // engine. It could become a dependency injected
    // bundle there, if more tuning is needed!
    // All of these data-fields are public APIs anyways
    // so, a event is needed if one of the bloom filter
    // data fields changes.
    _p._getBloomFilterData = function() {
        var data
          , id, k
          , classes
          ;
        data = [this.type];

        id = this.id;
        if(id)
            data.push('#' + id);

        classes = this._classes;
        for(k in classes)
            data.push('.' + k);

        return data;
    };

    _p.getBloomFilter = function() {
        var bf = this._bloomFilter
          , data,i,l
          ;
        if(!bf) {
            // we cache this but we will have to invalidate on many occasions
            // Changes in the parent tree, as well as changes of this nodes
            // id and classes
            // A cache also speeds up the creation of the filter, because we
            // can just do: this.parent.getBloomFilter().clone()
            // and the add this nodes signature

            if(this.parent)
                bf = this.parent.getBloomFilter().clone();
            else
                // I think we don't need a particular big filter
                // This must be the same as in SelectorEngine (Constructor)
                // FIXME: put this in a shared module, so that the
                // synchronization of this setup is explicit!
                bf = new bloomfilter.BloomFilter(512, 5);

            this._bloomFilter = bf;
            data = this._getBloomFilterData();
            for(i=0,l=data.length;i<l;i++)
                bf.add(data[i]);
        }
        return bf;
    };

    return _Node;
});

define('Atem-CPS/CPS/StyleDict',[
    'Atem-CPS/errors'
  , 'Atem-CPS-whitelisting/whitelisting'
  , 'Atem-CPS/emitterMixin'
  , 'Atem-CPS/OMA/_Node'
  , './elements/SelectorList'
], function(
    errors
  , whitelisting
  , emitterMixin
  , _OMANode
  , SelectorList
) {
    "use strict";

    var KeyError = errors.Key
      , ReceiverError = errors.Receiver
      , AssertionError = errors.Assertion
      , CPSRecursionKeyError = errors.CPSRecursionKey
      , assert = errors.assert
      , propertyChangeEmitterSetup
      ;

    propertyChangeEmitterSetup = {
          stateProperty: '_dependants'
        , onAPI: 'onPropertyChange'
        // TODO: Not deleting the channel will take a bit more memory but in turn
        // needs less garbadge collection
        // we could delete this when the key is removed from this._dict
        // and not added again, supposedly in _rebuildIndex and _propertyChangeHandler
        // delete this._dependants[key];
        // however, _rebuildIndex and updateDictEntry are not part of
        // the concept of emitter/channel thus the emitter should
        // provide a method: removeProperty(channel) which in turn can be called by
        // _rebuildIndex and updateDictEntry. Also, that would throw an error
        // if there are any subscriptions left. (we may add a on-delete event)
        // for that case!?
        , offAPI: 'offPropertyChange'
        , triggerAPI: '_triggerPropertyChange'
    };

    /**
     * StyleDict is an interface to a List of CPS.Rule elements.
     *
     * rules: StyleDict will pull the rules for element from controller
     *        when needed, it uses controller.getRulesForElement(element)
     *        controller, in turn will invalidate the rules via: StyleDict.prototype.invalidateRules
     */
    function StyleDict(controller, element, rules /* default: null */) {
        // I prefer: this.get.bind(this);
        // But this method is called a lot and thus the closure is faster.
        // see: http://jsperf.com/bind-vs-native-bind-run
        // that may change in the future
        var self = this;

        // new GetAPI(this); => would make a cleaner definition, but maybe slows things down???
        this.getAPI = {
            get: function(key) {
                self._subscribeTo(self, key);
                return self.get(key);
            }
          , query: function(node, selector) {
                self._subscribeTo(node, selector);
                return node.query(selector);
            }
          , genericGetter: function(item, key){
                return self._genericGetter(item, key);
            }
        };


        Object.defineProperty(this, 'element', {
            value: element
          , enumerable: true
        });
        this._controller = controller;
        this._getting = {
            recursionDetection: Object.create(null)
          , stack: []
          , current: null
        };

        this._rules = rules || null;
        this._dict = null;
        this._cache = Object.create(null);

        // subscriptions to the "add" channel of each propertyDict in this._rules
        this._dictSubscriptions = [];

        // subscriptions to the active key in a propertyDict
        //
        // triggered on "change" and "delete" (also on "add" but we subscribe later)
        //
        // cache_key refers to the same key here and in the propertyDict
        // {
        //    cache_key: [propertyDict, subscriptionUid] /* information needed to unsubscribe */
        // }
        this._propertySubscriptions = Object.create(null);

        // All current subscriptions to dependencies of the cache.
        // One subscription can be used by many _cache entries.
        // {
        //    subscriptionUid: [
        //        /* information needed to unsubscribe */
        //          item // the item/element/object subscribed to
        //        , subscriberId // needed to unsubscribe, returned when subscribing
        //
        //        /* information to control subscribing and unsubscribing */
        //        , object // set of _cache keys subscribed to this
        //        , 0 // counter, number of dependencies, same as previous Object.keys(object).length
        //    ];
        //}
        this._cacheSubscriptions = Object.create(null);

        // the subscriptionUids for each key in cache
        // {
        //    cache_key: [subscriptionUid, ...]
        // }
        this._cacheDependencies = Object.create(null);

        // emitter: PropertyChange
        // Adds this[propertyChangeEmitterSetup.stateProperty]
        // which is this._dependencies
        emitterMixin.init(this, propertyChangeEmitterSetup);

        // adds the default this._channel
        emitterMixin.init(this);

        this._subscriptionUidCounter = 0;
        this._subscriptionUids = new WeakMap();
        this._invalidating = 0;

        // we can prepare this callback once for all channels
        // see also _p._nextTrigger
        this._delayedTriggerData = Object.create(null);
        this.__delayedTrigger = this._delayedTrigger.bind(this);
    }

    var _p = StyleDict.prototype;
    _p.constructor = StyleDict;

    /**
     * adds the methods:
     *    onPropertyChange(propertyName, subscriberData) // returns subscriptionId
     *    offPropertyChange(subscriptionId)
     *    _triggerPropertyChange(propertyName, eventData)
     *
     * these are used mostly for inter-StyleDict communication / cache invalidation
     */
    emitterMixin(_p, propertyChangeEmitterSetup);

    /**
     * adds the methods:
     *    on(channel, subscriberData) // returns subscriptionId
     *    off(subscriptionId)
     *    _trigger(channel, eventData)
     */
    emitterMixin(_p);

    _p._getSubscriptionUid = function(item, key) {
        var uid;
        if(item instanceof _OMANode) {
            if(key instanceof SelectorList)
                // TODO: currently all subtree changes are handled as one.
                // I think we may become finer grained here. Like for example
                // only fire if a change in a subtree affects the result
                // of item.query(key); then, the SubscriptionUid must be
                // different for different selectors. Until then all selectors
                // for a _OMANode have the same SubscriptionUid:
                return item.nodeID + 'S:$';// + key
            else
                return item.nodeID + ':' + key;
        }
        else if(item instanceof StyleDict)
            return '!' + item.element.nodeID + ':' + key;
        // fallback, rare cases
        uid = this._subscriptionUids.get(item);
        if(!uid) {
            uid = '?' + (this._uidCounter++) + ':' + key;
            this._subscriptionUids.set(item, uid);
        }
        return uid;
    };

    _p._unsubscribeFromAll = function(key) {
        // we have probably collected dependencies for this cache, since
        // the cache is now invalidated, the dependencies can be unsubscribed
        var dependencies = this._cacheDependencies[key]
          , subscriptionUid
          , subscription
          , i, l
          ;
        if(!dependencies)
            return;
        for(i=0,l=dependencies.length;i<l;i++) {
            subscriptionUid = dependencies[i];
            subscription = this._cacheSubscriptions[subscriptionUid];
            // remove dependency key from subscription
            delete subscription[2][key];//index
            subscription[3]--;//counter
            if(subscription[3])
                continue;
            // no deps left
            subscription[0].offPropertyChange(subscription[1]);
            delete this._cacheSubscriptions[subscriptionUid];
        }
        delete this._cacheDependencies[key];
    };

    /**
     *  if key is in cache, invalidate the cache and inform all subscribers/dependants
     */
    _p._invalidateCache = function(key) {
        // NOTE:
        // This event should fire whenever the value of the dict
        // changed in a way, so that e.g. a redraw of a glyph is needed
        // _invalidateCache seems resonable at the moment, but it might be
        // a source of subtle bugs, when the event was not fired but should
        // have been. So keep an eye on this.
        this._nextTrigger('change', key);

        if(!(key in this._cache)) {
            // Looks like this is history now. I'm keeping the assertion
            // however to spot regressions.
            assert(!this._cacheDependencies[key] || !this._cacheDependencies[key].length
                , 'Because the key "' + key + '" is not cached, there must not be any dependency or dependant');
            return;
        }
        // remove this this._invalidatingKeys when there are no errors
        if(!this._invalidatingKeys)
            this._invalidatingKeys = Object.create(null);
        assert(!(key in this._invalidatingKeys), 'Key ' + key + 'is beeing invalidated at the moment: '+ Object.keys(this._invalidatingKeys));
        this._invalidatingKeys[key] = true;


        this._invalidating +=1;
        delete this._cache[key];
        this._unsubscribeFromAll(key);
        this._triggerPropertyChange(key);
        this._invalidating -= 1;
        delete this._invalidatingKeys[key];
        assert(!(key in this._cache), '"'+key + '" was just deleted, '
                    + 'yet it is still there: ' + Object.keys(this._cache));
    };

    /**
     * Schedule an event to fire after all synchronous tasks are finished
     * using a simple setTimeout(,0); a subsequent call to this._nextTrigger
     * will delay the timeout again and add it's data to the scheduled data.
     *
     * For now this is enough debouncing, however, we may need better
     * mechanics in the future.
     */
    _p._nextTrigger = function(channelKey, data) {
        /*global setTimeout:true*/
        // FIXME: use https://github.com/YuzuJS/setImmediate/blob/master/setImmediate.js
        //        instead of setTimeout, everywhere not just here!
        var channel = this._delayedTriggerData[channelKey];
        if(!channel)
            channel = this._delayedTriggerData[channelKey] = {
                timeoutID: null
              , data: []
            };
        if(arguments.length > 1)
            channel.data.push(data);
        if(channel.timeoutID)
            return;
            // all _nextTrigger calls will hapen during one synchronous process
            // so there's no need to clearTimeout
            // FIXME: TODO: in the future there may be asynchronisity introduced
            // via the renderer. Then we should switch to a promise that triggers
            // when it's done (using the "then" interface of the promise)
            // clearTimeout(channel.timeoutID);

        channel.timeoutID = setTimeout(this.__delayedTrigger, 0, channelKey);
    };

    /**
     * I hope we don't stick with this exactly like it is here, but right
     * now I need this kind of control! Used via _Node.flushStyleChanges
     * in Bauhaus Emblem Font to break an infinite feedback loop.
     *
     * I think this may help to find a better approach for all the messaging
     * in stylDict and OMA, so it's good to have it here, even though the
     * concept is sub-optimal.
     */
    _p.flushStyleChanges = function(channelKey) {
        /*global clearTimeout:true*/
        var channel = this._delayedTriggerData[channelKey];
        if(!channel) return;
        if(channel.timeoutID)
            clearTimeout(channel.timeoutID);
        delete this._delayedTriggerData[channelKey];
    };

    /**
     * This is only ever called via _nextTrigger and the
     * this.__delayedTrigger bound method
     */
    _p._delayedTrigger = function(channelKey) {
        var channel = this._delayedTriggerData[channelKey];
        if(!channel)
            throw new AssertionError('The data for "'+ channelKey +'" is missing.');
        delete this._delayedTriggerData[channelKey];
        this._trigger(channelKey, (channel.data.length ? channel.data : undefined));
    };

    _p._invalidateCacheHandler = function(subscriptionUid) {
        assert(subscriptionUid in this._cacheSubscriptions, 'must be subscribed now');
        var dependencies = Object.keys(this._cacheSubscriptions[subscriptionUid][2])
          , i, l
          ;
        for(i=0,l=dependencies.length;i<l;i++)
            this._invalidateCache(dependencies[i]);
        assert(!(subscriptionUid in this._cacheSubscriptions), 'must NOT be subscribed anymore');
    };

    _p._subscribeTo = function(item, key) {
        var subscriberId
          , subscriptionUid = this._getSubscriptionUid(item, key)
          , current = this._getting.current
          , dependencies = this._cacheSubscriptions[subscriptionUid]
          , propertyName
          ;
        // add dependency current to subscriptionUid
        if(!dependencies) {
            if(typeof item.onPropertyChange !== 'function') {
                // NOTE, when the value at item[key] can change, that
                // onPropertyChange and offPropertyChange must be implemented
                // when item is "immutable", we don't need this
                return;
            }
            else {
                if(key instanceof SelectorList) {
                    assert(item instanceof _OMANode, 'When "key" is a Selector '
                                        +'"item" must be an OMA Node.');
                    // subtree is kind of a virtual property
                    propertyName = 'subtree';
                    // TODO: Can this be controlled finer?
                    // Se also the comment in _getSubscriptionUid at
                    //`if(key instanceof SelectorList)`
                }
                else
                    propertyName = key;
                subscriberId = item.onPropertyChange(propertyName, [this, '_invalidateCacheHandler'], subscriptionUid);
            }
            dependencies = this._cacheSubscriptions[subscriptionUid]
                         = [item, subscriberId, Object.create(null), 0];
        }
        else if(current in dependencies[2])
            // that cache already subscribed to item.key
            return;
        dependencies[2][current] = true;//index
        dependencies[3] += 1;// counter

        if(!this._cacheDependencies[current])
            this._cacheDependencies[current] = [];
        this._cacheDependencies[current].push(subscriptionUid);
    };

    _p._genericGetter = function (item, key) {
        var result;
        if(item === undefined) {
            // used to be a
            // pass
            // is this happening at ALL?
            // in which case?
            // is that case legit?
            // console.trace();
            // Note: we can't subscribe to this, so it is a fatal case.
            // No subscription means we can't recover
            throw new Error('trying to read "'+key+'" from an undefined item');
        }
        else if(item instanceof _OMANode) {
            var cs = item.getComputedStyle();
            this._subscribeTo(cs, key);
            result = cs.get(key);
        }
        else if(item.cpsGet) {
            // FIXME:
            // do we need this case at all? probably when item is a
            // PenStrokePoint.skeleton and key is on/in/out
            // I don't know if there's another case
            // This means, however that everything that has a cpsGet
            // will have to provide a `onPropertyChange` API (which makes totally sense)
            // arrays are obviously exceptions...
            // so, the do we need this subscription at all question arises again
            //
            // FIXME: can't we just not subscribe to this and do the same as with array
            // that is the original source of item must be subscribed to and =
            // fire if item changes...
            // it is probably happening in __get anyways, like this
            // cpsGetters.whitelist(this.element, key);
            // and then a this._subscribeTo(this.element, key)
            // REMEMBER: this code was extracted from a merge of
            // cpsGetters.generic plus cpsGetters.whitelist
            // so, in the best case, we wouldn't use this condition at all,
            // I think
            this._subscribeTo(item, key);
            result = item.cpsGet(key);
        }
        else if(item instanceof Array)
            result = whitelisting.arrayGet(item,key);
            // no subscription! the source of the Array should be subscribed
            // to and fire when the array changes
        else
            throw new KeyError('Item "'+item+'" doesn\'t specify a whitelist for cps, trying to read '+key);
        return result;
    };

    _p._fetchNewRules = function() {
        // Both, a rule and the element provide the `properties` interface.
        // Thus, "rules" is not exactly right here, we also have the
        // element in here.
        var rules = [[null, this.element, null]];
        Array.prototype.push.apply(rules,
                        //this call is most expensive
                        this._controller.getRulesForElement(this.element));
        return rules;
    };

    _p._loadRules = function(force) {
        if(this._rules === null || force)
            this._rules = this._fetchNewRules();
    };

    _p.getRules = function(includeElementProperties) {
        if(!this._dict) this._buildIndex();
        return this._rules.slice(includeElementProperties ? 0 : 1);
    };

    /**
     * Loads the rules if missing.
     * Initializes and indexes this._dict
     * Subscribes to propertyDict and property changes and updates
     */
    _p._buildIndex = function() {
        assert(this._dict === null, 'Index already initialized, run invalidateRules to purge it.');
        var i, l, j, ll, keys, key, properties, subscriberID;
        this._loadRules();
        this._dict = Object.create(null);
        for(i=0,l=this._rules.length;i<l;i++) {
            properties = this._rules[i][1].properties;

            subscriberID = properties.on('add', [this, '_propertyAddHandler'], i);
            this._dictSubscriptions.push([properties, subscriberID]);
            subscriberID = properties.on('update', [this, '_propertyUpdateHandler'], i);
            this._dictSubscriptions.push([properties, subscriberID]);


            keys = properties.keys();
            for(j=0, ll=keys.length; j<ll; j++) {
                key = keys[j];
                if(!(key in this._dict))
                    this._setDictValue(properties, key, i);
            }
        }
    };

    _p._unsubscribeFromDicts = function(){
        var i, l, subscription;
        for(i=0,l=this._dictSubscriptions.length;i<l;i++) {
            subscription = this._dictSubscriptions[i];

            // Uncaught UnhandledError: EmitterError:
            // Unsubscription without subscription from channel:
            //                  "add" with subscriberID: "1"
            subscription[0].off(subscription[1]);
        }
        this._dictSubscriptions = [];
    };

    _p._rulesEqual = function(rulesA, rulesB) {
        var i,l;
        if(rulesA.length !== rulesB.length)
            return false;
        for(i=0,l=rulesA.length;i<l;i++) {
            // rules[i] === [selectors, item, trace]
            // this._rules[i][1].properties is the really important item
            // at the moment. but an item that provides the `properties`
            // key make sure that the identity of the propertyDict doesn't
            // change (immutable). This is the case in
            // OMA/_Node and CPS/elements/Rule
            // FIXME: selectors and trace are right now used for UI/display
            // purposes are not changed now. We should handle changes there
            // as well! However, that should not change the speed gains that
            // we have from using checkRules over invalidateRules.
            // For now I accept this under-impelementation and not-updating
            // of the UI, to get the current tasks up and runnning.
            // Something like a set of appropriate events would be good.
            // Maybe ('ruleChanged', 'selectors') and ('ruleChanged', 'trace')
            // or such.
            if(rulesA[i][1] !== rulesB[i][1])
                return false;
        }
        return true;
    };

    /**
     * This is a different approach to invalidateRules. The strategy is
     * to be cheaper in the end, because we may not have to invalidate
     * all the caches if the new rules are not different from the old ones.
     *
     * However, we have to run the expensive call to this._getNewRules
     * instantly and can not postpone it, until it is really needed.
     *
     * But if there are rules now it is likely that they are used somewhere
     * and must update anyways. If there are no rules now, we don't fetch
     * new ones.
     *
     * FIXME: measure performance. Keep in mind that checkRules
     * may perform better when there are many dependencies
     * to the styleDict. However, when there are many subsequent
     * calls (tail-index changes a lot when items are added)
     * it may be cheaper to use invalidateRules for some cases
     * because that loads rules lazily when querried. When invalidateRules
     * is called subsequently without styleDict.get in between.
     * it should be cheaper. checkRules must get the
     * rules each time from selector engine which itself
     * is expensive. Having many rules to select from could
     * also move the benchmark in favor of invalidateRules,
     * if there are subsequent calls to it.
     */
    _p.checkRules = function() {
        if(!this._rules)
            // the rules will be loaded lazily when requested
            return;
        var newRules = this._fetchNewRules();
        if(this._rulesEqual(this._rules, newRules))
            return;
        this._setRules(newRules);
    };

    _p._invalidateDict = function() {
        var key;
        for(key in this._dict) {
            this._unsetDictValue(key);
            this._invalidateCache(key);
        }
        // needed if this._dict had no keys previously
        // because then this._invalidateCache would not run
        // for example when the rules changed from not providing keys to
        // now providing keys
        this._nextTrigger('change');
        this._dict = null;
    };

    /**
     * Use this when the PropertyCollection of this styleDict
     * changed so much that the this._rules (rules) list needs to be rebuild
     *
     * Changes in the PropertyCollection that are of this kind are:
     * added or removed Rules
     * SelectorList changes (it's always replacement) of Rules OR AtNamespaceCollections
     * A reset of the PropertyCollection (which does all of the above)
     *
     * The value of this StyleDict may not change, see therefore this.checkRules
     *
     * This doesn't include add/remove events of properties/propertyDicts,
     * we'll handle that on another level.
     *
     * if rules === null this._buildIndex (there this._loadRules) will
     * load them lazily.
     * this._buildIndex will be called lazily anyways.
     */
    _p._setRules = function(rules) {
        this._rules = rules || null;
        this._unsubscribeFromDicts();
        this._invalidateDict();
    };

    /**
     * invalidate the rules and let this._buildIndex fetch them lazily when
     * needed.
     */
    _p.invalidateRules = function() {
        this._setRules(null);
    };

    // not in use now
    _p._rebuildIndex = function() {
        this._invalidateDict();
        this._buildIndex();
    };

    _p._propertyUpdateHandler = function(data, channelKey, keys) {
        //jshint unused:false
        // If any of the propertyDicts fired it's update event we pass it along here
        // update, in contrast to change is fired when the propertyDict
        // changed but did not change it's value.
        // This is used for rendering in the ui only.
        this._nextTrigger('update');
    };

    /**
     * properties.onPropertyChange wont trigger on "add", because we won't
     * have subscribed to it by then.
     */
    _p._propertyAddHandler = function(data, channelKey, keys) {
        var i, l;
        for(i=0,l=keys.length;i<l;i++)
            this.__propertyAddHandler(data, channelKey, keys[i]);
    };

    _p.__propertyAddHandler = function(data, channelKey, key) {
        var newRuleIndex = data
          , currentRuleIndex = this._propertySubscriptions[key]
                    ? this._propertySubscriptions[key][2]
                    : undefined
          ;

        // Note: the lower index is more specific and must be used.
        // These are the indexes in this._rules of course. More specific
        // indexes come first.
        if(newRuleIndex > currentRuleIndex)
            return;
        else if(newRuleIndex < currentRuleIndex) {
            this._unsetDictValue(key);
            this._invalidateCache(key);
        }
        else if(currentRuleIndex === newRuleIndex)
            // When both are identical this means we don't have an "add"
            // event by definition! Something in the programming logic went
            // terribly wrong.
            throw new AssertionError('The old index must not be identical '
                        + 'to the new one, but it is.\n index: ' + newRuleIndex
                        + ' key: ' + key
                        + ' channel: ' + channelKey);
        this._setDictValue(this._rules[newRuleIndex][1].properties, key, newRuleIndex);
    };

    _p._setDictValue = function(properties, key, propertiesIndex) {
        assert(!(key in this._propertySubscriptions), 'there may be no dependency yet!');
        var subscription = this._propertySubscriptions[key] = [];
        this._dict[key] = properties.get(key);
        subscription[0] = properties;
        subscription[1] = properties.onPropertyChange(key, [this, '_propertyChangeHandler'], properties);
        subscription[2] = propertiesIndex;
    };

    _p._unsetDictValue = function(key) {
        var subscription = this._propertySubscriptions[key];
        subscription[0].offPropertyChange(subscription[1]);
        delete this._dict[key];
        delete this._propertySubscriptions[key];
    };

    /**
     *  remake the this._dict entry for key
     */
    _p._updateDictEntry = function(key) {
        var i, l, properties;
        this._unsetDictValue(key);
        for(i=0,l=this._rules.length;i<l;i++) {
            properties = this._rules[i][1].properties;
            if(!properties.has(key))
                continue;
            this._setDictValue(properties, key, i);
            break;
        }
        this._invalidateCache(key);
    };

    _p._propertyChangeHandler = function(properties, key, eventData) {
        switch(eventData) {
            case('change'):
                // The value is still active and available, but its definition changed
                this._dict[key] = properties.get(key);
                this._invalidateCache(key);
                break;
            case('delete'):
                // the key of properties was removed without replacement
                // remove the entry and look for a new one
                this._updateDictEntry(key);
                break;
            default:
                throw new ReceiverError('Expected an event of "change" or '
                                       + '"delete" but got "'+eventData+'" '
                                       + '(propertyChangeHandler for "'+key+'")');
        }
    };

    Object.defineProperty(_p, 'keys', {
        get: function() {
            if(!this._dict) this._buildIndex();
            return Object.keys(this._dict);
        }
    });

    /**
     * Return an instance of PropertyValue or null if the key is not defined.
     */
    _p._getProperty = function(key) {
        if(!this._dict) this._buildIndex();
        return (key in this._dict) ? this._dict[key] : null;
    };

    _p.__get = function(key, errors) {
        var param = this._getProperty(key)
          , result
          ;
        if(param) {
            result = param.value.evaluate(this.getAPI);
            // _validator should throw ValueError if invalid, but StyleDict
            // will make a KeyError out of almost any error, regardless.
            // _validator may perform post processing on the result e.g.
            // if  it eases further usage of the value. It's the decision
            // of the app author. If not, validator must return the result
            // unaltered on success.
            return this.element.checkPropertyValue(key, result);
        }
        // This will become part of the error message if the following
        // attempt to read the key raises an error. Otherwise there is
        // no error, because a value was found.
        errors.push(key + ' not found for ' + this.element.particulars);
        // Reading from the OMA node directly.
        // At the moment this is a placeholder. There is no onPropertyChange
        // method for OMA-Nodes present yet.
        this._subscribeTo(this.element, key);
        // will throw KeyError if key can't be returned
        result = this.element.cpsGet(key);


        return result;
    };
    /**
     * Look up a property in this.element according to the following
     * rules:
     *
     * 1. If `key' is "this", return the OMA Element of this StyleDict
     * (this.element). We check "this" first so it can't be overridden by
     * a @dictionary rule.
     *
     * 2. If `key' is defined in CPS its value is returned.
     *
     * 3. If key is available/whitelisted at this.element, return that value.
     *
     * 4. throw KeyError.
     *
     * If `key' is a registered property type, the return value's type is
     * the property type or an error will be thrown;
     * Otherwise, the return value may be anything that is accessible
     * or constructable from CPS formulae, or a white-listed value on
     * any reachable element.
     */
    _p._get = function(key) {
        var errors = [], getting;
        if(key === 'this')
            return this.element;
        getting = this._getting;

        if(key in getting.recursionDetection)
            throw new CPSRecursionKeyError('Looking up "' + key
                            + '" is causing recursion in the element: '
                            + this.element.particulars);

        getting.recursionDetection[key] = true;
        getting.stack.push(getting.current);
        getting.current = key;
        try {
            return this.__get(key, errors);
        }
        catch(error) {
            // PropertyLanguageError, KeyError, ValueError are caught here for
            // example. It is however hard to expect from the current users
            // of StyleDict to differentiate between the myriad of possible
            // ErrorTypes, leaving unprepared code in a bad situation!
            // Maybe we can establsish that StyleDict triggers an event
            // when it has erroneous entries, so an external observer/UI
            // could inform the user and show the correct place to act.
            //
            // Casting anything to KeyError means that we don't get much
            // information from a failing get. However, a normal user only
            // needs to know that there was a fail.
            // It is in a way an appropriate answer. It is however
            // crucial to develop a way to deal with the details of these
            // errors (see above: external observer/UI).
            if(error instanceof AssertionError)
                // This hints to a programming error. We really want this
                // to be annoing so that it gets fixed soon.
                throw error;
            errors.push(error);
            if(error instanceof CPSRecursionKeyError)
                throw error;
            throw new KeyError(this.element + ': '+ errors.join('\n----\n'), errors[0] && errors[0].stack || undefined);
        }
        finally {
            delete getting.recursionDetection[key];
            getting.current = getting.stack.pop();
        }
    };
    /**
     * If the property at "key" does not exist or is otherwise faulty,
     * default is returned if provided, otherwise KeyError is raised.
     *
     * Also CPSRecursionKeyError appears but that is an instance of KeyError.
     *
     * Even using "default" won't guard from AssertionErrors. These errors
     * point to programming mistakes and need to be taken care off, so we
     * want them to be annoing ;)
     */
    _p.get = function(key/* [ , defaultVal optional ] */) {
        if(this._invalidating)
            throw new AssertionError('This is invalidating, so get is illegal: '
                    + this.element.type + ' ' + this.element.nodeID);

        var val = this._cache[key], hasDefault, defaultVal;
        hasDefault = arguments.length >= 2;
        if(hasDefault) defaultVal = arguments[1];
        // Replay the behavior when asked for this thing the first time.
        // Also, all cache subscriptions bound to a cache entry are still
        // related. Without this we had problems with an assertion in
        // _invalidateCache.
        if(val instanceof Error) {
            if(hasDefault) return defaultVal;
            throw val;
        }
        else if(val !== undefined)
            return val;
        // no cache hit, query it
        try {
            this._cache[key] = val = this._get(key);
        }
        catch(error) {
            if(error instanceof CPSRecursionKeyError) {
                // this is pre querying key
                if(hasDefault) return defaultVal;
                throw error;
            }
            else {
                // throw only real Errors! (how else could we easily cache
                // errors next to legit values)
                assert(error instanceof Error, 'Caught something, but it is not an instance of Error: ' + error);
                this._cache[key] = error;
                if(hasDefault) return defaultVal;
                throw error;
            }
        }
        return val;
    };

    return StyleDict;
});

define('Atem-CPS/_Controller',[
    'Atem-CPS/errors'
  , 'Atem-CPS/CPS/elements/Rule'
  , 'Atem-CPS/CPS/StyleDict'
], function(
    errors
  , Rule
  , StyleDict
) {
    "use strict";

    var CPSError = errors.CPS
      , NotImplementedError = errors.NotImplemented
      , assert = errors.assert
      ;

    function Controller(ruleController, rootNodeFactory, selectorEngine) {
        this._ruleController = ruleController;

        this._selectorEngine = selectorEngine;
        this._root = rootNodeFactory(this);

        // {element: [styleDict, elementSubscription]}
        this._elementsData = new Map();


        // {ruleKey:[propertyCollection, subscriptionID, [element.nodeID, ...]]}
        this._rules = Object.create(null);
        this._lastElementRules = new WeakMap();
    }

    var _p = Controller.prototype;

    /**
     * StyleDict constructor, can be changed by inheritance or
     * monkey patched on instances
     */
    _p.StyleDict = StyleDict;

    Object.defineProperty(_p, 'rootNode', {
        get: function(){ return this._root;}
    });

    _p.updateChangedRule = function(async, ruleKey) {
        return this._ruleController.reloadRule(async, ruleKey);
    };

    /**
     * Return a string that will be used with RuleController.getRule(false, cpsName);
     *
     * Applications can decide themselves which CPS files apply to which
     * part of thee OMA-tree.
     *
     * May return null, if the element has no associated cps file.
     */
    _p.getCPSName = function(element) {
        // jshint unused:false
        throw new NotImplementedError('getCPSName must be implemented by a subclass.');
    };


    _p._manageElementRuleChanges = function(element, newRuleKey) {
        var lastRuleKey;
        if(this._lastElementRules.has(element)) {
            lastRuleKey = this._lastElementRules.get(element);
            if(lastRuleKey === newRuleKey)
                // nothing to do, because nothing changed
                return;
            // clean up, lastRuleKey is now outdated
            if(this._rules[lastRuleKey])
                this._rules[lastRuleKey][2].delete(element);
        }

        if(newRuleKey === null || newRuleKey === undefined)
            // no newRuleKey
            this._lastElementRules.delete(element);
        else
            this._lastElementRules.set(element, newRuleKey);
    };

    /**
     * Used from within _createStyleDict and StyleDict, don't use it
     * anywhere else! This is not cached here and pretty expensive.
     * If needed we will add a rules property getter to StyleDict.
     */
    _p.getRulesForElement = function(element) {
        var ruleKey = this.getCPSName(element)
          , propertyCollection
          , subscriptionID
          , rules
          ;
        this._manageElementRuleChanges(element, ruleKey);

        // An element needs not have any rules attached to it
        if(ruleKey === null)
            return [];
        if(!this._rules[ruleKey]) {
            // subscribe only once, this saves calling us a lot of handlers
            // for each styledict
            // we are currently not unsubscribing, because we don't
            // unload propertyCollections ever.
            // TODO: unload propertyCollections if they are not used anymore.
            //       Probably add a reference counter for that. Maybe this
            //       is better done in _ruleController. The unsubscription
            //       here could happen on('destroy');
            propertyCollection = this._ruleController.getRule(false, ruleKey);
            subscriptionID = propertyCollection.on('structural-change', [this, '_updateRule'], ruleKey);
            this._rules[ruleKey] = [propertyCollection, subscriptionID, new Set()];
        }
        else
            propertyCollection = this._rules[ruleKey][0];

        rules = this._selectorEngine.getMatchingRules(propertyCollection, element);
        this._rules[ruleKey][2].add(element);
        return rules;
    };

    _p._getStyleDict = function(element) {
        var data = this._elementsData.get( element );
        // undefined or a StyleDict instance
        return data && data[0];
    };

    _p._checkElementRules = function(element) {
        var styleDict = this._getStyleDict( element );
        if(styleDict)
            //styleDict.invalidateRules();
            styleDict.checkRules();
    };

    _p._checkElementRulesHandler = function(element) {
        this._checkElementRules(element);
        element.walkTreeDepthFirst(this._checkElementRules.bind(this));
    };

    _p._createStyleDict = function(element) {
        // rules will be pulled lazily by styleDict, when needed
        var rules = null // rules = this.getRulesForElement(element)
          , styleDict = new this.StyleDict(this, element, rules)
           // Changes in the elements "id", "index", "classes" must trigger
           // styleDict.checkRules in elements and all descendants,
           // (if they have a styleDict already.)
           // This is because these properties can change which rules apply
           // to the element and its children.
           // Even when the index does not change, a change in the parents
           // children list can change the properties. If this element
           // consumes a rule via negative index, e.g: `:i(-1)`, and then
           // another rule is appended to the parent, then this element is
           // not last anymore, and the rule is misscached. Thus I added
           // the key 'tail-index' for onPropertyChange.
          , subscription = element.onPropertyChange(['index', 'tail-index', 'classes', 'id']
                                , [this, '_checkElementRulesHandler'], element)
          ;
        this._elementsData.set(element, [styleDict, subscription]);
        return styleDict;
    };

    /**
     * returns a single StyleDict to read the final cascaded, computed
     * style for that element.
     */
    _p.getComputedStyle = function(element) {
        if(element.root !== this._root)
            throw new CPSError('getComputedStyle with an element that is not '
                + 'part of the multivers is not supported' + element);
        // this._styleDicts cache set in _createStyleDict
        return this._getStyleDict(element) || this._createStyleDict(element);
    };

    /**
     * Update each styleDict that uses the rule called `ruleKey`
     */
    _p._updateRule = function(ruleKey) {
        var elements = Array.from(this._rules[ruleKey][2])
          , styleDict
          , i, l
          ;
        for(i=0,l=elements.length;i<l;i++) {
            styleDict = this._getStyleDict( elements[i] );
            // This is actually not true, because getRulesForElement
            // is a public interface and it doesn't create the styledict
            // but, the way it is used now, this is true, and I want to
            // find posssible bugs related to this miss behavior.
            // FIXME: maybe getRules for element should create the styleDict
            // or _createStyleDict should register the element in this._rules,
            // or we just continue here when everything looks alright after
            // a while.
            assert(!!styleDict, 'Element must have a StyleDict when it\'s '
                                                + 'associated with a rule');
            styleDict.checkRules();
        }
    };

    _p._checkScope = function(_scope) {
        var i, scope;
        if(!_scope)
            return [this._root];
        scope = _scope instanceof Array
            ? _scope
            : [_scope]
            ;
        for(i=0;i<scope.length;i++)
            if(scope[i].root !== this._root)
                throw new CPSError('Query with a scope that is not '
                    +'part of the multivers is not supported '
                    + scope[i].particulars);
        return scope;
    };

    _p.purgeNode = function(node) {
        var nodes = [], element = node, elementData;
        if(node.parent)
            throw new CPSError('Can\'t purge when node has a parent.');
        do {
            // remove the styleDict and all references to it
            this._manageElementRuleChanges(element, null);

            elementData = this._elementsData.get(element);
            if(elementData) {
                element.offPropertyChange(elementData[1]);
                elementData[0].invalidateRules();
                this._elementsData.delete(element);
            }

            // do this for all children as well
            Array.prototype.push.apply(nodes, element.children);
        } while((element = nodes.pop()));
    };

    _p.queryAll = function(selector, scope) {
        var result = this._selectorEngine.queryAll(this._checkScope(scope), selector);
        // monkey patching the returned array.
        // it may become useful to invent an analogue to Web API NodeList
        result.query = this._selectorEngine.queryAll.bind(this._selectorEngine, result);
        return result;
    };

    _p.query = function(selector, scope) {
        return this._selectorEngine.query(this._checkScope(scope), selector);
    };

    return Controller;
});

define('Atem-MOM/Controller',[
    'Atem-CPS/_Controller'
], function(
    Parent
) {
    "use strict";
    function Controller() {
        Parent.apply(this, arguments);
    }
    var _p = Controller.prototype = Object.create(Parent.prototype);

    _p.getCPSName = function(node) {
        // TODO: a cpsFile property in MOM/_Node that works like this would
        // be appropriate. Then we'd just return node.cpsFile || null in here.
        // But this bit does the job as well. It would be more formalized
        // having this in MOM though.
        // First check on node if it has a "cpsFile" property
        // attached and if not resort to the following default rule.
        // to determine a cps file.
        var cpsFile = node.getAttachment('cpsFile')
          , cpsFileNameHost
          ;
        if(!cpsFile) {
            // The default:
                        // the root is its own cps file name host
            cpsFileNameHost = (node.isRoot() && node)
                        // unvivers uses cpsFile of multivers (root)
                        || (node.type === 'univers' && node.root)
                        // master defines its own cpsFile
                        || (node.type === 'master' && node)
                        // for all children of master, master defines cpsFile
                        // this expects the leftover nodes to be all descendants
                        // of master. So, if we decide to
                        || node.master;
            if(cpsFileNameHost)
                cpsFile = cpsFileNameHost.getAttachment('cpsFile');
        }
        return cpsFile || null;
    };

    return Controller;
});

define('Atem-CPS/CPS/cpsTools',[
    'Atem-CPS/errors'
  , './elements/Property'
  , './elements/PropertyDict'
  , './elements/Rule'
  , './elements/AtImportCollection'
  , './elements/PropertyValue'
  , './parsing/parseSelectorList'
  , './elements/SimpleSelector'
],
function (
    errors
  , Property
  , PropertyDict
  , Rule
  , AtImportCollection
  , PropertyValue
  , parseSelectorList
  , SimpleSelector
) {
    "use strict";

    var NotImplementedError = errors.NotImplemented;

    // this are just shortcuts for propertyDict.splice
    // use makeProperty to create the property argument
    function updateProperty(propertyDict, index, property) {
        propertyDict.splice(index, 1, [property]);
    }

    function appendProperty(propertyDict, property) {
        propertyDict.splice(propertyDict.length, 0, [property]);
    }

    function moveCPSElement(source, sourceIndex, target, targetIndex) {
        var property, items;
        if(source === target) {
            // if source and target are identical we can make
            // one atomic replace of all items, instead of two actions.
            // This is done by resetting all items in a new order.
            // This triggers less events so I guess it is cheaper.
            // I may be wrong! So if you have too much time, please measure ;-)
            items = target.items;
            property = items.splice(sourceIndex, 1)[0];
            items.splice(targetIndex, 0, property);
            // now replace all at once
            target.splice(0, items.length, items);
            return;
        }
        // remove
        property = source.splice(sourceIndex, 1)[3][0];
        // insert
        target.splice(targetIndex, 0, property);
    }

    function isProperty(item) {
        return item instanceof Property;
    }

    function addNewRule(propertyCollection, index, selectorListString) {
        var source = 'generated'
          , selectorList = parseSelectorList.fromString(selectorListString)
          , propertyDict = new PropertyDict([], source, 0)
          , rule = new Rule(selectorList, propertyDict, source, 0)
          ;
        // returns the actual index at which the rule was created
        return propertyCollection.splice(index, 0, rule)[0];
    }

    /**
     * CAUTION: Here an intersting dependency to ruleController emerges.
     * Probably this method should be part of the stateful interface,
     * because this way a ruleController from a different project can
     * be used which is not intended right now and was never tested!
     */
    function addNewAtImport(async, propertyCollection
                                , index, ruleController, resourceName) {
        var collection = new AtImportCollection(ruleController, 'generated')
            // it's only a promise if `async` is true
          , promise = collection.setResource(async, resourceName)
          ;

        function resolve() {
            return propertyCollection.splice(index, 0, collection)[0];
        }

        return async
             ? promise.then(resolve, errors.unhandledPromise)
             : resolve()
             ;
    }

    /**
     * initializePropertyValue is a function with the signature:
     * void 0 initializePropertyValue(name, propertyValueInstance);
     *
     * it calls internally:
     *        propertyValueInstance.initialize(name, Expression.factory);
     *
     * It's purpose is to inject the interpreter of the property values
     * into the CPS PropertyValue node. That way we can use different
     * language for properties, for different applications and for
     * experimentation.
     */
    function init(initializePropertyValue) {
        function makeProperty(name, value) {
            var _value = new PropertyValue([value], []);
            initializePropertyValue(name, _value);
            return new Property({name:name}, _value);
        }

        /**
         * Will rewrite the whole propertyDict!
         */
        function setProperties(propertyDict, data) {
            var newProperties
              , name
              ;
            if(!data)
                return;
            newProperties = [];
            for(name in data)
                newProperties.push(makeProperty(name, data[name]));
            propertyDict.splice(0, propertyDict.length, newProperties);
        }

        /**
         * Set `value` to the property `name` of `propertyDict`.
         *
         * Arguments:
         * propertyDict: an instance of PropertyDict as returned
         *                by Rule.properties
         * name: a string with the property name
         * value: a string (of cps-formulae-language¹)
         *
         * return value: nothing.
         * raises: potentially a lot.
         *
         * ¹ Actually this depends on which type is registered for `name`
         *   but at the time of this writing there is only cps-formulae-language.
         *   There are, however, properties that check their return type,
         *   after evaluation of the cps-formulae-language.
         */
        function setProperty(propertyDict, name, value) {
            var property = makeProperty(name, value);
            propertyDict.setProperty(property);
        }

        /**
         * Will rewrite the whole propertyDict!
         */
        function setElementProperties(element, data) {
            setProperties(element.properties, data);
        }

        function escapeSelectorName (name) {
            return SimpleSelector.prototype.escape(name);
        }

        return {
              initializePropertyValue: initializePropertyValue
            , makeProperty: makeProperty
            , appendProperty: appendProperty
            , updateProperty: updateProperty
            , moveCPSElement: moveCPSElement
            , isProperty: isProperty
            , setProperty: setProperty
            , addNewRule: addNewRule
            , addNewAtImport: addNewAtImport
            , setProperties: setProperties
            , setElementProperties: setElementProperties
            , escapeSelectorName: escapeSelectorName
        };
    }

    return init;
});

define('Atem-Property-Language/errors',[
    'Atem-Errors/errors'
], function(
    atemErrors
) {
    var errors = Object.create(atemErrors)
      , makeError = atemErrors.makeError.bind(null, errors)
      ;

    makeError('PropertyLanguage', undefined, errors.Error);
    makeError('PropertyLanguageParser', undefined, errors.PropertyLanguage);

    return errors;
});

define('Atem-Property-Language/_Expression',[
    'Atem-Property-Language/errors'
], function(
    errors
) {
    "use strict";

    var NotImplementedError = errors.NotImplemented;

    function _Expression() {}

    var _p = _Expression.prototype;
    _p.constructor = _Expression;

    // The concrete constructor is also expected to have a property "factory"
    // which is a function that it expected to return an array:
    // [invalidMessage (string), expressionInstance]
    // one of the two items must have a value, the other must be null
    // if the first item is set the construction failed
    // otherwise the second value must be a instance of the Expression
    // class with th interface described below.
    // Expression.factory = function(valueString)

    _p.evaluate = function(getAPI) {
        throw new NotImplementedError('The getValue Interface must be '
                                    + 'implemented by a subclass');
    };

    _p.getValue = function(getAPI) {
        errors.warn('The method "getValue" is deprecated! Use '
                                    +'"evaluate" instead,');
        return this.execute(getAPI);
    };

    _p.toString = function() {
        throw new NotImplementedError('The toString Interface must be '
                                    + 'implemented by a subclass');
    };

    return _Expression;
});

define('Atem-Property-Language/parsing/_Token',[
    'Atem-Property-Language/errors'
], function(
    errors
) {
    "use strict";

    var PropertyLanguageError = errors.PropertyLanguage;

    /**
     * An abstract item that is an element of a formula Stack.
     *
     * This is the base for formulae/parsing/OperatorToken and formulae/parsing/_ValueToken
     */
    function _Token(literal, preConsumes, postConsumes) {
        /*jshint validthis:true */
        this._literal = literal;
        this._setConsumption(preConsumes, postConsumes);
    }

    var _p = _Token.prototype;
    _p.constructor = _Token;
    _p.toString = function() {
        return ['<', this.constructor.name, ': ', this.literal, '>'].join('');
    };

    // Currently every _Token is expected to leave exactly one
    // value on the stack after execution, this will probably not
    // change soon
    Object.defineProperty(_p, '_ejects', {
        value: 1
      , writable: false
    });

    _p._setConsumption = function(preConsumes, postConsumes){
        if(typeof preConsumes !== 'number')
            throw new PropertyLanguageError('preConsumes must be a number, but is "'
                                + preConsumes +'" typeof: '+ typeof preConsumes);
        this._preConsumes = preConsumes;
        if(typeof postConsumes !== 'number')
            throw new PropertyLanguageError('postConsumes must be a number, but is "'
                                + postConsumes +'" typeof: '+ typeof postConsumes);
        this._postConsumes = postConsumes;
    };

    /**
     * Return a child object which has `this` as prototype. The child
     * overides the values for preConsumes, postConsumes.
     *
     * Because operator instances are reused in all parsed formula,
     * it is not possile to fix the consumption values of an operator
     * directly where it appers. This would change the values everywhere
     * where it appears. Instead, we uitilize prototypical inheritance
     * and set the fixed values for the child.
     *
     * We use this behavior when an operator consumes 'Infinity' items
     * from the stack. This is needed for a list (Array) constructor.
     * The actually consumed amount of items can be determined when
     * parsing. Then the operator gets replaced with a version that
     * consumes a fixed amount of items, created by this method.
     */
    _p.fixedConsumptionFactory = function(preConsumes, postConsumes) {
        var child = Object.create(this);
        child._setConsumption(preConsumes, postConsumes);
        return child;
    };

    Object.defineProperty(_p, 'literal', {
        get: function(){ return this._literal; }
    });
    Object.defineProperty(_p, 'preConsumes', {
        get: function(){ return this._preConsumes;}
    });
    Object.defineProperty(_p, 'postConsumes', {
        get: function(){ return this._postConsumes;}
    });

     Object.defineProperty(_p, 'consumes', {
        get: function() {
            if(this.preConsumes === Infinity || this.postConsumes === Infinity)
                throw new PropertyLanguageError('This item '+ this + ' '
                    + 'pre- or post-consumes "Infinity" items from the '
                    + 'stack, it is impossible to calculate the exact amount'
                    + 'of items in this method. See this.fixedConsumptionFactory '
                    + 'and its usage in the parser, where an exact amount '
                    + 'of consumption can be calculated.'
                );
            return this.preConsumes + this.postConsumes;
        }
    });

    Object.defineProperty(_p, 'ejects', {
        get: function(){ return this._ejects; }
    });

    return _Token;
});

define('Atem-Property-Language/parsing/_ValueToken',[
    'Atem-Property-Language/errors'
  , './_Token'
], function(
    errors
  , Parent
) {
    "use strict";

    function _ValueToken(literal) {
        /*jshint validthis:true */
        Parent.call(this, literal, 0, 0);
    }
    var _p = _ValueToken.prototype = Object.create(Parent.prototype);
    _p.constructor = _ValueToken;

    /**
     * Implement this method for children of this class
     */
    _p.getValue = function() {
        throw new errors.NotImplemented('The getValue interface needs '
                        + ' implementation in child classes of _ValueToken.');
    };

    return _ValueToken;
});

define('Atem-Property-Language/parsing/NameToken',[
    'Atem-Property-Language/errors'
  , './_ValueToken'
], function(
    errors
  , Parent
) {
    "use strict";

    function NameToken(literal) {
        Parent.call(this, literal, 0, 0);
    }

    /**
     * Literal is a string representing a name/key.
     * Value is looked up using the get method of the StyleDict of the
     * host element or in the context of another host element value may
     * be looked up differntly.
     */
    var _p = NameToken.prototype = Object.create(Parent.prototype);
    _p.constructor = NameToken;

    _p.getValue = function() {
        return this.literal;
    };

    return NameToken;
});

define('Atem-Property-Language/parsing/OperatorToken',[
     'Atem-Property-Language/errors'
   , './_Token'
   , './NameToken'
], function(
    errors
  , Parent
  , NameToken
) {
    "use strict";

    var PropertyLanguageError = errors.PropertyLanguage
      , ValueError = errors.Value
      , stringify = JSON.stringify
      ;


    /**
     * check whether val is an integer
     *
     * Copy and paste from ufoJS/main
     */
    function isInt (n) {
        // n === n NaN will return false
        // n|0 rounds
        return typeof n === 'number' && n === n && n === (n|0);
    }

    /**
     * check whether val is a float
     *
     * Copy and paste from ufoJS/main
     */
    function isFloat (n) {
        // n === n NaN will return false
        // n|0 rounds
        return typeof n === 'number' && isFinite(n) && n !== (n|0);
    }

    /**
     * This is a wrapper around typeof and instanceof
     * it's there to make me type less and loosely inspired by the python
     * builtin instanceof.
     *
     * Copy and paste from ufoJS/main
     */
    function isInstance(
        value,
        types_ /* function or typeof string or a list of these */
    ) {
        if(arguments.length < 2)
            throw new TypeError(
                'isInstance() expects 2 arguments, got ' + arguments.length
            );
        var types = (types_ instanceof Array) ? types_ : [types_],
            typeOfType, i;
        for(i = 0; i < types.length; i++) {
            typeOfType = typeof types[i];
            if( typeOfType === 'function' && value instanceof types[i]
                || types[i] === 'int' && isInt(value)
                || types[i] === 'float' && isFloat(value)
                || types[i] === 'NaN' && value !== value
                || types[i] === 'null' && value === null
                || types[i] === 'Infinity' && value === Number.POSITIVE_INFINITY
                || types[i] === '-Infinity' && value === Number.NEGATIVE_INFINITY
                // this will test strings like 'number', 'undefined', string
                || typeOfType === 'string'
                    && typeof value === types[i]
                    && value === value /*not true for NaN*/
            )
                return true;
        }
        return false;
    }

    /**
     * literal:     string, the name of the operator, like: + - Vector etc.
     *              there are some operator literals that are expected by
     *              Parser.tokenize
     *
     * splitting:   defines an operator as splitting, which instructs the
     *              tokenizer to end parsing of the token when it appears.
     *              if an operator is not splitting, it must be followed by
     *              a splitting token. None splitting tokens can be part of
     *              Names
     *
     * precedence: the precedence is used to implement the order of operations.
     *             precedence can be a finite Number and -Infinity for lowest
     *             precedence +Infinity for highest precedence
     *
     * preConsumes,
     * preConsumes: How many tokens this operator consumes
     *              before or after its appearance. This allows the creation
     *              of infix operators.
     *              Infinity is allowed as a value, this makes the creation
     *              of i.e. list constructing operators possible. A Infinity
     *              value will consumes the amount of Items that are corruently
     *              in the stack.
     *
     * methods:     See this._setMethods for a description of the methods argument.
     */
    function OperatorToken(literal, splitting, precedence, preConsumes
                                             , postConsumes, methods) {
        Parent.call(this, literal, preConsumes, postConsumes);
        this._splitting = !!splitting;
        if(typeof precedence !== 'number')
            throw new PropertyLanguageError('Precedence must be a number, but is "'
                                + precedence +'" typeof: '+ typeof precedence);
        this._precedence = precedence;
        this._methods = [];
        this._setMethods(methods);

        // need these for access from the compiled functions
        this.PropertyLanguageError = PropertyLanguageError;
        this.NameToken = NameToken;

        // NOTE: List has a variable argument length, so may others too!
        // The stack compiler will take care of that, but we'll have to
        // wait with compiling
        if(isFinite(this.preConsumes) && isFinite(this.postConsumes))
            this.execute = this.compile();
    }

    var _p = OperatorToken.prototype = Object.create(Parent.prototype);
    _p.constructor = OperatorToken;


    Object.defineProperty(_p, 'precedence', {
        get: function(){ return this._precedence; }
    });

    Object.defineProperty(_p, 'splitting', {
        get: function(){ return this._splitting; }
    });

    /**
     * Methods could be just a function, in which case it would be the
     * single match all implementation for this operator, NameTokens as
     * arguments will be resolved upon invocation.
     *
     * Also, it may be an array of arrays like this:
     *   [
     *        [typename/constructor, [ typename/constructor ...] , method]
     *      , [typename/constructor, [ typename/constructor ...] , method]
     *      , function(){} // optional, match all
     *   ]
     *
     * The first method that matches the actual types of arguments will
     * be used, so an early match all function will shadow later ones.
     *
     * typename/constructor can be everything that is useful with ufoJS/main.isInstance
     * However, the compiled version does not use ufoJS/main.isInstance!
     * That may lead to problems when ufoJS/main.isInstance changes but not
     * the compiling code in here!
     * Usually all Operators will be compiled. Interpreting is still here
     * for legacy reasons, also, the algorithm is easier to read.
     *
     * typename/constructor can have special values:
     *
     * - The string: "*getAPI*", only as very first element:
     *        this does two things:
     *            * it injects the getAPI function as first argument of method
     *            * it doesn't resolve NameToken arguments using getAPI(nameToken.getValue())
     *              so, specifiying *getAPI* means method will handle
     *              NameTokens by itself.
     *        In turn, this means NameToken can be used as a typename/constructor
     *        but it will only ever appear as argument when *getAPI* is requested,
     *        otherwise it will be resolved before invocation.
     *        IMPORTANT: All *getAPI* methods must be defined before the ones without
     *        *getAPI*.
     * - The string "*anything*" which matches anything
     *
     * ufoJS/main.isInstance takes:
     *  - functions which will be checked using "instanceof" or a string
     *  - strings can be everything where typeof actually works, like:
     *                  "number", "string", "undefined", "object"
     *  - strings can be: "int" "float" "NaN" "null" "Infinity" "-Infinity"
     *  - arrays of the above
     */
    _p._setMethods = function(methods) {
        if(typeof methods === 'function')
            this._setMethod(methods);
        else if(methods instanceof Array)
            methods.map(this._setMethod, this);
    };
    /**
     * see _setMethods for an argument description
     */
    _p._setMethod = function(description) {
        var expectedLength;
        if(typeof description === 'function') {
            this._methods.push(description);
            return;
        }
        else if(!(description instanceof Array))
            throw new ValueError('An operator definition should be either '
                + 'a function or an array, see OperatorToken');

        // It is an array

        expectedLength = this.consumes + (
                                description[0] === '*getAPI*' || description[0] === '*unboxed+getAPI*' ? 2 : 1);

        if(description.length !== expectedLength)
            throw new ValueError(this.literal + ': An operator definition array must define '
                + 'the types for all items it consumes plus the method to '
                + 'that is the operator code in the end.'
                + 'This operator should have ' + expectedLength +' '
                + 'items in a definition, but ' + description.length
                + ' was found: ' + description
            );
        else if(typeof description[description.length-1] !== 'function')
            throw new ValueError('The last item of an operator definition '
                + 'must be a type of "function" but this is a "'
                + (typeof description[description.length-1])+'"');
        else if(this._methods.length // this is not the first
                    && description[0] === '*getAPI*' // this is boxed
                    && this._methods[this._methods.length-1][0] !== '*getAPI*')// the previous is unboxed
            throw new ValueError('The previous operator uses "unboxed" NameTokens '
                + 'but this one unboxes itself. (*getAPI* is the  first argument) '
                + 'This is illegal. Operators that unbox themselves  must be '
                + 'defined before operators that expect unboxed values.\n'
                + 'This is because automatic unboxing could cause '
                + 'unpredictable behavior (like a hit where no hit should be) '
                + 'and also errors for not found names. Also, automatic '
                + 'unboxing for a value that doesn\'t need it is bad for '
                + 'performance.'
            );
        // accept it
        // description is an array that suits our expectations
        this._methods.push(description);
    };

    // helper for compile
    function _makeArgNames(length, _prefix, _postfix) {
        var result = [], i, prefix = _prefix || '', postfix = _postfix || '';
        for(i=0;i<length;i++) result.push(prefix + i + postfix);
        return result;
    }

    // helper for compile
    function _makeLocalBoxedNames(body, methods, consumes) {
        var i, l, isBoxed
          , usersOfBoxed = 0
          , args = _makeArgNames(consumes, 'args[', ']')
          , boxedNames
          ;
        for(i=0, l=methods.length;i<l; i++) {
            isBoxed = methods[i][0] === '*getAPI*';
            // The first unboxed user uses the boxed values for unboxing
            // and thus makes also an access to the unboxed values.
            usersOfBoxed += 1;
            // After the first unboxed user, boxed will not be used anymore.
            if(!isBoxed) break;
        }
        if(usersOfBoxed < 2)
            // We don't declare the vars if less than 2 accesses to boxed NameTokens
            // are done. This assumes that declaring locally and two subsequent
            // accesses are cheaper than always accessing the args array;
            return args;
        boxedNames = _makeArgNames(consumes, 'aN');
        for(i=0,l=consumes;i<l;i++)
            body.push('var ' , boxedNames[i] ,' = ', args[i], ';\n');
        return boxedNames;
    }

    // helper for compile
    function _makeLocalUnboxedNames(body, consumes, boxedNames) {
        var i, arg, unboxedNames = _makeArgNames(consumes, 'aV');
        for(i=0;i<consumes;i++) {
            arg = boxedNames[i];
            body.push('var ' , unboxedNames[i] , ' = ' , arg , ' instanceof NameToken '
                    , '? getAPI.get(' , arg , '.getValue()) '
                    , ': ' , arg , ';\n');
        }
        return unboxedNames;
    }

    // helper for compile
    function _makeTypeTest(arg, typeAdress, typeVal, ctors) {
        var typeTest = []
          , typeOfType = typeof typeVal
          , ctorCache
          , ctorName
          ;
        if(typeOfType === 'function') {
            ctorCache = ctors.cache;
            ctorName = ctorCache.get(typeVal);
            if(!ctorName) {
                ctorName = 'c' + (ctors.i++);
                ctors.init.push('var ', ctorName, ' = ', typeAdress,';\n');
                ctorCache.set(typeVal, ctorName);
            }
            typeTest.push( arg, ' instanceof ', ctorName);
        }
        else if (typeOfType === 'string') {
            switch(typeVal) {
                case 'int':
                    typeTest.push('typeof ', arg,' === "number" && '
                            , arg, ' === (',arg,'|0)');
                    break;
                case 'float':
                    typeTest.push('typeof ', arg,' === "number" && '
                            , 'isFinite(', arg, ') && '
                            , arg, ' !== (',arg,'|0)');
                    break;
                case 'number':
                    typeTest.push('typeof ', arg,' === "number" && '
                            , arg, ' === ', arg);
                    break;
                case 'NaN':
                    typeTest.push(arg, ' !== ', arg);
                    break;
                case 'null':
                    typeTest.push(arg, ' === null');
                    break;
                case 'Infinity':
                    typeTest.push(arg, ' === Number.POSITIVE_INFINITY');
                    break;
                case '-Infinity':
                    typeTest.push(arg, ' === Number.NEGATIVE_INFINITY');
                    break;
                default:
                    typeTest.push('typeof ',arg ,' === ', stringify(typeVal));
                    break;
            }
        }
        else
            throw new ValueError('Unkown type for a value-type: ' + typeOfType);

        return typeTest.join('');
    }

    // helper for compile
    function _makeTypeTests(body, typeTests, ctors, name, type, adress) {
        var i
          , l = type instanceof Array ? type.length : 1
          , typeAdress
          , typeVal
          , test
          ;
        for(i=0;i<l;i++) {
            if(i) body.push(' || ');
            if(type instanceof Array) {
                typeAdress = adress + '[' + i + ']';
                typeVal = type[i];
            }
            else {
                typeAdress = adress;
                typeVal = type;
            }
            test = _makeTypeTest(name, typeAdress, typeVal, ctors);
            // Caching the results of identical tests
            // without _cacheTypeTest this would be just: body.push(test);
            _cacheTypeTest(body, typeTests, test);
        }
    }

    // helper for compile
    function _cacheTypeTest(body, typeTests, typeTest) {
        var typeData = typeTests[typeTest];
        if(!typeData) {
            // Rember the body index (bi) for later replacement
            typeTests[typeTest] = {bi: body.length, varName: null};
            body.push(typeTest);
            return;
        }
        // We had this test once! Prepare to save its result when it's
        // executed the first time.
        if(!typeData.varName) {
            typeData.varName = 'tt' + typeTests.__length;
            typeTests.__length++;

            // Initialize the name in the prelude of the function.
            // We can't  do this inline.
            typeTests.__init.push('var ' + typeData.varName + ';\n');

            // The first occurance of the test is replaced to store
            // its result in a name.
            body[typeData.bi] = typeData.varName + ' = (' + typeTest + ')';

        }
        // The current test tries to use the cached version if it was already
        // executed. Otherwise it falls back to initializie the var itself.
        body.push('(', typeData.varName, ' || (', typeData.varName ,' === false ? false'
                ,' : ',typeData.varName ,' = (',typeTest,')))');
    }

    /**
     * compile the Operator description to native JavaScript.
     */
    _p.compile = function () {
        /*jshint evil:true*/
        var body = ['"use strict";\n']
          , i, j, k, l, ll, description, methodName
          , names, args, type, typeVarsIndex, ctorIndex, isBoxed, hasGetAPI
          , hasMatchAll = false
          , unboxedNameTokens = false
          , typeTests = {
                __length: 0
              , __init: []
            }
          , ctors = {
                i: 0
              , cache: new Map()
              , init: []
            }
          ;
        body.push(
            '//', this.literal, '\n',
            'var NameToken = this.NameToken\n'
          , '  , methods = this._methods\n'
          , '  ;\n'
        );
        names = _makeLocalBoxedNames(body, this._methods, this.consumes);
        args = names.join(', ');

        // a placeholder
        typeVarsIndex = body.length;
        body.push('');

        for(i=0, l=this._methods.length;i<l; i++) {
            description = this._methods[i];
            methodName = 'm' + i;
            body.push('var ',methodName,' = methods[', i ,'];\n');

            isBoxed = description[0] === '*getAPI*';
            hasGetAPI = isBoxed || description[0] === '*unboxed+getAPI*';

            if(unboxedNameTokens && isBoxed)
                // This is a problem in the design of the operator
                // see the lengthy error message in p._setMethod
                throw new ValueError('Found a *getAPI* after names where already unboxed!');
            else if(!unboxedNameTokens && !isBoxed) {
                //unbox NameTokens
                unboxedNameTokens = true;
                names = _makeLocalUnboxedNames(body, this.consumes, names);
                args = names.join(', ');
            }

            if(typeof description === 'function') {
                // That's it! This is a match-all method, no further
                // evaluation is needed.
                hasMatchAll = true;
                body.push('return ',methodName,'(', args, ');');
                break;
            }

            // a placeholder
            ctorIndex = body.length;
            body.push('');

            body.push('if(true');
            // k: start at 1 if the first item is *getAPI*
            for(j=0, k=hasGetAPI?1:0,ll=this.consumes;j<ll;k++,j++) {
                type = description[k];
                // always true
                if(type === '*anything*') continue;
                body.push(' && (');
                _makeTypeTests(body, typeTests, ctors, names[j], type,  methodName + '[' + k +']');
                body.push(')');
            }
            body.push(
                ')\n    '
              , 'return ' ,methodName,'[', description.length-1, '](', (hasGetAPI ? 'getAPI, ' : ''), args, ');\n'
            );

            // write the constructor references
            body[ctorIndex] = ctors.init.join('');
            ctors.init = [];
        }
        // write the type test result var names
        if(typeTests.__init.length)
            body[typeVarsIndex] = typeTests.__init.join('');

        if(!hasMatchAll)
            // raise if we are still here
            body.push(
                'throw new this.PropertyLanguageError('
              , stringify('Can\'t find an implementation for the operator '
                    + stringify(this.literal)
                    + ' that matches the given combination of argument types:\n')
              , '\n    '
              , ' + args.map(function(item){\n    '
              , 'return "\\"" + item + "\\" (typeof: " + (typeof item) + ")";}'
              , ').join(", ")'
              , '\n    );'
            );
        return new Function('getAPI', 'args', body.join(''));
    };

    /**
     * Return the index in this._methods of the first matching operator
     * implementation for the given arguments or -1.
     */
    _p._findMethod = function(getAPI, argsObj) {
        var index=0, length=this._methods.length, j, k, type, value, args;

        for(;index<length; index++) {
            // the routine can request as first argument getAPI
            // this however changes how NameToken is processed
            // without *getAPI* the lookup is made for the operator
            // with *getAPI* the operator itself is in charge to
            // look up the names. The latter can happen anywhere, not
            // just with the getAPI.

            // convert from TokenType (container) to the JavaScript Value
            // equivalents, before running the following methods
            if(this._methods[index][0] !== '*getAPI*') {
                j = 0;
                args = argsObj.unboxedNameTokens;
            }
            else {
                j = 1;
                args = argsObj.original;
            }

            if(typeof this._methods[index] === 'function')
                // match all
                return index;

            for(k = 0;k<args.length;j++, k++) {
                type = this._methods[index][j];
                if(type !== "*anything*" && !isInstance(args[k], type))
                    break;
            }
            if(k === args.length)
                // no element broke the loop, thus all where matches;
                return index;
        }
        return -1;
    };

    /**
     * This method interpretes the the Operator description.
     *
     * However, usually the Operator will compile itself into
     * native JavaScript upon initializaiton and override this
     * implementation
     */
    _p.execute = function(getAPI , _args) {
        var argsObj = new Internal_Arguments(_args, getAPI)
          , index
          , args
          , result
          , operator
          , description
          ;
        index = this._findMethod(getAPI ,argsObj);
        if(index === -1) {
            throw new PropertyLanguageError('Can\'t find an implementation for the '
                + 'operator "'+this.literal+'" that matches the given '
                + 'combination of argument types: '
                + argsObj.original.map(function(item){
                        return 'type "' + (typeof item)
                                            + '" string "' + item +'"';})
                    .join(', ')
            );
        }
        description = this._methods[index];
        if(typeof description === 'function') {
            operator = description;
            args = argsObj.unboxedNameTokens;
        }
        else {
            operator = description.slice(-1).pop();
            if(description[0] === '*getAPI*') {
                args = [getAPI];
                Array.prototype.push.apply(args, argsObj.original);
            }
            else if(description[0] === '*unboxed+getAPI*') {
                args = [getAPI];
                Array.prototype.push.apply(args, argsObj.unboxedNameTokens);
            }
            else
                args = argsObj.unboxedNameTokens;
        }
        result = operator.apply(this, args);

        // check for NaN and sorts of??
        return result;
    };

    /**
     * Implementation specific Object to create different versions of the
     * arguments array for further processing. This is in place to make
     * the creation of these different versions a) lazy and  b) cached.
     * This object never leaves the OperatorToken internals, so it doesn't
     * need its own module.
     *
     * The two versions of the arguments array are available at the
     * property getters:
     *   - unboxedNameTokens:
     *   - original
     * within unboxedNameTokens NameTokens are converted to the value
     * returned by getAPI(token.getValue())
     */
    function Internal_Arguments(args, getAPI) {
        this.original = args;
        this._getAPI = getAPI;
        this._unboxedNameTokens = null;
    }

    Object.defineProperty(Internal_Arguments.prototype, 'unboxedNameTokens', {
        get: function() {
            if(!this._unboxedNameTokens)
                this._unboxedNameTokens = this.original.map(_unbox, this);
            return this._unboxedNameTokens;
        }
    });

    function _unbox (token) {
         /*jshint validthis:true */
        if(token instanceof NameToken)
            return this._getAPI.get(token.getValue());
        return token;
    }

    return OperatorToken;
});

define('Atem-Property-Language/parsing/BracketToken',[
    'Atem-Property-Language/errors'
  , './_ValueToken'
], function(
    errors
  , Parent
) {
    "use strict";

    /**
     * Literal is a string, one of '(' , ')', '[', ']'
     * There is no value, the parser interpretes this kind of token
     * by using its literal
     */
    function BracketToken(literal) {
        Parent.call(this, literal, 0, 0);

        var counterparts = {
                '(': ')'
              , ')': '('
              , '[': ']'
              , ']': '['
        };

        Object.defineProperty(this, 'opening', {
            value: '(['.indexOf(this.literal) !== -1
          , enumerable: true
        });

        Object.defineProperty(this, 'closing', {
            value: !this.opening
          , enumerable: true
        });

        Object.defineProperty(this, 'counterpart', {
            value: counterparts[this.literal]
          , enumerable: true
        });
    }

    var _p = BracketToken.prototype = Object.create(Parent.prototype);
    _p.constructor = BracketToken;

    _p.matches = function(val) {
        return val === this.counterpart;
    };


    return BracketToken;
});

define('Atem-Property-Language/parsing/StringToken',[
    'Atem-Property-Language/errors'
  , './_ValueToken'
], function(
    errors
  , Parent
) {
    "use strict";

    /**
     * Literal is a string representing itself as a string.
     * Value equals literal.
     */
    function StringToken(literal) {
        Parent.call(this, literal, 0, 0);
    }

    var _p = StringToken.prototype = Object.create(Parent.prototype);
    _p.constructor = StringToken;

    _p.getValue = function() {
        return this.literal;
    };

    return StringToken;
});

define('Atem-Property-Language/parsing/SelectorToken',[
    'Atem-Property-Language/errors'
  , './_ValueToken'
  , 'Atem-CPS/CPS/parsing/parseSelectorList'
], function(
    errors
  , Parent
  , parseSelectorList
) {
    "use strict";

    var PropertyLanguageError = errors.PropertyLanguage
      , PropertyLanguageParserError = errors.PropertyLanguageParser
      ;

    /**
     * Literal is a string representing a CPS selector.
     * Value is a CPS/elements/SelectorList as produced by the
     * CPS/parsing/parseSelectorList module.
     *
     * FIXME: value should maybe rather be the result of query(this.selectorList)
     *
     * Raises a PropertyLanguageParserError if literal can't be parsed into a selector
     *
     * selectorEngine is optional, it will cause a selector to be compiled
     * immediately, contrary to beeing compiled when first used.
     */
    function SelectorToken(literal, selectorEngine) {
        Parent.call(this, literal, 0, 0);
        try {
            this._value = parseSelectorList.fromString(this.literal, undefined, selectorEngine);
        }
        catch(error) {
            if(!(error instanceof PropertyLanguageParserError))
                throw error;
            throw new PropertyLanguageError('(PropertyLanguageParserError) '+error.message, error.stack);
        }
    }

    var _p = SelectorToken.prototype = Object.create(Parent.prototype);
    _p.constructor = SelectorToken;

    _p.getValue = function() {
        return this._value;
    };

    return SelectorToken;
});

define('Atem-Property-Language/parsing/NumberToken',[
    'Atem-Property-Language/errors'
  , './_ValueToken'
], function(
    errors
  , Parent
) {
    "use strict";

    /**
     * Literal is a string representing a number.
     * Value is the result of applying parseFloat on literal.
     *
     * value should never be NaN. If this ever happens I strongly recommend
     * to improve the reqular expression of CPS/dataTypes/formulae/parsing
     */
    function NumberToken(literal) {
        Parent.call(this, literal, 0, 0);
        this._value = parseFloat(this.literal);
    }

    var _p = NumberToken.prototype = Object.create(Parent.prototype);
    _p.constructor = NumberToken;

    _p.getValue = function() {
        return this._value;
    };

    return NumberToken;
});

define('Atem-Property-Language/parsing/Parser',[
    'Atem-Property-Language/errors'
  , './_ValueToken'
  , './OperatorToken'
  , './BracketToken'
  , './StringToken'
  , './SelectorToken'
  , './NumberToken'
  , './NameToken'
], function(
    errors
  , _ValueToken
  , OperatorToken
  , BracketToken
  , StringToken
  , SelectorToken
  , NumberToken
  , NameToken
) {
    "use strict";

    var PropertyLanguageError = errors.PropertyLanguage
      , KeyError = errors.Key
      ;

    /**
     * Constructor for a CPS formulae Parser. This takes instances of
     * OperatorToken as Input.
     */
    function Parser(/* operators */) {
        this._operators = this._createOperatorsDict(
                Array.prototype.slice.call(arguments));
        this._operatorsByPrecedence = this._createPrecedenceLookup(
                                                        this._operators);

        this._operatorsByLength = this._createLengthLookup(
                                                        this._operators);

        this._bracketOperators = {};
        this._negateOperator = undefined;
        this._StackConstructor = undefined;
    }

    var _p = Parser.prototype
        /**
         * Test if a string starts like a number. This detects also
         * negative numbers.
         * R_number.exec(string) !== null
         */
      , R_number = /^(\-?((\d*\.\d+)|(\d+(\.)?))([eE][+\-]?\d+)?)/
        //  Test if a string starts like a name
      , R_name = /^[0-9A-Za-z_]+/
      ;

    _p._createOperatorsDict = function(operators) {
        var i = 0
          , result = {}
          ;
        for(;i<operators.length;i++) {
            if(operators[i].literal in result)
                throw new PropertyLanguageError('An operator with the literal "'
                                + operators[i].literal +'" is defined at '
                                + 'least twice, but it must be unique!');
            if(R_number.exec(operators[i].literal) !== null)
                throw new PropertyLanguageError('The operator with the literal "'
                                + operators[i].literal +'" starts like a '
                                + 'number literal. This is forbidden.');
            result[operators[i].literal] = operators[i];
        }
        return result;
    };

    /**
     * Creates an array like so:
     * [
     *      {'*': operatorInstance, '/': operatorInstance},
     *      {'+': operatorInstance, '-': operatorInstance},
     * ]
     *
     * The infixToPostfix method uses this to resolve the operators in
     * the right order. This means the first item in the result of this
     * method has the highest precedence, and all its operators are
     * resolved first.
     */
    _p._createPrecedenceLookup = function(operators) {
        var temp = {}
          , k
          , ordered = []
          ;
        for(k in operators) {
            if(temp[operators[k].precedence] === undefined) {
                temp[operators[k].precedence] = {};
                ordered.push(operators[k].precedence);
            }
            temp[operators[k].precedence][k] = operators[k];
        }
        ordered.sort(function(a, b) { return a-b; });
        // highest precedence first
        ordered.reverse();
        return ordered.map(function(precedence){ return temp[precedence]; });
    };

    /**
     * returns an object with the keys "splitting" and "notSplitting"
     * both keys contain an array of objects.
     * The objects are key value pairs of operatorLiteral: operator
     * The operators in one object have all the same length.
     * The arrays are sorted in the way that the objects with the longest
     * operatorLiterals appear first;
     *
     *  {
     *      splitting: [ operator literals by length lookup ]
     *      notSplitting: [ operator literals by length lookup ]
     *  }
     *
     * the array for the "operator literals by length lookup":
     * // ordered by operator.literal.length, longest first
     * [
     *      // all literalName in these objects have the same length
     *      {literalName_A: operator, literalName_B: operator}
     *    , {literalN_A: operator, literalN_B: operator}
     *      ...
     * ]
     */
    _p._createLengthLookup = function(operators) {
        var _get = function(k) {return this[k];}
          , k
          , _temp
          , temp = {
                splitting: {}
              , notSplitting: {}
            }
          , result = {}
        ;

        // put everything in the right temp container
        for(k in operators) {
            _temp = operators[k].splitting
                ? temp.splitting
                : temp.notSplitting
                ;
            if(_temp[k.length] === undefined)
                _temp[k.length] = {};
            _temp[k.length][k] = operators[k];
        }

        // sort and maintain order by returning arrays of operator dicts
        for(k in temp)
            result[k] = Object.keys(temp[k])
                              // sort by "k.length" keys
                              .sort()
                              // longest first
                              .reverse()
                              // return the operator dicts
                              .map(_get, temp[k]);
        return result;
    };

    _p.setStackConstructor = function(ctor){
        this._StackConstructor = ctor;
    };

    _p.setBracketOperator = function(bracketLiteral, operatorLiteral) {
        if(!(operatorLiteral in this._operators))
            throw new KeyError('No operator found for literal: '
                                                        + operatorLiteral);

        this._bracketOperators[bracketLiteral] = operatorLiteral;
    };

    _p.getBracketOperator = function(bracketLiteral) {
        if(bracketLiteral in this._bracketOperators)
            return this._operators[this._bracketOperators[bracketLiteral]];

        throw new KeyError('No bracket operator found for literal: '
                                                        + bracketLiteral);
    };

    _p.setNegateOperator = function(negateLiteral, operatorLiteral) {
        if(!(operatorLiteral in this._operators))
            throw new KeyError('No operator found for literal: '
                                                        + operatorLiteral);
        this._negateOperator = [negateLiteral, operatorLiteral];
    };


    /**
     * Unwrap all elements of nested arrays into one flat array. Keep
     * the depth-first order intact.
     */
    function _flatten(tokens) {
        var result = []
          , item
          ;
        while(!!(item = tokens.shift())) {
            if(item instanceof Array)
                Array.prototype.unshift.apply(tokens, item);
            else
                result.push(item);
        }
        return result;
    }

    /**
     * test if string starts with the operator.literal of one of the
     * operators in the operators list.
     *
     * The operators list has the following structure (to avoid a linear search)
     *
     * // ordered by operator.literal.length
     * [
     *      // all literalName keys in here have the same length
     *      {literalName: operator}
     *      ...
     *  }
     * ]
     *
     *
     */
    function _testOperators(operators, string, index) {
        var i=0, k, search;
        for(;i<operators.length;i++) {
            // get the first key
            k = null;
            for(k in operators[i])
                break;
            if(k === null)
                continue;
            // cut out the right length from string
            search = string.substr(index, k.length);
            if(operators[i].hasOwnProperty(search))
                // search is a key in operators
                return operators[i][search];
        }
        return false;
    }

    /**
     * Test for all NOT splitting operators, longest first.
     */
    _p._testNotSplittingOperators = function(string, index) {
        return _testOperators(this._operatorsByLength.notSplitting
                                                        , string, index);
    };

    /**
     * Test for all splitting operators, longest first.
     */
    _p._testSplittingOperators = function(string, index) {
        return _testOperators(this._operatorsByLength.splitting
                                                        , string, index);
    };


    /**
     * Tokenize into the following tokens:
     *
     * number literals: anything that ufojs/main.isFloatString accepts
     *      1 .3 -1.2 1.2e3  3E3 0.123456E-3 etc..
     *
     * selector literals: anything between S" AND "  S"master#bold > glyph:i(3)"
     *      we keep the quotes, because some characters that can appear
     *      in selectors could cause problems with our CSS/CPS parser in
     *      the context of a parameter value
     * string literals: anything between " AND "
     * parenthesis: ( and )
     * Square brackets [ and ]  <= will essentially behave like a stack ()
     *              but the resulting value will be used as key to get a
     *              value from the previous value in the stack
     *              So, this resolves to a similar thing like the colon
     *              operator. but the colon operator will use the literal
     *              of a NameValue AND thus require a NameValue
     *              we may get rid of the colon operator but then find us
     *              typing a lot of [" AND "] combinations ...
     *
     * names/identifier: essentially every token that is not something else ...
     *            maybe it is wise to identify a set of legal characters,
     *            like 0-9A-Za-z_ this could save space for new additions
     *            also, this eases parsing
     *            name can't begin with numbers, because of the splitting
     *            behavior of numbers at the moment.
     *
     * operators/symbols: identifier that are keys in this._operators
     *
     * special is the "negate" operator, which will be inserted on some
     * occasions where - appears. But this is not done in this context
     * the parser will do so.
     *
     * splitting is done by:
     *  ' ' space
     *  $" " selector literal
     *  " " string literal
     *  \n newline
     *  \r carriage return
     *  \t tab
     *  all operators where operator.splits === true
     *          if it doesn't split it can be part of a 'name'
     *
     * special in terms of splitting is the . operator
     *      it splits, but only if it is not part of a number literal!
     *
     *
     * in the end, we expect a list of:
     *
     * - number values from number literals
     * - selector values from selector literals
     * - string values from string literals
     * - brackets: one of these four at a time ( ) [ ]
     * - operators
     * - names
     *
     *
     * selectorEngine is optional, it will cause a selector to be compiled
     * immediately, contrary to beeing compiled when first used.
     */
    _p.tokenize = function(string, selectorEngine) {
        var i=0, j, tokenEnd
          , tokens = []
          , reResult
          , splitExpected
          , foundOperator
          ;
        while(i<string.length) {
            if(' \n\r\t'.indexOf(string[i]) !== -1) {
                // stuff that splits but is not reported (whitespace)
                i++;
                splitExpected = false; // a splitting token was found
                continue;
            }

            // brackets are splitting
            if('()[]'.indexOf(string[i]) !== -1) {
                tokens.push(new BracketToken(string[i]));
                i++;
                splitExpected = false; // a splitting token was found
                continue;
            }

            // string literals are splitting
            if(string[i] === '"') {
                tokenEnd = string.indexOf('"', i+1);
                if(tokenEnd === -1)
                    throw new PropertyLanguageError('A closing double quote is '
                        +' missing for an opening string literal: "');
                tokens.push(new StringToken(string.substring(i+1, tokenEnd)));
                i = tokenEnd+1;
                splitExpected = false; // a splitting token was found
                continue;
            }

            // selector literals are splitting
            if(string[i] === 'S' && string[i+1] === '"') {
                tokenEnd = string.indexOf('"', i+2);
                if(tokenEnd === -1)
                    throw new PropertyLanguageError('A closing double quote is '
                        +' missing for an opening selector literal S" ...in: '
                        + string.substr(i));
                tokens.push(new SelectorToken(string.substring(i+2, tokenEnd), selectorEngine));
                i = tokenEnd+1;
                splitExpected = false; // a splitting token was found
                continue;
            }

            // number literals are splitting, thus we can parse negative
            // numbers. (maybe they must not be splitting, but they
            // must be parsed before the splitting operators?)
            // FIXME: I'm not sure if I like this rather hackish workaround.
            // Instead of making numbers splitting, we could maybe have
            // a more robust way to detect the "negate" operator, unfortunately
            // this: "Vector 12 -8" makes it really hard to do so. It can
            // read as "Vector 12 subtract 8" or "Vector 12 negate 8" without
            // having splitting numbers the former applies but the latter
            // is meant.
            // Also, names can't begin with numbers anymore, because of this
            // behavior, however, this quite common in other programming
            // languages as well.
            // The biggest downside of this behavior is that:
            // "1-2" parses as `1|-2` and "1 - 2" parses as
            // `1|subtract|2` which will become confusing at some point.
            string = string.substring(i);
            i = 0;
            if((reResult = R_number.exec(string)) !== null) {
                tokens.push(new NumberToken(reResult[0]));
                i = reResult[0].length;
                splitExpected = false; // a splitting token was found
                continue;
            }

            // test for all splitting operators, length first
            if(!!(foundOperator = this._testSplittingOperators(string, i))) {
                tokens.push(foundOperator);
                i += foundOperator.literal.length;
                splitExpected = false; // a splitting token was found
                continue;
            }

            // END OF SPLITTING TOKENS

            // The last found token was expecting as next token a splitting
            // token, because it was not splitting by itself.
            // A splitting token was not found.
            if(splitExpected === true)
                throw new PropertyLanguageError('A splitting token was expected '
                                + 'after: '+ tokens[tokens.length-1] + ' '
                                + 'but it was not found in: '
                                + string.substr(i));

            // From here we expect to find a not splitting token
            // the token after that must be splitting
            // if we don't find anything a PropertyLanguageError is thrown
            splitExpected = true;

            // prepare for RegEx.exec searches
            // the string must be truncated to the current index
            // because RegEx.exec has no offset parameter like indexOf
            string = string.substr(i);
            i=0;

            // name literals are not splitting
            if((reResult = R_name.exec(string)) !== null) {
                if(reResult[0] === 'Infinity')
                    tokens.push(new NumberToken(reResult[0]));
                else if(this._operators[reResult[0]] && !this._operators[reResult[0]].splitting)
                    // could also be a not splitting operator
                    tokens.push(this._operators[reResult[0]]);
                else
                    tokens.push(new NameToken(reResult[0]));
                i += reResult[0].length;
                continue;
            }

            // test for all NOT splitting operators, length first
            if(!!(foundOperator = this._testNotSplittingOperators(string, i))) {
                tokens.push(foundOperator);
                i += foundOperator.literal.length;
                continue;
            }

            // not recognized as token!
            throw new PropertyLanguageError('Can\'t find the next token in the '
                                    + 'string: ' + string);
        }
        return tokens;
    };

    _p._resolveBrackets = function(tokens) {
        var i = 0
          , openStack = []
          , start
          , result = []
          ;
        for(;i<tokens.length;i++) {
            if(!(tokens[i] instanceof BracketToken)) {
                if(openStack.length === 0)
                    // record this token, it is not inside of any brackets
                    result.push(tokens[i]);
            }
            // it is a bracket
            else if(tokens[i].opening) {
                if(openStack.length === 0)
                    start = i+1;
                openStack.push(tokens[i]);
            }
            else { // tokens[i].closing === true
                if(openStack.length === 0
                        || !openStack[openStack.length-1].matches(tokens[i].literal))
                    throw new PropertyLanguageError('A closing bracket appeared '
                        + '"'+ tokens[i].literal +'" but a matching opening '
                        + ' bracket is missing before.');
                // the closing bracket matches
                else if(openStack.length === 1) {
                    // this closes the current outermost bracket
                    try {
                        // If an operator is registered for this bracket,
                        // we insert it before the bracket.
                        // This is actually used if this is a [] context
                        // We insert a getter operator then, that will
                        // consume the content of the [] stack and uses
                        // its value as a key to read from in the previous
                        // value like: myValue["myKey"]
                        result.push(this.getBracketOperator(openStack[0].literal));
                    }
                    catch(error) {
                        if(!(error instanceof KeyError))
                            throw error;
                        // else: pass. No operator was registered for this
                        // kind of bracket.
                    }


                    // call this.infixToPostfix recursively...
                    // this.infixToPostfix calls this method
                    result.push(this.infixToPostfix(tokens.slice(start, i)));
                }
                openStack.pop();
            }
        }
        if(openStack.length)
            throw new PropertyLanguageError(openStack.length + ' '
                    + (openStack.length === 1 ? 'bracket is'
                                                : 'brackets are' ) + ' '
                    + 'missing for the opened: '
                    + openStack.map(function(item){ return item.literal; })
                               .join(', '));
        return result;
    };


    /**
     * Take the tokens where the calculations are in a infix notation and
     * return postfix or Reverse Polish notation:
     * This means we go from 2 + 3 to 2 3 +. The operator follows all
     * of its operand. This is easy to calculate at the end, and we get
     * rid of the Parenthesis. See ./Stack.execute for execution of the
     * stack.
     *
     * This works as far as my tests went, but it could be more efficiently
     * implemented (using the "Dijkstra shunting yard algorithm"?)
     *
     * The algorithm uses one recursive call to eliminate parentheses
     * and multiple passes to solve all operators in order of precedence.
     */
    _p.infixToPostfix = function infixToPostfix(tokensArg) {
        var operators = this._operatorsByPrecedence
          , tokens
          , j=0
          , i
          , k
          , startPre
          , startPost
          , preConsumes
          , postConsumes
          , endPost
          , operation
          ;
        // replace - with negate when looks like this was the intention
        if(this._negateOperator) {
            for(i=0;i<tokensArg.length;i++) {
                if(tokensArg[i] instanceof OperatorToken
                        // usually we use - to negate something
                        && tokensArg[i].literal === this._negateOperator[0]
                        // if the first operator is a subtract operator
                        // or if the operator before the subtract operator
                        // is any operator, then this is a negate operator
                        && (i===0 || tokensArg[i-1] instanceof OperatorToken)) {
                    tokensArg[i] = this._operators[this._negateOperator[1]];
                }
            }
        }

        // find brackets and call this method recursively
        tokens = this._resolveBrackets(tokensArg);

        // convert all operators to postfix notation
        // operator precedence defines the order of the conversion

        for(;j<operators.length;j++) {
            for(i=0;i<tokens.length;i++) {
                // Array and Value don't change the stack, only OperatorToken
                // does. Thus Array and Value stay where they are until
                // they are consumed by an Operator.
                if(!(tokens[i] instanceof OperatorToken))
                    continue;
                // tokens[i] is an Operator

                // only apply operators with the correct precedence
                if(!(tokens[i].literal in operators[j]))
                    continue;

                // If preConsumes is Infinity, the operator consumes
                // anything that is on the stack before its position.
                // This is useful for some kind of list creation.
                preConsumes = tokens[i].preConsumes === Infinity
                    ? i
                    : tokens[i].preConsumes
                    ;

                startPre = i - preConsumes;
                if(startPre < 0)
                    throw new PropertyLanguageError('Stack underflow at a "'+tokens[i]+'" '
                                    + 'operator, which pre-consumes more items '
                                    + 'than there are on the stack');

                // skip the operator itself
                startPost = i+1;

                // If postConsumes is Infinity, the operator consumes
                // anything that is on the stack after its position.
                // This is useful for some kind of list creation.
                postConsumes = tokens[i].postConsumes === Infinity
                    ? tokens.length - startPost
                    : tokens[i].postConsumes
                    ;

                endPost = startPost + postConsumes;
                if(endPost > tokens.length)
                    throw new PropertyLanguageError('Stack underflow at a "'+tokens[i]+'" '
                                    + 'operator, which post-consumes more items '
                                    + 'than there are on the stack');

                operation = tokens.slice(startPre, i)
                                  .concat(tokens.slice(startPost, endPost));

                // check if everything looks alright
                for(k=0; k<operation.length; k++)
                    if(!(operation[k] instanceof _ValueToken)
                                    && !(operation[k] instanceof Array))
                        throw new PropertyLanguageError('Malformed stack at a "'
                            + tokens[i].literal+'" operator, which consumes '
                            + (operation[k] instanceof OperatorToken
                                ? 'another operator: "' + operation[k].literal + '"'
                                : 'something that is not a ValueToken: "'
                                    + operation[k] + '" typeof: '
                                    + typeof operation[k]
                                    + ' '+operation[k].constructor.name));
                // add the operator
                if(tokens[i].preConsumes === Infinity
                                || tokens[i].postConsumes === Infinity)
                    operation.push(
                        tokens[i].fixedConsumptionFactory(
                                            preConsumes, postConsumes));
                else
                    operation.push(tokens[i]);

                // change in place, the operation becomes one array
                // and will be handled as a single value in later
                // repetitions.
                tokens.splice(startPre, operation.length, operation);
                i = startPre;
            }
        }
        return _flatten(tokens);
    };

    /**
     * selectorEngine is optional, it will cause a selector to be compiled
     * immediately, contrary to beeing compiled when first used.
     */
    _p.parse = function(string, selectorEngine) {
        if(!this._StackConstructor)
            throw new PropertyLanguageError('StackConstructor is missing. Run engine.setStackConstructor before running engine.parse.');
        var tokens = this.tokenize(string, selectorEngine);
        tokens = this.infixToPostfix(tokens);
        if(!tokens.length)
            throw new PropertyLanguageError('The input string did not produce any instructions.');
        return new this._StackConstructor(tokens);
    };

    return Parser;
});

define('Atem-Property-Language/parsing/Stack',[
    'Atem-Property-Language/errors'
  , './_ValueToken'
  , './NumberToken'
  , './StringToken'
  , './SelectorToken'
], function(
    errors
  , _ValueToken
  , NumberToken
  , StringToken
  , SelectorToken
) {
    "use strict";

    var PropertyLanguageError = errors.PropertyLanguage
      , stackCache = Object.create(null)
      ;


    function Stack(postfixStack) {
        // raises PropertyLanguageError
        this._check(postfixStack);
        var sig;
        this._signature = sig = this._makeSignature(postfixStack);
        this._stack = this._unwrap(postfixStack);

        this.execute = stackCache[sig] || (stackCache[sig] = this._compile(postfixStack));
        // this.execute = this._compile();
    }

    var _p = Stack.prototype;
    _p.toString = function() {
        return this._stack.join('|');
    };

    // define via inheritance
    _p._finalizeMethod = null;

    Object.defineProperty(_p, 'items', {
        get: function(){ return this._stack.slice(); }
    });

    _p._unwrap = function(stack) {
        var result = [], i,l, token;
        for(i=0,l=stack.length;i<l;i++) {
            token = stack[i];
            result.push((token instanceof NumberToken || token instanceof StringToken
                                                      || token instanceof SelectorToken
                ? token.getValue()
                : token
                ));
        }
        return result;
    };

    _p._makeSignature = function (stack) {
        var i,l, result = [], c=0;
        for(i=0,l=stack.length;i<l;i++) {
            if(stack[i] instanceof _ValueToken)
                c++;
            else {
                if(c) {
                    result.push('c', c);
                    c = 0;
                }
                result.push('e', stack[i].consumes);
            }
        }
        if(c) result.push('c', c);
        if(this._finalizeMethod) result.push('f');
        return result.join('');
    };

    _p._makeDebugMessageStackDetails = function(stack){
        var commands = stack.slice()
         , stck = []
         , i=0
         ;
        for(;i<commands.length;i++) {
            if(commands[i] instanceof _ValueToken)
                stck.push(commands[i]);
             else {
                stck.push('[result of '+commands[i].literal + '('+stck.splice(-commands[i].consumes)+')]');
            }
        }
        return stck.join(' | ');
    };

    _p._check = function(stack) {
        var i=0, stackLen = 0;
        for(; i<stack.length;i++) {
            stackLen -= stack[i].consumes;
            if(stackLen < 0)
                throw new PropertyLanguageError('Stack underflow at ('+i+') a '
                    + stack[i] + ' in ' + stack.join('|') + '. '
                    + 'This means an operator consumes more items than '
                    + 'there are on the stack.\n'
                    + 'Execution hints:\n'
                    + this._makeDebugMessageStackDetails(stack));
            stackLen += stack[i].ejects;
        }

        if(stackLen > 1)
            throw new PropertyLanguageError('Stack too crowded. A stack must '
                        + 'eventually resolve to 1 item, the result. This '
                        + 'stack has still ' + stackLen + ' items.\n'
                        + 'Stack in postfix notation:\n'
                        +  stack.join(' |\n')
                        + '\nExecution hints:\n'
                        + this._makeDebugMessageStackDetails(stack));
    };

    _p._compile = function(_stack) {
        /*jshint evil:true*/
        var i, l
          , args
          , stack = []
          , resultCounter = 0
          , resultName = 'commands[0]'
          , body = [
               '"use strict";'
              , 'var commands = this._stack;'
          ];
        for(i=0,l=this._stack.length;i<l;i++) {
            if(_stack[i] instanceof _ValueToken)
                stack.push('commands[' + i +']');
            else {
                args = [];
                Array.prototype.push.apply(args
                                , stack.splice(-_stack[i].consumes));
                resultName = 'r'+ (resultCounter++);
                body.push('var '+resultName+' = commands['+ i +'].execute(getAPI, ['+ args.join(',') +']);');
                stack.push(resultName);
            }
        }
        // return the last result
        if(this._finalizeMethod)
            body.push('return this._finalizeMethod(' + resultName + ', getAPI);');
        else
            body.push('return '+ resultName + ';');
        return new Function('getAPI', body.slice(1).join('\n'));
    };

    // This is replaced with a compiled version on initialisation.
    // It remains here because the algorithm is more obvious.
    _p.execute = function(getAPI) {
        var commands = this._stack.slice()
          , stack = []
          , args
          , i = 0
          , result
          , returned
          ;

        for(;i<commands.length;i++) {
            if(commands[i] instanceof _ValueToken)
                stack.push(commands[i]);
            else {
                args = [getAPI];
                Array.prototype.push.apply(args
                                , stack.splice(-commands[i].consumes));
                // commands always return only one element currently
                returned = commands[i].execute.apply(commands[i], args);
                stack.push( returned );
            }
        }

        // stack.length should be 1 at this point
        if(stack.length === 0)
            throw new PropertyLanguageError('No result: stack is empty after '
                            + 'execution. ' +  this._stack.join('|'));
        if(stack.length > 1)
            throw new PropertyLanguageError('Too many results, stack contains '
                            +'more than one item after execution: '
                            + this._stack.join('|'));

        result = stack.pop();
        return (this._finalizeMethod
            ?  this._finalizeMethod(result, getAPI)
            : result
        );
    };

    return Stack;
});

/**
 * Copyright (c) 2011, Lasse Fister lasse@graphicore.de, http://graphicore.de
 *
 * You should have received a copy of the MIT License along with this program.
 * If not, see http://www.opensource.org/licenses/mit-license.php
 *
 * This is a translation of the contents of fontTools/misc/transform.py
 * The svn revision of the source file in trunk/Lib/  was 588 from 2011-03-28 12:18:27 +0200
 *
 * Some cool python features do not work on this thing but I put in some
 * efforts to mimic the python implementation. The future will show whether
 * the direction is good
 *
 * I even copied the docstrings and comments! (These may still refer to
 * the Python code)
 *
 * Affine 2D transformation matrix class.
 *
 * The Transform class implements various transformation matrix operations,
 * both on the matrix itself, as well as on 2D coordinates.
 *
 * This module exports the following symbols:
 *
 *     Transform -- this is the main class
 *     Identity  -- Transform instance set to the identity transformation
 *     Offset    -- Convenience function that returns a translating transformation
 *     Scale     -- Convenience function that returns a scaling transformation
 *
 * Examples: //still in python
 *
 *     >>> t = Transform(2, 0, 0, 3, 0, 0)
 *     >>> t.transformPoint((100, 100))
 *     (200, 300)
 *     >>> t = Scale(2, 3)
 *     >>> t.transformPoint((100, 100))
 *     (200, 300)
 *     >>> t.transformPoint((0, 0))
 *     (0, 0)
 *     >>> t = Offset(2, 3)
 *     >>> t.transformPoint((100, 100))
 *     (102, 103)
 *     >>> t.transformPoint((0, 0))
 *     (2, 3)
 *     >>> t2 = t.scale(0.5)
 *     >>> t2.transformPoint((100, 100))
 *     (52.0, 53.0)
 *     >>> import math
 *     >>> t3 = t2.rotate(math.pi / 2)
 *     >>> t3.transformPoint((0, 0))
 *     (2.0, 3.0)
 *     >>> t3.transformPoint((100, 100))
 *     (-48.0, 53.0)
 *     >>> t = Identity.scale(0.5).translate(100, 200).skew(0.1, 0.2)
 *     >>> t.transformPoints([(0, 0), (1, 1), (100, 100)])
 *     [(50.0, 100.0), (50.550167336042726, 100.60135501775433), (105.01673360427253, 160.13550177543362)]
 *     >>>
 */

define(
    'Atem-Math-Tools/transform',['Atem-Errors/errors'],
    function(errors)
{
    "use strict";
    /*shortcuts*/
    var KeyError = errors.Key;

    /*constants*/
    var EPSILON = 1e-15,
        ONE_EPSILON = 1 - EPSILON,
        MINUS_ONE_EPSILON = -1 + EPSILON;

    /*helpers*/
    function _normSinCos(v)
    {
        if (Math.abs(v) < EPSILON)
            v = 0;
        else if (v > ONE_EPSILON)
            v = 1;
        else if (v < MINUS_ONE_EPSILON)
            v = -1;
        return v;
    }

    /*constructor*/
    /**
    * 2x2 transformation matrix plus offset, a.k.a. Affine transform.
    * All transforming methods, eg. rotate(), return a new Transform instance.
    *
    * Examples: //in python still
    *    >>> t = Transform()
    *    >>> t
    *    <Transform [1 0 0 1 0 0]>
    *    >>> t.scale(2)
    *    <Transform [2 0 0 2 0 0]>
    *    >>> t.scale(2.5, 5.5)
    *    <Transform [2.5 0.0 0.0 5.5 0 0]>
    *    >>>
    *    >>> t.scale(2, 3).transformPoint((100, 100))
    *    (200, 300)
    */
    function Transform(transformation /* [xx=1, xy=0, yx=0, yy=1, dx=0, dy=0] */) {
        //can't change easily after creation
        var affine = [1, 0, 0, 1, 0, 0];

        /**
         * the next two methods are just accessors to the local affine value
         **/
        this.__get = function (key)
        {
            if(affine[key] === undefined)
                throw new KeyError('The key ' + key + 'does not exist in' + this);
            return affine[key];
        };
        this.__affine = function()
        {
            //return a copy
            return affine.slice(0);
        };

        if(transformation === undefined)
            return;
        for(var i = 0; i < 6; i++) {
            if(transformation[i] === undefined || transformation[i] === null)
                continue;
            affine[i] = transformation[i];
        }
    }
    var _p = Transform.prototype;

    /*definition*/
        /**
         * Transform a point.
         *
         *  Example:
         *      >>> t = Transform()
         *      >>> t = t.scale(2.5, 5.5)
         *      >>> t.transformPoint((100, 100))
         *      (250.0, 550.0)
         */
    _p.transformPoint = function( pt )
        {
            var xx = this[0],
                xy = this[1],
                yx = this[2],
                yy = this[3],
                dx = this[4],
                dy = this[5],
                x = pt[0],
                y = pt[1];
            return [xx*x + yx*y + dx, xy*x + yy*y + dy];
        };
        /**
         * Transform a list of points.
         *
         * Example: //in python
         *      >>> t = Scale(2, 3)
         *      >>> t.transformPoints([(0, 0), (0, 100), (100, 100), (100, 0)])
         *      [(0, 0), (0, 300), (200, 300), (200, 0)]
         *      >>>
         */
    _p.transformPoints = function(points)
        {
            return points.map(this.transformPoint, this);
        };
        /**
         * Return a new transformation, translated (offset) by x, y.
         *
         * Example:
         *      >>> t = Transform()
         *      >>> t.translate(20, 30)
         *      <Transform [1 0 0 1 20 30]>
         *      >>>
         */
    _p.translate = function(x, y)
        {
            x = x || 0;
            y = y || 0;
            return this.transform([1, 0, 0, 1, x, y ]);
        };
        /**
         * Return a new transformation, scaled by x, y. The 'y' argument
         * may be undefined, which implies to use the x value for y as well.
         *
         * Example:
         *      >>> t = Transform()
         *      >>> t.scale(5)
         *      <Transform [5 0 0 5 0 0]>
         *      >>> t.scale(5, 6)
         *      <Transform [5 0 0 6 0 0]>
         *      >>>
         */
    _p.scale = function(x, y)
        {
            if(x === undefined)
                x = 1;
            if(y === undefined || y === null)
                y = x;
            return this.transform([x, 0, 0, y, 0, 0]);
        };
        /**
         * Return a new transformation, rotated by 'angle' (radians).
         *
         * Example: //python
         *      >>> import math
         *      >>> t = Transform()
         *      >>> t.rotate(math.pi / 2)
         *      <Transform [0 1 -1 0 0 0]>
         *      >>>
         */
    _p.rotate = function(angle)
        {
            var c = _normSinCos(Math.cos(angle)),
                s = _normSinCos(Math.sin(angle));
            return this.transform([c, s, -s, c, 0, 0]);
        };
        /**
         * Return a new transformation, skewed by x and y.
         *
         * Example:
         *      >>> import math
         *      >>> t = Transform()
         *      >>> t.skew(math.pi / 4)
         *      <Transform [1.0 0.0 1.0 1.0 0 0]>
         *      >>>
         */
    _p.skew = function(x, y)
        {
            x = x || 0;
            y = y || 0;
            return this.transform([1, Math.tan(y), Math.tan(x), 1, 0, 0]);
        };
        /**
         * Return a new transformation, transformed by another
         * transformation.
         *
         * Example:
         *      >>> t = Transform(2, 0, 0, 3, 1, 6)
         *      >>> t.transform((4, 3, 2, 1, 5, 6))
         *      <Transform [8 9 4 3 11 24]>
         *      >>>
         */
    _p.transform = function(other)
        {
            var xx1 = other[0],
                xy1 = other[1],
                yx1 = other[2],
                yy1 = other[3],
                dx1 = other[4],
                dy1 = other[5],
                xx2 = this[0],
                xy2 = this[1],
                yx2 = this[2],
                yy2 = this[3],
                dx2 = this[4],
                dy2 = this[5];
            return new Transform([
                xx1*xx2 + xy1*yx2,
                xx1*xy2 + xy1*yy2,
                yx1*xx2 + yy1*yx2,
                yx1*xy2 + yy1*yy2,
                xx2*dx1 + yx2*dy1 + dx2,
                xy2*dx1 + yy2*dy1 + dy2
            ]);
        };
        /**
         * Return a new transformation, which is the other transformation
         * transformed by self. self.reverseTransform(other) is equivalent to
         * other.transform(self).
         *
         * Example:
         *      >>> t = Transform(2, 0, 0, 3, 1, 6)
         *      >>> t.reverseTransform((4, 3, 2, 1, 5, 6))
         *      <Transform [8 6 6 3 21 15]>
         *      >>> Transform(4, 3, 2, 1, 5, 6).transform((2, 0, 0, 3, 1, 6))
         *      <Transform [8 6 6 3 21 15]>
         *      >>>
         */
    _p.reverseTransform = function(other)
        {
            var xx1 = this[0],
                xy1 = this[1],
                yx1 = this[2],
                yy1 = this[3],
                dx1 = this[4],
                dy1 = this[5],
                xx2 = other[0],
                xy2 = other[1],
                yx2 = other[2],
                yy2 = other[3],
                dx2 = other[4],
                dy2 = other[5];
            return new Transform([
                xx1*xx2 + xy1*yx2,
                xx1*xy2 + xy1*yy2,
                yx1*xx2 + yy1*yx2,
                yx1*xy2 + yy1*yy2,
                xx2*dx1 + yx2*dy1 + dx2,
                xy2*dx1 + yy2*dy1 + dy2
            ]);
        };
        /**
         * Return the inverse transformation.
         *
         * Example:
         *     >>> t = Identity.translate(2, 3).scale(4, 5)
         *     >>> t.transformPoint((10, 20))
         *     (42, 103)
         *     >>> it = t.inverse()
         *     >>> it.transformPoint((42, 103))
         *     (10.0, 20.0)
         *     >>>
         */
    _p.inverse = function()
        {
            if( this.cmp(Identity) )
                return this;
            var XX = this[0],
                XY = this[1],
                YX = this[2],
                YY = this[3],
                DX = this[4],
                DY = this[5],
                det = XX*YY - YX*XY,
                xx = YY/det,
                xy = -XY/det,
                yx = -YX/det,
                yy = XX/det,
                dx = -xx*DX - yx*DY,
                dy = -xy*DX - yy*DY;
            return new Transform([xx, xy, yx, yy, dx, dy]);
        };
        /**
         * Return a PostScript representation:
         *  >>> t = Identity.scale(2, 3).translate(4, 5)
         *  >>> t.toPS()
         *  '[2 0 0 3 8 15]'
         *  >>>
         */
    _p.toPS = function()
        {
            return ['[', this.__affine().join(' '),']'].join('');
        };
    /*compare*/
    _p.cmp = function(other)
        {
            return (
               other[0] === this[0]
            && other[1] === this[1]
            && other[2] === this[2]
            && other[3] === this[3]
            && other[4] === this[4]
            && other[5] === this[5]
            );
        };
    _p.valueOf = function()
        {
            return ['<Transform ', this.toPS(), '>'].join('');
        };
    _p.toString = function()
        {
            return this.__affine().join(' ');
        };
        /**
         * Transform instances also behave like a list of length 6:
         */
    Object.defineProperty(_p, 'length', {
        get: function(){
            return 6;
        }
    });
        /**
         * Transform instances also behave like sequences and even support
         * slicing...
         */
    _p.slice = function(start, len)
        {
            return this.__affine().slice(start, len);
        };
        /**
         * Transform is usable kind of like an array
         * var t = new Transform();
         * echo t[0]; //1
         */
    Object.defineProperties(_p, {
        0: {get: function() { return this.__get(0); }}
      , 1: {get: function() { return this.__get(1); }}
      , 2: {get: function() { return this.__get(2); }}
      , 3: {get: function() { return this.__get(3); }}
      , 4: {get: function() { return this.__get(4); }}
      , 5: {get: function() { return this.__get(5); }}
    });
    /**
    * Return the identity transformation offset by x, y.
    *
    * Example:
    *      >>> offset(2, 3)
    *      <Transform [2 0 0 3 0 0]>
    *      >>>
    */
    function Offset (x, y) {
        x = x || 0;
        y = y || 0;
        return new Transform([1, 0, 0, 1, x, y]);
    }

    /**
     * Return the identity transformation scaled by x, y. The 'y' argument
     * may be None, which implies to use the x value for y as well.
     *
     * Example:
     *  >>> Scale(2, 3)
     *  <Transform [2 0 0 3 0 0]>
     *  >>>
     */
    function Scale (x, y) {
        if(y === undefined || y === null)
            y = x;
        return new Transform([x, 0, 0, y, 0, 0]);
    }

    var Identity = new Transform();

    return {
        Transform: Transform,
        Identity: Identity,
        Offset: Offset,
        Scale: Scale
    };
});

(function (global, factory) {
  /*globals module:true define:true*/
  if (typeof exports === "object" && exports) {
    module.exports = factory(); // CommonJS
  } else if (typeof define === "function" && define.amd) {
    define('complex/Complex',[], factory); // AMD
  } else {
    global.Complex = factory();// <script>
  }
}(this, function() {
"use strict";
var Complex = function(real, imag) {
	Object.defineProperty(this, 'real', {
		value: real !== undefined ? real : 0
		, writable: false
	});

	Object.defineProperty(this, 'imag', {
		value: imag !== undefined ? imag : 0
		, writable: false
	});
};

var prototype = Complex.prototype = {
	constructor: Complex,
	fromRect: function(a, b) {
		return new this.constructor(a, b);
	},

	fromPolar: function(r, phi){
		if (typeof r == 'string'){
			var parts = r.split(' ');
			r = parts[0];
			phi = parts[1];
		}
		return new this.constructor(
			r * Math.cos(phi),
			r * Math.sin(phi)
		);
	},

	toPrecision: function(k){
		return new this.constructor(
			this.real.toPrecision(k),
			this.imag.toPrecision(k)
		);
	},

	toFixed: function(k){
		return new this.constructor(
			this.real.toFixed(k),
			this.imag.toFixed(k)
		);
	},

	magnitude: function(){
		var a = this.real, b = this.imag;
		return Math.sqrt(a * a + b * b);
	},

	angle: function(){
		return Math.atan2(this.imag, this.real);
	},

	conjugate: function(){
		return new this.constructor(this.real, -this.imag);
	},

	negate: function(){
		return new this.constructor(-this.real, -this.imag);
	},

	multiply: function(z){
		z = this.constructor.from(z);
		var a = this.real, b = this.imag;
		return new this.constructor(
			z.real * a - z.imag * b,
			b * z.real + z.imag * a
		);
	},

	divide: function(z){
		z = this.constructor.from(z);
		var divident = (Math.pow(z.real, 2) + Math.pow(z.imag, 2)),
			a = this.real, b = this.imag;
		return new this.constructor(
			(a * z.real + b * z.imag) / divident,
			(b * z.real - a * z.imag) / divident
		);
	},

	add: function(z){
		z = this.constructor.from(z);
		return new this.constructor(this.real + z.real, this.imag + z.imag);
	},

	subtract: function(z){
		z = this.constructor.from(z);
		return new this.constructor(this.real - z.real, this.imag - z.imag);
	},

	pow: function(z){
		z = this.constructor.from(z);
		var result = z.multiply(this.clone().log()).exp(); // z^w = e^(w*log(z))
		return new this.constructor(result.real, result.imag);
	},

	sqrt: function(){
		var abs = this.magnitude(),
			sgn = this.imag < 0 ? -1 : 1;
		return new this.constructor(
			Math.sqrt((abs + this.real) / 2),
			sgn * Math.sqrt((abs - this.real) / 2)
		);
	},

	log: function(k){
		if (!k) k = 0;
		return new this.constructor(
			Math.log(this.magnitude()),
			this.angle() + k * 2 * Math.PI
		);
	},

	exp: function(){
		return this.fromPolar(
			Math.exp(this.real),
			this.imag
		);
	},

	sin: function(){
		var a = this.real, b = this.imag;
		return new this.constructor(
			Math.sin(a) * cosh(b),
			Math.cos(a) * sinh(b)
		);
	},

	cos: function(){
		var a = this.real, b = this.imag;
		return new this.constructor(
			Math.cos(a) * cosh(b),
			Math.sin(a) * sinh(b) * -1
		);
	},

	tan: function(){
		var a = this.real, b = this.imag,
			divident = Math.cos(2 * a) + cosh(2 * b);
		return new this.constructor(
			Math.sin(2 * a) / divident,
			sinh(2 * b) / divident
		);
	},

	sinh: function(){
		var a = this.real, b = this.imag;
		return new this.constructor(
			sinh(a) * Math.cos(b),
			cosh(a) * Math.sin(b)
		);
	},

	cosh: function(){
		var a = this.real, b = this.imag;
		return new this.constructor(
			cosh(a) * Math.cos(b),
			sinh(a) * Math.sin(b)
		);
	},

	tanh: function(){
		var a = this.real, b = this.imag,
			divident = cosh(2 * a) + Math.cos(2 * b);
		return new this.constructor(
			sinh(2 * a) / divident,
			Math.sin(2 * b) / divident
		);
	},

	clone: function(){
		return new this.constructor(this.real, this.imag);
	},

	toString: function(polar){
		if (polar) return this.magnitude() + ' ' + this.angle();

		var ret = '', a = this.real, b = this.imag;
		if (a) ret += a;
		if (a && b || b < 0) ret += b < 0 ? '-' : '+';
		if (b){
			var absIm = Math.abs(b);
			if (absIm != 1) ret += absIm;
			ret += 'i';
		}
		return ret || '0';
	},

	equals: function(z) {
		z = this.constructor.from(z);
		return (z.real == this.real && z.imag == this.imag);
	}

};

var alias = {
	abs: 'magnitude'
  , arg: 'angle'
  , phase: 'angle'
  , conj: 'conjugate'
  , '**': 'pow'
  , mult: 'multiply'
  , '*':  'multiply'
  , dev: 'divide'
  , '/': 'divide'
  , '+': 'add'
  , sub: 'subtract'
  , '-': 'subtract'
  , '=': 'equals'
};

for (var a in alias) prototype[a] = prototype[alias[a]];

// factories and constants
var extend = {

	from: function(real, im) {
		if (real instanceof Complex) return new Complex(real.real, real.imag);
		return new Complex(real, im);
	},

	fromString: function(str) {
		var match, real, im;
		if (str == 'i') str = '0+1i';
		match = str.match(/(\d+)?([\+\-]\d*)[ij]/);
		if (match) {
			real = match[1];
			im = (match[2] == '+' || match[2] == '-')
				? match[2] + '1'
				: match[2];
		}
		return new Complex(+real, +im);
	},

	fromPolar: function(r, phi) {
		return new Complex(1, 1).fromPolar(r, phi);
	},

	i: new Complex(0, 1),

	one: new Complex(1, 0)

};

for (var e in extend) Complex[e] = extend[e];

var sinh = function(x){
	return (Math.pow(Math.E, x) - Math.pow(Math.E, -x)) / 2;
};

var cosh = function(x){
	return (Math.pow(Math.E, x) + Math.pow(Math.E, -x)) / 2;
};

return Complex;

}));

define('Atem-Math-Tools/Vector',[
    'complex/Complex'
    // This is a forward dependency so that Vector can be used within CPS
  , 'Atem-CPS-whitelisting/whitelisting'
], function(
    Parent
  , whitelisting
) {
    "use strict";

    /**
     * Add access with geometry names "x" and "y" and a minimal
     * array interface with length (== 2), 0, 1;
     */
    function Vector(x, y) {
        Parent.call(this, x, y);
    }
    var _p = Vector.prototype = Object.create(Parent.prototype);
    _p.constructor = Vector;

    _p._cps_whitelist = {
        x: 'x'
      , y: 'y'
      , length: 'len'
      , angle: 'rad'
    };
    _p.cpsGet = whitelisting.getMethod;
    _p.cpsHas = whitelisting.hasMethod;


    Vector.fromArray = function(arr) {
        return new _p.constructor(arr[0], arr[1]);
    };

    function _getReal() {
        /*jshint validthis:true*/
        return this.real;
    }

    function _getImaginary() {
        /*jshint validthis:true*/
        return this.imag;
    }

    Object.defineProperty(_p, 'x', {get: _getReal});
    Object.defineProperty(_p, 'y', {get: _getImaginary});

    // array interface
    Object.defineProperty(_p, 'length', {
        value: 2
      , writable: false
      , enumerable: true
    });
    Object.defineProperty(_p, '0', {get: _getReal});
    Object.defineProperty(_p, '1', {get: _getImaginary});

    _p.valueOf = function() {
        return Array.prototype.slice.call(this);
    };

    _p.toString = function() {
        return '<Vector ' + this.valueOf() +'>';
    };

    // factories and constants
    Vector.i = new Vector(0, 1);
    Vector.one = new Vector(1, 0);

    Vector.from = function(x, y) {
        // just map to Parent and then convert
        var complex = Parent.from(x, y);
        return new Vector(complex.real, complex.imag);
    };

    Vector.fromPolar = function(r, phi) {
        return new Vector(1, 1).fromPolar(r, phi);
    };


    // Some getters, so we can use these easily with CPS. At the moment
    // CPS doesn't provide facilities to call external methods, i.e.
    // methods that are not defined as operators but properties of the
    // element at hand. I think this would make more problems than it
    // would solve, so getters is the way.

    /**
     * A getter for the "length" of the vector, however "length" is already
     * used for an array like interface of Vector. So "len" it is, because
     * its short and often used to abbreviate "length".
     */
    Object.defineProperty(_p, 'len', {
        get: Parent.prototype.magnitude
    });

    /**
     * A getter for the angle of the vector in radians.
     */
    Object.defineProperty(_p, 'rad', {
        get: Parent.prototype.angle
    });

    return Vector;
});

/* Shared math functions */
define('Atem-Math-Tools/utils',[], function() {
    "use strict";

    /**
     * Normalize `angle` given in radians between 0 and 2*PI
     */
    function normalizeAngle(angle) {
        var result = angle % (2*Math.PI);
        if(result < 0)
            result += (2*Math.PI);
        return result;
    }

    return {
        normalizeAngle: normalizeAngle
    };
});

define('Atem-Math-Tools/hobby',[
    './Vector'
  , './utils'
], function(
    Vector
  , utils
) {
    "use strict";

    /**
     * All points in this module are expected instances of
     * metapolator/math/Vector (complex numbers)
     */

    var normalizeAngle = utils.normalizeAngle;

    function hobby(theta, phi) {
        var st = Math.sin(theta)
          , ct = Math.cos(theta)
          , sp = Math.sin(phi)
          , cp = Math.cos(phi)
          ;
        return (
        (2 + Math.sqrt(2) * (st-1/16*sp) * (sp-1/16*st) * (ct-cp)) /
        (3 * (1 + 0.5*(Math.sqrt(5)-1)* ct + 0.5*(3-Math.sqrt(5))*cp))
        );
    }

    /**
     * Returns two distances from the respective on-curve points to their
     * control points on the given curve segment.
     *
     * dir0 and dir1 are the tangent directions as radians or instances
     * of Vector.
     *
     * alpha and beta are the tension parameters. The tensions values alpha
     * and beta have no influence on the resulting distance of each other.
     *
     * Tensions are bigger the closer they are to their on-curve points.
     * When using Infinity as a tension the returned magnitude is 0;
     * When using 0 as a tension the returned magnitude is Infinity.
     *    When the tension is 0 and z0 equals z1 its resulting
     *    magnitude is NaN; in this case it is short circuited into
     *    returning Infinity, which is OK as a behavior; because it obeys
     *    the rule above, also it's compatible with the reverse operation
     *    magnitude2tension.
     */
    function _tension2magnitude(z0, dir0, alpha, beta, dir1, z1) {
        var diff_z1z0 = z1['-'](z0)
          , angle_z1z0 = diff_z1z0.angle()
          , magnitude_z1z0 = diff_z1z0.magnitude()
            // calculating this using the polar form helps us by not
            // getting into trouble when z1['-'](z0) is <Vector 0, 0>
            // because that would cause a division by 0 when calculating
            // theta and pi using cartesian arithmetic.
          , theta = normalizeAngle(dir0 - angle_z1z0)
          , phi = normalizeAngle(angle_z1z0 - dir1)
          , u, v;

        if(alpha !== undefined)
            u = (magnitude_z1z0 === 0 && (alpha === 0 || alpha === Infinity))
                ? (alpha === 0 ? Infinity : 0)
                : magnitude_z1z0 * hobby(theta, phi) / alpha
                ;
        if(beta !== undefined)
            v = (magnitude_z1z0 === 0 && (beta === 0 || beta === Infinity))
                ? (beta === 0 ? Infinity : 0)
                : magnitude_z1z0 * hobby(phi, theta) / beta
                ;
        return [u, v];
    }

    function tension2magnitude(z0, dir0, alpha, beta, dir1, z1) {
        var uv = _tension2magnitude(z0, dir0, alpha, beta, dir1, z1);
        if(uv[0] === undefined) uv[0] = NaN;
        if(uv[1] === undefined) uv[1] = NaN;
        return uv;
    }

    function tension2magnitudeOut(z0, dir0, alpha, dir1, z1) {
        return _tension2magnitude(z0, dir0, alpha, undefined, dir1, z1)[0];
    }

    function tension2magnitudeIn(z0, dir0, beta, dir1, z1) {
        return _tension2magnitude(z0, dir0, undefined, beta, dir1, z1)[1];
    }

    /**
     * dir0 and dir1 are radians
     * alpha, beta are the magnitudes
     *
     * Also
     * [Infinity, Infinity] instead of [NaN, NaN] when the magnitudes are 0
     * And it can still return a tension for one control when the other
     * control is 0
     */
    function _magnitude2tension(z0, dir0, alpha, beta, dir1, z1) {
        var uv, u, v
            // 1 is the default tension
          , _alpha = alpha === 0 || alpha === undefined ? undefined : 1
          , _beta = beta === 0 || beta === undefined ? undefined : 1
          ;
        if(_alpha || _beta)
            uv = _tension2control(z0, dir0, _alpha, _beta, dir1, z1);

        if(alpha === 0)
            u = Infinity;
        else if (alpha !== undefined)
            u = uv[0]['-'](z0).magnitude()/alpha;

        if(beta === 0)
            v = Infinity;
        else if (beta !== undefined)
            v = uv[1]['-'](z1).magnitude()/beta;

        return[u, v];
    }

    function magnitude2tension(z0, dir0, alpha, beta, dir1, z1) {
        var uv = _magnitude2tension(z0, dir0, alpha, beta, dir1, z1);
        if(uv[0] === undefined) uv[0] = NaN;
        if(uv[1] === undefined) uv[1] = NaN;
        return uv;
    }

    function magnitude2tensionOut(z0, dir0, alpha, dir1, z1) {
        return _magnitude2tension(z0, dir0, alpha, undefined, dir1, z1)[0];
    }

    function magnitude2tensionIn(z0, dir0, beta, dir1, z1) {
        return _magnitude2tension(z0, dir0, undefined, beta, dir1, z1)[1];
    }

    /**
     * returns vectors for the absolute positions of the control points
     * used to be called hobby2cubic
     */
    function _tension2control(z0, dir0, alpha, beta, dir1, z1) {
        /*global console:true*/
        var d0, d1, uv, u, v;

        if(dir0 instanceof Vector || dir1 instanceof Vector)
            console.warn('It is deprecated to use Vectors for dir0 or dir1');

        d0 = (dir0 instanceof Vector) ? dir0.arg() : dir0;
        d1 = (dir1 instanceof Vector) ? dir1.arg() : dir1;

        uv = _tension2magnitude(z0, d0, alpha, beta, d1, z1);
        if(uv[0] !== undefined)
            u = Vector.fromPolar(uv[0], d0)['+'](z0);
        if(uv[1] !== undefined)
            v = z1['-'](Vector.fromPolar(uv[1], d1));
        return [u, v];
    }

    function tension2control(z0, dir0, alpha, beta, dir1, z1) {
        var uv = _tension2control(z0, dir0, alpha, beta, dir1, z1);
        if(uv[0] === undefined) uv[0] = new Vector(NaN, NaN);
        if(uv[1] === undefined) uv[1] = new Vector(NaN, NaN);
        return uv;
    }

    function tension2controlOut (z0, dir0, alpha, dir1, z1) {
        return tension2control(z0, dir0, alpha, undefined, dir1, z1)[0];
    }

    function tension2controlIn (z0, dir0, beta, dir1, z1) {
        return tension2control(z0, dir0, undefined, beta, dir1, z1)[1];
    }

    /**
     * If you need both tension values, this version is more efficient
     * than calling posttension and pretension.
     */
    function control2tension(p0, p1, p2, p3) {
        var diffp0p1 = p1['-'](p0)
          , diffp3p2 = p3['-'](p2)
          , dir0 = diffp0p1.angle()
          , dir1 = diffp3p2.angle()
          , alpha = diffp0p1.magnitude()
          , beta = diffp3p2.magnitude()
          ;
        return _magnitude2tension(p0, dir0, alpha, beta, dir1, p3);
    }
    /**
     * returns the tension for the first on-curve point.
     */
    function control2tensionOut(p0, p1, p2, p3) {
        var diffp0p1 = p1['-'](p0)
          , diffp3p2 = p3['-'](p2)
          , dir0 = diffp0p1.angle()
          , dir1 = diffp3p2.magnitude()
          , alpha = diffp0p1.magnitude()
          ;
        return magnitude2tensionOut(p1, dir0, alpha, dir1, p3);
    }
    /**
     * returns the tension for the second on-curve point
     */
    function control2tensionIn(p0, p1, p2, p3) {
        var diffp0p1 = p1['-'](p0)
          , diffp3p2 = p3['-'](p2)
          , dir0 = diffp0p1.angle()
          , dir1 = diffp3p2.magnitude()
          , beta = diffp3p2.magnitude()
          ;
        return magnitude2tensionIn(p1, dir0, beta, dir1, p3);
    }

    return {
        hobby: hobby

      , tension2magnitude: tension2magnitude
      , tension2magnitudeOut: tension2magnitudeOut
      , tension2magnitudeIn: tension2magnitudeIn

      , magnitude2tension: magnitude2tension
      , magnitude2tensionOut: magnitude2tensionOut
      , magnitude2tensionIn: magnitude2tensionIn

      , tension2control: tension2control
      , hobby2cubic: tension2control // DEPRECATED
      , tension2controlOut: tension2controlOut
      , tension2controlIn: tension2controlIn

      , control2tension: control2tension
      , tensions: control2tension // DEPRECATED
      , control2tensionOut: control2tensionOut
      , posttension: control2tensionOut // DEPRECATED
      , control2tensionIn: control2tensionIn
      , pretension: control2tensionIn // DEPRECATED
    };
});

define('Atem-Property-Language/flavours/MOM/parser',[
    'Atem-Property-Language/errors'
  , 'Atem-Property-Language/parsing/Parser'
  , 'Atem-Property-Language/parsing/Stack'
  , 'Atem-Property-Language/parsing/OperatorToken'
  , 'Atem-Property-Language/parsing/NameToken'
  , 'Atem-Property-Language/parsing/_Token'
  , 'Atem-CPS/CPS/elements/SelectorList'
  , 'Atem-CPS/CPS/parsing/parseSelectorList'
  , 'Atem-CPS/OMA/_Node'
  // The Atem-Math-Tools dependency is added to Atem-Property-Language just
  // for this MOM-flavour. Make an Atem-MOM-Property-Language stand-alone module?
  , 'Atem-Math-Tools/transform'
  , 'Atem-Math-Tools/Vector'
  , 'Atem-Math-Tools/hobby'
  , 'Atem-Math-Tools/utils'
], function(
    errors
  , Parser
  , Stack
  , Operator
  , NameToken
  , _Token
  , SelectorList
  , parseSelectorList
  , _OMANode
  , transform
  , Vector
  , hobby
  , mathUtils
) {
    "use strict";

    var ValueError = errors.Value
      , PropertyLanguageError = errors.PropertyLanguage
      , Transformation = transform.Transform
      , engine
      , parseSelectorListFromString = parseSelectorList.fromString
      ;

    /**
     * This defines the operators that are usable in CPS-formulae, thus
     * the better part of the language definition can be found in here.
     * However, some rather specific behaviors are still buried in the
     * Parser implementation
     *
     * see the reference of new Operator for a description of its arguments.
     *
     * usage: engine.parse(CPSParameterValueString)
     */
    engine = new Parser(
        /**
         * returns an Array of everything that is on the current stack
         *
         * May become useful in the future, but for now it's more on the
         * experimentation side. Getters should already work on arrays, so
         * it may be a way to store values in an @dictionary parameter and
         * index numbers.
         */
        new Operator('List', false, -Infinity, 0, Infinity, function(/*args, ...*/) {
            return Array.prototype.slice.call(arguments);
        })
        /**
         * Returns a generic Value, could be virtually anything
         *
         * used in a context like this
         * item['key']
         * which is translated to
         * item __get__ 'key'
         *
         * which should translate roughly to the javascript:
         * item['key'] or item.get('key'), depending on the nature
         * of item and the details of the implementation
         */
      , new Operator('__get__', false, Infinity, 1, 1, [
            ['*getAPI*', NameToken, 'string', function(getAPI, name, key) {
                var item = getAPI.get(name.getValue());
                return getAPI.genericGetter(item, key);
            }]
            // FIXME: I think a signature of
            // '*unboxed+getAPI*' ,'*anything*', '*anything*'
            // would do the same trick, also, the last operator implementation
            // here: '*unboxed+getAPI*','*anything*', ['number', 'string'] could be removed as well?
            // maybe, also the first... ????
          , ['*getAPI*', NameToken, NameToken, function(getAPI, name1, name2) {
                var item = getAPI.get(name1.getValue())
                  , key = getAPI.get(name2.getValue())
                  ;
                return getAPI.genericGetter(item, key);
            }]
            // value: this['parent'][S"point.top"]
          , ['*unboxed+getAPI*', _OMANode, SelectorList, function(getAPI, node, selector) {
                // internally does node.query(selector); but with dependency subscription
                var result = getAPI.query(node, selector);
                if(!result)
                    throw new PropertyLanguageError('Not found: an element for '
                                        + selector + ' '
                                        + 'in ' + node.particulars
                                    );
                return result;
            }]
          , ['*unboxed+getAPI*','*anything*', ['number', 'string'], function(getAPI, item, key) {
                return getAPI.genericGetter(item, key);
            }]
        ])
        /**
         * Returns a generic Value, could be virtually anything
         * similar to __get__
         *
         * used like this:
         * item:name
         *
         * name must be a name token, its value is used to get a propety
         * of item.
         * in javascript it does roughly the following:
         * var key = name.getValue()
         * return item[key]
         */
      , new Operator(':', true, Infinity, 1, 1, [
            ['*getAPI*', NameToken, NameToken, function(getAPI, name, key) {
                var item = getAPI.get(name.getValue());
                if(!item)
                    console.log('item:', item, 'from', '"'+name.getValue()+'"', 'key:', '"'+key.getValue()+'"');
                return getAPI.genericGetter(item, key.getValue());
            }]
          , ['*getAPI*', SelectorList, NameToken, function(getAPI, selector, key) {
                // SelectorList selects from global scope, aka multivers
                // var item = getAPI.get('this').multivers.query(selector);
                // FIXME: do instead
                // var item = getAPI.query(getAPI.get('this').multivers, selector); // internally node.query(selector); but with subscription

                // is some form of subscription needed for node.multivers???
                // maybe in the future, we will allow transports from one
                // multivers to another, then host.multivers can change
                var host = getAPI.get('this')
                  , node = getAPI.genericGetter(host, 'multivers')
                  , item = getAPI.query(node, selector)
                  ;


                if(!item)
                    throw new PropertyLanguageError('Not found: an element for '
                                                        + selector);
                return getAPI.genericGetter(item, key.getValue());
            }]
          , ['*getAPI*', '*anything*', NameToken, function(getAPI, item, key) {
                return getAPI.genericGetter(item, key.getValue());
            }]
        ])
        /**
         * When a value is negated using the minus sign, this operator is
         * inserted instead of the minus sign. It can also be used directly.
         *
         * The parser should detect cases where the minus sign is not a
         * subtraction, but a negation:
         *
         * -5 => negate 5
         * -(5 + name) => negate (5 + name)
         * 5 + -name => 5 + negate name
         * 5 + - name => 5 + negate name
         * name * - 5 => name * negate name
         *
         */
      , new Operator('negate', false, 60, 0, 1, [
            // 'number' as an argument is not needed nor happening
            // because something like -123 will be parsed as a negative
            // number directly. This is because "Vector 12 -8" would
            // otherwise be tokenized as "Vector 12 subtract 8", because
            // we have no other indication of splitting.
            // the operator is left in place, so this: --123 could be done
            // and would result in `negate -123`
            ['number', function(a){ return -a; }]
          , [Vector, function(a){ return a.negate();}]
          , [Transformation, function(transformation){ return transformation.inverse();}]
        ])
          /**
           * add
           */
      , new Operator('+', true, 10, 1, 1, [
            ['number' , 'number', function(a, b){ return a + b; }]
          , ['string' , 'string', function(a, b){ return a + b; }]
          , [Array , Array, function(a, b){ return a.concat(b); }]
          , [Vector, Vector, function(a, b){ return a['+'](b);}]
          , [Vector, 'number', function(a, b){ return a['+'](b);}]
        ])
        /**
         * subtract
         */
      , new Operator('-', true, 10, 1, 1, [
            ['number' , 'number', function(a, b){ return a - b; }]
          , [Vector, Vector, function(a, b){ return a['-'](b);}]
          , [Vector, 'number', function(a, b){ return a['-'](b);}]
        ])
        /**
         * multiply
         */
      , new Operator('*', true, 20, 1, 1, [
           ['number' , 'number', function(a, b){ return a * b; }]
         , [Vector, Vector, function(a, b){ return a['*'](b);}]
         , [Vector, 'number', function(a, b){ return a['*'](b);}]
         , [Transformation, Vector, function(tarnsformation, vector) {
                return Vector.fromArray(tarnsformation.transformPoint(vector));
           }]
         , [Transformation, Transformation, function(t1, t2) {return t1.transform(t2);}]
        ])
        /**
         * divide
         */
      , new Operator('/', true, 20, 1, 1, [
            ['number' , 'number', function(a, b){ return a / b; }]
          , [Vector, Vector, function(a, b){ return a['/'](b);}]
          , [Vector, 'number', function(a, b){ return a['/'](b);}]
        ])
        /**
         * pow
         */
      , new Operator('^', true, 30, 1, 1, [
            ['number' , 'number', function(a, b){ return Math.pow(a, b); }]
          , [Vector, Vector, function(a, b){ return a['**'](b);}]
          , [Vector, 'number', function(a, b){ return a['**'](b);}]
        ])
      , new Operator('min', true, 40, 0, 2, [
            ['number' , 'number', function(a, b){ return Math.min(a, b); }]
        ])
      , new Operator('max', true, 40, 0, 2, [
            ['number' , 'number', function(a, b){ return Math.max(a, b); }]
      ])
        /**
         * vector constructor operator
         * Creates a vector from Cartesian coordinates
         * Consumes two numbers returns a Vector
         */
      , new Operator('Vector', false, 40, 0, 2, [
            ['number' , 'number', function(a, b){ return new Vector(a, b); }]
        ])
        /**
         * vector constructor operator
         * Creates a vector from polar coordinates => magnitude angle in radians
         * Consumes two numbers returns a Vector
         */
      , new Operator('Polar', false, 40, 0, 2, [
            ['number' , 'number', function(a, b){ return Vector.fromPolar(a, b); }]
        ])
        /**
         * vector constructor operator
         * Creates a vector from two point coordinates, two directions
         * and one tension value;
         * The returned vector is the position of the outgoing control
         * of point0;
         *
         * Arguments: point0 outDir outTension inDir point1
         */
      , new Operator('tension2controlOut', false, 40, 0, 5, [
            [Vector , 'number', 'number', 'number', Vector, hobby.tension2controlOut]
        ])
        /**
         * vector constructor operator
         * Creates a vector from two point coordinates, two directions
         * and one tension value;
         * The returned vector is the position of the incoming control
         * of point1;
         *
         * Arguments: point0 outDir inTension inDir point1
         */
      , new Operator('tension2controlIn', false, 40, 0, 5, [
            [Vector , 'number', 'number', 'number', Vector, hobby.tension2controlIn]
        ])
        /**
         * Get the maginitude of the incoming control point.
         *
         * Arguments: point0 outDir inTension inDir point1
         */
      , new Operator('tension2magnitudeIn', false, 40, 0, 5, [
            [Vector , 'number', 'number', 'number', Vector, hobby.tension2magnitudeIn]
        ])
        /**
         * Get the maginitude of the outgoing control point.
         *
         * Arguments: point0 outDir outTension inDir point1
         */
      , new Operator('tension2magnitudeOut', false, 40, 0, 5, [
            [Vector , 'number', 'number', 'number', Vector, hobby.tension2magnitudeOut]
        ])
        /**
         * Get the tension of the outgoing control point.
         *
         * Arguments: point0 outDir outLength inDir point1
         */
      , new Operator('magnitude2tensionOut', false, 40, 0, 5, [
            [Vector , 'number', 'number', 'number', Vector, hobby.magnitude2tensionOut]
        ])
        /**
         * Get the tension of the incoming control point.
         *
         * Arguments: point0 outDir inLength inDir point1.
         */
      , new Operator('magnitude2tensionIn', false, 40, 0, 5, [
            [Vector , 'number', 'number', 'number', Vector, hobby.magnitude2tensionIn]
        ])

        /**
         * Convert a number from degree to radians
         * This has higher precedence than "polar" because it makes writing:
         * "polar 100 deg 45" possible.
         */
      , new Operator('deg', false, 50, 0, 1, [
            ['number', function(a) {
                return a * Math.PI/180;
            }]
        ])
        /**
         * Normalize `angle` given in radians between 0 and 2*PI
         */
      , new Operator('normalizeAngle', false, 50, 0, 1, [
            ['number', function(a) {
                return mathUtils.normalizeAngle(a);
            }]
        ])
        /**
         * Print information about the input value to console.log
         * and return the value again.
         * This doesn't change the result of the calculation.
         */
      , new Operator('_print', false, Infinity, 0, 1, function(arg) {
            /*global console*/
            console.log('cps _print: "' +arg +'" typeof', typeof arg
                                                    , 'object: ', arg);
            return arg;
        })
        /**
         * Constructor for a scaling transformation matrix
         */
      , new Operator('Scaling', false, 0, 0, 2, [
          ['number', 'number', function(x, y) {
              return transform.Scale(x, y);
          }]
        ])
      , new Operator('Translation', false, 0, 0, 2, [
            ['number', 'number', function(x, y) {
                return transform.Offset(x, y);
            }]
        ])
      , new Operator('Skew', false, 0, 0, 2, [
            ['number', 'number', function(x, y) {
                return transform.Identity.skew(x, y);
            }]
        ])
      , new Operator('Rotation', false, 0, 0, 1, [
            ['number', function(angle) {
                return transform.Identity.rotate(angle);
            }]
        ])
      , new Operator('Transformation', false, 0, 0, 6, [
            ['number', 'number', 'number', 'number', 'number', 'number'
            , function(xx, xy, yx, yy, dx, dy) {
                return new Transformation(xx, xy, yx, yy, dx, dy);
            }]
        ])
        /**
         * Return the identity transformation
         */
      , new Operator('Identity', false, 0, 0, 0, function(){
                                            return transform.Identity;})
      , new Operator('Selector', false, 0, 0, 1, [
            ['string'
            , function(selectorString) {
                return parseSelectorListFromString(selectorString);
            }]
        ])
    );


    function CPSStack(postfixStack) {
        Stack.call(this, postfixStack);
    }
    var _p = CPSStack.prototype = Object.create(Stack.prototype);
    _p.constructor = CPSStack;

    /**
     * This method is applied in Stack.execute, with the result of the stack execution.
     *
     * OperatorToken._convertTokenToValue does something similar.
     */
    _p._finalizeMethod = function(result, getAPI) {
        if(result instanceof NameToken)
            return getAPI.get(result.getValue());
        else if(result instanceof SelectorList) {
            var host = getAPI.get('this') // this can\'t be overidden by cps
              , node = getAPI.genericGetter(host, 'multivers')
              , item = getAPI.query(node, result)
              ;

            if(!item)
                throw new PropertyLanguageError('Not found: an element for '
                                                        + result);
            return item;
            // old, not fully subscribed:
            // return getAPI.get('this').multivers.query(result);
        }
        else if(result instanceof _Token)
            // maybe one day we allow stuff like operators as first class
            // values, but not now.
            throw new PropertyLanguageError('It is not allowed for a stack to '
                + 'resolve into a _Token, but this Stack did: ' + result);
        return result;
    };

    engine.setBracketOperator('[', '__get__');
    engine.setNegateOperator('-', 'negate');
    engine.setStackConstructor(CPSStack);
    return engine;
});

define('Atem-Property-Language/flavours/MOM/Expression',[
    'Atem-Property-Language/errors'
  , 'Atem-Property-Language/_Expression'
  , './parser'
], function(
    errors
  , Parent
  , parser
) {
    "use strict";

    var ValueError = errors.Value
      , PropertyLanguageError = errors.PropertyLanguage
      ;

    function Expression(stack) {
        Parent.call(this);
        this._stack = stack;
    }

    var _p = Expression.prototype = Object.create(Parent.prototype);
    _p.constructor = Expression;

    Expression.factory = function(valueString) {
        var invalidMessage = null
          , stack = null
          ;
        try {
            stack = parser.parse(valueString);
        }
        catch(error) {
            if(!(error instanceof PropertyLanguageError))
                throw error;
            invalidMessage = error.message;
        }

        return [invalidMessage, stack && new Expression(stack)];
    };

    _p.evaluate = function(getAPI) {
        return this._stack.execute(getAPI);
    };

    _p.toString = function() {
        return '<' + this.constructor.name
             + ' with stack "' + this._stack + '">';
    };

    return Expression;
});

define('Atem-Property-Language/flavours/MOM/initializePropertyValue',[
    './Expression'
],
function (
    Expression
) {
    "use strict";
    // this method is the single point uses to inject the Property-Language
    // interpreter into the CPS engine. It's used by Atem-Cps/cpsTools
    function initializePropertyValue(name, propertyValue) {
        propertyValue.initialize(name, Expression.factory);
    }

    return initializePropertyValue;
});

define('Atem-MOM/cpsTools',[
    'Atem-CPS/CPS/cpsTools'
  , 'Atem-Property-Language/flavours/MOM/initializePropertyValue'
],
function (
    cpsTools
  , initializePropertyValue
) {
    "use strict";

    // this initializes the cpsTools module with the initializePropertyValue function
    return cpsTools(initializePropertyValue);
});

define('Atem-MOM/MOM/_Node',[
    'Atem-MOM/errors'
  , 'Atem-CPS/OMA/_Node'
  , 'Atem-MOM/cpsTools'
], function(
    errors
  , Parent
  , cpsTools
) {
    "use strict";

    var MOMError = errors.MOM
      , NotImplementedError = errors.NotImplemented
      ;

    /**
     * The MOM is the structure against which we can run the selector queries
     * of CPS. We must be able to answer the the question "is this element
     * selected by that selector" for each item of the MOM.
     *
     * All Elements of the Metpolator Object Model MOM inherit from _Node.
     * This means, that a test like `item instanceof _Node` must return true.
     */
    function _Node() {
        /*jshint validthis:true*/
        Parent.call(this);
        if(this.constructor.prototype === _p)
            throw new MOMError('MOM _Node must not be instantiated directly');
    }

    var _p = _Node.prototype = Object.create(Parent.prototype);
    _p.constructor = _Node;

    _p._cps_whitelist = {
        glyph: 'glyph'
      , master: 'master'
      , univers: 'univers'
      , multivers: 'multivers' // synonymous with root
    };

    //inherit from parent
    (function(source) {
        for(var k in source) if(!this.hasOwnProperty(k)) this[k] = source[k];
    }).call(_p._cps_whitelist, Parent.prototype._cps_whitelist);

    _p._propertiesDependentOnParent = ['glyph', 'master', 'univers', 'multivers'];
    Array.prototype.push.apply(_p._propertiesDependentOnParent
                        , Parent.prototype._propertiesDependentOnParent);

    Object.defineProperty(_p, 'MOMType', {
        get: function(){return 'MOM '+ this.constructor.name ;}
    });

    _p._getAncestor = function(momType, getterName) {
        if(!this._parent)
            return null;
        if(this._parent.MOMType === momType)
            return this._parent;
        return this._parent[getterName];
    };

    /***
     * get the univers element of this node.
     *
     * a univers element itself has no univers!
     */
    Object.defineProperty(_p, 'univers', {
        get: function() {
            return this._getAncestor('MOM Univers', 'univers');
        }
    });

    _p._rootType = 'multivers';

    /***
     * Get the multivers element of this node.
     *
     * equivalent to this.root
     */
    Object.defineProperty(_p, 'multivers', {
        get: function() {
            return this.root;
        }
    });

    /***
     * get the master element of this node or null if this node has no master
     *
     * neither multivers nor univers have a master
     */
    Object.defineProperty(_p, 'master', {
        get: function() {
            return this._getAncestor('MOM Master', 'master');
        }
    });

    Object.defineProperty(_p, 'glyph', {
        get: function() {
            return this._getAncestor('MOM Glyph', 'glyph');
        }
    });

    _p.toString = function() { return ['<', this.MOMType, ' ', this.nodeID, '>'].join('');};

    _p.isMOMNode = function(item) {
        return item instanceof _Node;
    };

    _p.loadData = function(data) {
        this._loadData(cpsTools.makeProperty, data);
    };

    _p._validators = null;

    _p._getValidator = function(key) {
        if( this._validators && key in this._validators )
            return this._validators[key];
        return null;
    };

    /**
     * for parameterDB entries a master based index path is preferable
     * because the parameterDB is always on a per master base. So, we
     * are more flexible without saving the position of the master itself
     * in its univers.
     */
    Object.defineProperty(_p, 'masterIndexPath', {
        get: function() {
            var master = this.type === 'master'
                    ? this
                    : this.master
                    ;
            if(master)
                return this.getIndexPath(master);
            throw new MOMError(this + ' has no master.');
        }
    });

    _p._interpolationCompatibilityTests = null;
    _p.isInterpolationCompatible = function(other, collect /* default: true*/
                                        , strictlyCompatible/*default: true*/) {
        if(!this._interpolationCompatibilityTests)
            throw new NotImplementedError(this + ' does not support the '
                                +'isInterpolationCompatible interface.');

        var accumulate = collect === undefined ? true : !!collect
          , strict = strictlyCompatible === undefined ? true : !!strictlyCompatible
          , compatible = true
          , messages = []
          , i,l, test, result
          ;

        for(i=0,l=this._interpolationCompatibilityTests.length;i<l;i++) {
            test = this._interpolationCompatibilityTests[i];
            result = test.call(this, other, accumulate, strict);
            if(result === true || result[0])
                continue;//passed;
            compatible = false;
            if(typeof result[1] === 'string')
                messages.push(result[1]);
            else
                Array.prototype.push.apply(messages, result[1]);
            break;
        }
        return [compatible, messages];
    };

    return _Node;
});

define('Atem-CPS/OMA/_Root',[
    './_Node'
], function(
    Parent
) {
    "use strict";
    /**
     * This is the root element of an OMA-Tree.
     *
     * It's needed as a scope for cps queries that search
     * in the scope of an entire OMA-Tree. And it's used to check if an
     * element belongs to the OMA-Tree. Other
     *
     * It holds the reference to the OMA-Controller
     *
     * It's sometimes better to just mixin the methods of this prototype
     * rather than inherit from it. <multivers> of the MOM is an example
     * for that.
     */
    function _Root(controller) {
        //jshint validthis:true
        Parent.call(this);
        this._controller = controller;
    }
    var _p = _Root.prototype = Object.create(Parent.prototype);
    _p.constructor = _Root;

    Object.defineProperty(_p, 'idManager', {
        value: true
    });

    Object.defineProperty(_p, 'root', {
        get: function(){ return this; }
    });

    _p._propertiesDependentOnParent = [];

    _p.removeFromTree = function(node) {
        if(node.parent) {
            // will call removeFromTree again, after `parent` got removed
            node.parent.remove(node);
            return;
        }
        this._controller.purgeNode(node);
    };

    _p.query = function(selector, scope) {
        return this._controller.query(selector, scope);
    };
    _p.queryAll = function(selector, scope) {
        return this._controller.queryAll(selector, scope);
    };

    _p.getComputedStyleFor = function(node) {
        return this._controller.getComputedStyle(node);
    };

    return _Root;
});

define('Atem-MOM/MOM/_Contour',[
    './_Node'
  , 'Atem-MOM/errors'
], function(
    Parent
  , errors
) {
    "use strict";

    var MOMError = errors.MOM;

    /**
     * All children of a MOM Glyph have to inherit from MOM _Contour.
     */
    function _Contour() {
        /*jshint validthis:true*/
        Parent.call(this);
        if(this.constructor.prototype === _p)
            throw new MOMError('MOM _Contour must not be instantiated '
                +'directly');
    }
    var _p = _Contour.prototype = Object.create(Parent.prototype);
    _p.constructor = _Contour;

    _p._interpolationCompatibilityTests = [
        function isSameType(other, collect, strictlyCompatible) {
            //jshint unused:vars
            if(other.type !== this.type)
                return [false, this + ':i(' + this.index + '): types are different: '
                                    + other];
            return true;
        }
      , function checkStructure(other, collect, strictlyCompatible) {
            //jshint unused:vars

            // At the moment it's easy, we have always the same structure
            // within the children of any _Contour, so it's enough to count
            // children:
            //      contour -> p
            //      penstroke -> point -> left/center/right
            //      component
            // A more complex node can implement its own tests.

            var difference = other.children.length - this._children.length;
            if(difference !== 0)
                return [false, this + ':i('+this.index+'): '
                        + (difference > 0 ? 'too many' : 'too few')
                         + ' child elements' + ' (' + difference
                         + ') in other '+other.type+'.'];


            return true;
        }
    ];

    return _Contour;
});

define('Atem-MOM/MOM/validators',[
    'Atem-MOM/errors'
  , 'Atem-Math-Tools/Vector'
  , 'Atem-Math-Tools/transform'
  , './_Node'
], function (
    errors
  , Vector
  , transform
  , _Node
) {
    "use strict";

    var ValueError = errors.Value
      , Transform = transform.Transform
      ;

    // common validator functions are shared here
    function validateVector(key, value) {
        //jshint validthis:true
        if(!(value instanceof Vector))
            throw new ValueError('The value of "' + key +'" '
                            + 'must be a Vector, got: "'+ value
                            + '" typeof ' +  typeof value + ' in ' + this);
        return value;
    }

    function validateTransform(key, value) {
        //jshint validthis:true
        if(!(value instanceof Transform))
            throw new ValueError('The value of "' + key +'" '
                            + 'must be a Transformation, got: "' + value
                            + '" typeof ' +  typeof value + ' in ' + this);
        return value;
    }

    function validateString(key, value) {
        //jshint validthis:true
        if(typeof value !== 'string')
            throw new ValueError('The value of "' + key +'" '
                            + 'must be a string, got: "'+ value
                            + '" typeof ' +  typeof value + ' in ' + this);
        return value;
    }



    function validateNumber(key, value) {
        //jshint validthis:true
        if(typeof value !== 'number' || value !== value)
            throw new ValueError('The value of "' + key +'" '
                + 'must be a number, got: '
                + (value !== value
                    ? ' NaN (happens with division by 0 for example)'
                    : '"'+ value + '" typeof: ' +  typeof value
                        + (value && typeof value.constructor === 'function'
                                ? ' a: ' + value.constructor.name
                                : ''
                        )
                )
                + ' in ' + this
            );
        return value;
    }

    function validateMOMConstructor(Constructor, key, value) {
        // jshint validthis:true
        if(!(value instanceof Constructor))
            throw new ValueError('The value of "' + key +'" '
                + 'must be a MOM '+ Constructor.name +', got: '
                + '"'+ value + '" typeof: ' +  typeof value
                + (value && typeof value.constructor === 'function'
                        ? ' a: ' + value.constructor.name
                        : ''
                  )
                + ' in ' + this
            );
        return value;
    }

    function validateMOMNode(key, value) {
        // jshint validthis:true
        return validateMOMConstructor.call(this, _Node, key, value);
    }

    function validateMOMSameType(key, value) {
        // jshint validthis:true
        return validateMOMConstructor.call(this, this.constructor, key, value);
    }

    return {
        validateVector: validateVector
      , validateTransform: validateTransform
      , validateString: validateString
      , validateNumber: validateNumber
      , validateMOMNode: validateMOMNode
      , validateMOMSameType: validateMOMSameType
      , validateMOMConstructor: validateMOMConstructor
    };
});

define('Atem-MOM/MOM/Component',[
    './_Contour'
  , './validators'
], function(
    Parent
  , validators
) {
    "use strict";
    /**
     * This is a UFO component reference.
     */
    function Component() {
        Parent.call(this);
        Object.freeze(this._children);
    }
    var _p = Component.prototype = Object.create(Parent.prototype);
    _p.constructor = Component;

    //inherit from parent
    (function(source) {
        for(var k in source) if(!this.hasOwnProperty(k)) this[k] = source[k];
    }).call(_p._cps_whitelist, Parent.prototype._cps_whitelist);

    Object.defineProperty(_p, 'MOMType', {
        value: 'MOM Component'
    });

    Object.defineProperty(_p, 'type', {
        /* this is used for CPS selectors*/
        value: 'component'
    });

    _p._validators = Object.create(null);
    _p._validators.transformation = validators.validateTransform;
    _p._validators.baseGlyphName = validators.validateString;

    return Component;
});


define('Atem-MOM/MOM/ContourPoint',[
    './_Node'
  , './validators'
], function(
    Parent
  , validators
) {
    "use strict";
    /**
     * This Element represents a point of a of a MoM Contour (outline).
     * Its properties are the absolute coordinates of an on-curve point
     * of the outline of a contour.
     *
     * It doesn't accept add or removal of children.
     */
    function ContourPoint() {
        Parent.call(this);
        Object.freeze(this._children);
    }
    var _p = ContourPoint.prototype = Object.create(Parent.prototype);
    _p.constructor = ContourPoint;

    Object.defineProperty(_p, 'MOMType', {
        value: 'MOM ContourPoint'
    });

    Object.defineProperty(_p, 'type', {
        /* this is used for CPS selectors */
        value: 'p'
    });

    _p._validators = Object.create(null);
    _p._validators.on = validators.validateVector;
    _p._validators.in = validators.validateVector;
    _p._validators.out = validators.validateVector;

    _p._validators.inLength = validators.validateNumber;
    _p._validators.outLength = validators.validateNumber;
    _p._validators.inDir = validators.validateNumber;
    _p._validators.outDir = validators.validateNumber;
    _p._validators.inTension = validators.validateNumber;
    _p._validators.outTension = validators.validateNumber;

    _p._validators.pointBefore = validators.validateMOMSameType;
    _p._validators.pointAfter = validators.validateMOMSameType;


    return ContourPoint;
});

define('Atem-MOM/MOM/Contour',[
    './_Contour'
  , './ContourPoint'
  , './validators'
], function(
    Parent
  , ContourPoint
  , validators
) {
    "use strict";
    /**
     * This Element is the container of all points of a outline contour.
     * It may have some metadata (like an identifier) and contain children
     * of type MOM ContourPoint.
     */
    function Contour() {
        Parent.call(this);
    }
    var _p = Contour.prototype = Object.create(Parent.prototype);
    _p.constructor = Contour;

    Object.defineProperty(_p, 'MOMType', {
        value: 'MOM Contour'
    });

    Object.defineProperty(_p, 'type', {
        /* this is used for CPS selectors*/
        value: 'contour'
    });

    _p._validators = Object.create(null);
    _p._validators.open = validators.validateNumber;

    _p._acceptedChildren = Object.create(null);
    _p._acceptedChildren[ContourPoint.prototype.type] = ContourPoint;

    return Contour;
});


define('Atem-MOM/MOM/_PenStrokeCenterChild',[
    './_Node'
  , './validators'
], function(
    Parent
  , validators
) {
    "use strict";
    function _PenStrokeCenterChild() {
        //jshint validthis:true
        Parent.call(this);
        Object.freeze(this._children);
    }
    var _p = _PenStrokeCenterChild.prototype = Object.create(Parent.prototype);
    _p.constructor = _PenStrokeCenterChild;

    _p._validators = Object.create(null);
    _p._validators.on = validators.validateVector;
    _p._validators.in = validators.validateVector;
    _p._validators.out = validators.validateVector;

    _p._validators.inLength = validators.validateNumber;
    _p._validators.outLength = validators.validateNumber;
    _p._validators.onLength = validators.validateNumber;
    _p._validators.inDir = validators.validateNumber;
    _p._validators.outDir = validators.validateNumber;
    _p._validators.onDir = validators.validateNumber;
    _p._validators.inDirIntrinsic = validators.validateNumber;
    _p._validators.outDirIntrinsic = validators.validateNumber;

    _p._validators.inTension = validators.validateNumber;
    _p._validators.outTension = validators.validateNumber;

    _p._validators.pointBefore = validators.validateMOMSameType;
    _p._validators.pointAfter = validators.validateMOMSameType;

    return _PenStrokeCenterChild;
});

define('Atem-MOM/MOM/PenStrokeLeft',[
    './_PenStrokeCenterChild'
], function(
    Parent
) {
    "use strict";
    function PenStrokeLeft() {
        Parent.call(this);
    }
    var _p = PenStrokeLeft.prototype = Object.create(Parent.prototype);
    _p.constructor = PenStrokeLeft;

    Object.defineProperty(_p, 'MOMType', {
        value: 'MOM PenStrokeLeft'
    });

    Object.defineProperty(_p, 'type', {
        /* this is used for CPS selectors */
        value: 'left'
    });

    return PenStrokeLeft;
});

define('Atem-MOM/MOM/PenStrokeRight',[
    './_PenStrokeCenterChild'
], function(
    Parent
) {
    "use strict";
    function PenStrokeRight() {
        Parent.call(this);
    }
    var _p = PenStrokeRight.prototype = Object.create(Parent.prototype);
    _p.constructor = PenStrokeRight;

    Object.defineProperty(_p, 'MOMType', {
        value: 'MOM PenStrokeRight'
    });

    Object.defineProperty(_p, 'type', {
        /* this is used for CPS selectors */
        value: 'right'
    });

    return PenStrokeRight;
});

define('Atem-MOM/MOM/PenStrokeCenter',[
    './_Node'
  , 'Atem-MOM/errors'
  , './validators'
  , './PenStrokeLeft'
  , './PenStrokeRight'
], function(
    Parent
  , errors
  , validators
  , PenStrokeLeft
  , PenStrokeRight
) {
    "use strict";

    var DeprecatedError = errors.Deprecated;

    /**
     * This Element represents a point of a of a MoM PenStroke contour.
     * Its properties are the absolute coordinates of an on-curve point
     * of the centerline of a contour.
     *
     * Eventually it may have a name and an identifier etc.
     *
     * It has three children, in order: left, center, right
     * It doesn't accept add or removal of children.
     *
     */
    function PenStrokeCenter() {
        Parent.call(this);

        this.add(new PenStrokeLeft());  // 0
        this.add(new PenStrokeRight()); // 1
        Object.freeze(this._children);
    }
    var _p = PenStrokeCenter.prototype = Object.create(Parent.prototype);
    _p.constructor = PenStrokeCenter;

    //inherit from parent
    _p._cps_whitelist = {
        left: 'left'
      , center: 'center'
      , right: 'right'
    };
    //inherit from parent
    (function(source) {
        for(var k in source) if(!this.hasOwnProperty(k)) this[k] = source[k];
    }).call(_p._cps_whitelist, Parent.prototype._cps_whitelist);

    Object.defineProperty(_p, 'MOMType', {
        value: 'MOM PenStrokeCenter'
    });

    Object.defineProperty(_p, 'type', {
        /* this is used for CPS selectors */
        value: 'center'
    });

    Object.defineProperty(_p, 'left', {
        get: function() {
            return this._children[0];
        }
    });

    /**
     * This is a legacy construct, when center was a sibling of left and
     * right and point was the common parent. center has now taken the
     * role of the old point.
     *
     * I'm going to raise these errors for a while, until `parent:center`
     * is no longer used by CPS.
     *
     * When removing this, also remove the entry in _cps_whitelist.
     */
    Object.defineProperty(_p, 'center', {
        get: function() {
            //return this;
            throw new DeprecatedError('What used to be the "center" property of this '
                            + 'element is now equivalent with the element '
                            + 'itself: ' + this);
        }
    });

    Object.defineProperty(_p, 'right', {
        get: function() {
            return this._children[1];
        }
    });

    _p._validators = Object.create(null);
    _p._validators.on = validators.validateVector;
    _p._validators.in = validators.validateVector;
    _p._validators.out = validators.validateVector;

    _p._validators.inLength = validators.validateNumber;
    _p._validators.outLength = validators.validateNumber;
    _p._validators.inDir = validators.validateNumber;
    _p._validators.outDir = validators.validateNumber;
    _p._validators.inTension = validators.validateNumber;
    _p._validators.outTension = validators.validateNumber;

    _p._validators.pointBefore = validators.validateMOMSameType;
    _p._validators.pointAfter = validators.validateMOMSameType;


    _p._acceptedChildren = Object.create(null);
    _p._acceptedChildren[PenStrokeLeft.prototype.type] = PenStrokeLeft;
    _p._acceptedChildren[PenStrokeRight.prototype.type] = PenStrokeRight;

    return PenStrokeCenter;
});

define('Atem-MOM/MOM/PenStroke',[
    './_Contour'
  , './PenStrokeCenter'
], function(
    Parent
  , PenStrokeCenter
) {
    "use strict";
    /**
     * This Element is the container of all points of a pen stroke contour.
     * It may have some metadata (like an identifier) and contain children
     * of type MOM PenStrokePoint.
     */
    function PenStroke() {
        Parent.call(this);
    }
    var _p = PenStroke.prototype = Object.create(Parent.prototype);
    _p.constructor = PenStroke;

    Object.defineProperty(_p, 'MOMType', {
        value: 'MOM PenStroke'
    });

    Object.defineProperty(_p, 'type', {
        /* this is used for CPS selectors*/
        value: 'penstroke'
    });

    _p._acceptedChildren = Object.create(null);
    _p._acceptedChildren[PenStrokeCenter.prototype.type] = PenStrokeCenter;

    return PenStroke;
});


define('Atem-MOM/MOM/Glyph',[
    './_Node'
  , './Component'
  , './Contour'
  , './PenStroke'
  , './validators'
], function(
    Parent
  , Component
  , Contour
  , PenStroke
  , validators
) {
    "use strict";
    /*jshint sub:true*/
    /**
     * This Element is the container of all contours of a glyph.
     *
     * Possible candiates for other children would be everything else
     * found in a UFO-Glyph. But, we can make properties about that stuff,
     * too. Guidelines would make a good candidate for further children,
     * because we might actually want to access these via CPS.
     */
    function Glyph() {
        Parent.call(this);
    }
    var _p = Glyph.prototype = Object.create(Parent.prototype);
    _p.constructor = Glyph;

    Object.defineProperty(_p, 'idManager', {
        value: true
    });

    _p._propertiesDependentOnParent = Parent.prototype._propertiesDependentOnParent
                        .filter(function(name){ return name !== 'glyph';});

    Object.defineProperty(_p, 'MOMType', {
        value: 'MOM Glyph'
    });

    Object.defineProperty(_p, 'type', {
        /* this is used for CPS selectors */
        value: 'glyph'
    });

    _p._validators = Object.create(null);
    _p._validators.width = validators.validateNumber;
    _p._validators.height = validators.validateNumber;

    _p._acceptedChildren = Object.create(null);
    _p._acceptedChildren[Component.prototype.type] = Component;
    _p._acceptedChildren[Contour.prototype.type] = Contour;
    _p._acceptedChildren[PenStroke.prototype.type] = PenStroke;

    _p._interpolationCompatibilityTests = [
        function isGlyph(other, collect, strictlyCompatible) {
            //jshint unused:vars
            if(!(other instanceof Glyph))
                return [false, this + ' "'+ this.id + '": other item is not a '
                                +'Glyph: "' + other +'" (typeof '
                                + (typeof other) + ').'];
            return true;
        }
      , function checkEssence(other, collect, strictlyCompatible) {
            var compatible = true
              , messages = []
              , otherChildren = other.children
              , difference
              , i,l, result
              ;

            // even if the other children list is longer, but is
            // compatible in the overlapping set, we don't accept that
            // (it would work), but it's confusing yet and points to
            // an accidental one way compatibility.
            // maybe we can have "patching" glyphs in the future, but
            // it's not number one on the list.
            difference = otherChildren.length - this._children.length;
            if(difference) {
                compatible = false;
                messages.push(this + ' "'+this.id+'": '
                        + (difference > 0 ? 'too many' : 'too few')
                        + ' child elements (' + difference
                        + ') in other glyph.');
                if(!collect)
                    return [compatible, messages];
            }

            l = Math.min(this._children.length, otherChildren.length);
            for(i=0;i<l;i++) {
                result = this._children[i].isInterpolationCompatible(
                            otherChildren[i] ,collect, strictlyCompatible);
                if(result[0])
                    continue;
                messages.push(this + ' "'+this.id+'": '
                            + 'incompatible child at index ' + i +' … ');
                Array.prototype.push.apply(messages, result[1]);
                if(!collect)
                   break;
            }
            return [compatible, messages];
        }
    ];

    return Glyph;
});

define('Atem-MOM/MOM/Master',[
    './_Node'
  , './Glyph'
], function(
    Parent
  , Glyph
) {
    "use strict";
    /**
     * This Element is the container of all glyphs of a master.
     * It will have some metadata and contain children of type MOM Glyph.
     */
    function Master() {
        Parent.call(this);
    }
    var _p = Master.prototype = Object.create(Parent.prototype);
    _p.constructor = Master;

    Object.defineProperty(_p, 'idManager', {
        value: true
    });

    _p._propertiesDependentOnParent = Parent.prototype._propertiesDependentOnParent
                    .filter(function(name){ return !(name in {'glyph': 1, 'master': 1});});

    Object.defineProperty(_p, 'MOMType', {
        value: 'MOM Master'
    });

    Object.defineProperty(_p, 'type', {
        /* this is used for CPS selectors*/
        value: 'master'
    });

    _p.findGlyph = function( glyphName ) {
        // TODO: check where this is used and replace it completeley with
        // this.getById (which returns undefined instead of null)
        return this.getById(glyphName) || null;
    };

     /**
     * As long as there is just one univers, we don't need to display
     * the multivers and univers selectors
     */
    Object.defineProperty(_p, 'particulars', {
        get: function() {
            return [
                    this._parent ? '' : '(no parent)'
                  , ' '
                  , this.type
                  , (this.id ? '#' + this.id : '')
                  , (this._parent
                        ? ':i(' + this.index + ')'
                        : '')
                ].join('');
        }
    });

    _p._acceptedChildren = Object.create(null);
    _p._acceptedChildren[Glyph.prototype.type] = Glyph;

    function dumpDataToDict(dataDict, node) {
        // properties (4) + attachments (8)
        var data = node.dumpData(false, 4 | 8);
        if(data)
            dataDict[node.masterIndexPath] = data;
    }

    _p.dumpDataToDict = function() {
        var dict = Object.create(null);
        this.walkTreeDepthFirst(dumpDataToDict.bind(null, dict));
        return dict;
    };

    function loadDataFromDict (dataDict, node) {
        var data = dataDict[node.masterIndexPath];
        if(data)
            node.loadData(data);
    }

    _p.loadDataFromDict = function(dict) {
        this.walkTreeDepthFirst(loadDataFromDict.bind(null, dict));
    };

    _p._interpolationCompatibilityTests = [
        function isMaster(other, collect, strictlyCompatible) {
            //jshint unused:vars
            if(!(other instanceof Master))
                return [false, this + ' "'+this.id+'": other item is not a '
                                + 'Master: "' + other +'" (typeof '
                                + (typeof other)+').'];
            return true;
        }
      , function checkGlyphs(other, collect, strictlyCompatible) {
            //jshint validthis:true
            var namesA = Object.create(null)
              , namesB = Object.create(null)
              , i,l, k
              , result
              , childrenOther = other.children
              , messages = []
              , compatible = true
              , excessInOther = [], missingFromOther = []
              ;
            // In our CPS *polation scripts, glyphs are keyed by id not
            // by index. Thus, we need to check by key.
            for(i=0,l=this._children.length;i<l;i++)
                namesA[this._children[i].id] = this._children[i];
            for(i=0,l=childrenOther.length;i<l;i++)
                namesB[childrenOther[i].id] = childrenOther[i];
            for(k in namesA) if(!(k in namesB))
                missingFromOther.push(k);

            // Unless we implement "patching" masters, this breaks interpolation
            // with this Master as the base. But, patching is going to happen.
            if(missingFromOther.length) {
                compatible = false;
                messages.push(this + ' "'+this.id+'": missing glyphs in Master "'
                                + other.id + '": ' + missingFromOther.join(', ')
                                + '.');
            }

            if(strictlyCompatible) {
                for(k in namesB) if(!(k in namesA))
                    excessInOther.push(k);
                if(excessInOther.length) {
                    compatible = false;
                    messages.push(this + ' "'+this.id+'": excess glyphs in Master "'
                        + other.id + '": ' + excessInOther.join(', ') + '.');
                }
            }

            if(!collect && !compatible)
                return [compatible, messages];

            // still compatible, compare the glyphs:

            for(k in namesA) if (k in namesB) {
                result = namesA[k].isInterpolationCompatible(namesB[k]
                                            , collect, strictlyCompatible);
                if(result[0])
                    continue;
                compatible = false;
                Array.prototype.push.apply(messages, result[1]);
                if(!collect)
                    break;
            }
            return [compatible, messages];
        }
    ];

    return Master;
});

define('Atem-MOM/MOM/Univers',[
    './_Node'
  , './Master'
], function(
    Parent
  , Master
) {
    "use strict";
    /**
     * This Element is the container of all masters of a metapolator superfamily.
     * It only contains children of type MOM Master
     */
    function Univers() {
        Parent.call(this);
    }
    var _p = Univers.prototype = Object.create(Parent.prototype);
    _p.constructor = Univers;

    Object.defineProperty(_p, 'MOMType', {
        value: 'MOM Univers'
    });

    Object.defineProperty(_p, 'type', {
        /* this is used for CPS selectors*/
        value: 'univers'
    });

    _p._propertiesDependentOnParent = Parent.prototype._propertiesDependentOnParent
                .filter(function(name){ return !(name in {
                                'glyph': 1, 'master': 1, 'univers':1});});


    _p._acceptedChildren = Object.create(null);
    _p._acceptedChildren[Master.prototype.type] = Master;

    return Univers;
});

define('Atem-MOM/MOM/Multivers',[
    // Parent
    './_Node'
    // Root.prototype as a mixin
  , 'Atem-CPS/OMA/_Root'
  , './Univers'
], function(
    Parent
  , Root
  , Univers
) {
    "use strict";
    /**
     * This is the root element of a MOM Tree.
     *
     * This element is the container of all Univers elements of a metapolator
     * project. It's needed for as a scope for cps queries that search
     * in the scope of an entire Univers. And it's used to check if an
     * element belongs to the MOM tree where Multivers is the root. Other
     * than that, has no real use now, but we may do cool stuff with it
     * in the future.
     *
     * It only contains children of type MOM Univers
     */
    function Multivers(controller) {
        Parent.call(this);
        this._controller = controller;
    }
    var _p = Multivers.prototype = Object.create(Parent.prototype);
    _p.constructor = Multivers;

    Object.defineProperty(_p, 'MOMType', {
        value: 'MOM Multivers'
    });

    Object.defineProperty(_p, 'type', {
        /* this is used for CPS selectors*/
        value: 'multivers'
    });

    _p._propertiesDependentOnParent = [];

    _p._acceptedChildren = Object.create(null);
    _p._acceptedChildren[Univers.prototype.type] = Univers;

    _p.dumpWithoutMasters = function(simpleProperties) {
        // Compare this to to the OMA/_Node.dumpTree method for a better
        // understanding of how it works.
        // In short, we do the same but we use the childrens (univers)
        // 'dumpData' method instead of 'dumpTree' which omits the children
        // of the universes.
        // Best thing, this dump is compatible with the default
        // OMA/_Node.loadTree method.
        var data = this.dumpData(simpleProperties)
                                           // the original function is
                                           // 'dumpTree'
          , childrenData = this._dumpChildren('dumpData', [simpleProperties])
          ;
        if(childrenData) {
            if(!data)
                data = Object.create(null);
            data.children = childrenData;
        }
        return data;
    };

    // mixin Root.prototype
    (function(source, target) {
            //  enumerable and non-enumerable properties found directly upon
        var props = Object.getOwnPropertyNames(source)
          , i, l, k, prop
          ;
        for(i=0,l=props.length;i<l;i++) {
            k = props[i];
            if(target.hasOwnProperty(k))
                // don't override properties defined in here.
                continue;

            prop = Object.getOwnPropertyDescriptor(source, k);
            Object.defineProperty(target, k, prop);
        }
    })(Root.prototype, _p);

    return Multivers;
});

/**
 * Copyright (c) 2011, Lasse Fister lasse@graphicore.de, http://graphicore.de
 *
 * You should have received a copy of the MIT License along with this program.
 * If not, see http://www.opensource.org/licenses/mit-license.php
 *
 * The functions decomposeSuperBezierSegment and decomposeQuadraticSegment
 * are a translation of the equally named functions defined in
 * fontTools/pens/basePen.py The svn revision of the source file in
 * trunk/Lib/ was 498 from 2005-04-10 15:18:42 +0200
 *
 * I even copied the docstrings and comments! (These may still refer to the Python code)
 *
 * //////////////////////////////////////////////
 *
 * straight from fontTools/pens/basePen.py
 * fontTools.pens.basePen.py -- Tools and base classes to build pen objects.
 *
 * The Pen Protocol
 *
 * A Pen is a kind of object that standardizes the way how to "draw" outlines:
 * it is a middle man between an outline and a drawing. In other words:
 * it is an abstraction for drawing outlines, making sure that outline objects
 * don't need to know the details about how and where they're being drawn, and
 * that drawings don't need to know the details of how outlines are stored.
 *
 * The most basic pattern is this:
 *
 *     outline.draw(pen)  # 'outline' draws itself onto 'pen'
 *
 * Pens can be used to render outlines to the screen, but also to construct
 * new outlines. Eg. an outline object can be both a drawable object (it has a
 * draw() method) as well as a pen itself: you *build* an outline using pen
 * methods.
 *
 * The AbstractPen class defines the Pen protocol. It implements almost
 * nothing (only no-op closePath() and endPath() methods), but is useful
 * for documentation purposes. Subclassing it basically tells the reader:
 * "this class implements the Pen protocol.". An examples of an AbstractPen
 * subclass is fontTools.pens.transformPen.TransformPen.
 *
 * The BasePen class is a base implementation useful for pens that actually
 * draw (for example a pen renders outlines using a native graphics engine).
 * BasePen contains a lot of base functionality, making it very easy to build
 * a pen that fully conforms to the pen protocol. Note that if you subclass
 * BasePen, you _don't_ override moveTo(), lineTo(), etc., but _moveTo(),
 * _lineTo(), etc. See the BasePen doc string for details. Examples of
 * BasePen subclasses are fontTools.pens.boundsPen.BoundsPen and
 * fontTools.pens.cocoaPen.CocoaPen.
 *
 * Coordinates are usually expressed as (x, y) tuples, but generally any
 * sequence of length 2 will do.
 */
define('Atem-Pen-Case/tools/decomposeSuperSegments',['Atem-Errors/errors'], function(errors){
    "use strict";
    var assert = errors.assert;

    /**
     * Split the SuperBezier described by 'points' into a list of regular
     * bezier segments. The 'points' argument must be a list with length
     * 3 or greater, containing [x, y] coordinates. The last point is the
     * destination on-curve point, the rest of the points are off-curve points.
     * The start point should not be supplied.
     *
     * This function returns a list of [pt1, pt2, pt3] lists, which each
     * specify a regular curveto-style bezier segment.
     */
    function decomposeSuperBezierSegment(points) {
        var n = points.length - 1,
            bezierSegments = [],
            pt1 = points[0],
            pt2 = null,
            pt3 = null,
            i, j, nDivisions, factor, temp1, temp2, temp;

        assert(n > 1, 'Expecting at least 3 Points here');

        for (i=2;i<=n;i++)
        {
            // calculate points in between control points.
            nDivisions = Math.min(i, 3, n - i + 2);
            // used to be d = float(nDivisions) in the python source but
            // in js all numbers are float and there is no integer division
            // thing like in the older versions of python:
            //    e.g. 2 / 3 = 0 but 2 / 3.0 = 0.6666666666666666
            // so I'll use nDivision throughout
            for (j=1;j<nDivisions;j++)
            {
                factor = j / nDivisions;
                temp1 = points[i-1];
                temp2 = points[i-2];
                temp = [
                    temp2[0] + factor * (temp1[0] - temp2[0]),
                    temp2[1] + factor * (temp1[1] - temp2[1])
                ];
                if (pt2 === null) {
                    pt2 = temp;
                } else {
                    pt3 = [
                        0.5 * (pt2[0] + temp[0]),
                        0.5 * (pt2[1] + temp[1])
                    ];
                    bezierSegments.push([pt1, pt2, pt3]);
                    pt1 = temp;
                    pt2 = null;
                    pt3 = null;
                }
            }
        }
        bezierSegments.push([pt1, points[points.length-2], points[points.length-1]]);
        return bezierSegments;
    }

   /**
    * Split the quadratic curve segment described by 'points' into a list
    * of "atomic" quadratic segments. The 'points' argument must be a list
    * with length 2 or greater, containing [x, y] coordinates. The last point
    * is the destination on-curve point, the rest of the points are off-curve
    * points. The start point should not be supplied.
    *
    * This function returns a list of [pt1, pt2] lists, which each specify a
    * plain quadratic bezier segment.
    */
    function decomposeQuadraticSegment(points) {
        var n = points.length - 1,
            quadSegments = [],
            i, x, y, nx, ny, impliedPt;
        assert(n > 0, 'Expecting at least 2 Points here');
        for (i=0;i<n-1;i++)
        {
            //the keys of the list are strings, what makes i+1 == '01'
            x = points[i][0];
            y = points[i][1];
            nx = points[i+1][0];
            ny = points[i+1][1];
            impliedPt = [0.5 * (x + nx), 0.5 * (y + ny)];
            quadSegments.push([points[i], impliedPt]);
        }
        quadSegments.push( [points[points.length-2], points[points.length-1]] );
        return quadSegments;
    }
    return {
        decomposeSuperBezierSegment: decomposeSuperBezierSegment,
        decomposeQuadraticSegment: decomposeQuadraticSegment
    };
});

/**
 * Copyright (c) 2011, Lasse Fister lasse@graphicore.de, http://graphicore.de
 *
 * You should have received a copy of the MIT License along with this program.
 * If not, see http://www.opensource.org/licenses/mit-license.php
 *
 * This is a translation of AbstractPen defined in fontTools/pens/basePen.py
 * The svn revision of the source file in trunk/Lib/ was 498 from 2005-04-10 15:18:42 +0200
 *
 * I even copied the docstrings and comments! (These may still refer to the Python code)
 */
define('Atem-Pen-Case/pens/AbstractPen',[
    'Atem-Errors/errors'
], function(
    errors
) {
    "use strict";
    //shortcuts
    var NotImplementedError = errors.NotImplemented;

    /*constructor*/
    function AbstractPen (){}
    var _p = AbstractPen.prototype;

    /*inheritance*/
    //pass

    /*definition*/
        /**
         * Begin a new sub path, set the current point to 'pt'. You must
         * end each sub path with a call to pen.closePath() or pen.endPath().
         */
        _p.moveTo = function(pt)
        {
            throw new NotImplementedError('AbstractPen has not implemented'
            +' moveTo');
        };
        /**
         * Draw a straight line from the current point to 'pt'.
         */
        _p.lineTo = function(pt)
        {
             throw new NotImplementedError('AbstractPen has not implemented'
            +' lineTo');
        };
        /**
         * Draw a cubic bezier with an arbitrary number of control points.
         *
         * The last point specified is on-curve, all others are off-curve
         * (control) points. If the number of control points is > 2, the
         * segment is split into multiple bezier segments. This works
         * like this:
         *
         * Let n be the number of control points (which is the number of
         * arguments to this call minus 1). If n==2, a plain vanilla cubic
         * bezier is drawn. If n==1, we fall back to a quadratic segment and
         * if n==0 we draw a straight line. It gets interesting when n>2:
         * n-1 PostScript-style cubic segments will be drawn as if it were
         * one curve. See decomposeSuperBezierSegment().
         *
         * The conversion algorithm used for n>2 is inspired by NURB
         * splines, and is conceptually equivalent to the TrueType "implied
         * points" principle. See also decomposeQuadraticSegment().
         */
        _p.curveTo = function(/* *points */)
        {
            throw new NotImplementedError('AbstractPen has not implemented'
            +' curveTo');
        };
        /**
         * Draw a whole string of quadratic curve segments.
         *
         * The last point specified is on-curve, all others are off-curve
         * points.
         *
         * This method implements TrueType-style curves, breaking up curves
         * using 'implied points': between each two consequtive off-curve points,
         * there is one implied point exactly in the middle between them. See
         * also decomposeQuadraticSegment().
         *
         * The last argument (normally the on-curve point) may be None.
         * This is to support contours that have NO on-curve points (a rarely
         * seen feature of TrueType outlines).
         */
        _p.qCurveTo = function (/* *points */)
        {
            throw new NotImplementedError('AbstractPen has not implemented'
            +' qCurveTo');
        };
        /**
         * Close the current sub path. You must call either pen.closePath()
         * or pen.endPath() after each sub path.
         */
        _p.closePath = function()
        {
            //pass
        };
        /**
         * End the current sub path, but don't close it. You must call
         * either pen.closePath() or pen.endPath() after each sub path.
         */
        _p.endPath = function()
        {
            //pass
        };
        /**
         * Add a sub glyph. The 'transformation' argument must be a 6-tuple
         * containing an affine transformation, or a Transform object from the
         * fontTools.misc.transform module. More precisely: it should be a
         * sequence containing 6 numbers.
         */
        _p.addComponent = function(glyphName, transformation)
        {
            throw new NotImplementedError('AbstractPen has not implemented'
            +' addComponent');
        };
    return AbstractPen;
});

/**
 * Copyright (c) 2011, Lasse Fister lasse@graphicore.de, http://graphicore.de
 *
 * You should have received a copy of the MIT License along with this program.
 * If not, see http://www.opensource.org/licenses/mit-license.php
 *
 * This is a translation of TransformPen defined in fontTools/pens/transformPen.py
 * The svn revision of the source file in trunk/Lib/ was 453 from 2003-09-16 12:14:48 +0200
 *
 * I even copied the docstrings and comments! (These may still refer to the Python code)
 */

define(
    'Atem-Pen-Case/pens/TransformPen',[
        './AbstractPen',
        'Atem-Math-Tools/transform'
    ],
    function(
        Parent,
        transform
    )
{
    "use strict";
    var Transform = transform.Transform;
    /**
     * Pen that transforms all coordinates using a Affine transformation,
     * and passes them to another pen.
     */

    /*constructor*/
    /**
     * The 'outPen' argument is another pen object. It will receive the
     * transformed coordinates. The 'transformation' argument can either
     * be a six-element Array, or a tools.misc.transform.Transform object.
     */
    function TransformPen(outPen, transformation) {
        if( transformation instanceof Array)
            transformation = new Transform(transformation);
        this._transformation = transformation;
        this._transformPoint = function(pt) {
            return transformation.transformPoint(pt);
        };
        this._outPen = outPen;
        this._stack = [];
    }

    /*inheritance*/
    var _p = TransformPen.prototype = Object.create(Parent.prototype);
    _p.constructor = TransformPen;

    /*definition*/
        _p.moveTo = function(pt)
        {
            this._outPen.moveTo(this._transformPoint(pt));
        };

        _p.lineTo = function(pt)
        {
            this._outPen.lineTo(this._transformPoint(pt));
        };

        _p.curveTo = function(/* *points */)
        {
            var points = [].slice.call(arguments);//transform arguments to an array
            this._outPen.curveTo.apply(this._outPen, this._transformPoints(points));
        };

        _p.qCurveTo = function (/* *points */)
        {
            var points = [].slice.call(arguments);//transform arguments to an array
            if (points[points.length -1] === null) {
                points = this._transformPoints(points.slice(0, -1));
                points.push(null);
            } else {
                points = this._transformPoints(points);
            }
            this._outPen.qCurveTo.apply(this._outPen, points);
        };

        _p._transformPoints = function(points)
        {
            return points.map(this._transformPoint);
        };

        _p.closePath = function()
        {
            this._outPen.closePath();
        };

        _p.addComponent = function(glyphName, transformation)
        {
            transformation = this._transformation.transform(transformation);
            this._outPen.addComponent(glyphName, transformation);
        };

    return TransformPen;
});

/**
 * Copyright (c) 2011, Lasse Fister lasse@graphicore.de, http://graphicore.de
 *
 * You should have received a copy of the MIT License along with this program.
 * If not, see http://www.opensource.org/licenses/mit-license.php
 *
 * This is a translation of BasePen defined in fontTools/pens/basePen.py
 * The svn revision of the source file in trunk/Lib/ was 498 from 2005-04-10 15:18:42  +0200
 *
 * I even copied the docstrings and comments! (These may still refer to the Python code)
 */
define('Atem-Pen-Case/pens/BasePen',[
    'Atem-Errors/errors'
  , 'Atem-Pen-Case/tools/decomposeSuperSegments'
  , './AbstractPen'
  , './TransformPen'
], function(
    errors
  , decompose
  , Parent
  , TransformPen
) {
    "use strict";
    var NotImplementedError = errors.NotImplemented,
        AssertionError = errors.Assertion,
        decomposeSuperBezierSegment = decompose.decomposeSuperBezierSegment,
        decomposeQuadraticSegment = decompose.decomposeQuadraticSegment,
        assert = errors.assert;
    /**
     * Base class for drawing pens. You must override _moveTo, _lineTo and
     * _curveToOne. You may additionally override _closePath, _endPath,
     * addComponent and/or _qCurveToOne. You should not override any other
     * methods.
     */
    /*constructor*/
    function BasePen (glyphSet) {
        this.glyphSet = glyphSet;
        this.__currentPoint = null;
    }

    /*inheritance*/
    var _p = BasePen.prototype = Object.create(Parent.prototype);
    _p.constructor = BasePen;

    /*definition*/

        // must override

        _p._moveTo = function(pt, kwargs/* optional, object contour attributes*/)
        {
            throw new NotImplementedError('implement _moveTo');
        };

        _p._lineTo = function(pt)
        {
            throw new NotImplementedError('implement _lineTo');
        };

        _p._curveToOne = function(pt1, pt2, pt3)
        {
            throw new NotImplementedError('implement _curveToOne');
        };

        // may override

        _p._closePath = function()
        {
            //pass
        };

        _p._endPath = function()
        {
            //pass
        };

        /**
         * This method implements the basic quadratic curve type. The
         * default implementation delegates the work to the cubic curve
         * function. Optionally override with a native implementation.
         */
        _p._qCurveToOne = function(pt1, pt2)
        {
            var pt0x = this.__currentPoint[0],
                pt0y = this.__currentPoint[1],
                pt1x = pt1[0],
                pt1y = pt1[1],
                pt2x = pt2[0],
                pt2y = pt2[1],
                mid1x = pt0x + 0.66666666666666667 * (pt1x - pt0x),
                mid1y = pt0y + 0.66666666666666667 * (pt1y - pt0y),
                mid2x = pt2x + 0.66666666666666667 * (pt1x - pt2x),
                mid2y = pt2y + 0.66666666666666667 * (pt1y - pt2y);
            this._curveToOne([mid1x, mid1y], [mid2x, mid2y], pt2);
        };

        /**
         * This default implementation simply transforms the points
         * of the base glyph and draws it onto self.
         */
        _p.addComponent = function(glyphName, transformation, kwargs /*optional, object*/)
        {
            var glyph = (typeof this.glyphSet.get === 'function')
                ? this.glyphSet.get(glyphName)
                : this.glyphSet[glyphName];
            if(glyph !== undefined) {
                var tPen = new TransformPen(this, transformation);
                // using the synchronous call!
                // load components before drawing the glyph if this is
                // not good for your case!
                // addComponent can't get a asynchronous api because
                // we would break the pen protocol then
                glyph.draw(false, tPen);
            }
        };

        // don't override

        /**
         * Return the current point. This is not part of the public
         * interface, yet is useful for subclasses.
         */
        _p._getCurrentPoint = function()
        {
            return this.__currentPoint;
        };

        _p.closePath = function()
        {
            this._closePath();
            this.__currentPoint = null;
        };

        _p.endPath = function()
        {
            this._endPath();
            this.__currentPoint = null;
        };

        _p.moveTo = function(pt, kwargs/* optional, object contour attributes*/)
        {
            this._moveTo.apply(this, arguments);
            this.__currentPoint = pt;
        };

        _p.lineTo = function(pt)
        {
            this._lineTo(pt);
            this.__currentPoint = pt;
        };

        _p.curveTo = function(/* *points */)
        {
            var points = [].slice.call(arguments),//transform arguments to an array
                n = points.length - 1;// 'n' is the number of control points
            assert(n >= 0, 'curveTo needs at least one point');
            if (n === 2) {
                // The common case, we have exactly two BCP's, so this is a standard
                // cubic bezier. Even though decomposeSuperBezierSegment() handles
                // this case just fine, we special-case it anyway since it's so
                // common.
                this._curveToOne.apply(this, points);
                this.__currentPoint = points[points.length - 1];
            } else if (n > 2) {
                // n is the number of control points; split curve into n-1 cubic
                // bezier segments. The algorithm used here is inspired by NURB
                // splines and the TrueType "implied point" principle, and ensures
                // the smoothest possible connection between two curve segments,
                // with no disruption in the curvature. It is practical since it
                // allows one to construct multiple bezier segments with a much
                // smaller amount of points.
                var _curveToOne = this._curveToOne,
                    segments = decomposeSuperBezierSegment(points),
                    segment, i;
                for (i in segments) {
                    segment = segments[i];
                    //var pt1 = segment[0];
                    //var pt2 = segment[1];
                    //var pt3 = segment[2];
                    _curveToOne.apply(this ,segment);
                    this.__currentPoint = segment[2];//pt3
                }
            } else if (n === 1) {
                this.qCurveTo.apply(this, points);
            } else if (n === 0) {
                this.lineTo(points[0]);
            } else {
                throw new AssertionError("curveTo() can't get there from here");
            }
        };

        _p.qCurveTo = function(/* *points */)
        {
            var points = [].slice.call(arguments),//transform arguments to an array
                n = points.length - 1; //'n' is the number of control points
            assert(n >= 0, 'qCurveTo needs at least one point');
            if (points[points.length -1] === null) {
                // Special case for TrueType quadratics: it is possible to
                // define a contour with NO on-curve points. BasePen supports
                // this by allowing the final argument (the expected on-curve
                // point) to be null. We simulate the feature by making the implied
                // on-curve point between the last and the first off-curve points
                // explicit.
                var x = points[points.length -2][0], // last off-curve point x
                    y = points[points.length -2][1], // last off-curve point y
                    nx = points[0][0], // first off-curve point x
                    ny = points[0][1], // first off-curve point y
                    impliedStartPoint = [ 0.5 * (x + nx), 0.5 * (y + ny) ];
                this.__currentPoint = impliedStartPoint;
                this._moveTo(impliedStartPoint);
                points.splice(-1, 1, impliedStartPoint);//splice syntax is: index, howMany, *elements to insert
            }
            if (n > 0) {
                // Split the string of points into discrete quadratic curve
                // segments. Between any two consecutive off-curve points
                // there's an implied on-curve point exactly in the middle.
                // This is where the segment splits.
                var _qCurveToOne = this._qCurveToOne,
                    segments = decomposeQuadraticSegment(points),
                    segment, i;
                for (i in segments) {
                    segment = segments[i];
                    //var pt1 = segment[0];
                    //var pt2 = segment[1];
                    _qCurveToOne.apply(this, segment);
                    this.__currentPoint = segment[1]; //pt2
                }
            } else {
                this.lineTo(points[0]);
            }
        };

    return BasePen;
});

define('Atem-MOM/import/ufo/SegmentPoint',[
    'Atem-Math-Tools/Vector'
], function(
    Parent
) {
    "use strict";

    function SegmentPoint(xy, smooth, name, kwargs) {
        Parent.apply(this, xy);

        this.smooth = smooth;
        this.name = name;

        // I expect the 'identifier' keyword here, but that kwds syntax
        // could bring in even more names.
        this.kwargs = kwargs || {};
    }

    SegmentPoint.factory = function(xy, smooth, name, kwargs) {
        return new SegmentPoint(xy, smooth, name, kwargs);
    };

    var _p = SegmentPoint.prototype = Object.create(Parent.prototype);

    _p.toString = function() {
        return '<SegmentPoint'
            + (this.name ? ' ' + this.name : '')
            + ' ' + this.valueOf() +'>';
    };

    return SegmentPoint;
});

/**
 * Copyright (c) 2011, Lasse Fister lasse@graphicore.de, http://graphicore.de
 *
 * You should have received a copy of the MIT License along with this program.
 * If not, see http://www.opensource.org/licenses/mit-license.php
 *
 * This is a translation of BasePen defined in fontTools/pens/basePen.py
 * The svn revision of the source file in trunk/Lib/ was 498 from 2005-04-10 15:18:42  +0200
 *
 * I even copied the docstrings and comments! (These may still refer to the Python code)
 */
define('Atem-MOM/import/ufo/SegmentPen',[
    'Atem-Pen-Case/pens/BasePen'
  , 'Atem-MOM/errors'
  , './SegmentPoint'

], function(
    Parent
  , errors
  , Point
) {
    "use strict";

    /*constructor*/
    function SegmentPen() {
        this._currentContour = null;
        this.contours = [];

        Parent.apply(this, [{}].concat(arguments));
    }

    /*inheritance*/
    var _p = SegmentPen.prototype = Object.create(Parent.prototype);
    _p.constructor = SegmentPen;

    _p._PointConstructor = Point;

    _p._pointFactory = function(val) {
        return (val instanceof Array)
            ? new this._PointConstructor(val)
             // expect it is already a Point
            : val;
    };

    _p._newContour = function(kwargs) {
        errors.assert(this._currentContour === null,
                                'this._currentContour should be null');
        this._currentContour = {
            commands: []
          , type: 'contour'
          , closed: undefined
          , kwargs: kwargs
        };
    };

    _p._closeContour = function() {
        // maybe if the contour is empty, this might happen ???
        // please report if you have trouble with this assertion
        errors.assert(this._currentContour !== null,
                                'this._currentContour should NOT be null');
        this.contours.push(this._currentContour);
        this._currentContour = null;
    };

    _p._endPath = function() {
        // assert this._currentContour !== null
        this._currentContour.closed = false;
        this._closeContour();
    };

    _p._closePath = function() {
        this._currentContour.closed = true;
        this._closeContour();
    };

    _p.flush = function() {
        var contours = this.contours;
        this.contours = [];
        this._currentContour = null;
        return contours;
    };

    _p._moveTo = function(pt, kwargs/* optional, object contour attributes*/) {
        this._newContour(kwargs);
        pt = this._pointFactory(pt);
        this._currentContour.commands.push(['moveTo', pt]);
    };

    _p._lineTo = function(pt)
    {
        pt = this._pointFactory(pt);
        this._currentContour.commands.push(['lineTo', pt]);
    };

    _p._curveToOne = function(pt1, pt2, pt3)
    {
        pt1 = this._pointFactory(pt1);
        pt2 = this._pointFactory(pt2);
        pt3 = this._pointFactory(pt3);
        this._currentContour.commands.push(['curveTo', pt1, pt2, pt3]);
    };

    _p.addComponent = function(glyphName, transformation, kwargs)
    {
        var component = {
            type:             'component'
            , transformation: transformation
            , glyphName:      glyphName
            , kwargs:         kwargs
        };
        this.contours.push(component);
    };

    return SegmentPen;
});

define(
    'Atem-MOM/import/ufo/ImportOutlinePen',[
        'Atem-MOM/errors'
      , 'Atem-Pen-Case/pens/BasePointToSegmentPen'
      , './SegmentPoint'
    ],
    function(
        errors
      , Parent
      , Point
) {
    "use strict";
    var assert = errors.assert;

    /*constructor*/
    /**
     * Based of a copy of PointToSegmentPen:
     * Adapter class that converts the PointPen protocol to the
     * (Segment)Pen protocol.
     */
    function ImportOutlinePen(
        segmentPen,
        outputImpliedClosingLine /* default: false*/
    ) {
        Parent.call(this);
        this.pen = segmentPen;
        this.outputImpliedClosingLine = (outputImpliedClosingLine || false);
    }

    /*inheritance*/
    var _p = ImportOutlinePen.prototype = Object.create(Parent.prototype);
    _p.constructor = ImportOutlinePen;

    /*definition*/
        _p._flushContour = function(segments, contour_kwargs)
        {
            assert(segments.length >= 1, 'Less than one segment');
            var pen = this.pen
              , closed, points, point, movePt, smooth, name, kwargs, segmentType
              ;
            if( segments[0][0] == "move" ) {
                // It's an open path.
                closed = false;
                points = segments[0][1];
                assert(points.length === 1, 'Points length is not 1');
                point = points[0];
                movePt = [0];
                smooth = points[0][1];
                name = points[0][2];
                kwargs = points[0][3];
                segments.splice(0, 1);
            } else {
                // It's a closed path, do a moveTo to the last
                // point of the last segment.
                closed = true;
                var segment = segments[segments.length - 1];
                segmentType = segment[0];
                points = segment[1];
                point = points[points.length - 1];
                movePt = point[0];
                smooth = point[1];
                name = point[2];
                kwargs = point[3];
            }
            if(movePt === null) {
                // quad special case: a contour with no on-curve points
                // contains one "qcurve" segment that ends with a point
                // that's null. We must not output a moveTo() in that case.
                // pass
            } else {
                pen.moveTo(new Point(movePt, smooth, name, kwargs), contour_kwargs);
            }
            var outputImpliedClosingLine = this.outputImpliedClosingLine,
                nSegments = segments.length;
            for(var i = 0; i < nSegments; i++) {
                segmentType = segments[i][0];
                points = [];
                for(var n = 0; n < segments[i][1].length; n++)
                    points.push(Point.factory.apply(null, segments[i][1][n]));

                if(segmentType == 'line') {
                    assert(points.length === 1, 'Points length is not 1');
                    var pt = points[0];
                    if(i + 1 != nSegments
                    || outputImpliedClosingLine
                    || !closed)
                        pen.lineTo(pt);
                } else if(segmentType == 'curve') {
                    pen.curveTo.apply(pen, points);
                } else if(segmentType == 'qcurve') {
                    pen.qCurveTo.apply(pen, points);
                } else {
                    throw new errors.Type('illegal segmentType: '
                        + segmentType);
                }
            }
            if(closed)
                pen.closePath();
            else
                pen.endPath();
        };

        _p.addComponent = function(glyphName, transform)
        {
            this.pen.addComponent(glyphName, transform);
        };

    return ImportOutlinePen;
});

define('Atem-MOM/import/ufo/tools',[
    './SegmentPoint'
], function(
    Point
) {
    "use strict";

    function line2curve(p0, p3) {
        var p1, p2
          , distance = (p3['-'](p0))['*'](0.33333)
          , newCurve = ['curveTo']
          ;
        // at a third between p0 and p3
        p1 = new Point(p0['+'](distance));
        // at 2 thirds between p3 and p0
        p2 = new Point(p3['-'](distance));

        newCurve.push(p1, p2, p3);
        newCurve.wasLine = true;
        return newCurve;
    }

    function getCenter(l, r) {
        return l['+'](r)['*'](0.5);
    }

    function makeNameDict(str) {
        var result = {};
        ((str || '').match(/\S+/g) || [])
            .forEach(function(piece){ this[piece] = null;}, result);
        return result;
    }

    /**
     * if a name/class/key "example" is only in left it becomes: "left-example"
     * if a name/class/key "example" is only in right it becomes: "right-example"
     * if a name/class/key "example" is in both it stays: "example"
     *
     * so if left is "hello world" and right is "hello univers" the result
     * will be: "hello left-world right-univers"
     */
    function mergeNames(LeftName, RightName) {
        var left = makeNameDict(LeftName)
          , right =  makeNameDict(RightName)
          , merged = {}
          , k
          ;

        for(k in left)
            if(k in right) {
                merged[k] = null;
                // it's in both, no need to see it again
                delete right[k];
            }
            else
                merged['left-' + k] = null;
        for(k in right)
            merged['right-' + k] = null;
        return Object.keys(merged).join(' ') || null;
    }

    function getCenterPoint(l, r) {
        return new Point(getCenter(l, r), undefined
                       , mergeNames(l.name, r.name));
    }

    function getCenterSegment(left, right) {
        var result = [left[0]], i=1;
        for(;i<left.length;i++)
            result.push(getCenterPoint(left[i], right[i]));
        return result;
    }

    /**
     * see the docstring of StrokeContoue._findNextDirection
     */
    function getDirection(point, firstRound, lastRound, testDirection,
                                                        test, control) {
        var testPointKeys, testPointKey, testPoint, offset;

        if(!firstRound || !lastRound)
            testPointKeys = testDirection === 1
                ? {out:true, on:true, 'in':true}
                : {'in':true, on:true, out:true}
                ;
        else if(firstRound)
            testPointKeys = testDirection === 1
                ? {out: true}
                : {'in': true}
                ;
        else // lastRound == true
            testPointKeys = testDirection === 1
                ? {'in': true}
                : {out: true}
                ;
        for(testPointKey in testPointKeys) {
            testPoint = test[testPointKey];
            offset = control === 'out'
                ? testPoint['-'](point.on)// point.out['-'](point.on)
                : point.on['-'](testPoint)// point.on['-'](point['in']);
                ;
            if(offset.magnitude())
                return offset.angle();
        }
        return false;
    }

    return {
        line2curve: line2curve
      , getCenter: getCenter
      , getCenterPoint: getCenterPoint
      , getCenterSegment: getCenterSegment
      , getDirection: getDirection
    };
});

define('Atem-MOM/import/ufo/StrokeContour',[
    'Atem-MOM/errors'
  , './tools'
  , 'Atem-Math-Tools/hobby'
], function(
    errors
  , tools
  , hobby
) {
    "use strict";
    var AssertionError = errors.Assertion
      , ImportPenstroke = errors.ImportPenstroke
      , line2curve = tools.line2curve
      , getCenterPoint = tools.getCenterPoint
      , getDirection = tools.getDirection
      ;

    /**
     * This methods expects an input-contour like a SegementPen produces it.
     *
     * The 'implied' closing line argument of SegementPen must be included
     * which is *not* the default when using a ufoJS like PointToSegmentPen!
     * See the outputImpliedClosingLine of the PointToSegmentPen constructor.
     *
     * The input-contour must be a closed contour.
     *
     * The minimal length of the input-contour is 3 which yields in a one
     * item result.
     *
     * The input-contour is expected to have an uneven number of segments:
     * An initial 'moveTo' segment and an even number of either 'lineTo'
     * or 'curveTo' segments.
     *
     * This method treats the first on curve point as first point on
     * the right side and the on curve point before the last on curve
     * point as the first point on the left side. Each segement has one
     * on curve point and 0 or 3 off curve points.
     *
     * The last segment and segment with the index (contour.length-1)/2.
     * are used to reconstruct the imported shape using opening and closing
     * terminals.
     *
     * The result of this method is an array of arrays of left and right segment
     * pairs.
     *
     * The resulting left segments are a direction reversed representation
     * of the input-contours left-side segments. So the results left
     * and right side contours share the same direction.
     *
     * EXMAPLE:
     * A contour of length 11: 1 moveto  + 10 segments:
     *  [moveto, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
     *
     * left    4    right
     *         _
     *      5 | | 3
     *      6 | | 2
     *      7 | | 1
     *      8 |_| 0
     *           *
     *         9
     *
     * (*) moveTo is the point in the lower right corner.
     *
     *     result = [
     *        [openingTerminalSegment, openingTerminalSegment]
     *        [8, 0]
     *        [7, 1]
     *        [6, 2]
     *        [5, 3]
     *        [closingTerminalSegment, closingTerminalSegment]
     *     ]
     */
    function StrokeContour(contour) {
        this.length = 0;
            // skip the first moveto
        var right = 1
            // -1 for length to index translation,
            // -1 because the very last segment is the vector of the
            // pen, not part of the stroke
          , left = contour.length-2
          , zLength = (contour.length-1)*0.5
          , leftSegment, points
          , terminals = this._getTerminals(contour)
          ;

        // add the information needed for the opening terminal
        this._push([
            [undefined, terminals[0][1], contour[left].slice(-1).pop()]
          , [undefined, terminals[0][2], terminals[0][3]]
        ]);

        for(;right<zLength; right++, left--) {
            // the problem is, that the left contour is in the wrong
            // direction. so we have to reverse its direction:
            leftSegment = contour[left].slice(1,-1).reverse();
            // oncurve point of the previous segment
            leftSegment.push(contour[left-1].slice(-1).pop());

            this._push([leftSegment, contour[right].slice(1)]);
        }

        // add the information needed for the closing terminal
        this._push([
            [terminals[1][2], undefined, undefined]
          , [terminals[1][1], undefined, undefined]
        ]);
    }

    var _p = StrokeContour.prototype;
    _p.constructor = StrokeContour;

    /**
     * Return the control points for both terminal lines.
     * the direction for the stroke beginning terminal line left to right
     * the direction for the stroke ending terminal line is right to left.
     *
     * returns: [ beginning_segment, ending_segment ]
     */
    _p._getTerminals = function (contour) {
        var beginningIndex = contour.length-1
          , endingIndex = (contour.length-1) * 0.5
          , beginning = contour[beginningIndex]
          , ending = contour[endingIndex];

        if(beginning[0] !== 'curveTo') {
            beginning = line2curve(
                contour[beginningIndex-1].slice(-1).pop()
              , beginning[1]
            );
        }
        if(ending[0] !== 'curveTo') {
            ending = line2curve(
                contour[endingIndex-1].slice(-1).pop()
              , ending[1]
            );
        }

        return [beginning, ending];
    };

    _p._push = function(/* ... */) {
        var args = Array.prototype.slice.apply(arguments)
          , i=0, j
          , segments
          , segment
          ;
        for(;i<args.length;i++) {
            // args[i] === [leftSegment, rightSegment]
            segments = [];
            for(j=0;j<2;j++) {
                // Convert ALL lineTo to curveTo;
                // line2curve marks the new segment is marked with
                // segment.wasLine = true;
                if(args[i][j].length === 1) {
                    segment = line2curve(
                        this[this.length-1][j].slice(-1).pop()
                      , args[i][j][0]
                    );
                    // remove the segmentType
                    segment.shift();
                }
                else if(args[i][j].length === 3)
                    segment = args[i][j];
                else
                    // This means that probably  the code that created
                    // the contour argument for StrokeContour is faulty
                    // and must be repaired.
                    throw new AssertionError('A segment is expected to '
                        + ' have 3 items at this stage, but this has '
                        + args[i][j].length + ' items. '
                        + 'Segment: ' + args[i][j].join(', '));
                segments.push(segment);
            }
            Array.prototype.push.call(this, segments);
        }
    };

    /**
     * Returns a list of points like following:
     *
     * the coordinates are absolute.
     *
     * // one "point"
     *  {
     *      l: {
     *          in: Vector
     *        , out: Vector
     *        , on: Vector
     *        , wasLine: true|false
     *      }
     *    , r: {
     *          in: Vector
     *        , out: Vector
     *        , on: Vector
     *        , wasLine: true|false
     *      }
     *    , z: {
     *          in: Vector
     *        , out: Vector
     *        , on: Vector
     *        , wasLine: true|false
     *      }
     * }
     */

    _p._getMetapolatorPoint = function(i) {
        var point, left=0, right =1;

        // i   [[ , leftIn, leftOn], [ , rightIn, rightOn]]
        // i+1 [[leftOut , , ], [rightOut, , ]]

        point = {
            l: {
                'in': this[i][left][1]
               , on: this[i][left][2]
               , out: this[i+1][left][0]
               , wasLine: !!this[i][left].wasLine
            }
          , r: {
                'in': this[i][right][1]
              , on: this[i][right][2]
              , out: this[i+1][right][0]
              , wasLine: !!this[i][right].wasLine
            }
          , z: {}
        };
        // TODO: seems that we "loose" the kwargs here, and thus a possible
        // identifier. (not sure how to solve that, though.)
        point.z.on = getCenterPoint(point.l.on, point.r.on);
        point.z['in'] = getCenterPoint(point.l['in'], point.r['in']);
        point.z.out = getCenterPoint(point.l.out, point.r.out);
        point.z.wasLine = point.l.wasLine && point.r.wasLine;

        return point;
    };

    _p._getPenStroke = function() {
        var i
            // end is the element before the last element, because the last
            // element is just for the ending terminal of interest
          , end = this.length-1
          , result = []
          ;

        for(i=0; i<end; i++)
            result.push(this._getMetapolatorPoint(i));
        return result;
    };

    function _extractKey(key, value) {
        return value[key];
    }

    function _setKey(stroke, key, value, index) {
        stroke[index][key] = value;
    }

    /**
     * Find directions for any control point even when the naive approach
     * has no direction, because the distance of the offset to the on
     * curve point is 0.
     *
     * The algorithm finds the next point in control direction
     * (in|on|out OR out|on|in) that has a different position than
     * point.on and returns that direction in radians.
     *
     * In the normal case, just the direction of the control point is
     * returned.
     *
     * If the control shares the position with the on curve point,
     * i.e. point.on - point[control] === Vector 0, 0
     * the search t traverses the whole path until a direction can be
     * returned.
     * For the left and right path it traces the whole outline, for
     * the centerline it looks only at that. Not too many steps should be
     * needed to find a direction, but in the worst case -- when all
     * points are on the same position -- this will return false.
     *
     * Arguments:
     *
     * `stroke` is a stroke array as returned by StrokeContour._getPenStroke
     *
     * `pointIndex` is the numeric index of the stroke point in `stroke`
     *
     * `key` is 'l' (left), 'z' (center) or 'r' (right)
     *
     * `point` equals stroke[pointIndex][key]
     *
     * `control` is 'out' or 'in' to indicate in which direction we
     *      are searching. This means that we are searching an angle
     *      from `point.on` to 'point[control]' and if there is no
     *      natural angle for that point we go on and look at the next
     *      coordinate the path.
     */
    function _findNextDirection(stroke, pointIndex, key, point, control) {
        var normalIncrement = control === 'out' ? 1 : -1
          , increment = normalIncrement
          , i = pointIndex
          , countourKey = key
          , firstRound = true
          , lastRound
          , result
          ;

        while(true) {
            lastRound = i === pointIndex && !firstRound;
            result = getDirection(point, firstRound, lastRound,
                            increment, stroke[i][countourKey], control);
            firstRound = false;
            if(result !== false || lastRound)
                return result;

            // iterate
            if(key === 'z') {
                // we only change i
                if(increment === 1 && i === stroke.length-1)
                    i = 0;
                else if (increment === -1 && i === 0)
                    i = stroke.length-1;
                else
                    i += increment;
            }
            else { // key is 'l' or 'r'
                increment = (countourKey === key)
                    ? normalIncrement
                    : normalIncrement * -1
                    ;

                if((increment === 1 && i === stroke.length-1)
                                    || (increment === -1 && i === 0)) {
                    // switch to the other side of the stroke;
                    // i stays the same
                    countourKey = key === 'l' ? 'r':'l';
                    increment = increment * -1;
                }
                else
                    i += increment;
            }
        }
    }

    // TODO: Take care of contours marked as smooth, when the obvious
    // direction of a control point was not available. Then we could
    // improve the result of _findNextDirection by returning a smooth
    // connection.
    // If only one direction is a normal direction, the other
    // should be the inverse of that direction.
    // If both directions are 'artificial' the result should be averaged
    // to create a smooth direction.
    function _setPolarControls(stroke, key, point, index, contour) {
        var outVector, inVector, dir;
        outVector = point.out['-'](point.on);
        point.outLength = outVector.magnitude();
        dir = _findNextDirection(stroke, index, key, point, 'out');
        if(dir === false)
            throw new ImportPenstroke('can\'t find a outgoing direction '
                                        +'for point['+index+'].'+key);
        point.outDir = dir;
        inVector = point.on['-'](point['in']);
        point.inLength = inVector.magnitude();
        dir = _findNextDirection(stroke, index, key, point, 'in');
        if(dir === false)
            throw new ImportPenstroke('can\'t find a incoming direction '
                                        +'for point['+index+'].'+key);
        point.inDir = dir;
        return point;
    }

    function _setTensions(stroke, key, metapoint, index, contour) {
        var next
          , uv
          , point = metapoint[key]
          ;
        if(index !== contour.length-1) {
            next = contour[index+1][key];
            uv = hobby.magnitude2tension(
                                    point.on, point.outDir, point.outLength,
                                    next.inLength, next.inDir, next.on);
            point.outTension = uv[0];
            next.inTension = uv[1];
        }

        if(index === 0 && key === 'l') {
            // beginning terminal
            // only handled on the left side for both: 'l' and 'r'
            next =  metapoint.r;
            uv = hobby.magnitude2tension(
                                    point.on, point.inDir  + Math.PI, point.inLength,
                                    next.inLength, next.inDir, next.on);
            point.inTension = uv[0];
            next.inTension = uv[1];
        }
        else if(index === contour.length-1 && key === 'r') {
            // ending terminal
            // only handled on the right side for both: 'l' and 'r'
            next =  metapoint.l;
            uv = hobby.magnitude2tension(
                                    point.on, point.outDir, point.outLength,
                                    next.outLength, next.outDir + Math.PI, next.on);
            point.outTension = uv[0];
            next.outTension = uv[1];
        }
    }

    /**
     * Returns a list of points like following:
     *
     * the coordinates are absolute.
     *
     * // one "point"
     *  {
     *      l: {
     *          in: Vector
     *        , out: Vector
     *        , on: Vector
     *        , wasLine: true|false
     *        , outLength: real number
     *        , outDir: , angle in radians
     *        , inLength: real number
     *        , inDir: real number, angle in radians
     *        , outTension: real number or Infinity if outLength === 0
     *        , inTension: real number or Infinity if inLength === 0
     *      }
     *    , r: {
     *          in: Vector
     *        , out: Vector
     *        , on: Vector
     *        , wasLine: true|false
     *        , outLength: real number
     *        , outDir: , angle in radians
     *        , inLength: real number
     *        , inDir: real number, angle in radians
     *        , outTension: real number or Infinity if outLength === 0
     *        , inTension: real number or Infinity if inLength === 0
     *      }
     *    , z: {
     *          in: Vector
     *        , out: Vector
     *        , on: Vector
     *        , wasLine: true|false
     *        , outLength: real number
     *        , outDir: , angle in radians
     *        , inLength: real number
     *        , inDir: real number, angle in radians
     *      }
     * }
     */
    _p.getPenStroke = function() {
        var stroke = this._getPenStroke();
        stroke.map(_extractKey.bind(null,'l'))
              .map(_setPolarControls.bind(null, stroke,'l'))
              .forEach(_setKey.bind(null, stroke,'l'))
              ;
        stroke.map(_extractKey.bind(null,'r'))
              .map(_setPolarControls.bind(null, stroke,'r'))
              .forEach(_setKey.bind(null, stroke,'r'))
              ;

        stroke.map(_extractKey.bind(null,'z'))
              .map(_setPolarControls.bind(null, stroke,'z'))
              .forEach(_setKey.bind(null, stroke,'z'))
              ;

        stroke.forEach(_setTensions.bind(null, stroke,'l'));
        stroke.forEach(_setTensions.bind(null, stroke,'r'));
        return stroke;
    };

    return StrokeContour;
});

define('Atem-MOM/import/ufo/contourFromContour',[
    'Atem-MOM/errors'
  , './tools'
], function(
    errors
  , tools
) {
    "use strict";
    var AssertionError = errors.Assertion
      , ImportContourError = errors.ImportContour
      , line2curve = tools.line2curve
      , getDirection = tools.getDirection
      ;

    /* Convert all lineTo to curveTo */
    function _all2CurveTo(contour) {
        var i, result = [], previousSegment, segment;

        previousSegment = contour.length - 1;
        for(i=0;i<contour.length;i++) {

            if(contour[i].length === 4)
                // [command, point, point, point]
                segment = contour[i];
            else if(contour[i].length === 2) {
                // [command, point]
                segment = line2curve (
                      // previous on-curve point
                      contour[previousSegment].slice(-1).pop()
                    , contour[i][1]
                );
            }
            else
                // This means that probably  the code that created
                // the contour argument for is faulty and must be repaired.
                throw new AssertionError('A segment is expected to '
                        + ' have 3 items at this stage, but this has '
                        + contour[i].length + ' items. '
                        + 'Segment: ' + contour[i].join(', '));
            segment.shift(); // remove the segmentType
            result.push(segment);
            previousSegment = i;
        }
        return result;
    }

    function _getMetapolatorPoint(item, i, contour) {
        var outIndex = i === contour.length-1
            ? 0
            : i+1
            ;
        return {
            'in': item[1]
          , on: item[2]
          , out: contour[outIndex][0]
          , wasLine: !!item.wasLine
        };
    }

    /**
     * This is a trimmed copy of the equivalent function in StrokeContour.
     * The purpose is to fined a fallback direction, if the contour did
     * not come with something useful
     * See the other docstring for more info.
     *
     */
    function _findNextDirection(contour, pointIndex, point, control) {
        var normalIncrement = control === 'out' ? 1 : -1
          , increment = normalIncrement
          , i = pointIndex
          , firstRound = true
          , lastRound
          , result
          ;

        while(true) {
            lastRound = i === pointIndex && !firstRound;
            result = getDirection(point, firstRound, lastRound,
                            increment, contour[i], control);
            firstRound = false;
            if(result !== false || lastRound)
                return result;

            // iterate
            if(increment === 1 && i === contour.length-1)
                i = 0;
            else if (increment === -1 && i === 0)
                i = contour.length-1;
            else
                i += increment;
        }
    }

    function _setPolarControls(point, index, contour) {
        var outVector, inVector, dir;
        outVector = point.out['-'](point.on);
        point.outLength = outVector.magnitude();
        dir = _findNextDirection(contour, index, point, 'out');
        if(dir === false)
            throw new ImportContourError('Can\'t find an outgoing direction '
                                        + 'for point at contour['+index+'].');
        point.outDir = dir;
        inVector = point.on['-'](point['in']);
        point.inLength = inVector.magnitude();
        dir = _findNextDirection(contour, index, point, 'in');
        if(dir === false)
            throw new ImportContourError('can\'t find an incoming direction '
                                        +'for point at contour['+index+'].');
        point.inDir = dir;
        return point;
    }

    function contourFromContour(contour) {
        return _all2CurveTo(contour)
               .map(_getMetapolatorPoint)
               .map(_setPolarControls)
               ;
    }

    return contourFromContour;
});

define('Atem-MOM/timer',[], (function(){
    var module;

    if(typeof performance !== 'undefined')
        module = function() {
            return {
                now: function(){ return performance.now(); }
            };
        };
    else if(typeof process !== 'undefined')
        module = function() {
            return {
                now: function() {
                    var time = process.hrtime();
                    return (time[0] * 1e3 ) + (time[1] * 1e-6);
                }
            };
        };
    else
        throw new Error('No timer implementation is available.');

    return module;
})());

/**
 * Copyright (c) 2015, Felipe Correa da Silva Sanches <juca@members.fsf.org>
 *
 * You should have received a copy of the MIT License along with this program.
 * If not, see http://www.opensource.org/licenses/mit-license.php
 *
 */
define(
    'Atem-Pen-Case/pens/OpenTypePen',[
       './BasePen'
    ],
    function(
        Parent
) {
    "use strict";

    /*constructor*/
    function OpenTypePen(path, glyphSet) {
        Parent.call(this, glyphSet);
        this.path = path;
    }

    /*inheritance*/
    var _p = OpenTypePen.prototype = Object.create(Parent.prototype);

    _p._moveTo = function(pt /*, kwargs optional, object contour attributes*/) {
        this.path.moveTo(pt[0], pt[1]);
    };

    _p._lineTo = function(pt) {
        this.path.lineTo(pt[0], pt[1]);
    };

    _p._curveToOne = function(pt1, pt2, pt3) {
        this.path.curveTo(pt1[0], pt1[1], pt2[0], pt2[1], pt3[0], pt3[1]);
    };

    _p.getPath = function(){
       return this.path;
    };

    return OpenTypePen;
});

define('Atem-Pen-Case/tools/arrayTools',[],
function() {
    "use strict";
    /**
     * javascript port based on the original python sources from:
     * https://github.com/behdad/fonttools/blob/b30e12ae00b30a701b6829951c254d7e44c34057/Lib/fontTools/misc/arrayTools.py
     *
     * The following methods are not ported, though:
     * - calcIntBounds(array)
     * - pointsInRect(array, rect)
     * - vectorLength(vector)
     * - asInt16(array)
     * - normRect(rect)
     * - scaleRect(rect, x, y)
     * - offsetRect(rect, dx, dy)
     * - insetRect(rect, dx, dy)
     * - sectRect(rect1, rect2)
     * - rectCenter(rect0)
     * - intRect(rect1)
     *
     */

    function calcBounds(points){
        /* Returns the recangular area that contains
         * all points in the list 'points'.
         */
        if(!points.length)
            return [0, 0, 0, 0];
        var xs = []
          , ys = []
          , i, l
          ;
        for(i=0, l=points.length; i<l; i++){
            xs.push(points[i][0]);
            ys.push(points[i][1]);
        }
        return [Math.min.apply(null, xs), Math.min.apply(null, ys)
              , Math.max.apply(null, xs), Math.max.apply(null, ys)];
    }

    function updateBounds(bounds, pt){
        /* Returns the recangular area that contains
         * both the rectangle 'bounds' and point 'pt'.
         */
        var xMin = bounds[0]
          , yMin = bounds[1]
          , xMax = bounds[2]
          , yMax = bounds[3]
          , x = pt[0]
          , y = pt[1]
          ;
        if (x < xMin) xMin = x;
        if (x > xMax) xMax = x;
        if (y < yMin) yMin = y;
        if (y > yMax) yMax = y;
        return [xMin, yMin, xMax, yMax];
    }

    function pointInRect(pt, rect){
        /* Returns True when point 'pt' is inside rectangle 'rect'.
         */
        var x = pt[0]
          , y = pt[1]
          , xMin = rect[0]
          , yMin = rect[1]
          , xMax = rect[2]
          , yMax = rect[3]
          ;
        return xMin <= x && x <= xMax && yMin <= y && y <= yMax;
    }

    function unionRect(r1, r2){
        /* Returns the recangular area that contains
         * both the rectangles 'r1' and 'r2'.
         */
        var xMin = Math.min( r1[0], r2[0] )
          , yMin = Math.min( r1[1], r2[1] )
          , xMax = Math.max( r1[2], r2[2] )
          , yMax = Math.max( r1[3], r2[3] )
          ;
        return [xMin, yMin, xMax, yMax];
    }

    return {
        calcBounds: calcBounds
      , updateBounds: updateBounds
      , pointInRect: pointInRect
      , unionRect: unionRect
    };
});

define(
    'Atem-Pen-Case/pens/ControlBoundsPen',[
        './BasePen'
      , 'Atem-Pen-Case/tools/arrayTools'
    ],
    function(
        Parent
      , arrayTools
) {
    "use strict";
    var updateBounds = arrayTools.updateBounds;

    /**
     * javascript port based on the original python sources from:
     * https://github.com/robofab-developers/robofab/blob/445e45d75567efccd51574c4aa2a14d15eb1d4db/Lib/robofab/pens/boundsPen.py
     *
     * but also check the boundsPen.py file in the master branch:
     * https://github.com/robofab-developers/robofab/blob/master/Lib/robofab/pens/boundsPen.py
     * as it seems more actively mantained even though the code in their ufo3k branch is the primary source for ufoJS.
     *
     * Pen to calculate the 'control bounds' of a shape. This is the
     * bounding box of all control points __on closed paths__, so may
     * be larger than the actual bounding box if there are curves that
     * don't have points on their extremes.
     *
     * Single points, or anchors, are ignored.
     *
     * When the shape has been drawn, the bounds are available as the
     * 'bounds' attribute of the pen object. It's a 4-tuple:
     *
     * (xMin, yMin, xMax, yMax)
     *
     * This replaces fontTools/pens/boundsPen (temporarily?)
     * The fontTools bounds pen takes lose anchor points into account,
     * this one doesn't.
     */

    /* constructor */
    function ControlBoundsPen (glyphSet) {
        Parent.call(this, glyphSet);
        this.bounds = undefined;
        this._start = undefined;
    }

    /* inheritance */
    var _p = ControlBoundsPen.prototype = Object.create(Parent.prototype);
    _p.constructor = ControlBoundsPen;

    _p._moveTo = function (pt, kwargs/* optional, object contour attributes*/){
        this._start = pt;
    };

    _p._addMoveTo = function (){
        if (this._start === undefined)
            return;
        if (this.bounds){
            this.bounds = updateBounds(this.bounds, this._start);
        }
        else {
            var x = this._start[0]
              , y = this._start[1]
              ;
            this.bounds = [x, y, x, y];
        }
        this._start = undefined;
    };

    _p._lineTo = function (pt){
        this._addMoveTo();
        this.bounds = updateBounds(this.bounds, pt);
    };

    _p._curveToOne = function (bcp1, bcp2, pt){
        this._addMoveTo();
        this.bounds = updateBounds(this.bounds, bcp1);
        this.bounds = updateBounds(this.bounds, bcp2);
        this.bounds = updateBounds(this.bounds, pt);
    };

    _p._qCurveToOne = function (bcp, pt){
        this._addMoveTo();
        this.bounds = updateBounds(this.bounds, bcp);
        this.bounds = updateBounds(this.bounds, pt);
    };

    return ControlBoundsPen;
});

define('Atem-Pen-Case/tools/bezierTools',[
    './arrayTools'
],
function(
    arrayTools
){
    "use strict";
    /**
     * javascript port based on the original python sources from:
     * https://github.com/behdad/fonttools/blob/b30e12ae00b30a701b6829951c254d7e44c34057/Lib/fontTools/misc/bezierTools.py
     *
     * The following methods are not ported, though:
     * - splitLine(pt1, pt2, where, isHorizontal)
     * - splitQuadratic(pt1, pt2, pt3, where, isHorizontal)
     * - splitCubic(pt1, pt2, pt3, pt4, where, isHorizontal)
     * - splitQuadraticAtT(pt1, pt2, pt3, *ts)
     * - splitCubicAtT(pt1, pt2, pt3, pt4, *ts)
     * - _splitQuadraticAtT(a, b, c, *ts)
     * - _splitCubicAtT(a, b, c, d, *ts)
     * - solveCubic(a, b, c, d)
     * - calcQuadraticPoints(a, b, c)
     * - calcCubicPoints(a, b, c, d)
     *
     */
    var epsilon = 1e-12
      , calcBounds = arrayTools.calcBounds
      ;
    function solveQuadratic(a, b, c, sqroot_){
        /* Solve a quadratic equation where a, b and c are real.
         *
         * a*x*x + b*x + c = 0
         *
         * This function returns a list of roots. Note that the
         * returned list is neither guaranteed to be sorted nor
         * to contain unique values!
         */
        var sqroot = sqroot_ || Math.sqrt
          , roots
          , D2
          , rD2
          ;
        if (Math.abs(a) < epsilon){
            if (Math.abs(b) < epsilon){
                // We have a non-equation;
                // therefore, we have no valid solution
                roots = [];
            }
            else {
                // We have a linear equation with 1 root.
                roots = [-c/b];
            }
        }
        else {
            // We have a true quadratic equation.
            // Apply the quadratic formula to find two roots.
            D2 = b*b - 4.0*a*c;
            if (D2 >= 0.0){
                rD2 = sqroot(D2);
                roots = [(-b+rD2)/2.0/a, (-b-rD2)/2.0/a];
            }
            else {
                // complex roots, ignore
                roots = [];
            }
        }
        return roots;
    }

    function calcQuadraticParameters(pt1, pt2, pt3){
        var x2 = pt2[0]
          , y2 = pt2[1]
          , x3 = pt3[0]
          , y3 = pt3[1]
          , cx = pt1[0]
          , cy = pt1[1]
          , bx = (x2 - cx) * 2.0
          , by = (y2 - cy) * 2.0
          , ax = x3 - cx - bx
          , ay = y3 - cy - by
          ;
        return [[ax, ay], [bx, by], [cx, cy]];
    }

    function calcCubicParameters(pt1, pt2, pt3, pt4){
        var x2 = pt2[0]
          , y2 = pt2[1]
          , x3 = pt3[0]
          , y3 = pt3[1]
          , x4 = pt4[0]
          , y4 = pt4[1]
          , dx = pt1[0]
          , dy = pt1[1]
          , cx = (x2 - dx) * 3.0
          , cy = (y2 - dy) * 3.0
          , bx = (x3 - x2) * 3.0 - cx
          , by = (y3 - y2) * 3.0 - cy
          , ax = x4 - dx - cx - bx
          , ay = y4 - dy - cy - by
          ;
        return [[ax, ay], [bx, by], [cx, cy], [dx, dy]];
    }

    function calcQuadraticBounds(pt1, pt2, pt3){
        /* Return the bounding box for a qudratic bezier segment.
         *
         * pt1 and pt3 are the "anchor" points, pt2 is the "handle".
         *
         * >>> calcQuadraticBounds((0, 0), (50, 100), (100, 0))
         * (0, 0, 100, 50.0)
         * >>> calcQuadraticBounds((0, 0), (100, 0), (100, 100))
         * (0.0, 0.0, 100, 100)
         */
        var params = calcQuadraticParameters(pt1, pt2, pt3)
          , ax = params[0]
          , ay = params[1]
          , bx = params[2]
          , by = params[3]
          , cx = params[4]
          , cy = params[5]
          , ax2 = ax*2.0
          , ay2 = ay*2.0
          , points = []
          , roots = []
          , t
          ;
        if (ax2 !== 0) {
            roots.push(-bx/ax2);
        }
        if (ay2 !== 0) {
            roots.push(-by/ay2);
        }

        while((t = roots.pop()) !== undefined) {
            if (0 <= t && t < 1) {
                points.push([ax*t*t + bx*t + cx, ay*t*t + by*t + cy]);
            }
        }
        points.push(pt1, pt3);

        return calcBounds(points);
    }

    function calcCubicBounds(pt1, pt2, pt3, pt4){
        /* Return the bounding rectangle for a cubic bezier segment.
         * pt1 and pt4 are the "anchor" points, pt2 and pt3 are the "handles".
         *
         * >>> calcCubicBounds((0, 0), (25, 100), (75, 100), (100, 0))
         * (0, 0, 100, 75.0)
         * >>> calcCubicBounds((0, 0), (50, 0), (100, 50), (100, 100))
         * (0.0, 0.0, 100, 100)
         * >>> calcCubicBounds((50, 0), (0, 100), (100, 100), (50, 0))
         * (35.566243270259356, 0, 64.43375672974068, 75.0)
         */
        var params = calcCubicParameters(pt1, pt2, pt3, pt4)
          , ax = params[0]
          , ay = params[1]
          , bx = params[2]
          , by = params[3]
          , cx = params[4]
          , cy = params[5]
          , dx = params[6]
          , dy = params[7]
          , ax3 = ax * 3.0
          , ay3 = ay * 3.0
          , bx2 = bx * 2.0
          , by2 = by * 2.0
          , points = []
          , roots = [] , i, l, t
          ;
        roots = [].concat(solveQuadratic(ax3, bx2, cx), solveQuadratic(ay3, by2, cy));
        for (i=0, l=roots.length; i<l; i++){
            t = roots[i];
            if (0 <= t && t < 1)
                points.push([ax*t*t*t + bx*t*t + cx * t + dx, ay*t*t*t + by*t*t + cy * t + dy]);
        }
        points.push(pt1, pt4);
        return calcBounds(points);
    }

    return {
        calcQuadraticBounds: calcQuadraticBounds
      , calcCubicBounds: calcCubicBounds
      , solveQuadratic: solveQuadratic
    };
});

define(
    'Atem-Pen-Case/pens/BoundsPen',[
        './ControlBoundsPen'
      , 'Atem-Pen-Case/tools/arrayTools'
      , 'Atem-Pen-Case/tools/bezierTools'
    ],
    function(
        Parent
      , arrayTools
      , bezierTools
) {
    "use strict";
    var updateBounds = arrayTools.updateBounds
      , pointInRect = arrayTools.pointInRect
      , unionRect = arrayTools.unionRect
      , calcCubicBounds = bezierTools.calcCubicBounds
      , calcQuadraticBounds = bezierTools.calcQuadraticBounds
      ;
    /**
     * javascript port based on the original python sources from:
     * https://github.com/robofab-developers/robofab/blob/445e45d75567efccd51574c4aa2a14d15eb1d4db/Lib/robofab/pens/boundsPen.py
     *
     * but also check the boundsPen.py file in the master branch:
     * https://github.com/robofab-developers/robofab/blob/master/Lib/robofab/pens/boundsPen.py
     * as it seems more actively mantained even though the code in their ufo3k branch is the primary source for ufoJS.
     *
     * Pen to calculate the bounds of a shape. It calculates the
     * correct bounds even when the shape contains curves that don't
     * have points on their extremes. This is somewhat slower to compute
     * than the "control bounds".
     *
     * When the shape has been drawn, the bounds are available as the
     * 'bounds' attribute of the pen object. It's a 4-tuple:
     *
     * (xMin, yMin, xMax, yMax)
     */

    /* constructor */
    function BoundsPen (glyphSet) {
        Parent.call(this, glyphSet);
        this.bounds = undefined;
        this._start = undefined;
    }

    /* inheritance */
    var _p = BoundsPen.prototype = Object.create(Parent.prototype);
    _p.constructor = BoundsPen;

    _p._curveToOne = function (bcp1, bcp2, pt){
        this._addMoveTo();
        this.bounds = updateBounds(this.bounds, pt);
        if (!pointInRect(bcp1, this.bounds) ||
            !pointInRect(bcp2, this.bounds)){
            this.bounds = unionRect(this.bounds,
                calcCubicBounds(
                this._getCurrentPoint()
                  , bcp1
                  , bcp2
                  , pt
                )
            );
        }
    };

    _p._qCurveToOne = function (bcp, pt){
        this._addMoveTo();
        this.bounds = updateBounds(this.bounds, pt);
        if (! pointInRect(bcp, this.bounds)){
            this.bounds = unionRect(
                this.bounds
              , calcQuadraticBounds(
                    this._getCurrentPoint()
                  , bcp
                  , pt
                )
            );
        }
    };

    _p.getBounds = function (){
        return this.bounds;
    };

    return BoundsPen;
});

(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define('opentype',[],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.opentype = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
function Tree(){this.table=new Uint16Array(16),this.trans=new Uint16Array(288)}function Data(e,t){this.source=e,this.sourceIndex=0,this.tag=0,this.bitcount=0,this.dest=t,this.destLen=0,this.ltree=new Tree,this.dtree=new Tree}function tinf_build_bits_base(e,t,n,r){var s,i;for(s=0;n>s;++s)e[s]=0;for(s=0;30-n>s;++s)e[s+n]=s/n|0;for(i=r,s=0;30>s;++s)t[s]=i,i+=1<<e[s]}function tinf_build_fixed_trees(e,t){var n;for(n=0;7>n;++n)e.table[n]=0;for(e.table[7]=24,e.table[8]=152,e.table[9]=112,n=0;24>n;++n)e.trans[n]=256+n;for(n=0;144>n;++n)e.trans[24+n]=n;for(n=0;8>n;++n)e.trans[168+n]=280+n;for(n=0;112>n;++n)e.trans[176+n]=144+n;for(n=0;5>n;++n)t.table[n]=0;for(t.table[5]=32,n=0;32>n;++n)t.trans[n]=n}function tinf_build_tree(e,t,n,r){var s,i;for(s=0;16>s;++s)e.table[s]=0;for(s=0;r>s;++s)e.table[t[n+s]]++;for(e.table[0]=0,i=0,s=0;16>s;++s)offs[s]=i,i+=e.table[s];for(s=0;r>s;++s)t[n+s]&&(e.trans[offs[t[n+s]]++]=s)}function tinf_getbit(e){e.bitcount--||(e.tag=e.source[e.sourceIndex++],e.bitcount=7);var t=1&e.tag;return e.tag>>>=1,t}function tinf_read_bits(e,t,n){if(!t)return n;for(;e.bitcount<24;)e.tag|=e.source[e.sourceIndex++]<<e.bitcount,e.bitcount+=8;var r=e.tag&65535>>>16-t;return e.tag>>>=t,e.bitcount-=t,r+n}function tinf_decode_symbol(e,t){for(;e.bitcount<24;)e.tag|=e.source[e.sourceIndex++]<<e.bitcount,e.bitcount+=8;var n=0,r=0,s=0,i=e.tag;do r=2*r+(1&i),i>>>=1,++s,n+=t.table[s],r-=t.table[s];while(r>=0);return e.tag=i,e.bitcount-=s,t.trans[n+r]}function tinf_decode_trees(e,t,n){var r,s,i,a,o,_;for(r=tinf_read_bits(e,5,257),s=tinf_read_bits(e,5,1),i=tinf_read_bits(e,4,4),a=0;19>a;++a)lengths[a]=0;for(a=0;i>a;++a){var f=tinf_read_bits(e,3,0);lengths[clcidx[a]]=f}for(tinf_build_tree(code_tree,lengths,0,19),o=0;r+s>o;){var d=tinf_decode_symbol(e,code_tree);switch(d){case 16:var b=lengths[o-1];for(_=tinf_read_bits(e,2,3);_;--_)lengths[o++]=b;break;case 17:for(_=tinf_read_bits(e,3,3);_;--_)lengths[o++]=0;break;case 18:for(_=tinf_read_bits(e,7,11);_;--_)lengths[o++]=0;break;default:lengths[o++]=d}}tinf_build_tree(t,lengths,0,r),tinf_build_tree(n,lengths,r,s)}function tinf_inflate_block_data(e,t,n){for(;;){var r=tinf_decode_symbol(e,t);if(256===r)return TINF_OK;if(256>r)e.dest[e.destLen++]=r;else{var s,i,a,o;for(r-=257,s=tinf_read_bits(e,length_bits[r],length_base[r]),i=tinf_decode_symbol(e,n),a=e.destLen-tinf_read_bits(e,dist_bits[i],dist_base[i]),o=a;a+s>o;++o)e.dest[e.destLen++]=e.dest[o]}}}function tinf_inflate_uncompressed_block(e){for(var t,n,r;e.bitcount>8;)e.sourceIndex--,e.bitcount-=8;if(t=e.source[e.sourceIndex+1],t=256*t+e.source[e.sourceIndex],n=e.source[e.sourceIndex+3],n=256*n+e.source[e.sourceIndex+2],t!==(65535&~n))return TINF_DATA_ERROR;for(e.sourceIndex+=4,r=t;r;--r)e.dest[e.destLen++]=e.source[e.sourceIndex++];return e.bitcount=0,TINF_OK}function tinf_uncompress(e,t){var n,r,s,i=new Data(e,t);do{switch(n=tinf_getbit(i),r=tinf_read_bits(i,2,0)){case 0:s=tinf_inflate_uncompressed_block(i);break;case 1:s=tinf_inflate_block_data(i,sltree,sdtree);break;case 2:tinf_decode_trees(i,i.ltree,i.dtree),s=tinf_inflate_block_data(i,i.ltree,i.dtree);break;default:s=TINF_DATA_ERROR}if(s!==TINF_OK)throw new Error("Data error")}while(!n);return i.destLen<i.dest.length?"function"==typeof i.dest.slice?i.dest.slice(0,i.destLen):i.dest.subarray(0,i.destLen):i.dest}var TINF_OK=0,TINF_DATA_ERROR=-3,sltree=new Tree,sdtree=new Tree,length_bits=new Uint8Array(30),length_base=new Uint16Array(30),dist_bits=new Uint8Array(30),dist_base=new Uint16Array(30),clcidx=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),code_tree=new Tree,lengths=new Uint8Array(320),offs=new Uint16Array(16);tinf_build_fixed_trees(sltree,sdtree),tinf_build_bits_base(length_bits,length_base,4,3),tinf_build_bits_base(dist_bits,dist_base,2,1),length_bits[28]=0,length_base[28]=258,module.exports=tinf_uncompress;

},{}],2:[function(require,module,exports){
"use strict";exports.argument=function(r,t){if(!r)throw new Error(t)},exports.assert=exports.argument;

},{}],3:[function(require,module,exports){
"use strict";function line(e,i,n,o,t){e.beginPath(),e.moveTo(i,n),e.lineTo(o,t),e.stroke()}exports.line=line;

},{}],4:[function(require,module,exports){
"use strict";function DefaultEncoding(e){this.font=e}function CmapEncoding(e){this.cmap=e}function CffEncoding(e,l){this.encoding=e,this.charset=l}function GlyphNames(e){var l;switch(e.version){case 1:this.names=exports.standardNames.slice();break;case 2:for(this.names=new Array(e.numberOfGlyphs),l=0;l<e.numberOfGlyphs;l++)this.names[l]=e.glyphNameIndex[l]<exports.standardNames.length?exports.standardNames[e.glyphNameIndex[l]]:e.names[e.glyphNameIndex[l]-exports.standardNames.length];break;case 2.5:for(this.names=new Array(e.numberOfGlyphs),l=0;l<e.numberOfGlyphs;l++)this.names[l]=exports.standardNames[l+e.glyphNameIndex[l]];break;case 3:this.names=[]}}function addGlyphNames(e){for(var l,r=e.tables.cmap.glyphIndexMap,a=Object.keys(r),s=0;s<a.length;s+=1){var i=a[s],o=r[i];l=e.glyphs.get(o),l.addUnicode(parseInt(i))}for(s=0;s<e.glyphs.length;s+=1)l=e.glyphs.get(s),l.name=e.cffEncoding?e.cffEncoding.charset[s]:e.glyphNames.glyphIndexToName(s)}var cffStandardStrings=[".notdef","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quoteright","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","quoteleft","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","exclamdown","cent","sterling","fraction","yen","florin","section","currency","quotesingle","quotedblleft","guillemotleft","guilsinglleft","guilsinglright","fi","fl","endash","dagger","daggerdbl","periodcentered","paragraph","bullet","quotesinglbase","quotedblbase","quotedblright","guillemotright","ellipsis","perthousand","questiondown","grave","acute","circumflex","tilde","macron","breve","dotaccent","dieresis","ring","cedilla","hungarumlaut","ogonek","caron","emdash","AE","ordfeminine","Lslash","Oslash","OE","ordmasculine","ae","dotlessi","lslash","oslash","oe","germandbls","onesuperior","logicalnot","mu","trademark","Eth","onehalf","plusminus","Thorn","onequarter","divide","brokenbar","degree","thorn","threequarters","twosuperior","registered","minus","eth","multiply","threesuperior","copyright","Aacute","Acircumflex","Adieresis","Agrave","Aring","Atilde","Ccedilla","Eacute","Ecircumflex","Edieresis","Egrave","Iacute","Icircumflex","Idieresis","Igrave","Ntilde","Oacute","Ocircumflex","Odieresis","Ograve","Otilde","Scaron","Uacute","Ucircumflex","Udieresis","Ugrave","Yacute","Ydieresis","Zcaron","aacute","acircumflex","adieresis","agrave","aring","atilde","ccedilla","eacute","ecircumflex","edieresis","egrave","iacute","icircumflex","idieresis","igrave","ntilde","oacute","ocircumflex","odieresis","ograve","otilde","scaron","uacute","ucircumflex","udieresis","ugrave","yacute","ydieresis","zcaron","exclamsmall","Hungarumlautsmall","dollaroldstyle","dollarsuperior","ampersandsmall","Acutesmall","parenleftsuperior","parenrightsuperior","266 ff","onedotenleader","zerooldstyle","oneoldstyle","twooldstyle","threeoldstyle","fouroldstyle","fiveoldstyle","sixoldstyle","sevenoldstyle","eightoldstyle","nineoldstyle","commasuperior","threequartersemdash","periodsuperior","questionsmall","asuperior","bsuperior","centsuperior","dsuperior","esuperior","isuperior","lsuperior","msuperior","nsuperior","osuperior","rsuperior","ssuperior","tsuperior","ff","ffi","ffl","parenleftinferior","parenrightinferior","Circumflexsmall","hyphensuperior","Gravesmall","Asmall","Bsmall","Csmall","Dsmall","Esmall","Fsmall","Gsmall","Hsmall","Ismall","Jsmall","Ksmall","Lsmall","Msmall","Nsmall","Osmall","Psmall","Qsmall","Rsmall","Ssmall","Tsmall","Usmall","Vsmall","Wsmall","Xsmall","Ysmall","Zsmall","colonmonetary","onefitted","rupiah","Tildesmall","exclamdownsmall","centoldstyle","Lslashsmall","Scaronsmall","Zcaronsmall","Dieresissmall","Brevesmall","Caronsmall","Dotaccentsmall","Macronsmall","figuredash","hypheninferior","Ogoneksmall","Ringsmall","Cedillasmall","questiondownsmall","oneeighth","threeeighths","fiveeighths","seveneighths","onethird","twothirds","zerosuperior","foursuperior","fivesuperior","sixsuperior","sevensuperior","eightsuperior","ninesuperior","zeroinferior","oneinferior","twoinferior","threeinferior","fourinferior","fiveinferior","sixinferior","seveninferior","eightinferior","nineinferior","centinferior","dollarinferior","periodinferior","commainferior","Agravesmall","Aacutesmall","Acircumflexsmall","Atildesmall","Adieresissmall","Aringsmall","AEsmall","Ccedillasmall","Egravesmall","Eacutesmall","Ecircumflexsmall","Edieresissmall","Igravesmall","Iacutesmall","Icircumflexsmall","Idieresissmall","Ethsmall","Ntildesmall","Ogravesmall","Oacutesmall","Ocircumflexsmall","Otildesmall","Odieresissmall","OEsmall","Oslashsmall","Ugravesmall","Uacutesmall","Ucircumflexsmall","Udieresissmall","Yacutesmall","Thornsmall","Ydieresissmall","001.000","001.001","001.002","001.003","Black","Bold","Book","Light","Medium","Regular","Roman","Semibold"],cffStandardEncoding=["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quoteright","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","quoteleft","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","exclamdown","cent","sterling","fraction","yen","florin","section","currency","quotesingle","quotedblleft","guillemotleft","guilsinglleft","guilsinglright","fi","fl","","endash","dagger","daggerdbl","periodcentered","","paragraph","bullet","quotesinglbase","quotedblbase","quotedblright","guillemotright","ellipsis","perthousand","","questiondown","","grave","acute","circumflex","tilde","macron","breve","dotaccent","dieresis","","ring","cedilla","","hungarumlaut","ogonek","caron","emdash","","","","","","","","","","","","","","","","","AE","","ordfeminine","","","","","Lslash","Oslash","OE","ordmasculine","","","","","","ae","","","","dotlessi","","","lslash","oslash","oe","germandbls"],cffExpertEncoding=["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","space","exclamsmall","Hungarumlautsmall","","dollaroldstyle","dollarsuperior","ampersandsmall","Acutesmall","parenleftsuperior","parenrightsuperior","twodotenleader","onedotenleader","comma","hyphen","period","fraction","zerooldstyle","oneoldstyle","twooldstyle","threeoldstyle","fouroldstyle","fiveoldstyle","sixoldstyle","sevenoldstyle","eightoldstyle","nineoldstyle","colon","semicolon","commasuperior","threequartersemdash","periodsuperior","questionsmall","","asuperior","bsuperior","centsuperior","dsuperior","esuperior","","","isuperior","","","lsuperior","msuperior","nsuperior","osuperior","","","rsuperior","ssuperior","tsuperior","","ff","fi","fl","ffi","ffl","parenleftinferior","","parenrightinferior","Circumflexsmall","hyphensuperior","Gravesmall","Asmall","Bsmall","Csmall","Dsmall","Esmall","Fsmall","Gsmall","Hsmall","Ismall","Jsmall","Ksmall","Lsmall","Msmall","Nsmall","Osmall","Psmall","Qsmall","Rsmall","Ssmall","Tsmall","Usmall","Vsmall","Wsmall","Xsmall","Ysmall","Zsmall","colonmonetary","onefitted","rupiah","Tildesmall","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","exclamdownsmall","centoldstyle","Lslashsmall","","","Scaronsmall","Zcaronsmall","Dieresissmall","Brevesmall","Caronsmall","","Dotaccentsmall","","","Macronsmall","","","figuredash","hypheninferior","","","Ogoneksmall","Ringsmall","Cedillasmall","","","","onequarter","onehalf","threequarters","questiondownsmall","oneeighth","threeeighths","fiveeighths","seveneighths","onethird","twothirds","","","zerosuperior","onesuperior","twosuperior","threesuperior","foursuperior","fivesuperior","sixsuperior","sevensuperior","eightsuperior","ninesuperior","zeroinferior","oneinferior","twoinferior","threeinferior","fourinferior","fiveinferior","sixinferior","seveninferior","eightinferior","nineinferior","centinferior","dollarinferior","periodinferior","commainferior","Agravesmall","Aacutesmall","Acircumflexsmall","Atildesmall","Adieresissmall","Aringsmall","AEsmall","Ccedillasmall","Egravesmall","Eacutesmall","Ecircumflexsmall","Edieresissmall","Igravesmall","Iacutesmall","Icircumflexsmall","Idieresissmall","Ethsmall","Ntildesmall","Ogravesmall","Oacutesmall","Ocircumflexsmall","Otildesmall","Odieresissmall","OEsmall","Oslashsmall","Ugravesmall","Uacutesmall","Ucircumflexsmall","Udieresissmall","Yacutesmall","Thornsmall","Ydieresissmall"],standardNames=[".notdef",".null","nonmarkingreturn","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quotesingle","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","grave","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","Adieresis","Aring","Ccedilla","Eacute","Ntilde","Odieresis","Udieresis","aacute","agrave","acircumflex","adieresis","atilde","aring","ccedilla","eacute","egrave","ecircumflex","edieresis","iacute","igrave","icircumflex","idieresis","ntilde","oacute","ograve","ocircumflex","odieresis","otilde","uacute","ugrave","ucircumflex","udieresis","dagger","degree","cent","sterling","section","bullet","paragraph","germandbls","registered","copyright","trademark","acute","dieresis","notequal","AE","Oslash","infinity","plusminus","lessequal","greaterequal","yen","mu","partialdiff","summation","product","pi","integral","ordfeminine","ordmasculine","Omega","ae","oslash","questiondown","exclamdown","logicalnot","radical","florin","approxequal","Delta","guillemotleft","guillemotright","ellipsis","nonbreakingspace","Agrave","Atilde","Otilde","OE","oe","endash","emdash","quotedblleft","quotedblright","quoteleft","quoteright","divide","lozenge","ydieresis","Ydieresis","fraction","currency","guilsinglleft","guilsinglright","fi","fl","daggerdbl","periodcentered","quotesinglbase","quotedblbase","perthousand","Acircumflex","Ecircumflex","Aacute","Edieresis","Egrave","Iacute","Icircumflex","Idieresis","Igrave","Oacute","Ocircumflex","apple","Ograve","Uacute","Ucircumflex","Ugrave","dotlessi","circumflex","tilde","macron","breve","dotaccent","ring","cedilla","hungarumlaut","ogonek","caron","Lslash","lslash","Scaron","scaron","Zcaron","zcaron","brokenbar","Eth","eth","Yacute","yacute","Thorn","thorn","minus","multiply","onesuperior","twosuperior","threesuperior","onehalf","onequarter","threequarters","franc","Gbreve","gbreve","Idotaccent","Scedilla","scedilla","Cacute","cacute","Ccaron","ccaron","dcroat"];DefaultEncoding.prototype.charToGlyphIndex=function(e){var l=e.charCodeAt(0),r=this.font.glyphs;if(!r)return null;for(var a=0;a<r.length;a+=1)for(var s=r.get(a),i=0;i<s.unicodes.length;i+=1)if(s.unicodes[i]===l)return a},CmapEncoding.prototype.charToGlyphIndex=function(e){return this.cmap.glyphIndexMap[e.charCodeAt(0)]||0},CffEncoding.prototype.charToGlyphIndex=function(e){var l=e.charCodeAt(0),r=this.encoding[l];return this.charset.indexOf(r)},GlyphNames.prototype.nameToGlyphIndex=function(e){return this.names.indexOf(e)},GlyphNames.prototype.glyphIndexToName=function(e){return this.names[e]},exports.cffStandardStrings=cffStandardStrings,exports.cffStandardEncoding=cffStandardEncoding,exports.cffExpertEncoding=cffExpertEncoding,exports.standardNames=standardNames,exports.DefaultEncoding=DefaultEncoding,exports.CmapEncoding=CmapEncoding,exports.CffEncoding=CffEncoding,exports.GlyphNames=GlyphNames,exports.addGlyphNames=addGlyphNames;

},{}],5:[function(require,module,exports){
"use strict";function Font(e){e=e||{},e.empty||(util.checkArgument(e.familyName,"When creating a new Font object, familyName is required."),util.checkArgument(e.styleName,"When creating a new Font object, styleName is required."),util.checkArgument(e.unitsPerEm,"When creating a new Font object, unitsPerEm is required."),util.checkArgument(e.ascender,"When creating a new Font object, ascender is required."),util.checkArgument(e.descender,"When creating a new Font object, descender is required."),util.checkArgument(e.descender<0,"Descender should be negative (e.g. -512)."),this.names={fontFamily:{en:e.familyName||" "},fontSubfamily:{en:e.styleName||" "},fullName:{en:e.fullName||e.familyName+" "+e.styleName},postScriptName:{en:e.postScriptName||e.familyName+e.styleName},designer:{en:e.designer||" "},designerURL:{en:e.designerURL||" "},manufacturer:{en:e.manufacturer||" "},manufacturerURL:{en:e.manufacturerURL||" "},license:{en:e.license||" "},licenseURL:{en:e.licenseURL||" "},version:{en:e.version||"Version 0.1"},description:{en:e.description||" "},copyright:{en:e.copyright||" "},trademark:{en:e.trademark||" "}},this.unitsPerEm=e.unitsPerEm||1e3,this.ascender=e.ascender,this.descender=e.descender),this.supported=!0,this.glyphs=new glyphset.GlyphSet(this,e.glyphs||[]),this.encoding=new encoding.DefaultEncoding(this),this.tables={}}var path=require("./path"),sfnt=require("./tables/sfnt"),encoding=require("./encoding"),glyphset=require("./glyphset"),util=require("./util");Font.prototype.hasChar=function(e){return null!==this.encoding.charToGlyphIndex(e)},Font.prototype.charToGlyphIndex=function(e){return this.encoding.charToGlyphIndex(e)},Font.prototype.charToGlyph=function(e){var t=this.charToGlyphIndex(e),n=this.glyphs.get(t);return n||(n=this.glyphs.get(0)),n},Font.prototype.stringToGlyphs=function(e){for(var t=[],n=0;n<e.length;n+=1){var r=e[n];t.push(this.charToGlyph(r))}return t},Font.prototype.nameToGlyphIndex=function(e){return this.glyphNames.nameToGlyphIndex(e)},Font.prototype.nameToGlyph=function(e){var t=this.nametoGlyphIndex(e),n=this.glyphs.get(t);return n||(n=this.glyphs.get(0)),n},Font.prototype.glyphIndexToName=function(e){return this.glyphNames.glyphIndexToName?this.glyphNames.glyphIndexToName(e):""},Font.prototype.getKerningValue=function(e,t){e=e.index||e,t=t.index||t;var n=this.getGposKerningValue;return n?n(e,t):this.kerningPairs[e+","+t]||0},Font.prototype.forEachGlyph=function(e,t,n,r,i,o){t=void 0!==t?t:0,n=void 0!==n?n:0,r=void 0!==r?r:72,i=i||{};for(var a=void 0===i.kerning?!0:i.kerning,s=1/this.unitsPerEm*r,h=this.stringToGlyphs(e),u=0;u<h.length;u+=1){var c=h[u];if(o(c,t,n,r,i),c.advanceWidth&&(t+=c.advanceWidth*s),a&&u<h.length-1){var l=this.getKerningValue(c,h[u+1]);t+=l*s}}},Font.prototype.getPath=function(e,t,n,r,i){var o=new path.Path;return this.forEachGlyph(e,t,n,r,i,function(e,t,n,r){var i=e.getPath(t,n,r);o.extend(i)}),o},Font.prototype.getPaths=function(e,t,n,r,i){var o=[];return this.forEachGlyph(e,t,n,r,i,function(e,t,n,r){var i=e.getPath(t,n,r);o.push(i)}),o},Font.prototype.draw=function(e,t,n,r,i,o){this.getPath(t,n,r,i,o).draw(e)},Font.prototype.drawPoints=function(e,t,n,r,i,o){this.forEachGlyph(t,n,r,i,o,function(t,n,r,i){t.drawPoints(e,n,r,i)})},Font.prototype.drawMetrics=function(e,t,n,r,i,o){this.forEachGlyph(t,n,r,i,o,function(t,n,r,i){t.drawMetrics(e,n,r,i)})},Font.prototype.getEnglishName=function(e){var t=this.names[e];return t?t.en:void 0},Font.prototype.validate=function(){function e(e,t){e||n.push(t)}function t(t){var n=r.getEnglishName(t);e(n&&n.trim().length>0,"No English "+t+" specified.")}var n=[],r=this;t("fontFamily"),t("weightName"),t("manufacturer"),t("copyright"),t("version"),e(this.unitsPerEm>0,"No unitsPerEm specified.")},Font.prototype.toTables=function(){return sfnt.fontToTable(this)},Font.prototype.toBuffer=function(){return console.warn("Font.toBuffer is deprecated. Use Font.toArrayBuffer instead."),this.toArrayBuffer()},Font.prototype.toArrayBuffer=function(){for(var e=this.toTables(),t=e.encode(),n=new ArrayBuffer(t.length),r=new Uint8Array(n),i=0;i<t.length;i++)r[i]=t[i];return n},Font.prototype.download=function(){var e=this.getEnglishName("fontFamily"),t=this.getEnglishName("fontSubfamily"),n=e.replace(/\s/g,"")+"-"+t+".otf",r=this.toArrayBuffer();if(util.isBrowser())window.requestFileSystem=window.requestFileSystem||window.webkitRequestFileSystem,window.requestFileSystem(window.TEMPORARY,r.byteLength,function(e){e.root.getFile(n,{create:!0},function(e){e.createWriter(function(t){var n=new DataView(r),i=new Blob([n],{type:"font/opentype"});t.write(i),t.addEventListener("writeend",function(){location.href=e.toURL()},!1)})})},function(e){throw e});else{var i=require("fs"),o=util.arrayBufferToNodeBuffer(r);i.writeFileSync(n,o)}},exports.Font=Font;

},{"./encoding":4,"./glyphset":7,"./path":10,"./tables/sfnt":27,"./util":29,"fs":undefined}],6:[function(require,module,exports){
"use strict";function getPathDefinition(t,i){var e=i||{commands:[]};return{configurable:!0,get:function(){return"function"==typeof e&&(e=e()),e},set:function(t){e=t}}}function Glyph(t){this.bindConstructorValues(t)}var check=require("./check"),draw=require("./draw"),path=require("./path");Glyph.prototype.bindConstructorValues=function(t){this.index=t.index||0,this.name=t.name||null,this.unicode=t.unicode||void 0,this.unicodes=t.unicodes||void 0!==t.unicode?[t.unicode]:[],t.xMin&&(this.xMin=t.xMin),t.yMin&&(this.yMin=t.yMin),t.xMax&&(this.xMax=t.xMax),t.yMax&&(this.yMax=t.yMax),t.advanceWidth&&(this.advanceWidth=t.advanceWidth),Object.defineProperty(this,"path",getPathDefinition(this,t.path))},Glyph.prototype.addUnicode=function(t){0===this.unicodes.length&&(this.unicode=t),this.unicodes.push(t)},Glyph.prototype.getPath=function(t,i,e){t=void 0!==t?t:0,i=void 0!==i?i:0,e=void 0!==e?e:72;for(var n=1/this.path.unitsPerEm*e,a=new path.Path,h=this.path.commands,o=0;o<h.length;o+=1){var r=h[o];"M"===r.type?a.moveTo(t+r.x*n,i+-r.y*n):"L"===r.type?a.lineTo(t+r.x*n,i+-r.y*n):"Q"===r.type?a.quadraticCurveTo(t+r.x1*n,i+-r.y1*n,t+r.x*n,i+-r.y*n):"C"===r.type?a.curveTo(t+r.x1*n,i+-r.y1*n,t+r.x2*n,i+-r.y2*n,t+r.x*n,i+-r.y*n):"Z"===r.type&&a.closePath()}return a},Glyph.prototype.getContours=function(){if(void 0===this.points)return[];for(var t=[],i=[],e=0;e<this.points.length;e+=1){var n=this.points[e];i.push(n),n.lastPointOfContour&&(t.push(i),i=[])}return check.argument(0===i.length,"There are still points left in the current contour."),t},Glyph.prototype.getMetrics=function(){for(var t=this.path.commands,i=[],e=[],n=0;n<t.length;n+=1){var a=t[n];"Z"!==a.type&&(i.push(a.x),e.push(a.y)),("Q"===a.type||"C"===a.type)&&(i.push(a.x1),e.push(a.y1)),"C"===a.type&&(i.push(a.x2),e.push(a.y2))}var h={xMin:Math.min.apply(null,i),yMin:Math.min.apply(null,e),xMax:Math.max.apply(null,i),yMax:Math.max.apply(null,e),leftSideBearing:this.leftSideBearing};return isFinite(h.xMin)||(h.xMin=0),isFinite(h.xMax)||(h.xMax=this.advanceWidth),isFinite(h.yMin)||(h.yMin=0),isFinite(h.yMax)||(h.yMax=0),h.rightSideBearing=this.advanceWidth-h.leftSideBearing-(h.xMax-h.xMin),h},Glyph.prototype.draw=function(t,i,e,n){this.getPath(i,e,n).draw(t)},Glyph.prototype.drawPoints=function(t,i,e,n){function a(i,e,n,a){var h=2*Math.PI;t.beginPath();for(var o=0;o<i.length;o+=1)t.moveTo(e+i[o].x*a,n+i[o].y*a),t.arc(e+i[o].x*a,n+i[o].y*a,2,0,h,!1);t.closePath(),t.fill()}i=void 0!==i?i:0,e=void 0!==e?e:0,n=void 0!==n?n:24;for(var h=1/this.path.unitsPerEm*n,o=[],r=[],s=this.path,p=0;p<s.commands.length;p+=1){var y=s.commands[p];void 0!==y.x&&o.push({x:y.x,y:-y.y}),void 0!==y.x1&&r.push({x:y.x1,y:-y.y1}),void 0!==y.x2&&r.push({x:y.x2,y:-y.y2})}t.fillStyle="blue",a(o,i,e,h),t.fillStyle="red",a(r,i,e,h)},Glyph.prototype.drawMetrics=function(t,i,e,n){var a;i=void 0!==i?i:0,e=void 0!==e?e:0,n=void 0!==n?n:24,a=1/this.path.unitsPerEm*n,t.lineWidth=1,t.strokeStyle="black",draw.line(t,i,-1e4,i,1e4),draw.line(t,-1e4,e,1e4,e);var h=this.xMin||0,o=this.yMin||0,r=this.xMax||0,s=this.yMax||0,p=this.advanceWidth||0;t.strokeStyle="blue",draw.line(t,i+h*a,-1e4,i+h*a,1e4),draw.line(t,i+r*a,-1e4,i+r*a,1e4),draw.line(t,-1e4,e+-o*a,1e4,e+-o*a),draw.line(t,-1e4,e+-s*a,1e4,e+-s*a),t.strokeStyle="green",draw.line(t,i+p*a,-1e4,i+p*a,1e4)},exports.Glyph=Glyph;

},{"./check":2,"./draw":3,"./path":10}],7:[function(require,module,exports){
"use strict";function GlyphSet(t,r){if(this.font=t,this.glyphs={},Array.isArray(r))for(var n=0;n<r.length;n++)this.glyphs[n]=r[n];this.length=r&&r.length||0}function glyphLoader(t,r){return new _glyph.Glyph({index:r,font:t})}function ttfGlyphLoader(t,r,n,e,h,p){return function(){var y=new _glyph.Glyph({index:r,font:t});return y.path=function(){n(y,e,h);var r=p(t.glyphs,y);return r.unitsPerEm=t.unitsPerEm,r},y}}function cffGlyphLoader(t,r,n,e){return function(){var h=new _glyph.Glyph({index:r,font:t});return h.path=function(){var r=n(t,h,e);return r.unitsPerEm=t.unitsPerEm,r},h}}var _glyph=require("./glyph");GlyphSet.prototype.get=function(t){return"function"==typeof this.glyphs[t]&&(this.glyphs[t]=this.glyphs[t]()),this.glyphs[t]},GlyphSet.prototype.push=function(t,r){this.glyphs[t]=r,this.length++},exports.GlyphSet=GlyphSet,exports.glyphLoader=glyphLoader,exports.ttfGlyphLoader=ttfGlyphLoader,exports.cffGlyphLoader=cffGlyphLoader;

},{"./glyph":6}],8:[function(require,module,exports){
"use strict";function loadFromFile(e,a){var r=require("fs");r.readFile(e,function(e,r){return e?a(e.message):void a(null,util.nodeBufferToArrayBuffer(r))})}function loadFromUrl(e,a){var r=new XMLHttpRequest;r.open("get",e,!0),r.responseType="arraybuffer",r.onload=function(){return 200!==r.status?a("Font could not be loaded: "+r.statusText):a(null,r.response)},r.send()}function parseOpenTypeTableEntries(e,a){for(var r=[],s=12,t=0;a>t;t+=1){var n=parse.getTag(e,s),o=parse.getULong(e,s+4),p=parse.getULong(e,s+8),l=parse.getULong(e,s+12);r.push({tag:n,checksum:o,offset:p,length:l,compression:!1}),s+=16}return r}function parseWOFFTableEntries(e,a){for(var r=[],s=44,t=0;a>t;t+=1){var n,o=parse.getTag(e,s),p=parse.getULong(e,s+4),l=parse.getULong(e,s+8),f=parse.getULong(e,s+12);n=f>l?"WOFF":!1,r.push({tag:o,offset:p,compression:n,compressedLength:l,originalLength:f}),s+=20}return r}function uncompressTable(e,a){if("WOFF"===a.compression){var r=new Uint8Array(e.buffer,a.offset+2,a.compressedLength-2),s=new Uint8Array(a.originalLength);if(inflate(r,s),s.byteLength!==a.originalLength)throw new Error("Decompression error: "+a.tag+" decompressed length doesn't match recorded length");var t=new DataView(s.buffer,0);return{data:t,offset:0}}return{data:e,offset:a.offset}}function parseBuffer(e){var a,r,s,t=new _font.Font({empty:!0}),n=new DataView(e,0),o=[],p=parse.getTag(n,0);if(p===String.fromCharCode(0,1,0,0))t.outlinesFormat="truetype",s=parse.getUShort(n,4),o=parseOpenTypeTableEntries(n,s);else if("OTTO"===p)t.outlinesFormat="cff",s=parse.getUShort(n,4),o=parseOpenTypeTableEntries(n,s);else{if("wOFF"!==p)throw new Error("Unsupported OpenType signature "+p);var l=parse.getTag(n,4);if(l===String.fromCharCode(0,1,0,0))t.outlinesFormat="truetype";else{if("OTTO"!==l)throw new Error("Unsupported OpenType flavor "+p);t.outlinesFormat="cff"}s=parse.getUShort(n,12),o=parseWOFFTableEntries(n,s)}for(var f,i,u,c,b,d,m,g,h=0;s>h;h+=1){var y,T=o[h];switch(T.tag){case"cmap":y=uncompressTable(n,T),t.tables.cmap=cmap.parse(y.data,y.offset),t.encoding=new encoding.CmapEncoding(t.tables.cmap);break;case"fvar":i=T;break;case"head":y=uncompressTable(n,T),t.tables.head=head.parse(y.data,y.offset),t.unitsPerEm=t.tables.head.unitsPerEm,a=t.tables.head.indexToLocFormat;break;case"hhea":y=uncompressTable(n,T),t.tables.hhea=hhea.parse(y.data,y.offset),t.ascender=t.tables.hhea.ascender,t.descender=t.tables.hhea.descender,t.numberOfHMetrics=t.tables.hhea.numberOfHMetrics;break;case"hmtx":b=T;break;case"ltag":y=uncompressTable(n,T),r=ltag.parse(y.data,y.offset);break;case"maxp":y=uncompressTable(n,T),t.tables.maxp=maxp.parse(y.data,y.offset),t.numGlyphs=t.tables.maxp.numGlyphs;break;case"name":g=T;break;case"OS/2":y=uncompressTable(n,T),t.tables.os2=os2.parse(y.data,y.offset);break;case"post":y=uncompressTable(n,T),t.tables.post=post.parse(y.data,y.offset),t.glyphNames=new encoding.GlyphNames(t.tables.post);break;case"glyf":u=T;break;case"loca":m=T;break;case"CFF ":f=T;break;case"kern":d=T;break;case"GPOS":c=T}}var F=uncompressTable(n,g);if(t.tables.name=_name.parse(F.data,F.offset,r),t.names=t.tables.name,u&&m){var v=0===a,q=uncompressTable(n,m),w=loca.parse(q.data,q.offset,t.numGlyphs,v),k=uncompressTable(n,u);t.glyphs=glyf.parse(k.data,k.offset,w,t)}else{if(!f)throw new Error("Font doesn't contain TrueType or CFF outlines.");var x=uncompressTable(n,f);cff.parse(x.data,x.offset,t)}var O=uncompressTable(n,b);if(hmtx.parse(O.data,O.offset,t.numberOfHMetrics,t.numGlyphs,t.glyphs),encoding.addGlyphNames(t),d){var U=uncompressTable(n,d);t.kerningPairs=kern.parse(U.data,U.offset)}else t.kerningPairs={};if(c){var L=uncompressTable(n,c);gpos.parse(L.data,L.offset,t)}if(i){var E=uncompressTable(n,i);t.tables.fvar=fvar.parse(E.data,E.offset,t.names)}return t}function load(e,a){var r="undefined"==typeof window,s=r?loadFromFile:loadFromUrl;s(e,function(e,r){if(e)return a(e);var s;try{s=parseBuffer(r)}catch(t){return a(t,null)}return a(null,s)})}function loadSync(e){var a=require("fs"),r=a.readFileSync(e);return parseBuffer(util.nodeBufferToArrayBuffer(r))}var inflate=require("tiny-inflate"),encoding=require("./encoding"),_font=require("./font"),glyph=require("./glyph"),parse=require("./parse"),path=require("./path"),util=require("./util"),cmap=require("./tables/cmap"),cff=require("./tables/cff"),fvar=require("./tables/fvar"),glyf=require("./tables/glyf"),gpos=require("./tables/gpos"),head=require("./tables/head"),hhea=require("./tables/hhea"),hmtx=require("./tables/hmtx"),kern=require("./tables/kern"),ltag=require("./tables/ltag"),loca=require("./tables/loca"),maxp=require("./tables/maxp"),_name=require("./tables/name"),os2=require("./tables/os2"),post=require("./tables/post");exports._parse=parse,exports.Font=_font.Font,exports.Glyph=glyph.Glyph,exports.Path=path.Path,exports.parse=parseBuffer,exports.load=load,exports.loadSync=loadSync;
},{"./encoding":4,"./font":5,"./glyph":6,"./parse":9,"./path":10,"./tables/cff":12,"./tables/cmap":13,"./tables/fvar":14,"./tables/glyf":15,"./tables/gpos":16,"./tables/head":17,"./tables/hhea":18,"./tables/hmtx":19,"./tables/kern":20,"./tables/loca":21,"./tables/ltag":22,"./tables/maxp":23,"./tables/name":24,"./tables/os2":25,"./tables/post":26,"./util":29,"fs":undefined,"tiny-inflate":1}],9:[function(require,module,exports){
"use strict";function Parser(t,e){this.data=t,this.offset=e,this.relativeOffset=0}exports.getByte=function(t,e){return t.getUint8(e)},exports.getCard8=exports.getByte,exports.getUShort=function(t,e){return t.getUint16(e,!1)},exports.getCard16=exports.getUShort,exports.getShort=function(t,e){return t.getInt16(e,!1)},exports.getULong=function(t,e){return t.getUint32(e,!1)},exports.getFixed=function(t,e){var r=t.getInt16(e,!1),s=t.getUint16(e+2,!1);return r+s/65535},exports.getTag=function(t,e){for(var r="",s=e;e+4>s;s+=1)r+=String.fromCharCode(t.getInt8(s));return r},exports.getOffset=function(t,e,r){for(var s=0,o=0;r>o;o+=1)s<<=8,s+=t.getUint8(e+o);return s},exports.getBytes=function(t,e,r){for(var s=[],o=e;r>o;o+=1)s.push(t.getUint8(o));return s},exports.bytesToString=function(t){for(var e="",r=0;r<t.length;r+=1)e+=String.fromCharCode(t[r]);return e};var typeOffsets={"byte":1,uShort:2,"short":2,uLong:4,fixed:4,longDateTime:8,tag:4};Parser.prototype.parseByte=function(){var t=this.data.getUint8(this.offset+this.relativeOffset);return this.relativeOffset+=1,t},Parser.prototype.parseChar=function(){var t=this.data.getInt8(this.offset+this.relativeOffset);return this.relativeOffset+=1,t},Parser.prototype.parseCard8=Parser.prototype.parseByte,Parser.prototype.parseUShort=function(){var t=this.data.getUint16(this.offset+this.relativeOffset);return this.relativeOffset+=2,t},Parser.prototype.parseCard16=Parser.prototype.parseUShort,Parser.prototype.parseSID=Parser.prototype.parseUShort,Parser.prototype.parseOffset16=Parser.prototype.parseUShort,Parser.prototype.parseShort=function(){var t=this.data.getInt16(this.offset+this.relativeOffset);return this.relativeOffset+=2,t},Parser.prototype.parseF2Dot14=function(){var t=this.data.getInt16(this.offset+this.relativeOffset)/16384;return this.relativeOffset+=2,t},Parser.prototype.parseULong=function(){var t=exports.getULong(this.data,this.offset+this.relativeOffset);return this.relativeOffset+=4,t},Parser.prototype.parseFixed=function(){var t=exports.getFixed(this.data,this.offset+this.relativeOffset);return this.relativeOffset+=4,t},Parser.prototype.parseOffset16List=Parser.prototype.parseUShortList=function(t){for(var e=new Array(t),r=this.data,s=this.offset+this.relativeOffset,o=0;t>o;o++)e[o]=exports.getUShort(r,s),s+=2;return this.relativeOffset+=2*t,e},Parser.prototype.parseString=function(t){var e=this.data,r=this.offset+this.relativeOffset,s="";this.relativeOffset+=t;for(var o=0;t>o;o++)s+=String.fromCharCode(e.getUint8(r+o));return s},Parser.prototype.parseTag=function(){return this.parseString(4)},Parser.prototype.parseLongDateTime=function(){var t=exports.getULong(this.data,this.offset+this.relativeOffset+4);return this.relativeOffset+=8,t},Parser.prototype.parseFixed=function(){var t=exports.getULong(this.data,this.offset+this.relativeOffset);return this.relativeOffset+=4,t/65536},Parser.prototype.parseVersion=function(){var t=exports.getUShort(this.data,this.offset+this.relativeOffset),e=exports.getUShort(this.data,this.offset+this.relativeOffset+2);return this.relativeOffset+=4,t+e/4096/10},Parser.prototype.skip=function(t,e){void 0===e&&(e=1),this.relativeOffset+=typeOffsets[t]*e},exports.Parser=Parser;

},{}],10:[function(require,module,exports){
"use strict";function Path(){this.commands=[],this.fill="black",this.stroke=null,this.strokeWidth=1}Path.prototype.moveTo=function(t,o){this.commands.push({type:"M",x:t,y:o})},Path.prototype.lineTo=function(t,o){this.commands.push({type:"L",x:t,y:o})},Path.prototype.curveTo=Path.prototype.bezierCurveTo=function(t,o,e,i,s,h){this.commands.push({type:"C",x1:t,y1:o,x2:e,y2:i,x:s,y:h})},Path.prototype.quadTo=Path.prototype.quadraticCurveTo=function(t,o,e,i){this.commands.push({type:"Q",x1:t,y1:o,x:e,y:i})},Path.prototype.close=Path.prototype.closePath=function(){this.commands.push({type:"Z"})},Path.prototype.extend=function(t){t.commands&&(t=t.commands),Array.prototype.push.apply(this.commands,t)},Path.prototype.draw=function(t){t.beginPath();for(var o=0;o<this.commands.length;o+=1){var e=this.commands[o];"M"===e.type?t.moveTo(e.x,e.y):"L"===e.type?t.lineTo(e.x,e.y):"C"===e.type?t.bezierCurveTo(e.x1,e.y1,e.x2,e.y2,e.x,e.y):"Q"===e.type?t.quadraticCurveTo(e.x1,e.y1,e.x,e.y):"Z"===e.type&&t.closePath()}this.fill&&(t.fillStyle=this.fill,t.fill()),this.stroke&&(t.strokeStyle=this.stroke,t.lineWidth=this.strokeWidth,t.stroke())},Path.prototype.toPathData=function(t){function o(o){return Math.round(o)===o?""+Math.round(o):o.toFixed(t)}function e(){for(var t="",e=0;e<arguments.length;e+=1){var i=arguments[e];i>=0&&e>0&&(t+=" "),t+=o(i)}return t}t=void 0!==t?t:2;for(var i="",s=0;s<this.commands.length;s+=1){var h=this.commands[s];"M"===h.type?i+="M"+e(h.x,h.y):"L"===h.type?i+="L"+e(h.x,h.y):"C"===h.type?i+="C"+e(h.x1,h.y1,h.x2,h.y2,h.x,h.y):"Q"===h.type?i+="Q"+e(h.x1,h.y1,h.x,h.y):"Z"===h.type&&(i+="Z")}return i},Path.prototype.toSVG=function(t){var o='<path d="';return o+=this.toPathData(t),o+='"',this.fill&"black"!==this.fill&&(o+=null===this.fill?' fill="none"':' fill="'+this.fill+'"'),this.stroke&&(o+=' stroke="'+this.stroke+'" stroke-width="'+this.strokeWidth+'"'),o+="/>"},exports.Path=Path;

},{}],11:[function(require,module,exports){
"use strict";function Table(e,t,r){var i;for(i=0;i<t.length;i+=1){var s=t[i];this[s.name]=s.value}if(this.tableName=e,this.fields=t,r){var o=Object.keys(r);for(i=0;i<o.length;i+=1){var n=o[i],a=r[n];void 0!==this[n]&&(this[n]=a)}}}var encode=require("./types").encode,sizeOf=require("./types").sizeOf;Table.prototype.encode=function(){return encode.TABLE(this)},Table.prototype.sizeOf=function(){return sizeOf.TABLE(this)},exports.Record=exports.Table=Table;

},{"./types":28}],12:[function(require,module,exports){
"use strict";function equals(e,t){if(e===t)return!0;if(Array.isArray(e)&&Array.isArray(t)){if(e.length!==t.length)return!1;for(var a=0;a<e.length;a+=1)if(!equals(e[a],t[a]))return!1;return!0}return!1}function parseCFFIndex(e,t,a){var r,n,s,i=[],o=[],h=parse.getCard16(e,t);if(0!==h){var f=parse.getByte(e,t+2);n=t+(h+1)*f+2;var p=t+3;for(r=0;h+1>r;r+=1)i.push(parse.getOffset(e,p,f)),p+=f;s=n+i[h]}else s=t+2;for(r=0;r<i.length-1;r+=1){var u=parse.getBytes(e,n+i[r],n+i[r+1]);a&&(u=a(u)),o.push(u)}return{objects:o,startOffset:t,endOffset:s}}function parseFloatOperand(e){for(var t="",a=15,r=["0","1","2","3","4","5","6","7","8","9",".","E","E-",null,"-"];;){var n=e.parseByte(),s=n>>4,i=15&n;if(s===a)break;if(t+=r[s],i===a)break;t+=r[i]}return parseFloat(t)}function parseOperand(e,t){var a,r,n,s;if(28===t)return a=e.parseByte(),r=e.parseByte(),a<<8|r;if(29===t)return a=e.parseByte(),r=e.parseByte(),n=e.parseByte(),s=e.parseByte(),a<<24|r<<16|n<<8|s;if(30===t)return parseFloatOperand(e);if(t>=32&&246>=t)return t-139;if(t>=247&&250>=t)return a=e.parseByte(),256*(t-247)+a+108;if(t>=251&&254>=t)return a=e.parseByte(),256*-(t-251)-a-108;throw new Error("Invalid b0 "+t)}function entriesToObject(e){for(var t={},a=0;a<e.length;a+=1){var r,n=e[a][0],s=e[a][1];if(r=1===s.length?s[0]:s,t.hasOwnProperty(n))throw new Error("Object "+t+" already has key "+n);t[n]=r}return t}function parseCFFDict(e,t,a){t=void 0!==t?t:0;var r=new parse.Parser(e,t),n=[],s=[];for(a=void 0!==a?a:e.length;r.relativeOffset<a;){var i=r.parseByte();21>=i?(12===i&&(i=1200+r.parseByte()),n.push([i,s]),s=[]):s.push(parseOperand(r,i))}return entriesToObject(n)}function getCFFString(e,t){return t=390>=t?encoding.cffStandardStrings[t]:e[t-391]}function interpretDict(e,t,a){for(var r={},n=0;n<t.length;n+=1){var s=t[n],i=e[s.op];void 0===i&&(i=void 0!==s.value?s.value:null),"SID"===s.type&&(i=getCFFString(a,i)),r[s.name]=i}return r}function parseCFFHeader(e,t){var a={};return a.formatMajor=parse.getCard8(e,t),a.formatMinor=parse.getCard8(e,t+1),a.size=parse.getCard8(e,t+2),a.offsetSize=parse.getCard8(e,t+3),a.startOffset=t,a.endOffset=t+4,a}function parseCFFTopDict(e,t){var a=parseCFFDict(e,0,e.byteLength);return interpretDict(a,TOP_DICT_META,t)}function parseCFFPrivateDict(e,t,a,r){var n=parseCFFDict(e,t,a);return interpretDict(n,PRIVATE_DICT_META,r)}function parseCFFCharset(e,t,a,r){var n,s,i,o=new parse.Parser(e,t);a-=1;var h=[".notdef"],f=o.parseCard8();if(0===f)for(n=0;a>n;n+=1)s=o.parseSID(),h.push(getCFFString(r,s));else if(1===f)for(;h.length<=a;)for(s=o.parseSID(),i=o.parseCard8(),n=0;i>=n;n+=1)h.push(getCFFString(r,s)),s+=1;else{if(2!==f)throw new Error("Unknown charset format "+f);for(;h.length<=a;)for(s=o.parseSID(),i=o.parseCard16(),n=0;i>=n;n+=1)h.push(getCFFString(r,s)),s+=1}return h}function parseCFFEncoding(e,t,a){var r,n,s={},i=new parse.Parser(e,t),o=i.parseCard8();if(0===o){var h=i.parseCard8();for(r=0;h>r;r+=1)n=i.parseCard8(),s[n]=r}else{if(1!==o)throw new Error("Unknown encoding format "+o);var f=i.parseCard8();for(n=1,r=0;f>r;r+=1)for(var p=i.parseCard8(),u=i.parseCard8(),l=p;p+u>=l;l+=1)s[l]=n,n+=1}return new encoding.CffEncoding(s,a)}function parseCFFCharstring(e,t,a){function r(e,t){g&&p.closePath(),p.moveTo(e,t),g=!0}function n(){var t;t=u.length%2!==0,t&&!c&&(d=u.shift()+e.nominalWidthX),l+=u.length>>1,u.length=0,c=!0}function s(a){for(var y,b,C,T,F,I,D,x,k,S,E,O,R=0;R<a.length;){var M=a[R];switch(R+=1,M){case 1:n();break;case 3:n();break;case 4:u.length>1&&!c&&(d=u.shift()+e.nominalWidthX,c=!0),m+=u.pop(),r(v,m);break;case 5:for(;u.length>0;)v+=u.shift(),m+=u.shift(),p.lineTo(v,m);break;case 6:for(;u.length>0&&(v+=u.shift(),p.lineTo(v,m),0!==u.length);)m+=u.shift(),p.lineTo(v,m);break;case 7:for(;u.length>0&&(m+=u.shift(),p.lineTo(v,m),0!==u.length);)v+=u.shift(),p.lineTo(v,m);break;case 8:for(;u.length>0;)i=v+u.shift(),o=m+u.shift(),h=i+u.shift(),f=o+u.shift(),v=h+u.shift(),m=f+u.shift(),p.curveTo(i,o,h,f,v,m);break;case 10:F=u.pop()+e.subrsBias,I=e.subrs[F],I&&s(I);break;case 11:return;case 12:switch(M=a[R],R+=1,M){case 35:i=v+u.shift(),o=m+u.shift(),h=i+u.shift(),f=o+u.shift(),D=h+u.shift(),x=f+u.shift(),k=D+u.shift(),S=x+u.shift(),E=k+u.shift(),O=S+u.shift(),v=E+u.shift(),m=O+u.shift(),u.shift(),p.curveTo(i,o,h,f,D,x),p.curveTo(k,S,E,O,v,m);break;case 34:i=v+u.shift(),o=m,h=i+u.shift(),f=o+u.shift(),D=h+u.shift(),x=f,k=D+u.shift(),S=f,E=k+u.shift(),O=m,v=E+u.shift(),p.curveTo(i,o,h,f,D,x),p.curveTo(k,S,E,O,v,m);break;case 36:i=v+u.shift(),o=m+u.shift(),h=i+u.shift(),f=o+u.shift(),D=h+u.shift(),x=f,k=D+u.shift(),S=f,E=k+u.shift(),O=S+u.shift(),v=E+u.shift(),p.curveTo(i,o,h,f,D,x),p.curveTo(k,S,E,O,v,m);break;case 37:i=v+u.shift(),o=m+u.shift(),h=i+u.shift(),f=o+u.shift(),D=h+u.shift(),x=f+u.shift(),k=D+u.shift(),S=x+u.shift(),E=k+u.shift(),O=S+u.shift(),Math.abs(E-v)>Math.abs(O-m)?v=E+u.shift():m=O+u.shift(),p.curveTo(i,o,h,f,D,x),p.curveTo(k,S,E,O,v,m);break;default:console.log("Glyph "+t.index+": unknown operator 1200"+M),u.length=0}break;case 14:u.length>0&&!c&&(d=u.shift()+e.nominalWidthX,c=!0),g&&(p.closePath(),g=!1);break;case 18:n();break;case 19:case 20:n(),R+=l+7>>3;break;case 21:u.length>2&&!c&&(d=u.shift()+e.nominalWidthX,c=!0),m+=u.pop(),v+=u.pop(),r(v,m);break;case 22:u.length>1&&!c&&(d=u.shift()+e.nominalWidthX,c=!0),v+=u.pop(),r(v,m);break;case 23:n();break;case 24:for(;u.length>2;)i=v+u.shift(),o=m+u.shift(),h=i+u.shift(),f=o+u.shift(),v=h+u.shift(),m=f+u.shift(),p.curveTo(i,o,h,f,v,m);v+=u.shift(),m+=u.shift(),p.lineTo(v,m);break;case 25:for(;u.length>6;)v+=u.shift(),m+=u.shift(),p.lineTo(v,m);i=v+u.shift(),o=m+u.shift(),h=i+u.shift(),f=o+u.shift(),v=h+u.shift(),m=f+u.shift(),p.curveTo(i,o,h,f,v,m);break;case 26:for(u.length%2&&(v+=u.shift());u.length>0;)i=v,o=m+u.shift(),h=i+u.shift(),f=o+u.shift(),v=h,m=f+u.shift(),p.curveTo(i,o,h,f,v,m);break;case 27:for(u.length%2&&(m+=u.shift());u.length>0;)i=v+u.shift(),o=m,h=i+u.shift(),f=o+u.shift(),v=h+u.shift(),m=f,p.curveTo(i,o,h,f,v,m);break;case 28:y=a[R],b=a[R+1],u.push((y<<24|b<<16)>>16),R+=2;break;case 29:F=u.pop()+e.gsubrsBias,I=e.gsubrs[F],I&&s(I);break;case 30:for(;u.length>0&&(i=v,o=m+u.shift(),h=i+u.shift(),f=o+u.shift(),v=h+u.shift(),m=f+(1===u.length?u.shift():0),p.curveTo(i,o,h,f,v,m),0!==u.length);)i=v+u.shift(),o=m,h=i+u.shift(),f=o+u.shift(),m=f+u.shift(),v=h+(1===u.length?u.shift():0),p.curveTo(i,o,h,f,v,m);break;case 31:for(;u.length>0&&(i=v+u.shift(),o=m,h=i+u.shift(),f=o+u.shift(),m=f+u.shift(),v=h+(1===u.length?u.shift():0),p.curveTo(i,o,h,f,v,m),0!==u.length);)i=v,o=m+u.shift(),h=i+u.shift(),f=o+u.shift(),v=h+u.shift(),m=f+(1===u.length?u.shift():0),p.curveTo(i,o,h,f,v,m);break;default:32>M?console.log("Glyph "+t.index+": unknown operator "+M):247>M?u.push(M-139):251>M?(y=a[R],R+=1,u.push(256*(M-247)+y+108)):255>M?(y=a[R],R+=1,u.push(256*-(M-251)-y-108)):(y=a[R],b=a[R+1],C=a[R+2],T=a[R+3],R+=4,u.push((y<<24|b<<16|C<<8|T)/65536))}}}var i,o,h,f,p=new path.Path,u=[],l=0,c=!1,d=e.defaultWidthX,g=!1,v=0,m=0;return s(a),t.advanceWidth=d,p}function calcCFFSubroutineBias(e){var t;return t=e.length<1240?107:e.length<33900?1131:32768}function parseCFFTable(e,t,a){a.tables.cff={};var r=parseCFFHeader(e,t),n=parseCFFIndex(e,r.endOffset,parse.bytesToString),s=parseCFFIndex(e,n.endOffset),i=parseCFFIndex(e,s.endOffset,parse.bytesToString),o=parseCFFIndex(e,i.endOffset);a.gsubrs=o.objects,a.gsubrsBias=calcCFFSubroutineBias(a.gsubrs);var h=new DataView(new Uint8Array(s.objects[0]).buffer),f=parseCFFTopDict(h,i.objects);a.tables.cff.topDict=f;var p=t+f["private"][1],u=parseCFFPrivateDict(e,p,f["private"][0],i.objects);if(a.defaultWidthX=u.defaultWidthX,a.nominalWidthX=u.nominalWidthX,0!==u.subrs){var l=p+u.subrs,c=parseCFFIndex(e,l);a.subrs=c.objects,a.subrsBias=calcCFFSubroutineBias(a.subrs)}else a.subrs=[],a.subrsBias=0;var d=parseCFFIndex(e,t+f.charStrings);a.nGlyphs=d.objects.length;var g=parseCFFCharset(e,t+f.charset,a.nGlyphs,i.objects);a.cffEncoding=0===f.encoding?new encoding.CffEncoding(encoding.cffStandardEncoding,g):1===f.encoding?new encoding.CffEncoding(encoding.cffExpertEncoding,g):parseCFFEncoding(e,t+f.encoding,g),a.encoding=a.encoding||a.cffEncoding,a.glyphs=new glyphset.GlyphSet(a);for(var v=0;v<a.nGlyphs;v+=1){var m=d.objects[v];a.glyphs.push(v,glyphset.cffGlyphLoader(a,v,parseCFFCharstring,m))}}function encodeString(e,t){var a,r=encoding.cffStandardStrings.indexOf(e);return r>=0&&(a=r),r=t.indexOf(e),r>=0?a=r+encoding.cffStandardStrings.length:(a=encoding.cffStandardStrings.length+t.length,t.push(e)),a}function makeHeader(){return new table.Record("Header",[{name:"major",type:"Card8",value:1},{name:"minor",type:"Card8",value:0},{name:"hdrSize",type:"Card8",value:4},{name:"major",type:"Card8",value:1}])}function makeNameIndex(e){var t=new table.Record("Name INDEX",[{name:"names",type:"INDEX",value:[]}]);t.names=[];for(var a=0;a<e.length;a+=1)t.names.push({name:"name_"+a,type:"NAME",value:e[a]});return t}function makeDict(e,t,a){for(var r={},n=0;n<e.length;n+=1){var s=e[n],i=t[s.name];void 0===i||equals(i,s.value)||("SID"===s.type&&(i=encodeString(i,a)),r[s.op]={name:s.name,type:s.type,value:i})}return r}function makeTopDict(e,t){var a=new table.Record("Top DICT",[{name:"dict",type:"DICT",value:{}}]);return a.dict=makeDict(TOP_DICT_META,e,t),a}function makeTopDictIndex(e){var t=new table.Record("Top DICT INDEX",[{name:"topDicts",type:"INDEX",value:[]}]);return t.topDicts=[{name:"topDict_0",type:"TABLE",value:e}],t}function makeStringIndex(e){var t=new table.Record("String INDEX",[{name:"strings",type:"INDEX",value:[]}]);t.strings=[];for(var a=0;a<e.length;a+=1)t.strings.push({name:"string_"+a,type:"STRING",value:e[a]});return t}function makeGlobalSubrIndex(){return new table.Record("Global Subr INDEX",[{name:"subrs",type:"INDEX",value:[]}])}function makeCharsets(e,t){for(var a=new table.Record("Charsets",[{name:"format",type:"Card8",value:0}]),r=0;r<e.length;r+=1){var n=e[r],s=encodeString(n,t);a.fields.push({name:"glyph_"+r,type:"SID",value:s})}return a}function glyphToOps(e){var t=[],a=e.path;t.push({name:"width",type:"NUMBER",value:e.advanceWidth});for(var r=0,n=0,s=0;s<a.commands.length;s+=1){var i,o,h=a.commands[s];if("Q"===h.type){var f=1/3,p=2/3;h={type:"C",x:h.x,y:h.y,x1:f*r+p*h.x1,y1:f*n+p*h.y1,x2:f*h.x+p*h.x1,y2:f*h.y+p*h.y1}}if("M"===h.type)i=Math.round(h.x-r),o=Math.round(h.y-n),t.push({name:"dx",type:"NUMBER",value:i}),t.push({name:"dy",type:"NUMBER",value:o}),t.push({name:"rmoveto",type:"OP",value:21}),r=Math.round(h.x),n=Math.round(h.y);else if("L"===h.type)i=Math.round(h.x-r),o=Math.round(h.y-n),t.push({name:"dx",type:"NUMBER",value:i}),t.push({name:"dy",type:"NUMBER",value:o}),t.push({name:"rlineto",type:"OP",value:5}),r=Math.round(h.x),n=Math.round(h.y);else if("C"===h.type){var u=Math.round(h.x1-r),l=Math.round(h.y1-n),c=Math.round(h.x2-h.x1),d=Math.round(h.y2-h.y1);i=Math.round(h.x-h.x2),o=Math.round(h.y-h.y2),t.push({name:"dx1",type:"NUMBER",value:u}),t.push({name:"dy1",type:"NUMBER",value:l}),t.push({name:"dx2",type:"NUMBER",value:c}),t.push({name:"dy2",type:"NUMBER",value:d}),t.push({name:"dx",type:"NUMBER",value:i}),t.push({name:"dy",type:"NUMBER",value:o}),t.push({name:"rrcurveto",type:"OP",value:8}),r=Math.round(h.x),n=Math.round(h.y)}}return t.push({name:"endchar",type:"OP",value:14}),t}function makeCharStringsIndex(e){for(var t=new table.Record("CharStrings INDEX",[{name:"charStrings",type:"INDEX",value:[]}]),a=0;a<e.length;a+=1){var r=e.get(a),n=glyphToOps(r);t.charStrings.push({name:r.name,type:"CHARSTRING",value:n})}return t}function makePrivateDict(e,t){var a=new table.Record("Private DICT",[{name:"dict",type:"DICT",value:{}}]);return a.dict=makeDict(PRIVATE_DICT_META,e,t),a}function makeCFFTable(e,t){for(var a,r=new table.Table("CFF ",[{name:"header",type:"RECORD"},{name:"nameIndex",type:"RECORD"},{name:"topDictIndex",type:"RECORD"},{name:"stringIndex",type:"RECORD"},{name:"globalSubrIndex",type:"RECORD"},{name:"charsets",type:"RECORD"},{name:"charStringsIndex",type:"RECORD"},{name:"privateDict",type:"RECORD"}]),n=1/t.unitsPerEm,s={version:t.version,fullName:t.fullName,familyName:t.familyName,weight:t.weightName,fontBBox:t.fontBBox||[0,0,0,0],fontMatrix:[n,0,0,n,0,0],charset:999,encoding:0,charStrings:999,"private":[0,999]},i={},o=[],h=1;h<e.length;h+=1)a=e.get(h),o.push(a.name);var f=[];r.header=makeHeader(),r.nameIndex=makeNameIndex([t.postScriptName]);var p=makeTopDict(s,f);r.topDictIndex=makeTopDictIndex(p),r.globalSubrIndex=makeGlobalSubrIndex(),r.charsets=makeCharsets(o,f),r.charStringsIndex=makeCharStringsIndex(e),r.privateDict=makePrivateDict(i,f),r.stringIndex=makeStringIndex(f);var u=r.header.sizeOf()+r.nameIndex.sizeOf()+r.topDictIndex.sizeOf()+r.stringIndex.sizeOf()+r.globalSubrIndex.sizeOf();return s.charset=u,s.encoding=0,s.charStrings=s.charset+r.charsets.sizeOf(),s.private[1]=s.charStrings+r.charStringsIndex.sizeOf(),p=makeTopDict(s,f),r.topDictIndex=makeTopDictIndex(p),r}var encoding=require("../encoding"),glyphset=require("../glyphset"),parse=require("../parse"),path=require("../path"),table=require("../table"),TOP_DICT_META=[{name:"version",op:0,type:"SID"},{name:"notice",op:1,type:"SID"},{name:"copyright",op:1200,type:"SID"},{name:"fullName",op:2,type:"SID"},{name:"familyName",op:3,type:"SID"},{name:"weight",op:4,type:"SID"},{name:"isFixedPitch",op:1201,type:"number",value:0},{name:"italicAngle",op:1202,type:"number",value:0},{name:"underlinePosition",op:1203,type:"number",value:-100},{name:"underlineThickness",op:1204,type:"number",value:50},{name:"paintType",op:1205,type:"number",value:0},{name:"charstringType",op:1206,type:"number",value:2},{name:"fontMatrix",op:1207,type:["real","real","real","real","real","real"],value:[.001,0,0,.001,0,0]},{name:"uniqueId",op:13,type:"number"},{name:"fontBBox",op:5,type:["number","number","number","number"],value:[0,0,0,0]},{name:"strokeWidth",op:1208,type:"number",value:0},{name:"xuid",op:14,type:[],value:null},{name:"charset",op:15,type:"offset",value:0},{name:"encoding",op:16,type:"offset",value:0},{name:"charStrings",op:17,type:"offset",value:0},{name:"private",op:18,type:["number","offset"],value:[0,0]}],PRIVATE_DICT_META=[{name:"subrs",op:19,type:"offset",value:0},{name:"defaultWidthX",op:20,type:"number",value:0},{name:"nominalWidthX",op:21,type:"number",value:0}];exports.parse=parseCFFTable,exports.make=makeCFFTable;

},{"../encoding":4,"../glyphset":7,"../parse":9,"../path":10,"../table":11}],13:[function(require,module,exports){
"use strict";function parseCmapTable(e,a){var t,r={};r.version=parse.getUShort(e,a),check.argument(0===r.version,"cmap table version should be 0."),r.numTables=parse.getUShort(e,a+2);var n=-1;for(t=0;t<r.numTables;t+=1){var s=parse.getUShort(e,a+4+8*t),l=parse.getUShort(e,a+4+8*t+2);if(3===s&&(1===l||0===l)){n=parse.getULong(e,a+4+8*t+4);break}}if(-1===n)return null;var o=new parse.Parser(e,a+n);r.format=o.parseUShort(),check.argument(4===r.format,"Only format 4 cmap tables are supported."),r.length=o.parseUShort(),r.language=o.parseUShort();var p;r.segCount=p=o.parseUShort()>>1,o.skip("uShort",3),r.glyphIndexMap={};var g=new parse.Parser(e,a+n+14),m=new parse.Parser(e,a+n+16+2*p),u=new parse.Parser(e,a+n+16+4*p),h=new parse.Parser(e,a+n+16+6*p),c=a+n+16+8*p;for(t=0;p-1>t;t+=1)for(var f,d=g.parseUShort(),S=m.parseUShort(),i=u.parseShort(),v=h.parseUShort(),U=S;d>=U;U+=1)0!==v?(c=h.offset+h.relativeOffset-2,c+=v,c+=2*(U-S),f=parse.getUShort(e,c),0!==f&&(f=f+i&65535)):f=U+i&65535,r.glyphIndexMap[U]=f;return r}function addSegment(e,a,t){e.segments.push({end:a,start:a,delta:-(a-t),offset:0})}function addTerminatorSegment(e){e.segments.push({end:65535,start:65535,delta:1,offset:0})}function makeCmapTable(e){var a,t=new table.Table("cmap",[{name:"version",type:"USHORT",value:0},{name:"numTables",type:"USHORT",value:1},{name:"platformID",type:"USHORT",value:3},{name:"encodingID",type:"USHORT",value:1},{name:"offset",type:"ULONG",value:12},{name:"format",type:"USHORT",value:4},{name:"length",type:"USHORT",value:0},{name:"language",type:"USHORT",value:0},{name:"segCountX2",type:"USHORT",value:0},{name:"searchRange",type:"USHORT",value:0},{name:"entrySelector",type:"USHORT",value:0},{name:"rangeShift",type:"USHORT",value:0}]);for(t.segments=[],a=0;a<e.length;a+=1){for(var r=e.get(a),n=0;n<r.unicodes.length;n+=1)addSegment(t,r.unicodes[n],a);t.segments=t.segments.sort(function(e,a){return e.start-a.start})}addTerminatorSegment(t);var s;s=t.segments.length,t.segCountX2=2*s,t.searchRange=2*Math.pow(2,Math.floor(Math.log(s)/Math.log(2))),t.entrySelector=Math.log(t.searchRange/2)/Math.log(2),t.rangeShift=t.segCountX2-t.searchRange;var l=[],o=[],p=[],g=[],m=[];for(a=0;s>a;a+=1){var u=t.segments[a];l=l.concat({name:"end_"+a,type:"USHORT",value:u.end}),o=o.concat({name:"start_"+a,type:"USHORT",value:u.start}),p=p.concat({name:"idDelta_"+a,type:"SHORT",value:u.delta}),g=g.concat({name:"idRangeOffset_"+a,type:"USHORT",value:u.offset}),void 0!==u.glyphId&&(m=m.concat({name:"glyph_"+a,type:"USHORT",value:u.glyphId}))}return t.fields=t.fields.concat(l),t.fields.push({name:"reservedPad",type:"USHORT",value:0}),t.fields=t.fields.concat(o),t.fields=t.fields.concat(p),t.fields=t.fields.concat(g),t.fields=t.fields.concat(m),t.length=14+2*l.length+2+2*o.length+2*p.length+2*g.length+2*m.length,t}var check=require("../check"),parse=require("../parse"),table=require("../table");exports.parse=parseCmapTable,exports.make=makeCmapTable;

},{"../check":2,"../parse":9,"../table":11}],14:[function(require,module,exports){
"use strict";function addName(e,a){var r=JSON.stringify(e),n=256;for(var t in a){var s=parseInt(t);if(s&&!(256>s)){if(JSON.stringify(a[t])===r)return s;s>=n&&(n=s+1)}}return a[n]=e,n}function makeFvarAxis(e,a,r){var n=addName(a.name,r);return[{name:"tag_"+e,type:"TAG",value:a.tag},{name:"minValue_"+e,type:"FIXED",value:a.minValue<<16},{name:"defaultValue_"+e,type:"FIXED",value:a.defaultValue<<16},{name:"maxValue_"+e,type:"FIXED",value:a.maxValue<<16},{name:"flags_"+e,type:"USHORT",value:0},{name:"nameID_"+e,type:"USHORT",value:n}]}function parseFvarAxis(e,a,r){var n={},t=new parse.Parser(e,a);return n.tag=t.parseTag(),n.minValue=t.parseFixed(),n.defaultValue=t.parseFixed(),n.maxValue=t.parseFixed(),t.skip("uShort",1),n.name=r[t.parseUShort()]||{},n}function makeFvarInstance(e,a,r,n){for(var t=addName(a.name,n),s=[{name:"nameID_"+e,type:"USHORT",value:t},{name:"flags_"+e,type:"USHORT",value:0}],u=0;u<r.length;++u){var i=r[u].tag;s.push({name:"axis_"+e+" "+i,type:"FIXED",value:a.coordinates[i]<<16})}return s}function parseFvarInstance(e,a,r,n){var t={},s=new parse.Parser(e,a);t.name=n[s.parseUShort()]||{},s.skip("uShort",1),t.coordinates={};for(var u=0;u<r.length;++u)t.coordinates[r[u].tag]=s.parseFixed();return t}function makeFvarTable(e,a){var r=new table.Table("fvar",[{name:"version",type:"ULONG",value:65536},{name:"offsetToData",type:"USHORT",value:0},{name:"countSizePairs",type:"USHORT",value:2},{name:"axisCount",type:"USHORT",value:e.axes.length},{name:"axisSize",type:"USHORT",value:20},{name:"instanceCount",type:"USHORT",value:e.instances.length},{name:"instanceSize",type:"USHORT",value:4+4*e.axes.length}]);r.offsetToData=r.sizeOf();for(var n=0;n<e.axes.length;n++)r.fields=r.fields.concat(makeFvarAxis(n,e.axes[n],a));for(var t=0;t<e.instances.length;t++)r.fields=r.fields.concat(makeFvarInstance(t,e.instances[t],e.axes,a));return r}function parseFvarTable(e,a,r){var n=new parse.Parser(e,a),t=n.parseULong();check.argument(65536===t,"Unsupported fvar table version.");var s=n.parseOffset16();n.skip("uShort",1);for(var u=n.parseUShort(),i=n.parseUShort(),p=n.parseUShort(),l=n.parseUShort(),v=[],o=0;u>o;o++)v.push(parseFvarAxis(e,a+s+o*i,r));for(var m=[],f=a+s+u*i,c=0;p>c;c++)m.push(parseFvarInstance(e,f+c*l,v,r));return{axes:v,instances:m}}var check=require("../check"),parse=require("../parse"),table=require("../table");exports.make=makeFvarTable,exports.parse=parseFvarTable;

},{"../check":2,"../parse":9,"../table":11}],15:[function(require,module,exports){
"use strict";function parseGlyphCoordinate(r,e,t,o,a){var n;return(e&o)>0?(n=r.parseByte(),0===(e&a)&&(n=-n),n=t+n):n=(e&a)>0?t:t+r.parseShort(),n}function parseGlyph(r,e,t){var o=new parse.Parser(e,t);r.numberOfContours=o.parseShort(),r.xMin=o.parseShort(),r.yMin=o.parseShort(),r.xMax=o.parseShort(),r.yMax=o.parseShort();var a,n;if(r.numberOfContours>0){var s,p=r.endPointIndices=[];for(s=0;s<r.numberOfContours;s+=1)p.push(o.parseUShort());for(r.instructionLength=o.parseUShort(),r.instructions=[],s=0;s<r.instructionLength;s+=1)r.instructions.push(o.parseByte());var u=p[p.length-1]+1;for(a=[],s=0;u>s;s+=1)if(n=o.parseByte(),a.push(n),(8&n)>0)for(var h=o.parseByte(),i=0;h>i;i+=1)a.push(n),s+=1;if(check.argument(a.length===u,"Bad flags."),p.length>0){var l,y=[];if(u>0){for(s=0;u>s;s+=1)n=a[s],l={},l.onCurve=!!(1&n),l.lastPointOfContour=p.indexOf(s)>=0,y.push(l);var c=0;for(s=0;u>s;s+=1)n=a[s],l=y[s],l.x=parseGlyphCoordinate(o,n,c,2,16),c=l.x;var f=0;for(s=0;u>s;s+=1)n=a[s],l=y[s],l.y=parseGlyphCoordinate(o,n,f,4,32),f=l.y}r.points=y}else r.points=[]}else if(0===r.numberOfContours)r.points=[];else{r.isComposite=!0,r.points=[],r.components=[];for(var v=!0;v;){a=o.parseUShort();var x={glyphIndex:o.parseUShort(),xScale:1,scale01:0,scale10:0,yScale:1,dx:0,dy:0};(1&a)>0?(x.dx=o.parseShort(),x.dy=o.parseShort()):(x.dx=o.parseChar(),x.dy=o.parseChar()),(8&a)>0?x.xScale=x.yScale=o.parseF2Dot14():(64&a)>0?(x.xScale=o.parseF2Dot14(),x.yScale=o.parseF2Dot14()):(128&a)>0&&(x.xScale=o.parseF2Dot14(),x.scale01=o.parseF2Dot14(),x.scale10=o.parseF2Dot14(),x.yScale=o.parseF2Dot14()),r.components.push(x),v=!!(32&a)}}}function transformPoints(r,e){for(var t=[],o=0;o<r.length;o+=1){var a=r[o],n={x:e.xScale*a.x+e.scale01*a.y+e.dx,y:e.scale10*a.x+e.yScale*a.y+e.dy,onCurve:a.onCurve,lastPointOfContour:a.lastPointOfContour};t.push(n)}return t}function getContours(r){for(var e=[],t=[],o=0;o<r.length;o+=1){var a=r[o];t.push(a),a.lastPointOfContour&&(e.push(t),t=[])}return check.argument(0===t.length,"There are still points left in the current contour."),e}function getPath(r){var e=new path.Path;if(!r)return e;for(var t=getContours(r),o=0;o<t.length;o+=1){var a,n,s=t[o],p=s[0],u=s[s.length-1];p.onCurve?(a=null,n=!0):(p=u.onCurve?u:{x:(p.x+u.x)/2,y:(p.y+u.y)/2},a=p,n=!1),e.moveTo(p.x,p.y);for(var h=n?1:0;h<s.length;h+=1){var i=s[h],l=0===h?p:s[h-1];if(l.onCurve&&i.onCurve)e.lineTo(i.x,i.y);else if(l.onCurve&&!i.onCurve)a=i;else if(l.onCurve||i.onCurve){if(l.onCurve||!i.onCurve)throw new Error("Invalid state.");e.quadraticCurveTo(a.x,a.y,i.x,i.y),a=null}else{var y={x:(l.x+i.x)/2,y:(l.y+i.y)/2};e.quadraticCurveTo(l.x,l.y,y.x,y.y),a=i}}p!==u&&(a?e.quadraticCurveTo(a.x,a.y,p.x,p.y):e.lineTo(p.x,p.y))}return e.closePath(),e}function buildPath(r,e){if(e.isComposite)for(var t=0;t<e.components.length;t+=1){var o=e.components[t],a=r.get(o.glyphIndex);if(a.getPath(),a.points){var n=transformPoints(a.points,o);e.points=e.points.concat(n)}}return getPath(e.points)}function parseGlyfTable(r,e,t,o){var a,n=new glyphset.GlyphSet(o);for(a=0;a<t.length-1;a+=1){var s=t[a],p=t[a+1];s!==p?n.push(a,glyphset.ttfGlyphLoader(o,a,parseGlyph,r,e+s,buildPath)):n.push(a,glyphset.glyphLoader(o,a))}return n}var check=require("../check"),glyphset=require("../glyphset"),parse=require("../parse"),path=require("../path");exports.parse=parseGlyfTable;

},{"../check":2,"../glyphset":7,"../parse":9,"../path":10}],16:[function(require,module,exports){
"use strict";function parseTaggedListTable(r,e){for(var a=new parse.Parser(r,e),s=a.parseUShort(),t=[],o=0;s>o;o++)t[a.parseTag()]={offset:a.parseUShort()};return t}function parseCoverageTable(r,e){var a=new parse.Parser(r,e),s=a.parseUShort(),t=a.parseUShort();if(1===s)return a.parseUShortList(t);if(2===s){for(var o=[];t--;)for(var p=a.parseUShort(),n=a.parseUShort(),f=a.parseUShort(),i=p;n>=i;i++)o[f++]=i;return o}}function parseClassDefTable(r,e){var a=new parse.Parser(r,e),s=a.parseUShort();if(1===s){var t=a.parseUShort(),o=a.parseUShort(),p=a.parseUShortList(o);return function(r){return p[r-t]||0}}if(2===s){for(var n=a.parseUShort(),f=[],i=[],h=[],S=0;n>S;S++)f[S]=a.parseUShort(),i[S]=a.parseUShort(),h[S]=a.parseUShort();return function(r){for(var e=0,a=f.length-1;a>e;){var s=e+a+1>>1;r<f[s]?a=s-1:e=s}return f[e]<=r&&r<=i[e]?h[e]||0:0}}}function parsePairPosSubTable(r,e){var a,s,t=new parse.Parser(r,e),o=t.parseUShort(),p=t.parseUShort(),n=parseCoverageTable(r,e+p),f=t.parseUShort(),i=t.parseUShort();if(4===f&&0===i){var h={};if(1===o){for(var S=t.parseUShort(),u=[],v=t.parseOffset16List(S),U=0;S>U;U++){var l=v[U],g=h[l];if(!g){g={},t.relativeOffset=l;for(var T=t.parseUShort();T--;){var c=t.parseUShort();f&&(a=t.parseShort()),i&&(s=t.parseShort()),g[c]=a}}u[n[U]]=g}return function(r,e){var a=u[r];return a?a[e]:void 0}}if(2===o){for(var b=t.parseUShort(),P=t.parseUShort(),L=t.parseUShort(),k=t.parseUShort(),d=parseClassDefTable(r,e+b),w=parseClassDefTable(r,e+P),O=[],C=0;L>C;C++)for(var G=O[C]=[],K=0;k>K;K++)f&&(a=t.parseShort()),i&&(s=t.parseShort()),G[K]=a;var V={};for(C=0;C<n.length;C++)V[n[C]]=1;return function(r,e){if(V[r]){var a=d(r),s=w(e),t=O[a];return t?t[s]:void 0}}}}}function parseLookupTable(r,e){var a=new parse.Parser(r,e),s=a.parseUShort(),t=a.parseUShort(),o=16&t,p=a.parseUShort(),n=a.parseOffset16List(p),f={lookupType:s,lookupFlag:t,markFilteringSet:o?a.parseUShort():-1};if(2===s){for(var i=[],h=0;p>h;h++)i.push(parsePairPosSubTable(r,e+n[h]));f.getKerningValue=function(r,e){for(var a=i.length;a--;){var s=i[a](r,e);if(void 0!==s)return s}return 0}}return f}function parseGposTable(r,e,a){var s=new parse.Parser(r,e),t=s.parseFixed();check.argument(1===t,"Unsupported GPOS table version."),parseTaggedListTable(r,e+s.parseUShort()),parseTaggedListTable(r,e+s.parseUShort());var o=s.parseUShort();s.relativeOffset=o;for(var p=s.parseUShort(),n=s.parseOffset16List(p),f=e+o,i=0;p>i;i++){var h=parseLookupTable(r,f+n[i]);2!==h.lookupType||a.getGposKerningValue||(a.getGposKerningValue=h.getKerningValue)}}var check=require("../check"),parse=require("../parse");exports.parse=parseGposTable;

},{"../check":2,"../parse":9}],17:[function(require,module,exports){
"use strict";function parseHeadTable(e,a){var r={},t=new parse.Parser(e,a);return r.version=t.parseVersion(),r.fontRevision=Math.round(1e3*t.parseFixed())/1e3,r.checkSumAdjustment=t.parseULong(),r.magicNumber=t.parseULong(),check.argument(1594834165===r.magicNumber,"Font header has wrong magic number."),r.flags=t.parseUShort(),r.unitsPerEm=t.parseUShort(),r.created=t.parseLongDateTime(),r.modified=t.parseLongDateTime(),r.xMin=t.parseShort(),r.yMin=t.parseShort(),r.xMax=t.parseShort(),r.yMax=t.parseShort(),r.macStyle=t.parseUShort(),r.lowestRecPPEM=t.parseUShort(),r.fontDirectionHint=t.parseShort(),r.indexToLocFormat=t.parseShort(),r.glyphDataFormat=t.parseShort(),r}function makeHeadTable(e){return new table.Table("head",[{name:"version",type:"FIXED",value:65536},{name:"fontRevision",type:"FIXED",value:65536},{name:"checkSumAdjustment",type:"ULONG",value:0},{name:"magicNumber",type:"ULONG",value:1594834165},{name:"flags",type:"USHORT",value:0},{name:"unitsPerEm",type:"USHORT",value:1e3},{name:"created",type:"LONGDATETIME",value:0},{name:"modified",type:"LONGDATETIME",value:0},{name:"xMin",type:"SHORT",value:0},{name:"yMin",type:"SHORT",value:0},{name:"xMax",type:"SHORT",value:0},{name:"yMax",type:"SHORT",value:0},{name:"macStyle",type:"USHORT",value:0},{name:"lowestRecPPEM",type:"USHORT",value:0},{name:"fontDirectionHint",type:"SHORT",value:2},{name:"indexToLocFormat",type:"SHORT",value:0},{name:"glyphDataFormat",type:"SHORT",value:0}],e)}var check=require("../check"),parse=require("../parse"),table=require("../table");exports.parse=parseHeadTable,exports.make=makeHeadTable;

},{"../check":2,"../parse":9,"../table":11}],18:[function(require,module,exports){
"use strict";function parseHheaTable(e,a){var r={},t=new parse.Parser(e,a);return r.version=t.parseVersion(),r.ascender=t.parseShort(),r.descender=t.parseShort(),r.lineGap=t.parseShort(),r.advanceWidthMax=t.parseUShort(),r.minLeftSideBearing=t.parseShort(),r.minRightSideBearing=t.parseShort(),r.xMaxExtent=t.parseShort(),r.caretSlopeRise=t.parseShort(),r.caretSlopeRun=t.parseShort(),r.caretOffset=t.parseShort(),t.relativeOffset+=8,r.metricDataFormat=t.parseShort(),r.numberOfHMetrics=t.parseUShort(),r}function makeHheaTable(e){return new table.Table("hhea",[{name:"version",type:"FIXED",value:65536},{name:"ascender",type:"FWORD",value:0},{name:"descender",type:"FWORD",value:0},{name:"lineGap",type:"FWORD",value:0},{name:"advanceWidthMax",type:"UFWORD",value:0},{name:"minLeftSideBearing",type:"FWORD",value:0},{name:"minRightSideBearing",type:"FWORD",value:0},{name:"xMaxExtent",type:"FWORD",value:0},{name:"caretSlopeRise",type:"SHORT",value:1},{name:"caretSlopeRun",type:"SHORT",value:0},{name:"caretOffset",type:"SHORT",value:0},{name:"reserved1",type:"SHORT",value:0},{name:"reserved2",type:"SHORT",value:0},{name:"reserved3",type:"SHORT",value:0},{name:"reserved4",type:"SHORT",value:0},{name:"metricDataFormat",type:"SHORT",value:0},{name:"numberOfHMetrics",type:"USHORT",value:0}],e)}var parse=require("../parse"),table=require("../table");exports.parse=parseHheaTable,exports.make=makeHheaTable;

},{"../parse":9,"../table":11}],19:[function(require,module,exports){
"use strict";function parseHmtxTable(e,a,r,t,s){for(var i,l,n=new parse.Parser(e,a),p=0;t>p;p+=1){r>p&&(i=n.parseUShort(),l=n.parseShort());var d=s.get(p);d.advanceWidth=i,d.leftSideBearing=l}}function makeHmtxTable(e){for(var a=new table.Table("hmtx",[]),r=0;r<e.length;r+=1){var t=e.get(r),s=t.advanceWidth||0,i=t.leftSideBearing||0;a.fields.push({name:"advanceWidth_"+r,type:"USHORT",value:s}),a.fields.push({name:"leftSideBearing_"+r,type:"SHORT",value:i})}return a}var parse=require("../parse"),table=require("../table");exports.parse=parseHmtxTable,exports.make=makeHmtxTable;

},{"../parse":9,"../table":11}],20:[function(require,module,exports){
"use strict";function parseKernTable(r,e){var a={},s=new parse.Parser(r,e),p=s.parseUShort();check.argument(0===p,"Unsupported kern table version."),s.skip("uShort",1);var t=s.parseUShort();check.argument(0===t,"Unsupported kern sub-table version."),s.skip("uShort",2);var o=s.parseUShort();s.skip("uShort",3);for(var n=0;o>n;n+=1){var h=s.parseUShort(),u=s.parseUShort(),c=s.parseShort();a[h+","+u]=c}return a}var check=require("../check"),parse=require("../parse");exports.parse=parseKernTable;

},{"../check":2,"../parse":9}],21:[function(require,module,exports){
"use strict";function parseLocaTable(r,a,e,s){for(var p=new parse.Parser(r,a),o=s?p.parseUShort:p.parseULong,t=[],c=0;e+1>c;c+=1){var n=o.call(p);s&&(n*=2),t.push(n)}return t}var parse=require("../parse");exports.parse=parseLocaTable;

},{"../parse":9}],22:[function(require,module,exports){
"use strict";function makeLtagTable(e){for(var a=new table.Table("ltag",[{name:"version",type:"ULONG",value:1},{name:"flags",type:"ULONG",value:0},{name:"numTags",type:"ULONG",value:e.length}]),r="",t=12+4*e.length,n=0;n<e.length;++n){var s=r.indexOf(e[n]);0>s&&(s=r.length,r+=e[n]),a.fields.push({name:"offset "+n,type:"USHORT",value:t+s}),a.fields.push({name:"length "+n,type:"USHORT",value:e[n].length})}return a.fields.push({name:"stringPool",type:"CHARARRAY",value:r}),a}function parseLtagTable(e,a){var r=new parse.Parser(e,a),t=r.parseULong();check.argument(1===t,"Unsupported ltag table version."),r.skip("uLong",1);for(var n=r.parseULong(),s=[],l=0;n>l;l++){for(var p="",u=a+r.parseUShort(),g=r.parseUShort(),o=u;u+g>o;++o)p+=String.fromCharCode(e.getInt8(o));s.push(p)}return s}var check=require("../check"),parse=require("../parse"),table=require("../table");exports.make=makeLtagTable,exports.parse=parseLtagTable;

},{"../check":2,"../parse":9,"../table":11}],23:[function(require,module,exports){
"use strict";function parseMaxpTable(e,a){var r={},s=new parse.Parser(e,a);return r.version=s.parseVersion(),r.numGlyphs=s.parseUShort(),1===r.version&&(r.maxPoints=s.parseUShort(),r.maxContours=s.parseUShort(),r.maxCompositePoints=s.parseUShort(),r.maxCompositeContours=s.parseUShort(),r.maxZones=s.parseUShort(),r.maxTwilightPoints=s.parseUShort(),r.maxStorage=s.parseUShort(),r.maxFunctionDefs=s.parseUShort(),r.maxInstructionDefs=s.parseUShort(),r.maxStackElements=s.parseUShort(),r.maxSizeOfInstructions=s.parseUShort(),r.maxComponentElements=s.parseUShort(),r.maxComponentDepth=s.parseUShort()),r}function makeMaxpTable(e){return new table.Table("maxp",[{name:"version",type:"FIXED",value:20480},{name:"numGlyphs",type:"USHORT",value:e}])}var parse=require("../parse"),table=require("../table");exports.parse=parseMaxpTable,exports.make=makeMaxpTable;

},{"../parse":9,"../table":11}],24:[function(require,module,exports){
"use strict";function getLanguageCode(e,a,r){switch(e){case 0:if(65535===a)return"und";if(r)return r[a];break;case 1:return macLanguages[a];case 3:return windowsLanguages[a]}return void 0}function getEncoding(e,a,r){switch(e){case 0:return utf16;case 1:return macLanguageEncodings[r]||macScriptEncodings[a];case 3:if(1===a||10===a)return utf16}return void 0}function parseNameTable(e,a,r){for(var n={},t=new parse.Parser(e,a),s=t.parseUShort(),m=t.parseUShort(),c=t.offset+t.parseUShort(),i=0;m>i;i++){var o=t.parseUShort(),u=t.parseUShort(),l=t.parseUShort(),g=t.parseUShort(),d=nameTableNames[g]||g,f=t.parseUShort(),p=t.parseUShort(),h=getLanguageCode(o,l,r),v=getEncoding(o,u,l);if(void 0!==v&&void 0!==h){var x;if(x=v===utf16?decode.UTF16(e,c+p,f):decode.MACSTRING(e,c+p,f,v)){var y=n[d];void 0===y&&(y=n[d]={}),y[h]=x}}}var b=0;return 1===s&&(b=t.parseUShort()),n}function reverseDict(e){var a={};for(var r in e)a[e[r]]=parseInt(r);return a}function makeNameRecord(e,a,r,n,t,s){return new table.Record("NameRecord",[{name:"platformID",type:"USHORT",value:e},{name:"encodingID",type:"USHORT",value:a},{name:"languageID",type:"USHORT",value:r},{name:"nameID",type:"USHORT",value:n},{name:"length",type:"USHORT",value:t},{name:"offset",type:"USHORT",value:s}])}function findSubArray(e,a){var r=e.length,n=a.length-r+1;e:for(var t=0;n>t;t++)for(;n>t;t++){for(var s=0;r>s;s++)if(a[t+s]!==e[s])continue e;return t}return-1}function addStringToPool(e,a){var r=findSubArray(e,a);if(0>r){r=a.length;for(var n=0,t=e.length;t>n;++n)a.push(e[n])}return r}function makeNameTable(e,a){var r,n=[],t={},s=reverseDict(nameTableNames);for(var m in e){var c=s[m];void 0===c&&(c=m),r=parseInt(c),t[r]=e[m],n.push(r)}for(var i=reverseDict(macLanguages),o=reverseDict(windowsLanguages),u=[],l=[],g=0;g<n.length;g++){r=n[g];var d=t[r];for(var f in d){var p=d[f],h=1,v=i[f],x=macLanguageToScript[v],y=getEncoding(h,x,v),b=encode.MACSTRING(p,y);void 0===b&&(h=0,v=a.indexOf(f),0>v&&(v=a.length,a.push(f)),x=4,b=encode.UTF16(p));var k=addStringToPool(b,l);u.push(makeNameRecord(h,x,v,r,b.length,k));var S=o[f];if(void 0!==S){var T=encode.UTF16(p),U=addStringToPool(T,l);u.push(makeNameRecord(3,1,S,r,T.length,U))}}}u.sort(function(e,a){return e.platformID-a.platformID||e.encodingID-a.encodingID||e.languageID-a.languageID||e.nameID-a.nameID});for(var N=new table.Table("name",[{name:"format",type:"USHORT",value:0},{name:"count",type:"USHORT",value:u.length},{name:"stringOffset",type:"USHORT",value:6+12*u.length}]),I=0;I<u.length;I++)N.fields.push({name:"record_"+I,type:"RECORD",value:u[I]});return N.fields.push({name:"strings",type:"LITERAL",value:l}),N}var types=require("../types"),decode=types.decode,encode=types.encode,parse=require("../parse"),table=require("../table"),nameTableNames=["copyright","fontFamily","fontSubfamily","uniqueID","fullName","version","postScriptName","trademark","manufacturer","designer","description","manufacturerURL","designerURL","license","licenseURL","reserved","preferredFamily","preferredSubfamily","compatibleFullName","sampleText","postScriptFindFontName","wwsFamily","wwsSubfamily"],macLanguages={0:"en",1:"fr",2:"de",3:"it",4:"nl",5:"sv",6:"es",7:"da",8:"pt",9:"no",10:"he",11:"ja",12:"ar",13:"fi",14:"el",15:"is",16:"mt",17:"tr",18:"hr",19:"zh-Hant",20:"ur",21:"hi",22:"th",23:"ko",24:"lt",25:"pl",26:"hu",27:"es",28:"lv",29:"se",30:"fo",31:"fa",32:"ru",33:"zh",34:"nl-BE",35:"ga",36:"sq",37:"ro",38:"cz",39:"sk",40:"si",41:"yi",42:"sr",43:"mk",44:"bg",45:"uk",46:"be",47:"uz",48:"kk",49:"az-Cyrl",50:"az-Arab",51:"hy",52:"ka",53:"mo",54:"ky",55:"tg",56:"tk",57:"mn-CN",58:"mn",59:"ps",60:"ks",61:"ku",62:"sd",63:"bo",64:"ne",65:"sa",66:"mr",67:"bn",68:"as",69:"gu",70:"pa",71:"or",72:"ml",73:"kn",74:"ta",75:"te",76:"si",77:"my",78:"km",79:"lo",80:"vi",81:"id",82:"tl",83:"ms",84:"ms-Arab",85:"am",86:"ti",87:"om",88:"so",89:"sw",90:"rw",91:"rn",92:"ny",93:"mg",94:"eo",128:"cy",129:"eu",130:"ca",131:"la",132:"qu",133:"gn",134:"ay",135:"tt",136:"ug",137:"dz",138:"jv",139:"su",140:"gl",141:"af",142:"br",143:"iu",144:"gd",145:"gv",146:"ga",147:"to",148:"el-polyton",149:"kl",150:"az",151:"nn"},macLanguageToScript={0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:5,11:1,12:4,13:0,14:6,15:0,16:0,17:0,18:0,19:2,20:4,21:9,22:21,23:3,24:29,25:29,26:29,27:29,28:29,29:0,30:0,31:4,32:7,33:25,34:0,35:0,36:0,37:0,38:29,39:29,40:0,41:5,42:7,43:7,44:7,45:7,46:7,47:7,48:7,49:7,50:4,51:24,52:23,53:7,54:7,55:7,56:7,57:27,58:7,59:4,60:4,61:4,62:4,63:26,64:9,65:9,66:9,67:13,68:13,69:11,70:10,71:12,72:17,73:16,74:14,75:15,76:18,77:19,78:20,79:22,80:30,81:0,82:0,83:0,84:4,85:28,86:28,87:28,88:0,89:0,90:0,91:0,92:0,93:0,94:0,128:0,129:0,130:0,131:0,132:0,133:0,134:0,135:7,136:4,137:26,138:0,139:0,140:0,141:0,142:0,143:28,144:0,145:0,146:0,147:0,148:6,149:0,150:0,151:0},windowsLanguages={1078:"af",1052:"sq",1156:"gsw",1118:"am",5121:"ar-DZ",15361:"ar-BH",3073:"ar",2049:"ar-IQ",11265:"ar-JO",13313:"ar-KW",12289:"ar-LB",4097:"ar-LY",6145:"ary",8193:"ar-OM",16385:"ar-QA",1025:"ar-SA",10241:"ar-SY",7169:"aeb",14337:"ar-AE",9217:"ar-YE",1067:"hy",1101:"as",2092:"az-Cyrl",1068:"az",1133:"ba",1069:"eu",1059:"be",2117:"bn",1093:"bn-IN",8218:"bs-Cyrl",5146:"bs",1150:"br",1026:"bg",1027:"ca",3076:"zh-HK",5124:"zh-MO",2052:"zh",4100:"zh-SG",1028:"zh-TW",1155:"co",1050:"hr",4122:"hr-BA",1029:"cs",1030:"da",1164:"prs",1125:"dv",2067:"nl-BE",1043:"nl",3081:"en-AU",10249:"en-BZ",4105:"en-CA",9225:"en-029",16393:"en-IN",6153:"en-IE",8201:"en-JM",17417:"en-MY",5129:"en-NZ",13321:"en-PH",18441:"en-SG",7177:"en-ZA",11273:"en-TT",2057:"en-GB",1033:"en",12297:"en-ZW",1061:"et",1080:"fo",1124:"fil",1035:"fi",2060:"fr-BE",3084:"fr-CA",1036:"fr",5132:"fr-LU",6156:"fr-MC",4108:"fr-CH",1122:"fy",1110:"gl",1079:"ka",3079:"de-AT",1031:"de",5127:"de-LI",4103:"de-LU",2055:"de-CH",1032:"el",1135:"kl",1095:"gu",1128:"ha",1037:"he",1081:"hi",1038:"hu",1039:"is",1136:"ig",1057:"id",1117:"iu",2141:"iu-Latn",2108:"ga",1076:"xh",1077:"zu",1040:"it",2064:"it-CH",1041:"ja",1099:"kn",1087:"kk",1107:"km",1158:"quc",1159:"rw",1089:"sw",1111:"kok",1042:"ko",1088:"ky",1108:"lo",1062:"lv",1063:"lt",2094:"dsb",1134:"lb",1071:"mk",2110:"ms-BN",1086:"ms",1100:"ml",1082:"mt",1153:"mi",1146:"arn",1102:"mr",1148:"moh",1104:"mn",2128:"mn-CN",1121:"ne",1044:"nb",2068:"nn",1154:"oc",1096:"or",1123:"ps",1045:"pl",1046:"pt",2070:"pt-PT",1094:"pa",1131:"qu-BO",2155:"qu-EC",3179:"qu",1048:"ro",1047:"rm",1049:"ru",9275:"smn",4155:"smj-NO",5179:"smj",3131:"se-FI",1083:"se",2107:"se-SE",8251:"sms",6203:"sma-NO",7227:"sms",1103:"sa",7194:"sr-Cyrl-BA",3098:"sr",6170:"sr-Latn-BA",2074:"sr-Latn",1132:"nso",1074:"tn",1115:"si",1051:"sk",1060:"sl",11274:"es-AR",16394:"es-BO",13322:"es-CL",9226:"es-CO",5130:"es-CR",7178:"es-DO",12298:"es-EC",17418:"es-SV",4106:"es-GT",18442:"es-HN",2058:"es-MX",19466:"es-NI",6154:"es-PA",15370:"es-PY",10250:"es-PE",20490:"es-PR",3082:"es",1034:"es",21514:"es-US",14346:"es-UY",8202:"es-VE",2077:"sv-FI",1053:"sv",1114:"syr",1064:"tg",2143:"tzm",1097:"ta",1092:"tt",1098:"te",1054:"th",1105:"bo",1055:"tr",1090:"tk",1152:"ug",1058:"uk",1070:"hsb",1056:"ur",2115:"uz-Cyrl",1091:"uz",1066:"vi",1106:"cy",1160:"wo",1157:"sah",1144:"ii",1130:"yo"},utf16="utf-16",macScriptEncodings={0:"macintosh",1:"x-mac-japanese",2:"x-mac-chinesetrad",3:"x-mac-korean",6:"x-mac-greek",7:"x-mac-cyrillic",9:"x-mac-devanagai",10:"x-mac-gurmukhi",11:"x-mac-gujarati",12:"x-mac-oriya",13:"x-mac-bengali",14:"x-mac-tamil",15:"x-mac-telugu",16:"x-mac-kannada",17:"x-mac-malayalam",18:"x-mac-sinhalese",19:"x-mac-burmese",20:"x-mac-khmer",21:"x-mac-thai",22:"x-mac-lao",23:"x-mac-georgian",24:"x-mac-armenian",25:"x-mac-chinesesimp",26:"x-mac-tibetan",27:"x-mac-mongolian",28:"x-mac-ethiopic",29:"x-mac-ce",30:"x-mac-vietnamese",31:"x-mac-extarabic"},macLanguageEncodings={15:"x-mac-icelandic",17:"x-mac-turkish",18:"x-mac-croatian",24:"x-mac-ce",25:"x-mac-ce",26:"x-mac-ce",27:"x-mac-ce",28:"x-mac-ce",30:"x-mac-icelandic",37:"x-mac-romanian",38:"x-mac-ce",39:"x-mac-ce",40:"x-mac-ce",143:"x-mac-inuit",146:"x-mac-gaelic"};exports.parse=parseNameTable,exports.make=makeNameTable;

},{"../parse":9,"../table":11,"../types":28}],25:[function(require,module,exports){
"use strict";function getUnicodeRange(e){for(var n=0;n<unicodeRanges.length;n+=1){var a=unicodeRanges[n];if(e>=a.begin&&e<a.end)return n}return-1}function parseOS2Table(e,n){var a={},i=new parse.Parser(e,n);a.version=i.parseUShort(),a.xAvgCharWidth=i.parseShort(),a.usWeightClass=i.parseUShort(),a.usWidthClass=i.parseUShort(),a.fsType=i.parseUShort(),a.ySubscriptXSize=i.parseShort(),a.ySubscriptYSize=i.parseShort(),a.ySubscriptXOffset=i.parseShort(),a.ySubscriptYOffset=i.parseShort(),a.ySuperscriptXSize=i.parseShort(),a.ySuperscriptYSize=i.parseShort(),a.ySuperscriptXOffset=i.parseShort(),a.ySuperscriptYOffset=i.parseShort(),a.yStrikeoutSize=i.parseShort(),a.yStrikeoutPosition=i.parseShort(),a.sFamilyClass=i.parseShort(),a.panose=[];for(var t=0;10>t;t++)a.panose[t]=i.parseByte();return a.ulUnicodeRange1=i.parseULong(),a.ulUnicodeRange2=i.parseULong(),a.ulUnicodeRange3=i.parseULong(),a.ulUnicodeRange4=i.parseULong(),a.achVendID=String.fromCharCode(i.parseByte(),i.parseByte(),i.parseByte(),i.parseByte()),a.fsSelection=i.parseUShort(),a.usFirstCharIndex=i.parseUShort(),a.usLastCharIndex=i.parseUShort(),a.sTypoAscender=i.parseShort(),a.sTypoDescender=i.parseShort(),a.sTypoLineGap=i.parseShort(),a.usWinAscent=i.parseUShort(),a.usWinDescent=i.parseUShort(),a.version>=1&&(a.ulCodePageRange1=i.parseULong(),a.ulCodePageRange2=i.parseULong()),a.version>=2&&(a.sxHeight=i.parseShort(),a.sCapHeight=i.parseShort(),a.usDefaultChar=i.parseUShort(),a.usBreakChar=i.parseUShort(),a.usMaxContent=i.parseUShort()),a}function makeOS2Table(e){return new table.Table("OS/2",[{name:"version",type:"USHORT",value:3},{name:"xAvgCharWidth",type:"SHORT",value:0},{name:"usWeightClass",type:"USHORT",value:0},{name:"usWidthClass",type:"USHORT",value:0},{name:"fsType",type:"USHORT",value:0},{name:"ySubscriptXSize",type:"SHORT",value:650},{name:"ySubscriptYSize",type:"SHORT",value:699},{name:"ySubscriptXOffset",type:"SHORT",value:0},{name:"ySubscriptYOffset",type:"SHORT",value:140},{name:"ySuperscriptXSize",type:"SHORT",value:650},{name:"ySuperscriptYSize",type:"SHORT",value:699},{name:"ySuperscriptXOffset",type:"SHORT",value:0},{name:"ySuperscriptYOffset",type:"SHORT",value:479},{name:"yStrikeoutSize",type:"SHORT",value:49},{name:"yStrikeoutPosition",type:"SHORT",value:258},{name:"sFamilyClass",type:"SHORT",value:0},{name:"bFamilyType",type:"BYTE",value:0},{name:"bSerifStyle",type:"BYTE",value:0},{name:"bWeight",type:"BYTE",value:0},{name:"bProportion",type:"BYTE",value:0},{name:"bContrast",type:"BYTE",value:0},{name:"bStrokeVariation",type:"BYTE",value:0},{name:"bArmStyle",type:"BYTE",value:0},{name:"bLetterform",type:"BYTE",value:0},{name:"bMidline",type:"BYTE",value:0},{name:"bXHeight",type:"BYTE",value:0},{name:"ulUnicodeRange1",type:"ULONG",value:0},{name:"ulUnicodeRange2",type:"ULONG",value:0},{name:"ulUnicodeRange3",type:"ULONG",value:0},{name:"ulUnicodeRange4",type:"ULONG",value:0},{name:"achVendID",type:"CHARARRAY",value:"XXXX"},{name:"fsSelection",type:"USHORT",value:0},{name:"usFirstCharIndex",type:"USHORT",value:0},{name:"usLastCharIndex",type:"USHORT",value:0},{name:"sTypoAscender",type:"SHORT",value:0},{name:"sTypoDescender",type:"SHORT",value:0},{name:"sTypoLineGap",type:"SHORT",value:0},{name:"usWinAscent",type:"USHORT",value:0},{name:"usWinDescent",type:"USHORT",value:0},{name:"ulCodePageRange1",type:"ULONG",value:0},{name:"ulCodePageRange2",type:"ULONG",value:0},{name:"sxHeight",type:"SHORT",value:0},{name:"sCapHeight",type:"SHORT",value:0},{name:"usDefaultChar",type:"USHORT",value:0},{name:"usBreakChar",type:"USHORT",value:0},{name:"usMaxContext",type:"USHORT",value:0}],e)}var parse=require("../parse"),table=require("../table"),unicodeRanges=[{begin:0,end:127},{begin:128,end:255},{begin:256,end:383},{begin:384,end:591},{begin:592,end:687},{begin:688,end:767},{begin:768,end:879},{begin:880,end:1023},{begin:11392,end:11519},{begin:1024,end:1279},{begin:1328,end:1423},{begin:1424,end:1535},{begin:42240,end:42559},{begin:1536,end:1791},{begin:1984,end:2047},{begin:2304,end:2431},{begin:2432,end:2559},{begin:2560,end:2687},{begin:2688,end:2815},{begin:2816,end:2943},{begin:2944,end:3071},{begin:3072,end:3199},{begin:3200,end:3327},{begin:3328,end:3455},{begin:3584,end:3711},{begin:3712,end:3839},{begin:4256,end:4351},{begin:6912,end:7039},{begin:4352,end:4607},{begin:7680,end:7935},{begin:7936,end:8191},{begin:8192,end:8303},{begin:8304,end:8351},{begin:8352,end:8399},{begin:8400,end:8447},{begin:8448,end:8527},{begin:8528,end:8591},{begin:8592,end:8703},{begin:8704,end:8959},{begin:8960,end:9215},{begin:9216,end:9279},{begin:9280,end:9311},{begin:9312,end:9471},{begin:9472,end:9599},{begin:9600,end:9631},{begin:9632,end:9727},{begin:9728,end:9983},{begin:9984,end:10175},{begin:12288,end:12351},{begin:12352,end:12447},{begin:12448,end:12543},{begin:12544,end:12591},{begin:12592,end:12687},{begin:43072,end:43135},{begin:12800,end:13055},{begin:13056,end:13311},{begin:44032,end:55215},{begin:55296,end:57343},{begin:67840,end:67871},{begin:19968,end:40959},{begin:57344,end:63743},{begin:12736,end:12783},{begin:64256,end:64335},{begin:64336,end:65023},{begin:65056,end:65071},{begin:65040,end:65055},{begin:65104,end:65135},{begin:65136,end:65279},{begin:65280,end:65519},{begin:65520,end:65535},{begin:3840,end:4095},{begin:1792,end:1871},{begin:1920,end:1983},{begin:3456,end:3583},{begin:4096,end:4255},{begin:4608,end:4991},{begin:5024,end:5119},{begin:5120,end:5759},{begin:5760,end:5791},{begin:5792,end:5887},{begin:6016,end:6143},{begin:6144,end:6319},{begin:10240,end:10495},{begin:40960,end:42127},{begin:5888,end:5919},{begin:66304,end:66351},{begin:66352,end:66383},{begin:66560,end:66639},{begin:118784,end:119039},{begin:119808,end:120831},{begin:1044480,end:1048573},{begin:65024,end:65039},{begin:917504,end:917631},{begin:6400,end:6479},{begin:6480,end:6527},{begin:6528,end:6623},{begin:6656,end:6687},{begin:11264,end:11359},{begin:11568,end:11647},{begin:19904,end:19967},{begin:43008,end:43055},{begin:65536,end:65663},{begin:65856,end:65935},{begin:66432,end:66463},{begin:66464,end:66527},{begin:66640,end:66687},{begin:66688,end:66735},{begin:67584,end:67647},{begin:68096,end:68191},{begin:119552,end:119647},{begin:73728,end:74751},{begin:119648,end:119679},{begin:7040,end:7103},{begin:7168,end:7247},{begin:7248,end:7295},{begin:43136,end:43231},{begin:43264,end:43311},{begin:43312,end:43359},{begin:43520,end:43615},{begin:65936,end:65999},{begin:66e3,end:66047},{begin:66208,end:66271},{begin:127024,end:127135}];exports.unicodeRanges=unicodeRanges,exports.getUnicodeRange=getUnicodeRange,exports.parse=parseOS2Table,exports.make=makeOS2Table;

},{"../parse":9,"../table":11}],26:[function(require,module,exports){
"use strict";function parsePostTable(e,a){var r,n={},s=new parse.Parser(e,a);switch(n.version=s.parseVersion(),n.italicAngle=s.parseFixed(),n.underlinePosition=s.parseShort(),n.underlineThickness=s.parseShort(),n.isFixedPitch=s.parseULong(),n.minMemType42=s.parseULong(),n.maxMemType42=s.parseULong(),n.minMemType1=s.parseULong(),n.maxMemType1=s.parseULong(),n.version){case 1:n.names=encoding.standardNames.slice();break;case 2:for(n.numberOfGlyphs=s.parseUShort(),n.glyphNameIndex=new Array(n.numberOfGlyphs),r=0;r<n.numberOfGlyphs;r++)n.glyphNameIndex[r]=s.parseUShort();for(n.names=[],r=0;r<n.numberOfGlyphs;r++)if(n.glyphNameIndex[r]>=encoding.standardNames.length){var p=s.parseChar();n.names.push(s.parseString(p))}break;case 2.5:for(n.numberOfGlyphs=s.parseUShort(),n.offset=new Array(n.numberOfGlyphs),r=0;r<n.numberOfGlyphs;r++)n.offset[r]=s.parseChar()}return n}function makePostTable(){return new table.Table("post",[{name:"version",type:"FIXED",value:196608},{name:"italicAngle",type:"FIXED",value:0},{name:"underlinePosition",type:"FWORD",value:0},{name:"underlineThickness",type:"FWORD",value:0},{name:"isFixedPitch",type:"ULONG",value:0},{name:"minMemType42",type:"ULONG",value:0},{name:"maxMemType42",type:"ULONG",value:0},{name:"minMemType1",type:"ULONG",value:0},{name:"maxMemType1",type:"ULONG",value:0}])}var encoding=require("../encoding"),parse=require("../parse"),table=require("../table");exports.parse=parsePostTable,exports.make=makePostTable;

},{"../encoding":4,"../parse":9,"../table":11}],27:[function(require,module,exports){
"use strict";function log2(e){return Math.log(e)/Math.log(2)|0}function computeCheckSum(e){for(;e.length%4!==0;)e.push(0);for(var a=0,n=0;n<e.length;n+=4)a+=(e[n]<<24)+(e[n+1]<<16)+(e[n+2]<<8)+e[n+3];return a%=Math.pow(2,32)}function makeTableRecord(e,a,n,t){return new table.Record("Table Record",[{name:"tag",type:"TAG",value:void 0!==e?e:""},{name:"checkSum",type:"ULONG",value:void 0!==a?a:0},{name:"offset",type:"ULONG",value:void 0!==n?n:0},{name:"length",type:"ULONG",value:void 0!==t?t:0}])}function makeSfntTable(e){var a=new table.Table("sfnt",[{name:"version",type:"TAG",value:"OTTO"},{name:"numTables",type:"USHORT",value:0},{name:"searchRange",type:"USHORT",value:0},{name:"entrySelector",type:"USHORT",value:0},{name:"rangeShift",type:"USHORT",value:0}]);a.tables=e,a.numTables=e.length;var n=Math.pow(2,log2(a.numTables));a.searchRange=16*n,a.entrySelector=log2(n),a.rangeShift=16*a.numTables-a.searchRange;for(var t=[],r=[],i=a.sizeOf()+makeTableRecord().sizeOf()*a.numTables;i%4!==0;)i+=1,r.push({name:"padding",type:"BYTE",value:0});for(var l=0;l<e.length;l+=1){var s=e[l];check.argument(4===s.tableName.length,"Table name"+s.tableName+" is invalid.");var u=s.sizeOf(),h=makeTableRecord(s.tableName,computeCheckSum(s.encode()),i,u);for(t.push({name:h.tag+" Table Record",type:"RECORD",value:h}),r.push({name:s.tableName+" table",type:"RECORD",value:s}),i+=u,check.argument(!isNaN(i),"Something went wrong calculating the offset.");i%4!==0;)i+=1,r.push({name:"padding",type:"BYTE",value:0})}return t.sort(function(e,a){return e.value.tag>a.value.tag?1:-1}),a.fields=a.fields.concat(t),a.fields=a.fields.concat(r),a}function metricsForChar(e,a,n){for(var t=0;t<a.length;t+=1){var r=e.charToGlyphIndex(a[t]);if(r>0){var i=e.glyphs.get(r);return i.getMetrics()}}return n}function average(e){for(var a=0,n=0;n<e.length;n+=1)a+=e[n];return a/e.length}function fontToSfntTable(e){for(var a,n=[],t=[],r=[],i=[],l=[],s=[],u=[],h=0,m=0,o=0,c=0,d=0,g=0;g<e.glyphs.length;g+=1){var p=e.glyphs.get(g),f=0|p.unicode;if("undefined"==typeof p.advanceWidth)throw new Error("Glyph "+p.name+" ("+g+"): advanceWidth is required.");(a>f||null===a)&&(a=f),f>h&&(h=f);var v=os2.getUnicodeRange(f);if(32>v)m|=1<<v;else if(64>v)o|=1<<v-32;else if(96>v)c|=1<<v-64;else{if(!(123>v))throw new Error("Unicode ranges bits > 123 are reserved for internal usage");d|=1<<v-96}if(".notdef"!==p.name){var y=p.getMetrics();n.push(y.xMin),t.push(y.yMin),r.push(y.xMax),i.push(y.yMax),s.push(y.leftSideBearing),u.push(y.rightSideBearing),l.push(p.advanceWidth)}}var x={xMin:Math.min.apply(null,n),yMin:Math.min.apply(null,t),xMax:Math.max.apply(null,r),yMax:Math.max.apply(null,i),advanceWidthMax:Math.max.apply(null,l),advanceWidthAvg:average(l),minLeftSideBearing:Math.min.apply(null,s),maxLeftSideBearing:Math.max.apply(null,s),minRightSideBearing:Math.min.apply(null,u)};x.ascender=e.ascender,x.descender=e.descender;var M=head.make({flags:3,unitsPerEm:e.unitsPerEm,xMin:x.xMin,yMin:x.yMin,xMax:x.xMax,yMax:x.yMax,lowestRecPPEM:3}),S=hhea.make({ascender:x.ascender,descender:x.descender,advanceWidthMax:x.advanceWidthMax,minLeftSideBearing:x.minLeftSideBearing,minRightSideBearing:x.minRightSideBearing,xMaxExtent:x.maxLeftSideBearing+(x.xMax-x.xMin),numberOfHMetrics:e.glyphs.length}),b=maxp.make(e.glyphs.length),T=os2.make({xAvgCharWidth:Math.round(x.advanceWidthAvg),usWeightClass:500,usWidthClass:5,usFirstCharIndex:a,usLastCharIndex:h,ulUnicodeRange1:m,ulUnicodeRange2:o,ulUnicodeRange3:c,ulUnicodeRange4:d,fsSelection:64,sTypoAscender:x.ascender,sTypoDescender:x.descender,sTypoLineGap:0,usWinAscent:x.yMax,usWinDescent:Math.abs(x.yMin),ulCodePageRange1:1,sxHeight:metricsForChar(e,"xyvw",{yMax:Math.round(x.ascender/2)}).yMax,sCapHeight:metricsForChar(e,"HIKLEFJMNTZBDPRAGOQSUVWXY",x).yMax,usDefaultChar:e.hasChar(" ")?32:0,usBreakChar:e.hasChar(" ")?32:0}),k=hmtx.make(e.glyphs),R=cmap.make(e.glyphs),C=e.getEnglishName("fontFamily"),N=e.getEnglishName("fontSubfamily"),E=C+" "+N,w=e.getEnglishName("postScriptName");w||(w=C.replace(/\s/g,"")+"-"+N);var B={};for(var O in e.names)B[O]=e.names[O];B.uniqueID||(B.uniqueID={en:e.getEnglishName("manufacturer")+":"+E}),B.postScriptName||(B.postScriptName={en:w}),B.preferredFamily||(B.preferredFamily=e.names.fontFamily),B.preferredSubfamily||(B.preferredSubfamily=e.names.fontSubfamily);var q=[],W=_name.make(B,q),U=q.length>0?ltag.make(q):void 0,L=post.make(),A=cff.make(e.glyphs,{version:e.getEnglishName("version"),fullName:E,familyName:C,weightName:N,postScriptName:w,unitsPerEm:e.unitsPerEm,fontBBox:[0,x.yMin,x.ascender,x.advanceWidthMax]}),F=[M,S,b,T,W,R,L,A,k];U&&F.push(U);var G=makeSfntTable(F),D=G.encode(),H=computeCheckSum(D),P=G.fields,I=!1;for(g=0;g<P.length;g+=1)if("head table"===P[g].name){P[g].value.checkSumAdjustment=2981146554-H,I=!0;break}if(!I)throw new Error("Could not find head table with checkSum to adjust.");return G}var check=require("../check"),table=require("../table"),cmap=require("./cmap"),cff=require("./cff"),head=require("./head"),hhea=require("./hhea"),hmtx=require("./hmtx"),ltag=require("./ltag"),maxp=require("./maxp"),_name=require("./name"),os2=require("./os2"),post=require("./post");exports.computeCheckSum=computeCheckSum,exports.make=makeSfntTable,exports.fontToTable=fontToSfntTable;

},{"../check":2,"../table":11,"./cff":12,"./cmap":13,"./head":17,"./hhea":18,"./hmtx":19,"./ltag":22,"./maxp":23,"./name":24,"./os2":25,"./post":26}],28:[function(require,module,exports){
"use strict";function constant(e){return function(){return e}}var check=require("./check"),LIMIT16=32768,LIMIT32=2147483648,decode={},encode={},sizeOf={};encode.BYTE=function(e){return check.argument(e>=0&&255>=e,"Byte value should be between 0 and 255."),[e]},sizeOf.BYTE=constant(1),encode.CHAR=function(e){return[e.charCodeAt(0)]},sizeOf.CHAR=constant(1),encode.CHARARRAY=function(e){for(var n=[],t=0;t<e.length;t+=1)n.push(e.charCodeAt(t));return n},sizeOf.CHARARRAY=function(e){return e.length},encode.USHORT=function(e){return[e>>8&255,255&e]},sizeOf.USHORT=constant(2),encode.SHORT=function(e){return e>=LIMIT16&&(e=-(2*LIMIT16-e)),[e>>8&255,255&e]},sizeOf.SHORT=constant(2),encode.UINT24=function(e){return[e>>16&255,e>>8&255,255&e]},sizeOf.UINT24=constant(3),encode.ULONG=function(e){return[e>>24&255,e>>16&255,e>>8&255,255&e]},sizeOf.ULONG=constant(4),encode.LONG=function(e){return e>=LIMIT32&&(e=-(2*LIMIT32-e)),[e>>24&255,e>>16&255,e>>8&255,255&e]},sizeOf.LONG=constant(4),encode.FIXED=encode.ULONG,sizeOf.FIXED=sizeOf.ULONG,encode.FWORD=encode.SHORT,sizeOf.FWORD=sizeOf.SHORT,encode.UFWORD=encode.USHORT,sizeOf.UFWORD=sizeOf.USHORT,encode.LONGDATETIME=function(){return[0,0,0,0,0,0,0,0]},sizeOf.LONGDATETIME=constant(8),encode.TAG=function(e){return check.argument(4===e.length,"Tag should be exactly 4 ASCII characters."),[e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]},sizeOf.TAG=constant(4),encode.Card8=encode.BYTE,sizeOf.Card8=sizeOf.BYTE,encode.Card16=encode.USHORT,sizeOf.Card16=sizeOf.USHORT,encode.OffSize=encode.BYTE,sizeOf.OffSize=sizeOf.BYTE,encode.SID=encode.USHORT,sizeOf.SID=sizeOf.USHORT,encode.NUMBER=function(e){return e>=-107&&107>=e?[e+139]:e>=108&&1131>=e?(e-=108,[(e>>8)+247,255&e]):e>=-1131&&-108>=e?(e=-e-108,[(e>>8)+251,255&e]):e>=-32768&&32767>=e?encode.NUMBER16(e):encode.NUMBER32(e)},sizeOf.NUMBER=function(e){return encode.NUMBER(e).length},encode.NUMBER16=function(e){return[28,e>>8&255,255&e]},sizeOf.NUMBER16=constant(3),encode.NUMBER32=function(e){return[29,e>>24&255,e>>16&255,e>>8&255,255&e]},sizeOf.NUMBER32=constant(5),encode.REAL=function(e){var n=e.toString(),t=/\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(n);if(t){var o=parseFloat("1e"+((t[2]?+t[2]:0)+t[1].length));n=(Math.round(e*o)/o).toString()}var c,r,i="";for(c=0,r=n.length;r>c;c+=1){var a=n[c];i+="e"===a?"-"===n[++c]?"c":"b":"."===a?"a":"-"===a?"e":a}i+=1&i.length?"f":"ff";var f=[30];for(c=0,r=i.length;r>c;c+=2)f.push(parseInt(i.substr(c,2),16));return f},sizeOf.REAL=function(e){return encode.REAL(e).length},encode.NAME=encode.CHARARRAY,sizeOf.NAME=sizeOf.CHARARRAY,encode.STRING=encode.CHARARRAY,sizeOf.STRING=sizeOf.CHARARRAY,decode.UTF16=function(e,n,t){for(var o=[],c=t/2,r=0;c>r;r++,n+=2)o[r]=e.getUint16(n);return String.fromCharCode.apply(null,o)},encode.UTF16=function(e){for(var n=[],t=0;t<e.length;t+=1){var o=e.charCodeAt(t);n.push(o>>8&255),n.push(255&o)}return n},sizeOf.UTF16=function(e){return 2*e.length};var eightBitMacEncodings={"x-mac-croatian":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ","x-mac-cyrillic":"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю","x-mac-gaelic":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæøṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ","x-mac-greek":"Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ­","x-mac-icelandic":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ","x-mac-inuit":"ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł","x-mac-ce":"ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ",macintosh:"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ","x-mac-romanian":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ","x-mac-turkish":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ"};decode.MACSTRING=function(e,n,t,o){var c=eightBitMacEncodings[o];if(void 0===c)return void 0;for(var r="",i=0;t>i;i++){var a=e.getUint8(n+i);r+=127>=a?String.fromCharCode(a):c[127&a]}return r};var macEncodingTableCache="function"==typeof WeakMap&&new WeakMap,macEncodingCacheKeys,getMacEncodingTable=function(e){if(!macEncodingCacheKeys){macEncodingCacheKeys={};for(var n in eightBitMacEncodings)macEncodingCacheKeys[n]=new String(n)}var t=macEncodingCacheKeys[e];if(void 0===t)return void 0;if(macEncodingTableCache){var o=macEncodingTableCache.get(t);if(void 0!==o)return o}var c=eightBitMacEncodings[e];if(void 0===c)return void 0;for(var r={},i=0;i<c.length;i++)r[c.charCodeAt(i)]=i+128;return macEncodingTableCache&&macEncodingTableCache.set(t,r),r};encode.MACSTRING=function(e,n){var t=getMacEncodingTable(n);if(void 0===t)return void 0;for(var o=[],c=0;c<e.length;c++){var r=e.charCodeAt(c);if(r>=128&&(r=t[r],void 0===r))return void 0;o.push(r)}return o},sizeOf.MACSTRING=function(e,n){var t=encode.MACSTRING(e,n);return void 0!==t?t.length:0},encode.INDEX=function(e){var n,t=1,o=[t],c=[],r=0;for(n=0;n<e.length;n+=1){var i=encode.OBJECT(e[n]);Array.prototype.push.apply(c,i),r+=i.length,t+=i.length,o.push(t)}if(0===c.length)return[0,0];var a=[],f=1+Math.floor(Math.log(r)/Math.log(2))/8|0,d=[void 0,encode.BYTE,encode.USHORT,encode.UINT24,encode.ULONG][f];for(n=0;n<o.length;n+=1){var u=d(o[n]);Array.prototype.push.apply(a,u)}return Array.prototype.concat(encode.Card16(e.length),encode.OffSize(f),a,c)},sizeOf.INDEX=function(e){return encode.INDEX(e).length},encode.DICT=function(e){for(var n=[],t=Object.keys(e),o=t.length,c=0;o>c;c+=1){var r=parseInt(t[c],0),i=e[r];n=n.concat(encode.OPERAND(i.value,i.type)),n=n.concat(encode.OPERATOR(r))}return n},sizeOf.DICT=function(e){return encode.DICT(e).length},encode.OPERATOR=function(e){return 1200>e?[e]:[12,e-1200]},encode.OPERAND=function(e,n){var t=[];if(Array.isArray(n))for(var o=0;o<n.length;o+=1)check.argument(e.length===n.length,"Not enough arguments given for type"+n),t=t.concat(encode.OPERAND(e[o],n[o]));else if("SID"===n)t=t.concat(encode.NUMBER(e));else if("offset"===n)t=t.concat(encode.NUMBER32(e));else if("number"===n)t=t.concat(encode.NUMBER(e));else{if("real"!==n)throw new Error("Unknown operand type "+n);t=t.concat(encode.REAL(e))}return t},encode.OP=encode.BYTE,sizeOf.OP=sizeOf.BYTE;var wmm="function"==typeof WeakMap&&new WeakMap;encode.CHARSTRING=function(e){if(wmm){var n=wmm.get(e);if(void 0!==n)return n}for(var t=[],o=e.length,c=0;o>c;c+=1){var r=e[c];t=t.concat(encode[r.type](r.value))}return wmm&&wmm.set(e,t),t},sizeOf.CHARSTRING=function(e){return encode.CHARSTRING(e).length},encode.OBJECT=function(e){var n=encode[e.type];return check.argument(void 0!==n,"No encoding function for type "+e.type),n(e.value)},sizeOf.OBJECT=function(e){var n=sizeOf[e.type];return check.argument(void 0!==n,"No sizeOf function for type "+e.type),n(e.value)},encode.TABLE=function(e){var n,t=[],o=e.fields.length,c=[],r=[];for(n=0;o>n;n+=1){var i=e.fields[n],a=encode[i.type];check.argument(void 0!==a,"No encoding function for field type "+i.type+" ("+i.name+")");var f=e[i.name];void 0===f&&(f=i.value);var d=a(f);"TABLE"===i.type?(r.push(t.length),t=t.concat([0,0]),c.push(d)):t=t.concat(d)}for(n=0;n<c.length;n+=1){var u=r[n],s=t.length;check.argument(65536>s,"Table "+e.tableName+" too big."),t[u]=s>>8,t[u+1]=255&s,t=t.concat(c[n])}return t},sizeOf.TABLE=function(e){for(var n=0,t=e.fields.length,o=0;t>o;o+=1){var c=e.fields[o],r=sizeOf[c.type];check.argument(void 0!==r,"No sizeOf function for field type "+c.type+" ("+c.name+")");var i=e[c.name];void 0===i&&(i=c.value),n+=r(i),"TABLE"===c.type&&(n+=2)}return n},encode.RECORD=encode.TABLE,sizeOf.RECORD=sizeOf.TABLE,encode.LITERAL=function(e){return e},sizeOf.LITERAL=function(e){return e.length},exports.decode=decode,exports.encode=encode,exports.sizeOf=sizeOf;

},{"./check":2}],29:[function(require,module,exports){
"use strict";exports.isBrowser=function(){return"undefined"!=typeof window},exports.isNode=function(){return"undefined"==typeof window},exports.nodeBufferToArrayBuffer=function(r){for(var e=new ArrayBuffer(r.length),n=new Uint8Array(e),t=0;t<r.length;++t)n[t]=r[t];return e},exports.arrayBufferToNodeBuffer=function(r){for(var e=new Buffer(r.byteLength),n=new Uint8Array(r),t=0;t<e.length;++t)e[t]=n[t];return e},exports.checkArgument=function(r,e){if(!r)throw e};

},{}]},{},[8])(8)
});
define('Atem-MOM/export/MasterGlyphSet',[
    'Atem-MOM/errors'
], function(
    errors
) {
    "use strict";

    var KeyError = errors.Key;

    /**
     * A ducktyped GlyphSet for BasePen, so that glyphs can be looked
     * up in the MOM-Master, that is the first argument.
     **/
    function MasterGlyphSet(master, drawFunc) {
        this._master = master;
        this._drawFunc = drawFunc;
    }

    var _p = MasterGlyphSet.prototype;
    _p.constructor = MasterGlyphSet;

    _p.get = function(name) {
        var glyph = this._master.getById(name)
          , result
          ;
        if(!glyph)
            throw new KeyError('Glyph "'+name+'" not found');
        // the result is also a ducktyped "glyph" which needs a draw method in BasePen
        result = Object.create(null);
        result.draw = this._drawFunc.bind(glyph);
    };

    return MasterGlyphSet;
});

/*!

JSZip - A Javascript class for generating and reading zip files
<http://stuartk.com/jszip>

(c) 2009-2014 Stuart Knightley <stuart [at] stuartk.com>
Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/master/LICENSE.markdown.

JSZip uses the library pako released under the MIT license :
https://github.com/nodeca/pako/blob/master/LICENSE
*/

(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define('jszip',[],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.JSZip = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';
var utils = require('./utils');
var support = require('./support');
// private property
var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";


// public method for encoding
exports.encode = function(input) {
    var output = [];
    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
    var i = 0, len = input.length, remainingBytes = len;

    var isArray = utils.getTypeOf(input) !== "string";
    while (i < input.length) {
        remainingBytes = len - i;

        if (!isArray) {
            chr1 = input.charCodeAt(i++);
            chr2 = i < len ? input.charCodeAt(i++) : 0;
            chr3 = i < len ? input.charCodeAt(i++) : 0;
        } else {
            chr1 = input[i++];
            chr2 = i < len ? input[i++] : 0;
            chr3 = i < len ? input[i++] : 0;
        }

        enc1 = chr1 >> 2;
        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
        enc3 = remainingBytes > 1 ? (((chr2 & 15) << 2) | (chr3 >> 6)) : 64;
        enc4 = remainingBytes > 2 ? (chr3 & 63) : 64;

        output.push(_keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4));

    }

    return output.join("");
};

// public method for decoding
exports.decode = function(input) {
    var chr1, chr2, chr3;
    var enc1, enc2, enc3, enc4;
    var i = 0, resultIndex = 0;

    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

    var totalLength = input.length * 3 / 4;
    if(input.charAt(input.length - 1) === _keyStr.charAt(64)) {
        totalLength--;
    }
    if(input.charAt(input.length - 2) === _keyStr.charAt(64)) {
        totalLength--;
    }
    var output;
    if (support.uint8array) {
        output = new Uint8Array(totalLength);
    } else {
        output = new Array(totalLength);
    }

    while (i < input.length) {

        enc1 = _keyStr.indexOf(input.charAt(i++));
        enc2 = _keyStr.indexOf(input.charAt(i++));
        enc3 = _keyStr.indexOf(input.charAt(i++));
        enc4 = _keyStr.indexOf(input.charAt(i++));

        chr1 = (enc1 << 2) | (enc2 >> 4);
        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
        chr3 = ((enc3 & 3) << 6) | enc4;

        output[resultIndex++] = chr1;

        if (enc3 !== 64) {
            output[resultIndex++] = chr2;
        }
        if (enc4 !== 64) {
            output[resultIndex++] = chr3;
        }

    }

    return output;
};

},{"./support":27,"./utils":29}],2:[function(require,module,exports){
'use strict';

var external = require("./external");
var DataWorker = require('./stream/DataWorker');
var DataLengthProbe = require('./stream/DataLengthProbe');
var Crc32Probe = require('./stream/Crc32Probe');
var DataLengthProbe = require('./stream/DataLengthProbe');

/**
 * Represent a compressed object, with everything needed to decompress it.
 * @constructor
 * @param {number} compressedSize the size of the data compressed.
 * @param {number} uncompressedSize the size of the data after decompression.
 * @param {number} crc32 the crc32 of the decompressed file.
 * @param {object} compression the type of compression, see lib/compressions.js.
 * @param {String|ArrayBuffer|Uint8Array|Buffer} data the compressed data.
 */
function CompressedObject(compressedSize, uncompressedSize, crc32, compression, data) {
    this.compressedSize = compressedSize;
    this.uncompressedSize = uncompressedSize;
    this.crc32 = crc32;
    this.compression = compression;
    this.compressedContent = data;
}

CompressedObject.prototype = {
    /**
     * Create a worker to get the uncompressed content.
     * @return {GenericWorker} the worker.
     */
    getContentWorker : function () {
        var worker = new DataWorker(external.Promise.resolve(this.compressedContent))
        .pipe(this.compression.uncompressWorker())
        .pipe(new DataLengthProbe("data_length"));

        var that = this;
        worker.on("end", function () {
            if(this.streamInfo['data_length'] !== that.uncompressedSize) {
                throw new Error("Bug : uncompressed data size mismatch");
            }
        });
        return worker;
    },
    /**
     * Create a worker to get the compressed content.
     * @return {GenericWorker} the worker.
     */
    getCompressedWorker : function () {
        return new DataWorker(external.Promise.resolve(this.compressedContent))
        .withStreamInfo("compressedSize", this.compressedSize)
        .withStreamInfo("uncompressedSize", this.uncompressedSize)
        .withStreamInfo("crc32", this.crc32)
        .withStreamInfo("compression", this.compression)
        ;
    }
};

/**
 * Chain the given worker with other workers to compress the content with the
 * given compresion.
 * @param {GenericWorker} uncompressedWorker the worker to pipe.
 * @param {Object} compression the compression object.
 * @param {Object} compressionOptions the options to use when compressing.
 * @return {GenericWorker} the new worker compressing the content.
 */
CompressedObject.createWorkerFrom = function (uncompressedWorker, compression, compressionOptions) {
    return uncompressedWorker
    .pipe(new Crc32Probe())
    .pipe(new DataLengthProbe("uncompressedSize"))
    .pipe(compression.compressWorker(compressionOptions))
    .pipe(new DataLengthProbe("compressedSize"))
    .withStreamInfo("compression", compression);
};

module.exports = CompressedObject;

},{"./external":6,"./stream/Crc32Probe":22,"./stream/DataLengthProbe":23,"./stream/DataWorker":24}],3:[function(require,module,exports){
'use strict';

var GenericWorker = require("./stream/GenericWorker");

exports.STORE = {
    magic: "\x00\x00",
    compressWorker : function (compressionOptions) {
        return new GenericWorker("STORE compression");
    },
    uncompressWorker : function () {
        return new GenericWorker("STORE decompression");
    }
};
exports.DEFLATE = require('./flate');

},{"./flate":7,"./stream/GenericWorker":25}],4:[function(require,module,exports){
'use strict';

var utils = require('./utils');

/**
 * The following functions come from pako, from pako/lib/zlib/crc32.js
 * released under the MIT license, see pako https://github.com/nodeca/pako/
 */

// Use ordinary array, since untyped makes no boost here
function makeTable() {
    var c, table = [];

    for(var n =0; n < 256; n++){
        c = n;
        for(var k =0; k < 8; k++){
            c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
        }
        table[n] = c;
    }

    return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
    var t = crcTable, end = pos + len;

    crc = crc ^ (-1);

    for (var i = pos; i < end; i++ ) {
        crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
    }

    return (crc ^ (-1)); // >>> 0;
}

// That's all for the pako functions.

/**
 * Compute the crc32 of a string.
 * This is almost the same as the function crc32, but for strings. Using the
 * same function for the two use cases leads to horrible performances.
 * @param {Number} crc the starting value of the crc.
 * @param {String} str the string to use.
 * @param {Number} len the length of the string.
 * @param {Number} pos the starting position for the crc32 computation.
 * @return {Number} the computed crc32.
 */
function crc32str(crc, str, len, pos) {
    var t = crcTable, end = pos + len;

    crc = crc ^ (-1);

    for (var i = pos; i < end; i++ ) {
        crc = (crc >>> 8) ^ t[(crc ^ str.charCodeAt(i)) & 0xFF];
    }

    return (crc ^ (-1)); // >>> 0;
}

module.exports = function crc32wrapper(input, crc) {
    if (typeof input === "undefined" || !input.length) {
        return 0;
    }

    var isArray = utils.getTypeOf(input) !== "string";

    if(isArray) {
        return crc32(crc|0, input, input.length, 0);
    } else {
        return crc32str(crc|0, input, input.length, 0);
    }
};
// vim: set shiftwidth=4 softtabstop=4:

},{"./utils":29}],5:[function(require,module,exports){
'use strict';
exports.base64 = false;
exports.binary = false;
exports.dir = false;
exports.createFolders = true;
exports.date = null;
exports.compression = null;
exports.compressionOptions = null;
exports.comment = null;
exports.unixPermissions = null;
exports.dosPermissions = null;

},{}],6:[function(require,module,exports){
'use strict';

var ES6Promise = require("es6-promise").Promise;

/**
 * Let the user use/change some implementations.
 */
module.exports = {
    Promise: ES6Promise
};

},{"es6-promise":37}],7:[function(require,module,exports){
'use strict';
var USE_TYPEDARRAY = (typeof Uint8Array !== 'undefined') && (typeof Uint16Array !== 'undefined') && (typeof Uint32Array !== 'undefined');

var pako = require("pako");
var utils = require("./utils");
var GenericWorker = require("./stream/GenericWorker");

var ARRAY_TYPE = USE_TYPEDARRAY ? "uint8array" : "array";

exports.magic = "\x08\x00";

/**
 * Create a worker that uses pako to inflate/deflate.
 * @constructor
 * @param {String} action the name of the pako function to call : either "Deflate" or "Inflate".
 * @param {Object} options the options to use when (de)compressing.
 */
function FlateWorker(action, options) {
    GenericWorker.call(this, "FlateWorker/" + action);

    this._pako = new pako[action]({
        raw:true,
        level : options.level || -1 // default compression
    });
    // the `meta` object from the last chunk received
    // this allow this worker to pass around metadata
    this.meta = {};

    var self = this;
    this._pako.onData = function(data) {
        self.push({
            data : data,
            meta : self.meta
        });
    };
}

utils.inherits(FlateWorker, GenericWorker);

/**
 * @see GenericWorker.processChunk
 */
FlateWorker.prototype.processChunk = function (chunk) {
    this.meta = chunk.meta;
    this._pako.push(utils.transformTo(ARRAY_TYPE, chunk.data), false);
};

/**
 * @see GenericWorker.flush
 */
FlateWorker.prototype.flush = function () {
    GenericWorker.prototype.flush.call(this);
    this._pako.push([], true);
};
/**
 * @see GenericWorker.cleanUp
 */
FlateWorker.prototype.cleanUp = function () {
    GenericWorker.prototype.cleanUp.call(this);
    this._pako = null;
};

exports.compressWorker = function (compressionOptions) {
    return new FlateWorker("Deflate", compressionOptions);
};
exports.uncompressWorker = function () {
    return new FlateWorker("Inflate", {});
};

},{"./stream/GenericWorker":25,"./utils":29,"pako":38}],8:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var GenericWorker = require('../stream/GenericWorker');
var utf8 = require('../utf8');
var crc32 = require('../crc32');
var signature = require('../signature');

/**
 * Transform an integer into a string in hexadecimal.
 * @private
 * @param {number} dec the number to convert.
 * @param {number} bytes the number of bytes to generate.
 * @returns {string} the result.
 */
var decToHex = function(dec, bytes) {
    var hex = "", i;
    for (i = 0; i < bytes; i++) {
        hex += String.fromCharCode(dec & 0xff);
        dec = dec >>> 8;
    }
    return hex;
};

/**
 * Generate the UNIX part of the external file attributes.
 * @param {Object} unixPermissions the unix permissions or null.
 * @param {Boolean} isDir true if the entry is a directory, false otherwise.
 * @return {Number} a 32 bit integer.
 *
 * adapted from http://unix.stackexchange.com/questions/14705/the-zip-formats-external-file-attribute :
 *
 * TTTTsstrwxrwxrwx0000000000ADVSHR
 * ^^^^____________________________ file type, see zipinfo.c (UNX_*)
 *     ^^^_________________________ setuid, setgid, sticky
 *        ^^^^^^^^^________________ permissions
 *                 ^^^^^^^^^^______ not used ?
 *                           ^^^^^^ DOS attribute bits : Archive, Directory, Volume label, System file, Hidden, Read only
 */
var generateUnixExternalFileAttr = function (unixPermissions, isDir) {

    var result = unixPermissions;
    if (!unixPermissions) {
        // I can't use octal values in strict mode, hence the hexa.
        //  040775 => 0x41fd
        // 0100664 => 0x81b4
        result = isDir ? 0x41fd : 0x81b4;
    }
    return (result & 0xFFFF) << 16;
};

/**
 * Generate the DOS part of the external file attributes.
 * @param {Object} dosPermissions the dos permissions or null.
 * @param {Boolean} isDir true if the entry is a directory, false otherwise.
 * @return {Number} a 32 bit integer.
 *
 * Bit 0     Read-Only
 * Bit 1     Hidden
 * Bit 2     System
 * Bit 3     Volume Label
 * Bit 4     Directory
 * Bit 5     Archive
 */
var generateDosExternalFileAttr = function (dosPermissions, isDir) {

    // the dir flag is already set for compatibility
    return (dosPermissions || 0)  & 0x3F;
};

/**
 * Generate the various parts used in the construction of the final zip file.
 * @param {Object} streamInfo the hash with informations about the compressed file.
 * @param {Boolean} streamedContent is the content streamed ?
 * @param {Boolean} streamingEnded is the stream finished ?
 * @param {number} offset the current offset from the start of the zip file.
 * @param {String} platform let's pretend we are this platform (change platform dependents fields)
 * @param {Function} encodeFileName the function to encode the file name / comment.
 * @return {Object} the zip parts.
 */
var generateZipParts = function(streamInfo, streamedContent, streamingEnded, offset, platform, encodeFileName) {
    var file = streamInfo['file'],
    compression = streamInfo['compression'],
    useCustomEncoding = encodeFileName !== utf8.utf8encode,
    encodedFileName = utils.transformTo("string", encodeFileName(file.name)),
    utfEncodedFileName = utils.transformTo("string", utf8.utf8encode(file.name)),
    comment = file.comment,
    encodedComment = utils.transformTo("string", encodeFileName(comment)),
    utfEncodedComment = utils.transformTo("string", utf8.utf8encode(comment)),
    useUTF8ForFileName = utfEncodedFileName.length !== file.name.length,
    useUTF8ForComment = utfEncodedComment.length !== comment.length,
    dosTime,
    dosDate,
    extraFields = "",
    unicodePathExtraField = "",
    unicodeCommentExtraField = "",
    dir = file.dir,
    date = file.date;


    var dataInfo = {
        crc32 : 0,
        compressedSize : 0,
        uncompressedSize : 0
    };

    // if the content is streamed, the sizes/crc32 are only available AFTER
    // the end of the stream.
    if (!streamedContent || streamingEnded) {
        dataInfo.crc32 = streamInfo['crc32'];
        dataInfo.compressedSize = streamInfo['compressedSize'];
        dataInfo.uncompressedSize = streamInfo['uncompressedSize'];
    }

    var bitflag = 0;
    if (streamedContent) {
        bitflag |= 0x0008;
    }
    if (!useCustomEncoding && (useUTF8ForFileName || useUTF8ForComment)) {
        bitflag |= 0x0800;
    }


    var extFileAttr = 0;
    var versionMadeBy = 0;
    if (dir) {
        // dos or unix, we set the dos dir flag
        extFileAttr |= 0x00010;
    }
    if(platform === "UNIX") {
        versionMadeBy = 0x031E; // UNIX, version 3.0
        extFileAttr |= generateUnixExternalFileAttr(file.unixPermissions, dir);
    } else { // DOS or other, fallback to DOS
        versionMadeBy = 0x0014; // DOS, version 2.0
        extFileAttr |= generateDosExternalFileAttr(file.dosPermissions, dir);
    }

    // date
    // @see http://www.delorie.com/djgpp/doc/rbinter/it/52/13.html
    // @see http://www.delorie.com/djgpp/doc/rbinter/it/65/16.html
    // @see http://www.delorie.com/djgpp/doc/rbinter/it/66/16.html

    dosTime = date.getUTCHours();
    dosTime = dosTime << 6;
    dosTime = dosTime | date.getUTCMinutes();
    dosTime = dosTime << 5;
    dosTime = dosTime | date.getUTCSeconds() / 2;

    dosDate = date.getUTCFullYear() - 1980;
    dosDate = dosDate << 4;
    dosDate = dosDate | (date.getUTCMonth() + 1);
    dosDate = dosDate << 5;
    dosDate = dosDate | date.getUTCDate();

    if (useUTF8ForFileName) {
        // set the unicode path extra field. unzip needs at least one extra
        // field to correctly handle unicode path, so using the path is as good
        // as any other information. This could improve the situation with
        // other archive managers too.
        // This field is usually used without the utf8 flag, with a non
        // unicode path in the header (winrar, winzip). This helps (a bit)
        // with the messy Windows' default compressed folders feature but
        // breaks on p7zip which doesn't seek the unicode path extra field.
        // So for now, UTF-8 everywhere !
        unicodePathExtraField =
            // Version
            decToHex(1, 1) +
            // NameCRC32
            decToHex(crc32(encodedFileName), 4) +
            // UnicodeName
            utfEncodedFileName;

        extraFields +=
            // Info-ZIP Unicode Path Extra Field
            "\x75\x70" +
            // size
            decToHex(unicodePathExtraField.length, 2) +
            // content
            unicodePathExtraField;
    }

    if(useUTF8ForComment) {

        unicodeCommentExtraField =
            // Version
            decToHex(1, 1) +
            // CommentCRC32
            decToHex(crc32(encodedComment), 4) +
            // UnicodeName
            utfEncodedComment;

        extraFields +=
            // Info-ZIP Unicode Path Extra Field
            "\x75\x63" +
            // size
            decToHex(unicodeCommentExtraField.length, 2) +
            // content
            unicodeCommentExtraField;
    }

    var header = "";

    // version needed to extract
    header += "\x0A\x00";
    // general purpose bit flag
    // set bit 11 if utf8
    header += decToHex(bitflag, 2);
    // compression method
    header += compression.magic;
    // last mod file time
    header += decToHex(dosTime, 2);
    // last mod file date
    header += decToHex(dosDate, 2);
    // crc-32
    header += decToHex(dataInfo.crc32, 4);
    // compressed size
    header += decToHex(dataInfo.compressedSize, 4);
    // uncompressed size
    header += decToHex(dataInfo.uncompressedSize, 4);
    // file name length
    header += decToHex(encodedFileName.length, 2);
    // extra field length
    header += decToHex(extraFields.length, 2);


    var fileRecord = signature.LOCAL_FILE_HEADER + header + encodedFileName + extraFields;

    var dirRecord = signature.CENTRAL_FILE_HEADER +
        // version made by (00: DOS)
        decToHex(versionMadeBy, 2) +
        // file header (common to file and central directory)
        header +
        // file comment length
        decToHex(encodedComment.length, 2) +
        // disk number start
        "\x00\x00" +
        // internal file attributes TODO
        "\x00\x00" +
        // external file attributes
        decToHex(extFileAttr, 4) +
        // relative offset of local header
        decToHex(offset, 4) +
        // file name
        encodedFileName +
        // extra field
        extraFields +
        // file comment
        encodedComment;

    return {
        fileRecord: fileRecord,
        dirRecord: dirRecord
    };
};

/**
 * Generate the EOCD record.
 * @param {Number} entriesCount the number of entries in the zip file.
 * @param {Number} centralDirLength the length (in bytes) of the central dir.
 * @param {Number} localDirLength the length (in bytes) of the local dir.
 * @param {String} comment the zip file comment as a binary string.
 * @param {Function} encodeFileName the function to encode the comment.
 * @return {String} the EOCD record.
 */
var generateCentralDirectoryEnd = function (entriesCount, centralDirLength, localDirLength, comment, encodeFileName) {
    var dirEnd = "";
    var encodedComment = utils.transformTo("string", encodeFileName(comment));

    // end of central dir signature
    dirEnd = signature.CENTRAL_DIRECTORY_END +
        // number of this disk
        "\x00\x00" +
        // number of the disk with the start of the central directory
        "\x00\x00" +
        // total number of entries in the central directory on this disk
        decToHex(entriesCount, 2) +
        // total number of entries in the central directory
        decToHex(entriesCount, 2) +
        // size of the central directory   4 bytes
        decToHex(centralDirLength, 4) +
        // offset of start of central directory with respect to the starting disk number
        decToHex(localDirLength, 4) +
        // .ZIP file comment length
        decToHex(encodedComment.length, 2) +
        // .ZIP file comment
        encodedComment;

    return dirEnd;
};

/**
 * Generate data descriptors for a file entry.
 * @param {Object} streamInfo the hash generated by a worker, containing informations
 * on the file entry.
 * @return {String} the data descriptors.
 */
var generateDataDescriptors = function (streamInfo) {
    var descriptor = "";
    descriptor = signature.DATA_DESCRIPTOR +
        // crc-32                          4 bytes
        decToHex(streamInfo['crc32'], 4) +
        // compressed size                 4 bytes
        decToHex(streamInfo['compressedSize'], 4) +
        // uncompressed size               4 bytes
        decToHex(streamInfo['uncompressedSize'], 4);

    return descriptor;
};


/**
 * A worker to concatenate other workers to create a zip file.
 * @param {Boolean} streamFiles `true` to stream the content of the files,
 * `false` to accumulate it.
 * @param {String} comment the comment to use.
 * @param {String} platform the platform to use, "UNIX" or "DOS".
 * @param {Function} encodeFileName the function to encode file names and comments.
 */
function ZipFileWorker(streamFiles, comment, platform, encodeFileName) {
    GenericWorker.call(this, "ZipFileWorker");
    // The number of bytes written so far. This doesn't count accumulated chunks.
    this.bytesWritten = 0;
    // The comment of the zip file
    this.zipComment = comment;
    // The platform "generating" the zip file.
    this.zipPlatform = platform;
    // the function to encode file names and comments.
    this.encodeFileName = encodeFileName;
    // Should we stream the content of the files ?
    this.streamFiles = streamFiles;
    // If `streamFiles` is false, we will need to accumulate the content of the
    // files to calculate sizes / crc32 (and write them *before* the content).
    // This boolean indicates if we are accumulating chunks (it will change a lot
    // during the lifetime of this worker).
    this.accumulate = false;
    // The buffer receiving chunks when accumulating content.
    this.contentBuffer = [];
    // The list of generated directory records.
    this.dirRecords = [];
    // The offset (in bytes) from the beginning of the zip file for the current source.
    this.currentSourceOffset = 0;
    // The total number of entries in this zip file.
    this.entriesCount = 0;
    // the name of the file currently being added, null when handling the end of the zip file.
    // Used for the emited metadata.
    this.currentFile = null;



    this._sources = [];
}
utils.inherits(ZipFileWorker, GenericWorker);

/**
 * @see GenericWorker.push
 */
ZipFileWorker.prototype.push = function (chunk) {

    var currentFilePercent = chunk.meta.percent || 0;
    var entriesCount = this.entriesCount;
    var remainingFiles = this._sources.length;

    if(this.accumulate) {
        this.contentBuffer.push(chunk);
    } else {
        this.bytesWritten += chunk.data.length;

        GenericWorker.prototype.push.call(this, {
            data : chunk.data,
            meta : {
                currentFile : this.currentFile,
                percent : entriesCount ? (currentFilePercent + 100 * (entriesCount - remainingFiles - 1)) / entriesCount : 100
            }
        });
    }
};

/**
 * The worker started a new source (an other worker).
 * @param {Object} streamInfo the streamInfo object from the new source.
 */
ZipFileWorker.prototype.openedSource = function (streamInfo) {
    this.currentSourceOffset = this.bytesWritten;
    this.currentFile = streamInfo['file'].name;

    // don't stream folders (because they don't have any content)
    if(this.streamFiles && !streamInfo['file'].dir) {
        var record = generateZipParts(streamInfo, this.streamFiles, false, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);
        this.push({
            data : record.fileRecord,
            meta : {percent:0}
        });
    } else {
        // we need to wait for the whole file before pushing anything
        this.accumulate = true;
    }
};

/**
 * The worker finished a source (an other worker).
 * @param {Object} streamInfo the streamInfo object from the finished source.
 */
ZipFileWorker.prototype.closedSource = function (streamInfo) {
    this.accumulate = false;
    var record = generateZipParts(streamInfo, this.streamFiles, true, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);

    this.dirRecords.push(record.dirRecord);
    if(this.streamFiles && !streamInfo['file'].dir) {
        // after the streamed file, we put data descriptors
        this.push({
            data : generateDataDescriptors(streamInfo),
            meta : {percent:100}
        });
    } else {
        // the content wasn't streamed, we need to push everything now
        // first the file record, then the content
        this.push({
            data : record.fileRecord,
            meta : {percent:0}
        });
        while(this.contentBuffer.length) {
            this.push(this.contentBuffer.shift());
        }
    }
    this.currentFile = null;
};

/**
 * @see GenericWorker.flush
 */
ZipFileWorker.prototype.flush = function () {

    var localDirLength = this.bytesWritten;
    for(var i = 0; i < this.dirRecords.length; i++) {
        this.push({
            data : this.dirRecords[i],
            meta : {percent:100}
        });
    }
    var centralDirLength = this.bytesWritten - localDirLength;

    var dirEnd = generateCentralDirectoryEnd(this.dirRecords.length, centralDirLength, localDirLength, this.zipComment, this.encodeFileName);

    this.push({
        data : dirEnd,
        meta : {percent:100}
    });
};

/**
 * Prepare the next source to be read.
 */
ZipFileWorker.prototype.prepareNextSource = function () {
    this.previous = this._sources.shift();
    this.openedSource(this.previous.streamInfo);
    if (this.isPaused) {
        this.previous.pause();
    } else {
        this.previous.resume();
    }
};

/**
 * @see GenericWorker.registerPrevious
 */
ZipFileWorker.prototype.registerPrevious = function (previous) {
    this._sources.push(previous);
    var self = this;

    previous.on('data', function (chunk) {
        self.processChunk(chunk);
    });
    previous.on('end', function () {
        self.closedSource(self.previous.streamInfo);
        if(self._sources.length) {
            self.prepareNextSource();
        } else {
            self.end();
        }
    });
    previous.on('error', function (e) {
        self.error(e);
    });
    return this;
};

/**
 * @see GenericWorker.resume
 */
ZipFileWorker.prototype.resume = function () {
    if(!GenericWorker.prototype.resume.call(this)) {
        return false;
    }

    if (!this.previous && this._sources.length) {
        this.prepareNextSource();
        return true;
    }
    if (!this.previous && !this._sources.length && !this.generatedError) {
        this.end();
        return true;
    }
};

/**
 * @see GenericWorker.error
 */
ZipFileWorker.prototype.error = function (e) {
    var sources = this._sources;
    if(!GenericWorker.prototype.error.call(this, e)) {
        return false;
    }
    for(var i = 0; i < sources.length; i++) {
        try {
            sources[i].error(e);
        } catch(e) {
            // the `error` exploded, nothing to do
        }
    }
    return true;
};

/**
 * @see GenericWorker.lock
 */
ZipFileWorker.prototype.lock = function () {
    GenericWorker.prototype.lock.call(this);
    var sources = this._sources;
    for(var i = 0; i < sources.length; i++) {
        sources[i].lock();
    }
};

module.exports = ZipFileWorker;

},{"../crc32":4,"../signature":20,"../stream/GenericWorker":25,"../utf8":28,"../utils":29}],9:[function(require,module,exports){
'use strict';

var compressions = require('../compressions');
var ZipFileWorker = require('./ZipFileWorker');

/**
 * Find the compression to use.
 * @param {String} fileCompression the compression defined at the file level, if any.
 * @param {String} zipCompression the compression defined at the load() level.
 * @return {Object} the compression object to use.
 */
var getCompression = function (fileCompression, zipCompression) {

    var compressionName = fileCompression || zipCompression;
    var compression = compressions[compressionName];
    if (!compression) {
        throw new Error(compressionName + " is not a valid compression method !");
    }
    return compression;
};

/**
 * Create a worker to generate a zip file.
 * @param {JSZip} zip the JSZip instance at the right root level.
 * @param {Object} options to generate the zip file.
 * @param {String} comment the comment to use.
 */
exports.generateWorker = function (zip, options, comment) {

    var zipFileWorker = new ZipFileWorker(options.streamFiles, comment, options.platform, options.encodeFileName);
    var entriesCount = 0;
    try {

        zip.forEach(function (relativePath, file) {
            entriesCount++;
            var compression = getCompression(file.options.compression, options.compression);
            var compressionOptions = file.options.compressionOptions || options.compressionOptions || {};
            var dir = file.dir, date = file.date;

            file._compressWorker(compression, compressionOptions)
            .withStreamInfo("file", {
                name : relativePath,
                dir : dir,
                date : date,
                comment : file.comment || "",
                unixPermissions : file.unixPermissions,
                dosPermissions : file.dosPermissions
            })
            .pipe(zipFileWorker);
        });
        zipFileWorker.entriesCount = entriesCount;
    } catch (e) {
        zipFileWorker.error(e);
    }

    return zipFileWorker;
};

},{"../compressions":3,"./ZipFileWorker":8}],10:[function(require,module,exports){
'use strict';

/**
 * Representation a of zip file in js
 * @constructor
 */
function JSZip() {
    // if this constructor is used without `new`, it adds `new` before itself:
    if(!(this instanceof JSZip)) {
        return new JSZip();
    }

    if(arguments.length) {
        throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");
    }

    // object containing the files :
    // {
    //   "folder/" : {...},
    //   "folder/data.txt" : {...}
    // }
    this.files = {};

    this.comment = null;

    // Where we are in the hierarchy
    this.root = "";
    this.clone = function() {
        var newObj = new JSZip();
        for (var i in this) {
            if (typeof this[i] !== "function") {
                newObj[i] = this[i];
            }
        }
        return newObj;
    };
}
JSZip.prototype = require('./object');
JSZip.prototype.loadAsync = require('./load');
JSZip.support = require('./support');
JSZip.defaults = require('./defaults');

JSZip.loadAsync = function (content, options) {
    return new JSZip().loadAsync(content, options);
};

JSZip.external = require("./external");
module.exports = JSZip;

},{"./defaults":5,"./external":6,"./load":11,"./object":13,"./support":27}],11:[function(require,module,exports){
'use strict';
var utils = require('./utils');
var external = require("./external");
var utf8 = require('./utf8');
var utils = require('./utils');
var ZipEntries = require('./zipEntries');
var Crc32Probe = require('./stream/Crc32Probe');
var nodejsUtils = require("./nodejsUtils");

/**
 * Check the CRC32 of an entry.
 * @param {ZipEntry} zipEntry the zip entry to check.
 * @return {Promise} the result.
 */
function checkEntryCRC32(zipEntry) {
    return new external.Promise(function (resolve, reject) {
        var worker = zipEntry.decompressed.getContentWorker().pipe(new Crc32Probe());
        worker.on("error", function (e) {
            reject(e);
        })
        .on("end", function () {
            if (worker.streamInfo.crc32 !== zipEntry.decompressed.crc32) {
                reject(new Error("Corrupted zip : CRC32 mismatch"));
            } else {
                resolve();
            }
        })
        .resume();
    });
}

module.exports = function(data, options) {
    var zip = this;
    options = utils.extend(options || {}, {
        base64: false,
        checkCRC32: false,
        optimizedBinaryString: false,
        createFolders: false,
        decodeFileName: utf8.utf8decode
    });

    if (nodejsUtils.isNode && nodejsUtils.isStream(data)) {
        return external.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file."));
    }

    return utils.prepareContent("the loaded zip file", data, true, options.optimizedBinaryString, options.base64)
    .then(function(data) {
        var zipEntries = new ZipEntries(options);
        zipEntries.load(data);
        return zipEntries;
    }).then(function checkCRC32(zipEntries) {
        var promises = [external.Promise.resolve(zipEntries)];
        var files = zipEntries.files;
        if (options.checkCRC32) {
            for (var i = 0; i < files.length; i++) {
                promises.push(checkEntryCRC32(files[i]));
            }
        }
        return external.Promise.all(promises);
    }).then(function addFiles(results) {
        var zipEntries = results.shift();
        var files = zipEntries.files;
        for (var i = 0; i < files.length; i++) {
            var input = files[i];
            zip.file(input.fileNameStr, input.decompressed, {
                binary: true,
                optimizedBinaryString: true,
                date: input.date,
                dir: input.dir,
                comment : input.fileCommentStr.length ? input.fileCommentStr : null,
                unixPermissions : input.unixPermissions,
                dosPermissions : input.dosPermissions,
                createFolders: options.createFolders
            });
        }
        if (zipEntries.zipComment.length) {
            zip.comment = zipEntries.zipComment;
        }

        return zip;
    });
};

},{"./external":6,"./nodejsUtils":12,"./stream/Crc32Probe":22,"./utf8":28,"./utils":29,"./zipEntries":30}],12:[function(require,module,exports){
(function (Buffer){
'use strict';

module.exports = {
    /**
     * True if this is running in Nodejs, will be undefined in a browser.
     * In a browser, browserify won't include this file and the whole module
     * will be resolved an empty object.
     */
    isNode : typeof Buffer !== "undefined",
    /**
     * Create a new nodejs Buffer.
     * @param {Object} data the data to pass to the constructor.
     * @param {String} encoding the encoding to use.
     * @return {Buffer} a new Buffer.
     */
    newBuffer : function(data, encoding){
        return new Buffer(data, encoding);
    },
    /**
     * Find out if an object is a Buffer.
     * @param {Object} b the object to test.
     * @return {Boolean} true if the object is a Buffer, false otherwise.
     */
    isBuffer : function(b){
        return Buffer.isBuffer(b);
    },

    isStream : function (obj) {
        return obj &&
            typeof obj.on === "function" &&
            typeof obj.pause === "function" &&
            typeof obj.resume === "function";
    }
};

}).call(this,(typeof Buffer !== "undefined" ? Buffer : undefined))
},{}],13:[function(require,module,exports){
'use strict';
var utf8 = require('./utf8');
var utils = require('./utils');
var GenericWorker = require('./stream/GenericWorker');
var StreamHelper = require('./stream/StreamHelper');
var defaults = require('./defaults');
var CompressedObject = require('./compressedObject');
var ZipObject = require('./zipObject');
var generate = require("./generate");
var nodejsUtils = require("./nodejsUtils");
var NodejsStreamInputAdapter = require("./nodejs/NodejsStreamInputAdapter");


/**
 * Add a file in the current folder.
 * @private
 * @param {string} name the name of the file
 * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data of the file
 * @param {Object} o the options of the file
 * @return {Object} the new file.
 */
var fileAdd = function(name, data, o) {
    // be sure sub folders exist
    var dataType = utils.getTypeOf(data),
        parent;


    /*
     * Correct options.
     */

    o = utils.extend(o || {}, defaults);
    o.date = o.date || new Date();
    if (o.compression !== null) {
        o.compression = o.compression.toUpperCase();
    }

    if (typeof o.unixPermissions === "string") {
        o.unixPermissions = parseInt(o.unixPermissions, 8);
    }

    // UNX_IFDIR  0040000 see zipinfo.c
    if (o.unixPermissions && (o.unixPermissions & 0x4000)) {
        o.dir = true;
    }
    // Bit 4    Directory
    if (o.dosPermissions && (o.dosPermissions & 0x0010)) {
        o.dir = true;
    }

    if (o.dir) {
        name = forceTrailingSlash(name);
    }
    if (o.createFolders && (parent = parentFolder(name))) {
        folderAdd.call(this, parent, true);
    }

    var isUnicodeString = dataType === "string" && o.binary === false && o.base64 === false;
    o.binary = !isUnicodeString;


    var isCompressedEmpty = (data instanceof CompressedObject) && data.uncompressedSize === 0;

    if (isCompressedEmpty || o.dir || !data || data.length === 0) {
        o.base64 = false;
        o.binary = true;
        data = "";
        o.compression = "STORE";
        dataType = "string";
    }

    /*
     * Convert content to fit.
     */

    var zipObjectContent = null;
    if (data instanceof CompressedObject || data instanceof GenericWorker) {
        zipObjectContent = data;
    } else if (nodejsUtils.isNode && nodejsUtils.isStream(data)) {
        zipObjectContent = new NodejsStreamInputAdapter(name, data);
    } else {
        zipObjectContent = utils.prepareContent(name, data, o.binary, o.optimizedBinaryString, o.base64);
    }

    var object = new ZipObject(name, zipObjectContent, o);
    this.files[name] = object;
    /*
    TODO: we can't throw an exception because we have async promises
    (we can have a promise of a Date() for example) but returning a
    promise is useless because file(name, data) returns the JSZip
    object for chaining. Should we break that to allow the user
    to catch the error ?

    return external.Promise.resolve(zipObjectContent)
    .then(function () {
        return object;
    });
    */
};

/**
 * Find the parent folder of the path.
 * @private
 * @param {string} path the path to use
 * @return {string} the parent folder, or ""
 */
var parentFolder = function (path) {
    if (path.slice(-1) === '/') {
        path = path.substring(0, path.length - 1);
    }
    var lastSlash = path.lastIndexOf('/');
    return (lastSlash > 0) ? path.substring(0, lastSlash) : "";
};

/**
 * Returns the path with a slash at the end.
 * @private
 * @param {String} path the path to check.
 * @return {String} the path with a trailing slash.
 */
var forceTrailingSlash = function(path) {
    // Check the name ends with a /
    if (path.slice(-1) !== "/") {
        path += "/"; // IE doesn't like substr(-1)
    }
    return path;
};

/**
 * Add a (sub) folder in the current folder.
 * @private
 * @param {string} name the folder's name
 * @param {boolean=} [createFolders] If true, automatically create sub
 *  folders. Defaults to false.
 * @return {Object} the new folder.
 */
var folderAdd = function(name, createFolders) {
    createFolders = (typeof createFolders !== 'undefined') ? createFolders : defaults.createFolders;

    name = forceTrailingSlash(name);

    // Does this folder already exist?
    if (!this.files[name]) {
        fileAdd.call(this, name, null, {
            dir: true,
            createFolders: createFolders
        });
    }
    return this.files[name];
};

/**
* Cross-window, cross-Node-context regular expression detection
* @param  {Object}  object Anything
* @return {Boolean}        true if the object is a regular expression,
* false otherwise
*/
function isRegExp(object) {
    return Object.prototype.toString.call(object) === "[object RegExp]";
}

// return the actual prototype of JSZip
var out = {
    /**
     * @see loadAsync
     */
    load: function() {
        throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
    },


    /**
     * Call a callback function for each entry at this folder level.
     * @param {Function} cb the callback function:
     * function (relativePath, file) {...}
     * It takes 2 arguments : the relative path and the file.
     */
    forEach: function(cb) {
        var filename, relativePath, file;
        for (filename in this.files) {
            if (!this.files.hasOwnProperty(filename)) {
                continue;
            }
            file = this.files[filename];
            relativePath = filename.slice(this.root.length, filename.length);
            if (relativePath && filename.slice(0, this.root.length) === this.root) { // the file is in the current root
                cb(relativePath, file); // TODO reverse the parameters ? need to be clean AND consistent with the filter search fn...
            }
        }
    },

    /**
     * Filter nested files/folders with the specified function.
     * @param {Function} search the predicate to use :
     * function (relativePath, file) {...}
     * It takes 2 arguments : the relative path and the file.
     * @return {Array} An array of matching elements.
     */
    filter: function(search) {
        var result = [];
        this.forEach(function (relativePath, entry) {
            if (search(relativePath, entry)) { // the file matches the function
                result.push(entry);
            }

        });
        return result;
    },

    /**
     * Add a file to the zip file, or search a file.
     * @param   {string|RegExp} name The name of the file to add (if data is defined),
     * the name of the file to find (if no data) or a regex to match files.
     * @param   {String|ArrayBuffer|Uint8Array|Buffer} data  The file data, either raw or base64 encoded
     * @param   {Object} o     File options
     * @return  {JSZip|Object|Array} this JSZip object (when adding a file),
     * a file (when searching by string) or an array of files (when searching by regex).
     */
    file: function(name, data, o) {
        if (arguments.length === 1) {
            if (isRegExp(name)) {
                var regexp = name;
                return this.filter(function(relativePath, file) {
                    return !file.dir && regexp.test(relativePath);
                });
            }
            else { // text
                var obj = this.files[this.root + name];
                if (obj && !obj.dir) {
                    return obj;
                } else {
                    return null;
                }
            }
        }
        else { // more than one argument : we have data !
            name = this.root + name;
            fileAdd.call(this, name, data, o);
        }
        return this;
    },

    /**
     * Add a directory to the zip file, or search.
     * @param   {String|RegExp} arg The name of the directory to add, or a regex to search folders.
     * @return  {JSZip} an object with the new directory as the root, or an array containing matching folders.
     */
    folder: function(arg) {
        if (!arg) {
            return this;
        }

        if (isRegExp(arg)) {
            return this.filter(function(relativePath, file) {
                return file.dir && arg.test(relativePath);
            });
        }

        // else, name is a new folder
        var name = this.root + arg;
        var newFolder = folderAdd.call(this, name);

        // Allow chaining by returning a new object with this folder as the root
        var ret = this.clone();
        ret.root = newFolder.name;
        return ret;
    },

    /**
     * Delete a file, or a directory and all sub-files, from the zip
     * @param {string} name the name of the file to delete
     * @return {JSZip} this JSZip object
     */
    remove: function(name) {
        name = this.root + name;
        var file = this.files[name];
        if (!file) {
            // Look for any folders
            if (name.slice(-1) !== "/") {
                name += "/";
            }
            file = this.files[name];
        }

        if (file && !file.dir) {
            // file
            delete this.files[name];
        } else {
            // maybe a folder, delete recursively
            var kids = this.filter(function(relativePath, file) {
                return file.name.slice(0, name.length) === name;
            });
            for (var i = 0; i < kids.length; i++) {
                delete this.files[kids[i].name];
            }
        }

        return this;
    },

    /**
     * Generate the complete zip file
     * @param {Object} options the options to generate the zip file :
     * - compression, "STORE" by default.
     * - type, "base64" by default. Values are : string, base64, uint8array, arraybuffer, blob.
     * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the zip file
     */
    generate: function(options) {
        throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
    },

    /**
     * Generate the complete zip file as an internal stream.
     * @param {Object} options the options to generate the zip file :
     * - compression, "STORE" by default.
     * - type, "base64" by default. Values are : string, base64, uint8array, arraybuffer, blob.
     * @return {StreamHelper} the streamed zip file.
     */
    generateInternalStream: function(options) {
      var worker, opts = {};
      try {
          opts = utils.extend(options || {}, {
              streamFiles: false,
              compression: "STORE",
              compressionOptions : null,
              type: "",
              platform: "DOS",
              comment: null,
              mimeType: 'application/zip',
              encodeFileName: utf8.utf8encode
          });

          opts.type = opts.type.toLowerCase();
          opts.compression = opts.compression.toUpperCase();

          // "binarystring" is prefered but the internals use "string".
          if(opts.type === "binarystring") {
            opts.type = "string";
          }

          if (!opts.type) {
            throw new Error("No output type specified.");
          }

          utils.checkSupport(opts.type);

          // accept nodejs `process.platform`
          if(
              options.platform === 'darwin' ||
              options.platform === 'freebsd' ||
              options.platform === 'linux' ||
              options.platform === 'sunos'
          ) {
              options.platform = "UNIX";
          }
          if (options.platform === 'win32') {
              options.platform = "DOS";
          }

          var comment = opts.comment || this.comment || "";
          worker = generate.generateWorker(this, opts, comment);
      } catch (e) {
        worker = new GenericWorker("error");
        worker.error(e);
      }
      return new StreamHelper(worker, opts.type || "string", opts.mimeType);
    },
    /**
     * Generate the complete zip file asynchronously.
     * @see generateInternalStream
     */
    generateAsync: function(options, onUpdate) {
        return this.generateInternalStream(options).accumulate(onUpdate);
    },
    /**
     * Generate the complete zip file asynchronously.
     * @see generateInternalStream
     */
    generateNodeStream: function(options, onUpdate) {
        options = options || {};
        if (!options.type) {
            options.type = "nodebuffer";
        }
        return this.generateInternalStream(options).toNodejsStream(onUpdate);
    }
};
module.exports = out;

},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":35,"./nodejsUtils":12,"./stream/GenericWorker":25,"./stream/StreamHelper":26,"./utf8":28,"./utils":29,"./zipObject":32}],14:[function(require,module,exports){
'use strict';
var DataReader = require('./DataReader');
var utils = require('../utils');

function ArrayReader(data) {
    DataReader.call(this, data);
	for(var i = 0; i < this.data.length; i++) {
		data[i] = data[i] & 0xFF;
	}
}
utils.inherits(ArrayReader, DataReader);
/**
 * @see DataReader.byteAt
 */
ArrayReader.prototype.byteAt = function(i) {
    return this.data[this.zero + i];
};
/**
 * @see DataReader.lastIndexOfSignature
 */
ArrayReader.prototype.lastIndexOfSignature = function(sig) {
    var sig0 = sig.charCodeAt(0),
        sig1 = sig.charCodeAt(1),
        sig2 = sig.charCodeAt(2),
        sig3 = sig.charCodeAt(3);
    for (var i = this.length - 4; i >= 0; --i) {
        if (this.data[i] === sig0 && this.data[i + 1] === sig1 && this.data[i + 2] === sig2 && this.data[i + 3] === sig3) {
            return i - this.zero;
        }
    }

    return -1;
};
/**
 * @see DataReader.readAndCheckSignature
 */
ArrayReader.prototype.readAndCheckSignature = function (sig) {
    var sig0 = sig.charCodeAt(0),
        sig1 = sig.charCodeAt(1),
        sig2 = sig.charCodeAt(2),
        sig3 = sig.charCodeAt(3),
        data = this.readData(4);
    return sig0 === data[0] && sig1 === data[1] && sig2 === data[2] && sig3 === data[3];
};
/**
 * @see DataReader.readData
 */
ArrayReader.prototype.readData = function(size) {
    this.checkOffset(size);
    if(size === 0) {
        return [];
    }
    var result = this.data.slice(this.zero + this.index, this.zero + this.index + size);
    this.index += size;
    return result;
};
module.exports = ArrayReader;

},{"../utils":29,"./DataReader":15}],15:[function(require,module,exports){
'use strict';
var utils = require('../utils');

function DataReader(data) {
    this.data = data; // type : see implementation
    this.length = data.length;
    this.index = 0;
    this.zero = 0;
}
DataReader.prototype = {
    /**
     * Check that the offset will not go too far.
     * @param {string} offset the additional offset to check.
     * @throws {Error} an Error if the offset is out of bounds.
     */
    checkOffset: function(offset) {
        this.checkIndex(this.index + offset);
    },
    /**
     * Check that the specifed index will not be too far.
     * @param {string} newIndex the index to check.
     * @throws {Error} an Error if the index is out of bounds.
     */
    checkIndex: function(newIndex) {
        if (this.length < this.zero + newIndex || newIndex < 0) {
            throw new Error("End of data reached (data length = " + this.length + ", asked index = " + (newIndex) + "). Corrupted zip ?");
        }
    },
    /**
     * Change the index.
     * @param {number} newIndex The new index.
     * @throws {Error} if the new index is out of the data.
     */
    setIndex: function(newIndex) {
        this.checkIndex(newIndex);
        this.index = newIndex;
    },
    /**
     * Skip the next n bytes.
     * @param {number} n the number of bytes to skip.
     * @throws {Error} if the new index is out of the data.
     */
    skip: function(n) {
        this.setIndex(this.index + n);
    },
    /**
     * Get the byte at the specified index.
     * @param {number} i the index to use.
     * @return {number} a byte.
     */
    byteAt: function(i) {
        // see implementations
    },
    /**
     * Get the next number with a given byte size.
     * @param {number} size the number of bytes to read.
     * @return {number} the corresponding number.
     */
    readInt: function(size) {
        var result = 0,
            i;
        this.checkOffset(size);
        for (i = this.index + size - 1; i >= this.index; i--) {
            result = (result << 8) + this.byteAt(i);
        }
        this.index += size;
        return result;
    },
    /**
     * Get the next string with a given byte size.
     * @param {number} size the number of bytes to read.
     * @return {string} the corresponding string.
     */
    readString: function(size) {
        return utils.transformTo("string", this.readData(size));
    },
    /**
     * Get raw data without conversion, <size> bytes.
     * @param {number} size the number of bytes to read.
     * @return {Object} the raw data, implementation specific.
     */
    readData: function(size) {
        // see implementations
    },
    /**
     * Find the last occurence of a zip signature (4 bytes).
     * @param {string} sig the signature to find.
     * @return {number} the index of the last occurence, -1 if not found.
     */
    lastIndexOfSignature: function(sig) {
        // see implementations
    },
    /**
     * Read the signature (4 bytes) at the current position and compare it with sig.
     * @param {string} sig the expected signature
     * @return {boolean} true if the signature matches, false otherwise.
     */
    readAndCheckSignature: function(sig) {
        // see implementations
    },
    /**
     * Get the next date.
     * @return {Date} the date.
     */
    readDate: function() {
        var dostime = this.readInt(4);
        return new Date(Date.UTC(
        ((dostime >> 25) & 0x7f) + 1980, // year
        ((dostime >> 21) & 0x0f) - 1, // month
        (dostime >> 16) & 0x1f, // day
        (dostime >> 11) & 0x1f, // hour
        (dostime >> 5) & 0x3f, // minute
        (dostime & 0x1f) << 1)); // second
    }
};
module.exports = DataReader;

},{"../utils":29}],16:[function(require,module,exports){
'use strict';
var Uint8ArrayReader = require('./Uint8ArrayReader');
var utils = require('../utils');

function NodeBufferReader(data) {
    Uint8ArrayReader.call(this, data);
}
utils.inherits(NodeBufferReader, Uint8ArrayReader);

/**
 * @see DataReader.readData
 */
NodeBufferReader.prototype.readData = function(size) {
    this.checkOffset(size);
    var result = this.data.slice(this.zero + this.index, this.zero + this.index + size);
    this.index += size;
    return result;
};
module.exports = NodeBufferReader;

},{"../utils":29,"./Uint8ArrayReader":18}],17:[function(require,module,exports){
'use strict';
var DataReader = require('./DataReader');
var utils = require('../utils');

function StringReader(data) {
    DataReader.call(this, data);
}
utils.inherits(StringReader, DataReader);
/**
 * @see DataReader.byteAt
 */
StringReader.prototype.byteAt = function(i) {
    return this.data.charCodeAt(this.zero + i);
};
/**
 * @see DataReader.lastIndexOfSignature
 */
StringReader.prototype.lastIndexOfSignature = function(sig) {
    return this.data.lastIndexOf(sig) - this.zero;
};
/**
 * @see DataReader.readAndCheckSignature
 */
StringReader.prototype.readAndCheckSignature = function (sig) {
    var data = this.readData(4);
    return sig === data;
};
/**
 * @see DataReader.readData
 */
StringReader.prototype.readData = function(size) {
    this.checkOffset(size);
    // this will work because the constructor applied the "& 0xff" mask.
    var result = this.data.slice(this.zero + this.index, this.zero + this.index + size);
    this.index += size;
    return result;
};
module.exports = StringReader;

},{"../utils":29,"./DataReader":15}],18:[function(require,module,exports){
'use strict';
var ArrayReader = require('./ArrayReader');
var utils = require('../utils');

function Uint8ArrayReader(data) {
    ArrayReader.call(this, data);
}
utils.inherits(Uint8ArrayReader, ArrayReader);
/**
 * @see DataReader.readData
 */
Uint8ArrayReader.prototype.readData = function(size) {
    this.checkOffset(size);
    if(size === 0) {
        // in IE10, when using subarray(idx, idx), we get the array [0x00] instead of [].
        return new Uint8Array(0);
    }
    var result = this.data.subarray(this.zero + this.index, this.zero + this.index + size);
    this.index += size;
    return result;
};
module.exports = Uint8ArrayReader;

},{"../utils":29,"./ArrayReader":14}],19:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var support = require('../support');
var ArrayReader = require('./ArrayReader');
var StringReader = require('./StringReader');
var NodeBufferReader = require('./NodeBufferReader');
var Uint8ArrayReader = require('./Uint8ArrayReader');

/**
 * Create a reader adapted to the data.
 * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data to read.
 * @return {DataReader} the data reader.
 */
module.exports = function (data) {
    var type = utils.getTypeOf(data);
    utils.checkSupport(type);
    if (type === "string" && !support.uint8array) {
        return new StringReader(data);
    }
    if (type === "nodebuffer") {
        return new NodeBufferReader(data);
    }
    if (support.uint8array) {
        return new Uint8ArrayReader(utils.transformTo("uint8array", data));
    }
    return new ArrayReader(utils.transformTo("array", data));
};

// vim: set shiftwidth=4 softtabstop=4:

},{"../support":27,"../utils":29,"./ArrayReader":14,"./NodeBufferReader":16,"./StringReader":17,"./Uint8ArrayReader":18}],20:[function(require,module,exports){
'use strict';
exports.LOCAL_FILE_HEADER = "PK\x03\x04";
exports.CENTRAL_FILE_HEADER = "PK\x01\x02";
exports.CENTRAL_DIRECTORY_END = "PK\x05\x06";
exports.ZIP64_CENTRAL_DIRECTORY_LOCATOR = "PK\x06\x07";
exports.ZIP64_CENTRAL_DIRECTORY_END = "PK\x06\x06";
exports.DATA_DESCRIPTOR = "PK\x07\x08";

},{}],21:[function(require,module,exports){
'use strict';

var GenericWorker = require('./GenericWorker');
var utils = require('../utils');

/**
 * A worker which convert chunks to a specified type.
 * @constructor
 * @param {String} destType the destination type.
 */
function ConvertWorker(destType) {
    GenericWorker.call(this, "ConvertWorker to " + destType);
    this.destType = destType;
}
utils.inherits(ConvertWorker, GenericWorker);

/**
 * @see GenericWorker.processChunk
 */
ConvertWorker.prototype.processChunk = function (chunk) {
    this.push({
        data : utils.transformTo(this.destType, chunk.data),
        meta : chunk.meta
    });
};
module.exports = ConvertWorker;

},{"../utils":29,"./GenericWorker":25}],22:[function(require,module,exports){
'use strict';

var GenericWorker = require('./GenericWorker');
var crc32 = require('../crc32');
var utils = require('../utils');

/**
 * A worker which calculate the crc32 of the data flowing through.
 * @constructor
 */
function Crc32Probe() {
    GenericWorker.call(this, "Crc32Probe");
}
utils.inherits(Crc32Probe, GenericWorker);

/**
 * @see GenericWorker.processChunk
 */
Crc32Probe.prototype.processChunk = function (chunk) {
    this.streamInfo.crc32 = crc32(chunk.data, this.streamInfo.crc32 || 0);
    this.push(chunk);
};
module.exports = Crc32Probe;

},{"../crc32":4,"../utils":29,"./GenericWorker":25}],23:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var GenericWorker = require('./GenericWorker');

/**
 * A worker which calculate the total length of the data flowing through.
 * @constructor
 * @param {String} propName the name used to expose the length
 */
function DataLengthProbe(propName) {
    GenericWorker.call(this, "DataLengthProbe for " + propName);
    this.propName = propName;
    this.withStreamInfo(propName, 0);
}
utils.inherits(DataLengthProbe, GenericWorker);

/**
 * @see GenericWorker.processChunk
 */
DataLengthProbe.prototype.processChunk = function (chunk) {
    if(chunk) {
        var length = this.streamInfo[this.propName] || 0;
        this.streamInfo[this.propName] = length + chunk.data.length;
    }
    GenericWorker.prototype.processChunk.call(this, chunk);
};
module.exports = DataLengthProbe;


},{"../utils":29,"./GenericWorker":25}],24:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var GenericWorker = require('./GenericWorker');

// the size of the generated chunks
// TODO expose this as a public variable
var DEFAULT_BLOCK_SIZE = 16 * 1024;

/**
 * A worker that reads a content and emits chunks.
 * @constructor
 * @param {Promise} dataP the promise of the data to split
 */
function DataWorker(dataP) {
    GenericWorker.call(this, "DataWorker");
    var self = this;
    this.dataIsReady = false;
    this.index = 0;
    this.max = 0;
    this.data = null;
    this.type = "";

    this._tickScheduled = false;

    dataP.then(function (data) {
        self.dataIsReady = true;
        self.data = data;
        self.max = data && data.length || 0;
        self.type = utils.getTypeOf(data);
        if(!self.isPaused) {
            self._tickAndRepeat();
        }
    }, function (e) {
        self.error(e);
    });
}

utils.inherits(DataWorker, GenericWorker);

/**
 * @see GenericWorker.cleanUp
 */
DataWorker.prototype.cleanUp = function () {
    GenericWorker.prototype.cleanUp.call(this);
    this.data = null;
};

/**
 * @see GenericWorker.resume
 */
DataWorker.prototype.resume = function () {
    if(!GenericWorker.prototype.resume.call(this)) {
        return false;
    }

    if (!this._tickScheduled && this.dataIsReady) {
        this._tickScheduled = true;
        utils.delay(this._tickAndRepeat, [], this);
    }
    return true;
};

/**
 * Trigger a tick a schedule an other call to this function.
 */
DataWorker.prototype._tickAndRepeat = function() {
    this._tickScheduled = false;
    if(this.isPaused || this.isFinished) {
        return;
    }
    this._tick();
    if(!this.isFinished) {
        utils.delay(this._tickAndRepeat, [], this);
        this._tickScheduled = true;
    }
};

/**
 * Read and push a chunk.
 */
DataWorker.prototype._tick = function() {

    if(this.isPaused || this.isFinished) {
        return false;
    }

    var size = DEFAULT_BLOCK_SIZE;
    var data = null, nextIndex = Math.min(this.max, this.index + size);
    if (this.index >= this.max) {
        // EOF
        return this.end();
    } else {
        switch(this.type) {
            case "string":
                data = this.data.substring(this.index, nextIndex);
            break;
            case "uint8array":
                data = this.data.subarray(this.index, nextIndex);
            break;
            case "array":
            case "nodebuffer":
                data = this.data.slice(this.index, nextIndex);
            break;
        }
        this.index = nextIndex;
        return this.push({
            data : data,
            meta : {
                percent : this.max ? this.index / this.max * 100 : 0
            }
        });
    }
};

module.exports = DataWorker;

},{"../utils":29,"./GenericWorker":25}],25:[function(require,module,exports){
'use strict';

/**
 * A worker that does nothing but passing chunks to the next one. This is like
 * a nodejs stream but with some differences. On the good side :
 * - it works on IE 6-9 without any issue / polyfill
 * - it weights less than the full dependencies bundled with browserify
 * - it forwards errors (no need to declare an error handler EVERYWHERE)
 *
 * A chunk is an object with 2 attributes : `meta` and `data`. The former is an
 * object containing anything (`percent` for example), see each worker for more
 * details. The latter is the real data (String, Uint8Array, etc).
 *
 * @constructor
 * @param {String} name the name of the stream (mainly used for debugging purposes)
 */
function GenericWorker(name) {
    // the name of the worker
    this.name = name || "default";
    // an object containing metadata about the workers chain
    this.streamInfo = {};
    // an error which happened when the worker was paused
    this.generatedError = null;
    // an object containing metadata to be merged by this worker into the general metadata
    this.extraStreamInfo = {};
    // true if the stream is paused (and should not do anything), false otherwise
    this.isPaused = true;
    // true if the stream is finished (and should not do anything), false otherwise
    this.isFinished = false;
    // true if the stream is locked to prevent further structure updates (pipe), false otherwise
    this.isLocked = false;
    // the event listeners
    this._listeners = {
        'data':[],
        'end':[],
        'error':[]
    };
    // the previous worker, if any
    this.previous = null;
}

GenericWorker.prototype = {
    /**
     * Push a chunk to the next workers.
     * @param {Object} chunk the chunk to push
     */
    push : function (chunk) {
        this.emit("data", chunk);
    },
    /**
     * End the stream.
     * @return {Boolean} true if this call ended the worker, false otherwise.
     */
    end : function () {
        if (this.isFinished) {
            return false;
        }

        this.flush();
        try {
            this.emit("end");
            this.cleanUp();
            this.isFinished = true;
        } catch (e) {
            this.emit("error", e);
        }
        return true;
    },
    /**
     * End the stream with an error.
     * @param {Error} e the error which caused the premature end.
     * @return {Boolean} true if this call ended the worker with an error, false otherwise.
     */
    error : function (e) {
        if (this.isFinished) {
            return false;
        }

        if(this.isPaused) {
            this.generatedError = e;
        } else {
            this.isFinished = true;

            this.emit("error", e);

            // in the workers chain exploded in the middle of the chain,
            // the error event will go downward but we also need to notify
            // workers upward that there has been an error.
            if(this.previous) {
                this.previous.error(e);
            }

            this.cleanUp();
        }
        return true;
    },
    /**
     * Add a callback on an event.
     * @param {String} name the name of the event (data, end, error)
     * @param {Function} listener the function to call when the event is triggered
     * @return {GenericWorker} the current object for chainability
     */
    on : function (name, listener) {
        this._listeners[name].push(listener);
        return this;
    },
    /**
     * Clean any references when a worker is ending.
     */
    cleanUp : function () {
        this.streamInfo = this.generatedError = this.extraStreamInfo = null;
        this._listeners = [];
    },
    /**
     * Trigger an event. This will call registered callback with the provided arg.
     * @param {String} name the name of the event (data, end, error)
     * @param {Object} arg the argument to call the callback with.
     */
    emit : function (name, arg) {
        if (this._listeners[name]) {
            for(var i = 0; i < this._listeners[name].length; i++) {
                this._listeners[name][i].call(this, arg);
            }
        }
    },
    /**
     * Chain a worker with an other.
     * @param {Worker} next the worker receiving events from the current one.
     * @return {worker} the next worker for chainability
     */
    pipe : function (next) {
        return next.registerPrevious(this);
    },
    /**
     * Same as `pipe` in the other direction.
     * Using an API with `pipe(next)` is very easy.
     * Implementing the API with the point of view of the next one registering
     * a source is easier, see the ZipFileWorker.
     * @param {Worker} previous the previous worker, sending events to this one
     * @return {Worker} the current worker for chainability
     */
    registerPrevious : function (previous) {
        if (this.isLocked) {
            throw new Error("The stream '" + this + "' has already been used.");
        }

        // sharing the streamInfo...
        this.streamInfo = previous.streamInfo;
        // ... and adding our own bits
        this.mergeStreamInfo();
        this.previous =  previous;
        var self = this;
        previous.on('data', function (chunk) {
            self.processChunk(chunk);
        });
        previous.on('end', function () {
            self.end();
        });
        previous.on('error', function (e) {
            self.error(e);
        });
        return this;
    },
    /**
     * Pause the stream so it doesn't send events anymore.
     * @return {Boolean} true if this call paused the worker, false otherwise.
     */
    pause : function () {
        if(this.isPaused || this.isFinished) {
            return false;
        }
        this.isPaused = true;

        if(this.previous) {
            this.previous.pause();
        }
        return true;
    },
    /**
     * Resume a paused stream.
     * @return {Boolean} true if this call resumed the worker, false otherwise.
     */
    resume : function () {
        if(!this.isPaused || this.isFinished) {
            return false;
        }
        this.isPaused = false;

        // if true, the worker tried to resume but failed
        var withError = false;
        if(this.generatedError) {
            this.error(this.generatedError);
            withError = true;
        }
        if(this.previous) {
            this.previous.resume();
        }

        return !withError;
    },
    /**
     * Flush any remaining bytes as the stream is ending.
     */
    flush : function () {},
    /**
     * Process a chunk. This is usually the method overridden.
     * @param {Object} chunk the chunk to process.
     */
    processChunk : function(chunk) {
        this.push(chunk);
    },
    /**
     * Add a key/value to be added in the workers chain streamInfo once activated.
     * @param {String} key the key to use
     * @param {Object} value the associated value
     * @return {Worker} the current worker for chainability
     */
    withStreamInfo : function (key, value) {
        this.extraStreamInfo[key] = value;
        this.mergeStreamInfo();
        return this;
    },
    /**
     * Merge this worker's streamInfo into the chain's streamInfo.
     */
    mergeStreamInfo : function () {
        for(var key in this.extraStreamInfo) {
            if (!this.extraStreamInfo.hasOwnProperty(key)) {
                continue;
            }
            this.streamInfo[key] = this.extraStreamInfo[key];
        }
    },

    /**
     * Lock the stream to prevent further updates on the workers chain.
     * After calling this method, all calls to pipe will fail.
     */
    lock: function () {
        if (this.isLocked) {
            throw new Error("The stream '" + this + "' has already been used.");
        }
        this.isLocked = true;
        if (this.previous) {
            this.previous.lock();
        }
    },

    /**
     *
     * Pretty print the workers chain.
     */
    toString : function () {
        var me = "Worker " + this.name;
        if (this.previous) {
            return this.previous + " -> " + me;
        } else {
            return me;
        }
    }
};

module.exports = GenericWorker;

},{}],26:[function(require,module,exports){
(function (Buffer){
'use strict';

var utils = require('../utils');
var ConvertWorker = require('./ConvertWorker');
var GenericWorker = require('./GenericWorker');
var base64 = require('../base64');
var NodejsStreamOutputAdapter = require('../nodejs/NodejsStreamOutputAdapter');
var external = require("../external");

/**
 * Apply the final transformation of the data. If the user wants a Blob for
 * example, it's easier to work with an U8intArray and finally do the
 * ArrayBuffer/Blob conversion.
 * @param {String} type the name of the final type
 * @param {String|Uint8Array|Buffer} content the content to transform
 * @param {String} mimeType the mime type of the content, if applicable.
 * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the content in the right format.
 */
function transformZipOutput(type, content, mimeType) {
    switch(type) {
        case "blob" :
            return utils.newBlob(utils.transformTo("arraybuffer", content), mimeType);
        case "base64" :
            return base64.encode(content);
        default :
            return utils.transformTo(type, content);
    }
}

/**
 * Concatenate an array of data of the given type.
 * @param {String} type the type of the data in the given array.
 * @param {Array} dataArray the array containing the data chunks to concatenate
 * @return {String|Uint8Array|Buffer} the concatenated data
 * @throws Error if the asked type is unsupported
 */
function concat (type, dataArray) {
    var i, index = 0, res = null, totalLength = 0;
    for(i = 0; i < dataArray.length; i++) {
        totalLength += dataArray[i].length;
    }
    switch(type) {
        case "string":
            return dataArray.join("");
          case "array":
            return Array.prototype.concat.apply([], dataArray);
        case "uint8array":
            res = new Uint8Array(totalLength);
            for(i = 0; i < dataArray.length; i++) {
                res.set(dataArray[i], index);
                index += dataArray[i].length;
            }
            return res;
        case "nodebuffer":
            return Buffer.concat(dataArray);
        default:
            throw new Error("concat : unsupported type '"  + type + "'");
    }
}

/**
 * Listen a StreamHelper, accumulate its content and concatenate it into a
 * complete block.
 * @param {StreamHelper} helper the helper to use.
 * @param {Function} updateCallback a callback called on each update. Called
 * with one arg :
 * - the metadata linked to the update received.
 * @return Promise the promise for the accumulation.
 */
function accumulate(helper, updateCallback) {
    return new external.Promise(function (resolve, reject){
        var dataArray = [];
        var chunkType = helper._internalType,
            resultType = helper._outputType,
            mimeType = helper._mimeType;
        helper
        .on('data', function (data, meta) {
            dataArray.push(data);
            if(updateCallback) {
                updateCallback(meta);
            }
        })
        .on('error', function(err) {
            dataArray = [];
            reject(err);
        })
        .on('end', function (){
            try {
                var result = transformZipOutput(resultType, concat(chunkType, dataArray), mimeType);
                resolve(result);
            } catch (e) {
                reject(e);
            }
            dataArray = [];
        })
        .resume();
    });
}

/**
 * An helper to easily use workers outside of JSZip.
 * @constructor
 * @param {Worker} worker the worker to wrap
 * @param {String} outputType the type of data expected by the use
 * @param {String} mimeType the mime type of the content, if applicable.
 */
function StreamHelper(worker, outputType, mimeType) {
    var internalType = outputType;
    switch(outputType) {
        case "blob":
        case "arraybuffer":
            internalType = "uint8array";
        break;
        case "base64":
            internalType = "string";
        break;
    }

    try {
        // the type used internally
        this._internalType = internalType;
        // the type used to output results
        this._outputType = outputType;
        // the mime type
        this._mimeType = mimeType;
        utils.checkSupport(internalType);
        this._worker = worker.pipe(new ConvertWorker(internalType));
        // the last workers can be rewired without issues but we need to
        // prevent any updates on previous workers.
        worker.lock();
    } catch(e) {
        this._worker = new GenericWorker("error");
        this._worker.error(e);
    }
}

StreamHelper.prototype = {
    /**
     * Listen a StreamHelper, accumulate its content and concatenate it into a
     * complete block.
     * @param {Function} updateCb the update callback.
     * @return Promise the promise for the accumulation.
     */
    accumulate : function (updateCb) {
        return accumulate(this, updateCb);
    },
    /**
     * Add a listener on an event triggered on a stream.
     * @param {String} evt the name of the event
     * @param {Function} fn the listener
     * @return {StreamHelper} the current helper.
     */
    on : function (evt, fn) {
        var self = this;

        if(evt === "data") {
            this._worker.on(evt, function (chunk) {
                fn.call(self, chunk.data, chunk.meta);
            });
        } else {
            this._worker.on(evt, function () {
                utils.delay(fn, arguments, self);
            });
        }
        return this;
    },
    /**
     * Resume the flow of chunks.
     * @return {StreamHelper} the current helper.
     */
    resume : function () {
        utils.delay(this._worker.resume, [], this._worker);
        return this;
    },
    /**
     * Pause the flow of chunks.
     * @return {StreamHelper} the current helper.
     */
    pause : function () {
        this._worker.pause();
        return this;
    },
    /**
     * Return a nodejs stream for this helper.
     * @param {Function} updateCb the update callback.
     * @return {NodejsStreamOutputAdapter} the nodejs stream.
     */
    toNodejsStream : function (updateCb) {
        utils.checkSupport("nodestream");
        if (this._outputType !== "nodebuffer") {
            // an object stream containing blob/arraybuffer/uint8array/string
            // is strange and I don't know if it would be useful.
            // I you find this comment and have a good usecase, please open a
            // bug report !
            throw new Error(this._outputType + " is not supported by this method");
        }

        return new NodejsStreamOutputAdapter(this, {
            objectMode : this._outputType !== "nodebuffer"
        }, updateCb);
    }
};


module.exports = StreamHelper;

}).call(this,(typeof Buffer !== "undefined" ? Buffer : undefined))
},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":35,"../utils":29,"./ConvertWorker":21,"./GenericWorker":25}],27:[function(require,module,exports){
(function (Buffer){
'use strict';

exports.base64 = true;
exports.array = true;
exports.string = true;
exports.arraybuffer = typeof ArrayBuffer !== "undefined" && typeof Uint8Array !== "undefined";
exports.nodebuffer = typeof Buffer !== "undefined";
// contains true if JSZip can read/generate Uint8Array, false otherwise.
exports.uint8array = typeof Uint8Array !== "undefined";

if (typeof ArrayBuffer === "undefined") {
    exports.blob = false;
}
else {
    var buffer = new ArrayBuffer(0);
    try {
        exports.blob = new Blob([buffer], {
            type: "application/zip"
        }).size === 0;
    }
    catch (e) {
        try {
            var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
            var builder = new Builder();
            builder.append(buffer);
            exports.blob = builder.getBlob('application/zip').size === 0;
        }
        catch (e) {
            exports.blob = false;
        }
    }
}

exports.nodestream = !!require("./nodejs/NodejsStreamOutputAdapter").prototype;

}).call(this,(typeof Buffer !== "undefined" ? Buffer : undefined))
},{"./nodejs/NodejsStreamOutputAdapter":35}],28:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var support = require('./support');
var nodejsUtils = require('./nodejsUtils');
var GenericWorker = require('./stream/GenericWorker');

/**
 * The following functions come from pako, from pako/lib/utils/strings
 * released under the MIT license, see pako https://github.com/nodeca/pako/
 */

// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
var _utf8len = new Array(256);
for (var i=0; i<256; i++) {
  _utf8len[i] = (i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1);
}
_utf8len[254]=_utf8len[254]=1; // Invalid sequence start

// convert string to array (typed, when possible)
var string2buf = function (str) {
    var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

    // count binary size
    for (m_pos = 0; m_pos < str_len; m_pos++) {
        c = str.charCodeAt(m_pos);
        if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {
            c2 = str.charCodeAt(m_pos+1);
            if ((c2 & 0xfc00) === 0xdc00) {
                c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
                m_pos++;
            }
        }
        buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
    }

    // allocate buffer
    if (support.uint8array) {
        buf = new Uint8Array(buf_len);
    } else {
        buf = new Array(buf_len);
    }

    // convert
    for (i=0, m_pos = 0; i < buf_len; m_pos++) {
        c = str.charCodeAt(m_pos);
        if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {
            c2 = str.charCodeAt(m_pos+1);
            if ((c2 & 0xfc00) === 0xdc00) {
                c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
                m_pos++;
            }
        }
        if (c < 0x80) {
            /* one byte */
            buf[i++] = c;
        } else if (c < 0x800) {
            /* two bytes */
            buf[i++] = 0xC0 | (c >>> 6);
            buf[i++] = 0x80 | (c & 0x3f);
        } else if (c < 0x10000) {
            /* three bytes */
            buf[i++] = 0xE0 | (c >>> 12);
            buf[i++] = 0x80 | (c >>> 6 & 0x3f);
            buf[i++] = 0x80 | (c & 0x3f);
        } else {
            /* four bytes */
            buf[i++] = 0xf0 | (c >>> 18);
            buf[i++] = 0x80 | (c >>> 12 & 0x3f);
            buf[i++] = 0x80 | (c >>> 6 & 0x3f);
            buf[i++] = 0x80 | (c & 0x3f);
        }
    }

    return buf;
};

// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
var utf8border = function(buf, max) {
    var pos;

    max = max || buf.length;
    if (max > buf.length) { max = buf.length; }

    // go back from last position, until start of sequence found
    pos = max-1;
    while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

    // Fuckup - very small and broken sequence,
    // return max, because we should return something anyway.
    if (pos < 0) { return max; }

    // If we came to start of buffer - that means vuffer is too small,
    // return max too.
    if (pos === 0) { return max; }

    return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};

// convert array to string
var buf2string = function (buf) {
    var str, i, out, c, c_len;
    var len = buf.length;

    // Reserve max possible length (2 words per char)
    // NB: by unknown reasons, Array is significantly faster for
    //     String.fromCharCode.apply than Uint16Array.
    var utf16buf = new Array(len*2);

    for (out=0, i=0; i<len;) {
        c = buf[i++];
        // quick process ascii
        if (c < 0x80) { utf16buf[out++] = c; continue; }

        c_len = _utf8len[c];
        // skip 5 & 6 byte codes
        if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len-1; continue; }

        // apply mask on first byte
        c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
        // join the rest
        while (c_len > 1 && i < len) {
            c = (c << 6) | (buf[i++] & 0x3f);
            c_len--;
        }

        // terminated by end of string?
        if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

        if (c < 0x10000) {
            utf16buf[out++] = c;
        } else {
            c -= 0x10000;
            utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
            utf16buf[out++] = 0xdc00 | (c & 0x3ff);
        }
    }

    // shrinkBuf(utf16buf, out)
    if (utf16buf.length !== out) {
        if(utf16buf.subarray) {
            utf16buf = utf16buf.subarray(0, out);
        } else {
            utf16buf.length = out;
        }
    }

    // return String.fromCharCode.apply(null, utf16buf);
    return utils.applyFromCharCode(utf16buf);
};


// That's all for the pako functions.


/**
 * Transform a javascript string into an array (typed if possible) of bytes,
 * UTF-8 encoded.
 * @param {String} str the string to encode
 * @return {Array|Uint8Array|Buffer} the UTF-8 encoded string.
 */
exports.utf8encode = function utf8encode(str) {
    if (support.nodebuffer) {
        return nodejsUtils.newBuffer(str, "utf-8");
    }

    return string2buf(str);
};


/**
 * Transform a bytes array (or a representation) representing an UTF-8 encoded
 * string into a javascript string.
 * @param {Array|Uint8Array|Buffer} buf the data de decode
 * @return {String} the decoded string.
 */
exports.utf8decode = function utf8decode(buf) {
    if (support.nodebuffer) {
        return utils.transformTo("nodebuffer", buf).toString("utf-8");
    }

    buf = utils.transformTo(support.uint8array ? "uint8array" : "array", buf);

    return buf2string(buf);
};

/**
 * A worker to decode utf8 encoded binary chunks into string chunks.
 * @constructor
 */
function Utf8DecodeWorker() {
    GenericWorker.call(this, "utf-8 decode");
    // the last bytes if a chunk didn't end with a complete codepoint.
    this.leftOver = null;
}
utils.inherits(Utf8DecodeWorker, GenericWorker);

/**
 * @see GenericWorker.processChunk
 */
Utf8DecodeWorker.prototype.processChunk = function (chunk) {

    var data = utils.transformTo(support.uint8array ? "uint8array" : "array", chunk.data);

    // 1st step, re-use what's left of the previous chunk
    if (this.leftOver && this.leftOver.length) {
        if(support.uint8array) {
            var previousData = data;
            data = new Uint8Array(previousData.length + this.leftOver.length);
            data.set(this.leftOver, 0);
            data.set(previousData, this.leftOver.length);
        } else {
            data = this.leftOver.concat(data);
        }
        this.leftOver = null;
    }

    var nextBoundary = utf8border(data);
    var usableData = data;
    if (nextBoundary !== data.length) {
        if (support.uint8array) {
            usableData = data.subarray(0, nextBoundary);
            this.leftOver = data.subarray(nextBoundary, data.length);
        } else {
            usableData = data.slice(0, nextBoundary);
            this.leftOver = data.slice(nextBoundary, data.length);
        }
    }

    this.push({
        data : exports.utf8decode(usableData),
        meta : chunk.meta
    });
};

/**
 * @see GenericWorker.flush
 */
Utf8DecodeWorker.prototype.flush = function () {
    if(this.leftOver && this.leftOver.length) {
        this.push({
            data : exports.utf8decode(this.leftOver),
            meta : {}
        });
        this.leftOver = null;
    }
};
exports.Utf8DecodeWorker = Utf8DecodeWorker;

/**
 * A worker to endcode string chunks into utf8 encoded binary chunks.
 * @constructor
 */
function Utf8EncodeWorker() {
    GenericWorker.call(this, "utf-8 encode");
}
utils.inherits(Utf8EncodeWorker, GenericWorker);

/**
 * @see GenericWorker.processChunk
 */
Utf8EncodeWorker.prototype.processChunk = function (chunk) {
    this.push({
        data : exports.utf8encode(chunk.data),
        meta : chunk.meta
    });
};
exports.Utf8EncodeWorker = Utf8EncodeWorker;

},{"./nodejsUtils":12,"./stream/GenericWorker":25,"./support":27,"./utils":29}],29:[function(require,module,exports){
'use strict';

var support = require('./support');
var base64 = require('./base64');
var nodejsUtils = require('./nodejsUtils');
var asap = require('asap');
var external = require("./external");


/**
 * Convert a string that pass as a "binary string": it should represent a byte
 * array but may have > 255 char codes. Be sure to take only the first byte
 * and returns the byte array.
 * @param {String} str the string to transform.
 * @return {Array|Uint8Array} the string in a binary format.
 */
function string2binary(str) {
    var result = null;
    if (support.uint8array) {
      result = new Uint8Array(str.length);
    } else {
      result = new Array(str.length);
    }
    return stringToArrayLike(str, result);
}

/**
 * Create a new blob with the given content and the given type.
 * @param {String|ArrayBuffer} part the content to put in the blob. DO NOT use
 * an Uint8Array because the stock browser of android 4 won't accept it (it
 * will be silently converted to a string, "[object Uint8Array]").
 * @param {String} type the mime type of the blob.
 * @return {Blob} the created blob.
 */
exports.newBlob = function(part, type) {
    exports.checkSupport("blob");

    try {
        // Blob constructor
        return new Blob([part], {
            type: type
        });
    }
    catch (e) {

        try {
            // deprecated, browser only, old way
            var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
            var builder = new Builder();
            builder.append(part);
            return builder.getBlob(type);
        }
        catch (e) {

            // well, fuck ?!
            throw new Error("Bug : can't construct the Blob.");
        }
    }


};
/**
 * The identity function.
 * @param {Object} input the input.
 * @return {Object} the same input.
 */
function identity(input) {
    return input;
}

/**
 * Fill in an array with a string.
 * @param {String} str the string to use.
 * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to fill in (will be mutated).
 * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated array.
 */
function stringToArrayLike(str, array) {
    for (var i = 0; i < str.length; ++i) {
        array[i] = str.charCodeAt(i) & 0xFF;
    }
    return array;
}

/**
 * An helper for the function arrayLikeToString.
 * This contains static informations and functions that
 * can be optimized by the browser JIT compiler.
 */
var arrayToStringHelper = {
    /**
     * Transform an array of int into a string, chunk by chunk.
     * See the performances notes on arrayLikeToString.
     * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.
     * @param {String} type the type of the array.
     * @param {Integer} chunk the chunk size.
     * @return {String} the resulting string.
     * @throws Error if the chunk is too big for the stack.
     */
    stringifyByChunk: function(array, type, chunk) {
        var result = [], k = 0, len = array.length;
        // shortcut
        if (len <= chunk) {
            return String.fromCharCode.apply(null, array);
        }
        while (k < len) {
            if (type === "array" || type === "nodebuffer") {
                result.push(String.fromCharCode.apply(null, array.slice(k, Math.min(k + chunk, len))));
            }
            else {
                result.push(String.fromCharCode.apply(null, array.subarray(k, Math.min(k + chunk, len))));
            }
            k += chunk;
        }
        return result.join("");
    },
    /**
     * Call String.fromCharCode on every item in the array.
     * This is the naive implementation, which generate A LOT of intermediate string.
     * This should be used when everything else fail.
     * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.
     * @return {String} the result.
     */
    stringifyByChar: function(array){
        var resultStr = "";
        for(var i = 0; i < array.length; i++) {
            resultStr += String.fromCharCode(array[i]);
        }
        return resultStr;
    },
    applyCanBeUsed : {
        /**
         * true if the browser accepts to use String.fromCharCode on Uint8Array
         */
        uint8array : (function () {
            try {
                return support.uint8array && String.fromCharCode.apply(null, new Uint8Array(1)).length === 1;
            } catch (e) {
                return false;
            }
        })(),
        /**
         * true if the browser accepts to use String.fromCharCode on nodejs Buffer.
         */
        nodebuffer : (function () {
            try {
                return support.nodebuffer && String.fromCharCode.apply(null, nodejsUtils.newBuffer(1)).length === 1;
            } catch (e) {
                return false;
            }
        })()
    }
};

/**
 * Transform an array-like object to a string.
 * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.
 * @return {String} the result.
 */
function arrayLikeToString(array) {
    // Performances notes :
    // --------------------
    // String.fromCharCode.apply(null, array) is the fastest, see
    // see http://jsperf.com/converting-a-uint8array-to-a-string/2
    // but the stack is limited (and we can get huge arrays !).
    //
    // result += String.fromCharCode(array[i]); generate too many strings !
    //
    // This code is inspired by http://jsperf.com/arraybuffer-to-string-apply-performance/2
    // TODO : we now have workers that split the work. Do we still need that ?
    var chunk = 65536,
        type = exports.getTypeOf(array),
        canUseApply = true;
    if (type === "uint8array") {
        canUseApply = arrayToStringHelper.applyCanBeUsed.uint8array;
    } else if (type === "nodebuffer") {
        canUseApply = arrayToStringHelper.applyCanBeUsed.nodebuffer;
    }

    if (canUseApply) {
        while (chunk > 1) {
            try {
                return arrayToStringHelper.stringifyByChunk(array, type, chunk);
            } catch (e) {
                chunk = Math.floor(chunk / 2);
            }
        }
    }

    // no apply or chunk error : slow and painful algorithm
    // default browser on android 4.*
    return arrayToStringHelper.stringifyByChar(array);
}

exports.applyFromCharCode = arrayLikeToString;


/**
 * Copy the data from an array-like to an other array-like.
 * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayFrom the origin array.
 * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayTo the destination array which will be mutated.
 * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated destination array.
 */
function arrayLikeToArrayLike(arrayFrom, arrayTo) {
    for (var i = 0; i < arrayFrom.length; i++) {
        arrayTo[i] = arrayFrom[i];
    }
    return arrayTo;
}

// a matrix containing functions to transform everything into everything.
var transform = {};

// string to ?
transform["string"] = {
    "string": identity,
    "array": function(input) {
        return stringToArrayLike(input, new Array(input.length));
    },
    "arraybuffer": function(input) {
        return transform["string"]["uint8array"](input).buffer;
    },
    "uint8array": function(input) {
        return stringToArrayLike(input, new Uint8Array(input.length));
    },
    "nodebuffer": function(input) {
        return stringToArrayLike(input, nodejsUtils.newBuffer(input.length));
    }
};

// array to ?
transform["array"] = {
    "string": arrayLikeToString,
    "array": identity,
    "arraybuffer": function(input) {
        return (new Uint8Array(input)).buffer;
    },
    "uint8array": function(input) {
        return new Uint8Array(input);
    },
    "nodebuffer": function(input) {
        return nodejsUtils.newBuffer(input);
    }
};

// arraybuffer to ?
transform["arraybuffer"] = {
    "string": function(input) {
        return arrayLikeToString(new Uint8Array(input));
    },
    "array": function(input) {
        return arrayLikeToArrayLike(new Uint8Array(input), new Array(input.byteLength));
    },
    "arraybuffer": identity,
    "uint8array": function(input) {
        return new Uint8Array(input);
    },
    "nodebuffer": function(input) {
        return nodejsUtils.newBuffer(new Uint8Array(input));
    }
};

// uint8array to ?
transform["uint8array"] = {
    "string": arrayLikeToString,
    "array": function(input) {
        return arrayLikeToArrayLike(input, new Array(input.length));
    },
    "arraybuffer": function(input) {
        return input.buffer;
    },
    "uint8array": identity,
    "nodebuffer": function(input) {
        return nodejsUtils.newBuffer(input);
    }
};

// nodebuffer to ?
transform["nodebuffer"] = {
    "string": arrayLikeToString,
    "array": function(input) {
        return arrayLikeToArrayLike(input, new Array(input.length));
    },
    "arraybuffer": function(input) {
        return transform["nodebuffer"]["uint8array"](input).buffer;
    },
    "uint8array": function(input) {
        return arrayLikeToArrayLike(input, new Uint8Array(input.length));
    },
    "nodebuffer": identity
};

/**
 * Transform an input into any type.
 * The supported output type are : string, array, uint8array, arraybuffer, nodebuffer.
 * If no output type is specified, the unmodified input will be returned.
 * @param {String} outputType the output type.
 * @param {String|Array|ArrayBuffer|Uint8Array|Buffer} input the input to convert.
 * @throws {Error} an Error if the browser doesn't support the requested output type.
 */
exports.transformTo = function(outputType, input) {
    if (!input) {
        // undefined, null, etc
        // an empty string won't harm.
        input = "";
    }
    if (!outputType) {
        return input;
    }
    exports.checkSupport(outputType);
    var inputType = exports.getTypeOf(input);
    var result = transform[inputType][outputType](input);
    return result;
};

/**
 * Return the type of the input.
 * The type will be in a format valid for JSZip.utils.transformTo : string, array, uint8array, arraybuffer.
 * @param {Object} input the input to identify.
 * @return {String} the (lowercase) type of the input.
 */
exports.getTypeOf = function(input) {
    if (typeof input === "string") {
        return "string";
    }
    if (Object.prototype.toString.call(input) === "[object Array]") {
        return "array";
    }
    if (support.nodebuffer && nodejsUtils.isBuffer(input)) {
        return "nodebuffer";
    }
    if (support.uint8array && input instanceof Uint8Array) {
        return "uint8array";
    }
    if (support.arraybuffer && input instanceof ArrayBuffer) {
        return "arraybuffer";
    }
};

/**
 * Throw an exception if the type is not supported.
 * @param {String} type the type to check.
 * @throws {Error} an Error if the browser doesn't support the requested type.
 */
exports.checkSupport = function(type) {
    var supported = support[type.toLowerCase()];
    if (!supported) {
        throw new Error(type + " is not supported by this platform");
    }
};

exports.MAX_VALUE_16BITS = 65535;
exports.MAX_VALUE_32BITS = -1; // well, "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF" is parsed as -1

/**
 * Prettify a string read as binary.
 * @param {string} str the string to prettify.
 * @return {string} a pretty string.
 */
exports.pretty = function(str) {
    var res = '',
        code, i;
    for (i = 0; i < (str || "").length; i++) {
        code = str.charCodeAt(i);
        res += '\\x' + (code < 16 ? "0" : "") + code.toString(16).toUpperCase();
    }
    return res;
};

/**
 * Defer the call of a function.
 * @param {Function} callback the function to call asynchronously.
 * @param {Array} args the arguments to give to the callback.
 */
exports.delay = function(callback, args, self) {
    asap(function () {
        callback.apply(self || null, args || []);
    });
};

/**
 * Extends a prototype with an other, without calling a constructor with
 * side effects. Inspired by nodejs' `utils.inherits`
 * @param {Function} ctor the constructor to augment
 * @param {Function} superCtor the parent constructor to use
 */
exports.inherits = function (ctor, superCtor) {
    var Obj = function() {};
    Obj.prototype = superCtor.prototype;
    ctor.prototype = new Obj();
};

/**
 * Merge the objects passed as parameters into a new one.
 * @private
 * @param {...Object} var_args All objects to merge.
 * @return {Object} a new object with the data of the others.
 */
exports.extend = function() {
    var result = {}, i, attr;
    for (i = 0; i < arguments.length; i++) { // arguments is not enumerable in some browsers
        for (attr in arguments[i]) {
            if (arguments[i].hasOwnProperty(attr) && typeof result[attr] === "undefined") {
                result[attr] = arguments[i][attr];
            }
        }
    }
    return result;
};

/**
 * Transform arbitrary content into a Promise.
 * @param {String} name a name for the content being processed.
 * @param {Object} inputData the content to process.
 * @param {Boolean} isBinary true if the content is not an unicode string
 * @param {Boolean} isOptimizedBinaryString true if the string content only has one byte per character.
 * @param {Boolean} isBase64 true if the string content is encoded with base64.
 * @return {Promise} a promise in a format usable by JSZip.
 */
exports.prepareContent = function(name, inputData, isBinary, isOptimizedBinaryString, isBase64) {

    var promise = null;
    if (support.blob && inputData instanceof Blob && typeof FileReader !== "undefined") {
        promise = new external.Promise(function (resolve, reject) {
            var reader = new FileReader();

            reader.onload = function(e) {
                resolve(e.target.result);
            };
            reader.onerror = function(e) {
                reject(e.target.error);
            };
            reader.readAsArrayBuffer(inputData);
        });
    } else {
        // if data is already a promise, this flatten it.
        promise = external.Promise.resolve(inputData);
    }

    return promise.then(function(data) {
        var dataType = exports.getTypeOf(data);

        if (!dataType) {
            return external.Promise.reject(
                new Error("The data of '" + name + "' is in an unsupported format !")
            );
        }
        // special case : it's way easier to work with Uint8Array than with ArrayBuffer
        if (dataType === "arraybuffer") {
            data = exports.transformTo("uint8array", data);
        } else if (dataType === "string") {
            if (isBase64) {
                data = base64.decode(data);
            }
            else if (isBinary) {
                // optimizedBinaryString === true means that the file has already been filtered with a 0xFF mask
                if (isOptimizedBinaryString !== true) {
                    // this is a string, not in a base64 format.
                    // Be sure that this is a correct "binary string"
                    data = string2binary(data);
                }
            }
        }
        return data;
    });
};

},{"./base64":1,"./external":6,"./nodejsUtils":12,"./support":27,"asap":33}],30:[function(require,module,exports){
'use strict';
var readerFor = require('./reader/readerFor');
var utils = require('./utils');
var sig = require('./signature');
var ZipEntry = require('./zipEntry');
var utf8 = require('./utf8');
var support = require('./support');
//  class ZipEntries {{{
/**
 * All the entries in the zip file.
 * @constructor
 * @param {Object} loadOptions Options for loading the stream.
 */
function ZipEntries(loadOptions) {
    this.files = [];
    this.loadOptions = loadOptions;
}
ZipEntries.prototype = {
    /**
     * Check that the reader is on the speficied signature.
     * @param {string} expectedSignature the expected signature.
     * @throws {Error} if it is an other signature.
     */
    checkSignature: function(expectedSignature) {
        if (!this.reader.readAndCheckSignature(expectedSignature)) {
            this.reader.index -= 4;
            var signature = this.reader.readString(4);
            throw new Error("Corrupted zip or bug : unexpected signature " + "(" + utils.pretty(signature) + ", expected " + utils.pretty(expectedSignature) + ")");
        }
    },
    /**
     * Check if the given signature is at the given index.
     * @param {number} askedIndex the index to check.
     * @param {string} expectedSignature the signature to expect.
     * @return {boolean} true if the signature is here, false otherwise.
     */
    isSignature: function(askedIndex, expectedSignature) {
        var currentIndex = this.reader.index;
        this.reader.setIndex(askedIndex);
        var signature = this.reader.readString(4);
        var result = signature === expectedSignature;
        this.reader.setIndex(currentIndex);
        return result;
    },
    /**
     * Read the end of the central directory.
     */
    readBlockEndOfCentral: function() {
        this.diskNumber = this.reader.readInt(2);
        this.diskWithCentralDirStart = this.reader.readInt(2);
        this.centralDirRecordsOnThisDisk = this.reader.readInt(2);
        this.centralDirRecords = this.reader.readInt(2);
        this.centralDirSize = this.reader.readInt(4);
        this.centralDirOffset = this.reader.readInt(4);

        this.zipCommentLength = this.reader.readInt(2);
        // warning : the encoding depends of the system locale
        // On a linux machine with LANG=en_US.utf8, this field is utf8 encoded.
        // On a windows machine, this field is encoded with the localized windows code page.
        var zipComment = this.reader.readData(this.zipCommentLength);
        var decodeParamType = support.uint8array ? "uint8array" : "array";
        // To get consistent behavior with the generation part, we will assume that
        // this is utf8 encoded unless specified otherwise.
        var decodeContent = utils.transformTo(decodeParamType, zipComment);
        this.zipComment = this.loadOptions.decodeFileName(decodeContent);
    },
    /**
     * Read the end of the Zip 64 central directory.
     * Not merged with the method readEndOfCentral :
     * The end of central can coexist with its Zip64 brother,
     * I don't want to read the wrong number of bytes !
     */
    readBlockZip64EndOfCentral: function() {
        this.zip64EndOfCentralSize = this.reader.readInt(8);
        this.reader.skip(4);
        // this.versionMadeBy = this.reader.readString(2);
        // this.versionNeeded = this.reader.readInt(2);
        this.diskNumber = this.reader.readInt(4);
        this.diskWithCentralDirStart = this.reader.readInt(4);
        this.centralDirRecordsOnThisDisk = this.reader.readInt(8);
        this.centralDirRecords = this.reader.readInt(8);
        this.centralDirSize = this.reader.readInt(8);
        this.centralDirOffset = this.reader.readInt(8);

        this.zip64ExtensibleData = {};
        var extraDataSize = this.zip64EndOfCentralSize - 44,
            index = 0,
            extraFieldId,
            extraFieldLength,
            extraFieldValue;
        while (index < extraDataSize) {
            extraFieldId = this.reader.readInt(2);
            extraFieldLength = this.reader.readInt(4);
            extraFieldValue = this.reader.readData(extraFieldLength);
            this.zip64ExtensibleData[extraFieldId] = {
                id: extraFieldId,
                length: extraFieldLength,
                value: extraFieldValue
            };
        }
    },
    /**
     * Read the end of the Zip 64 central directory locator.
     */
    readBlockZip64EndOfCentralLocator: function() {
        this.diskWithZip64CentralDirStart = this.reader.readInt(4);
        this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8);
        this.disksCount = this.reader.readInt(4);
        if (this.disksCount > 1) {
            throw new Error("Multi-volumes zip are not supported");
        }
    },
    /**
     * Read the local files, based on the offset read in the central part.
     */
    readLocalFiles: function() {
        var i, file;
        for (i = 0; i < this.files.length; i++) {
            file = this.files[i];
            this.reader.setIndex(file.localHeaderOffset);
            this.checkSignature(sig.LOCAL_FILE_HEADER);
            file.readLocalPart(this.reader);
            file.handleUTF8();
            file.processAttributes();
        }
    },
    /**
     * Read the central directory.
     */
    readCentralDir: function() {
        var file;

        this.reader.setIndex(this.centralDirOffset);
        while (this.reader.readAndCheckSignature(sig.CENTRAL_FILE_HEADER)) {
            file = new ZipEntry({
                zip64: this.zip64
            }, this.loadOptions);
            file.readCentralPart(this.reader);
            this.files.push(file);
        }

        if (this.centralDirRecords !== this.files.length) {
            if (this.centralDirRecords !== 0 && this.files.length === 0) {
                // We expected some records but couldn't find ANY.
                // This is really suspicious, as if something went wrong.
                throw new Error("Corrupted zip or bug: expected " + this.centralDirRecords + " records in central dir, got " + this.files.length);
            } else {
                // We found some records but not all.
                // Something is wrong but we got something for the user: no error here.
                // console.warn("expected", this.centralDirRecords, "records in central dir, got", this.files.length);
            }
        }
    },
    /**
     * Read the end of central directory.
     */
    readEndOfCentral: function() {
        var offset = this.reader.lastIndexOfSignature(sig.CENTRAL_DIRECTORY_END);
        if (offset < 0) {
            // Check if the content is a truncated zip or complete garbage.
            // A "LOCAL_FILE_HEADER" is not required at the beginning (auto
            // extractible zip for example) but it can give a good hint.
            // If an ajax request was used without responseType, we will also
            // get unreadable data.
            var isGarbage = !this.isSignature(0, sig.LOCAL_FILE_HEADER);

            if (isGarbage) {
                throw new Error("Can't find end of central directory : is this a zip file ? " +
                                "If it is, see http://stuk.github.io/jszip/documentation/howto/read_zip.html");
            } else {
                throw new Error("Corrupted zip : can't find end of central directory");
            }

        }
        this.reader.setIndex(offset);
        var endOfCentralDirOffset = offset;
        this.checkSignature(sig.CENTRAL_DIRECTORY_END);
        this.readBlockEndOfCentral();


        /* extract from the zip spec :
            4)  If one of the fields in the end of central directory
                record is too small to hold required data, the field
                should be set to -1 (0xFFFF or 0xFFFFFFFF) and the
                ZIP64 format record should be created.
            5)  The end of central directory record and the
                Zip64 end of central directory locator record must
                reside on the same disk when splitting or spanning
                an archive.
         */
        if (this.diskNumber === utils.MAX_VALUE_16BITS || this.diskWithCentralDirStart === utils.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === utils.MAX_VALUE_16BITS || this.centralDirRecords === utils.MAX_VALUE_16BITS || this.centralDirSize === utils.MAX_VALUE_32BITS || this.centralDirOffset === utils.MAX_VALUE_32BITS) {
            this.zip64 = true;

            /*
            Warning : the zip64 extension is supported, but ONLY if the 64bits integer read from
            the zip file can fit into a 32bits integer. This cannot be solved : Javascript represents
            all numbers as 64-bit double precision IEEE 754 floating point numbers.
            So, we have 53bits for integers and bitwise operations treat everything as 32bits.
            see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Bitwise_Operators
            and http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf section 8.5
            */

            // should look for a zip64 EOCD locator
            offset = this.reader.lastIndexOfSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
            if (offset < 0) {
                throw new Error("Corrupted zip : can't find the ZIP64 end of central directory locator");
            }
            this.reader.setIndex(offset);
            this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);
            this.readBlockZip64EndOfCentralLocator();

            // now the zip64 EOCD record
            if (!this.isSignature(this.relativeOffsetEndOfZip64CentralDir, sig.ZIP64_CENTRAL_DIRECTORY_END)) {
                // console.warn("ZIP64 end of central directory not where expected.");
                this.relativeOffsetEndOfZip64CentralDir = this.reader.lastIndexOfSignature(sig.ZIP64_CENTRAL_DIRECTORY_END);
                if (this.relativeOffsetEndOfZip64CentralDir < 0) {
                    throw new Error("Corrupted zip : can't find the ZIP64 end of central directory");
                }
            }
            this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir);
            this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_END);
            this.readBlockZip64EndOfCentral();
        }

        var expectedEndOfCentralDirOffset = this.centralDirOffset + this.centralDirSize;
        if (this.zip64) {
            expectedEndOfCentralDirOffset += 20; // end of central dir 64 locator
            expectedEndOfCentralDirOffset += 12 /* should not include the leading 12 bytes */ + this.zip64EndOfCentralSize;
        }

        var extraBytes = endOfCentralDirOffset - expectedEndOfCentralDirOffset;

        if (extraBytes > 0) {
            // console.warn(extraBytes, "extra bytes at beginning or within zipfile");
            if (this.isSignature(endOfCentralDirOffset, sig.CENTRAL_FILE_HEADER)) {
                // The offsets seem wrong, but we have something at the specified offset.
                // So… we keep it.
            } else {
                // the offset is wrong, update the "zero" of the reader
                // this happens if data has been prepended (crx files for example)
                this.reader.zero = extraBytes;
            }
        } else if (extraBytes < 0) {
            throw new Error("Corrupted zip: missing " + Math.abs(extraBytes) + " bytes.");
        }
    },
    prepareReader: function(data) {
        this.reader = readerFor(data);
    },
    /**
     * Read a zip file and create ZipEntries.
     * @param {String|ArrayBuffer|Uint8Array|Buffer} data the binary string representing a zip file.
     */
    load: function(data) {
        this.prepareReader(data);
        this.readEndOfCentral();
        this.readCentralDir();
        this.readLocalFiles();
    }
};
// }}} end of ZipEntries
module.exports = ZipEntries;

},{"./reader/readerFor":19,"./signature":20,"./support":27,"./utf8":28,"./utils":29,"./zipEntry":31}],31:[function(require,module,exports){
'use strict';
var readerFor = require('./reader/readerFor');
var utils = require('./utils');
var CompressedObject = require('./compressedObject');
var crc32fn = require('./crc32');
var utf8 = require('./utf8');
var compressions = require('./compressions');
var support = require('./support');

var MADE_BY_DOS = 0x00;
var MADE_BY_UNIX = 0x03;

/**
 * Find a compression registered in JSZip.
 * @param {string} compressionMethod the method magic to find.
 * @return {Object|null} the JSZip compression object, null if none found.
 */
var findCompression = function(compressionMethod) {
    for (var method in compressions) {
        if (!compressions.hasOwnProperty(method)) {
            continue;
        }
        if (compressions[method].magic === compressionMethod) {
            return compressions[method];
        }
    }
    return null;
};

// class ZipEntry {{{
/**
 * An entry in the zip file.
 * @constructor
 * @param {Object} options Options of the current file.
 * @param {Object} loadOptions Options for loading the stream.
 */
function ZipEntry(options, loadOptions) {
    this.options = options;
    this.loadOptions = loadOptions;
}
ZipEntry.prototype = {
    /**
     * say if the file is encrypted.
     * @return {boolean} true if the file is encrypted, false otherwise.
     */
    isEncrypted: function() {
        // bit 1 is set
        return (this.bitFlag & 0x0001) === 0x0001;
    },
    /**
     * say if the file has utf-8 filename/comment.
     * @return {boolean} true if the filename/comment is in utf-8, false otherwise.
     */
    useUTF8: function() {
        // bit 11 is set
        return (this.bitFlag & 0x0800) === 0x0800;
    },
    /**
     * Read the local part of a zip file and add the info in this object.
     * @param {DataReader} reader the reader to use.
     */
    readLocalPart: function(reader) {
        var compression, localExtraFieldsLength;

        // we already know everything from the central dir !
        // If the central dir data are false, we are doomed.
        // On the bright side, the local part is scary  : zip64, data descriptors, both, etc.
        // The less data we get here, the more reliable this should be.
        // Let's skip the whole header and dash to the data !
        reader.skip(22);
        // in some zip created on windows, the filename stored in the central dir contains \ instead of /.
        // Strangely, the filename here is OK.
        // I would love to treat these zip files as corrupted (see http://www.info-zip.org/FAQ.html#backslashes
        // or APPNOTE#4.4.17.1, "All slashes MUST be forward slashes '/'") but there are a lot of bad zip generators...
        // Search "unzip mismatching "local" filename continuing with "central" filename version" on
        // the internet.
        //
        // I think I see the logic here : the central directory is used to display
        // content and the local directory is used to extract the files. Mixing / and \
        // may be used to display \ to windows users and use / when extracting the files.
        // Unfortunately, this lead also to some issues : http://seclists.org/fulldisclosure/2009/Sep/394
        this.fileNameLength = reader.readInt(2);
        localExtraFieldsLength = reader.readInt(2); // can't be sure this will be the same as the central dir
        // the fileName is stored as binary data, the handleUTF8 method will take care of the encoding.
        this.fileName = reader.readData(this.fileNameLength);
        reader.skip(localExtraFieldsLength);

        if (this.compressedSize === -1 || this.uncompressedSize === -1) {
            throw new Error("Bug or corrupted zip : didn't get enough informations from the central directory " + "(compressedSize === -1 || uncompressedSize === -1)");
        }

        compression = findCompression(this.compressionMethod);
        if (compression === null) { // no compression found
            throw new Error("Corrupted zip : compression " + utils.pretty(this.compressionMethod) + " unknown (inner file : " + utils.transformTo("string", this.fileName) + ")");
        }
        this.decompressed = new CompressedObject(this.compressedSize, this.uncompressedSize, this.crc32, compression, reader.readData(this.compressedSize));
    },

    /**
     * Read the central part of a zip file and add the info in this object.
     * @param {DataReader} reader the reader to use.
     */
    readCentralPart: function(reader) {
        this.versionMadeBy = reader.readInt(2);
        reader.skip(2);
        // this.versionNeeded = reader.readInt(2);
        this.bitFlag = reader.readInt(2);
        this.compressionMethod = reader.readString(2);
        this.date = reader.readDate();
        this.crc32 = reader.readInt(4);
        this.compressedSize = reader.readInt(4);
        this.uncompressedSize = reader.readInt(4);
        var fileNameLength = reader.readInt(2);
        this.extraFieldsLength = reader.readInt(2);
        this.fileCommentLength = reader.readInt(2);
        this.diskNumberStart = reader.readInt(2);
        this.internalFileAttributes = reader.readInt(2);
        this.externalFileAttributes = reader.readInt(4);
        this.localHeaderOffset = reader.readInt(4);

        if (this.isEncrypted()) {
            throw new Error("Encrypted zip are not supported");
        }

        // will be read in the local part, see the comments there
        reader.skip(fileNameLength);
        this.readExtraFields(reader);
        this.parseZIP64ExtraField(reader);
        this.fileComment = reader.readData(this.fileCommentLength);
    },

    /**
     * Parse the external file attributes and get the unix/dos permissions.
     */
    processAttributes: function () {
        this.unixPermissions = null;
        this.dosPermissions = null;
        var madeBy = this.versionMadeBy >> 8;

        // Check if we have the DOS directory flag set.
        // We look for it in the DOS and UNIX permissions
        // but some unknown platform could set it as a compatibility flag.
        this.dir = this.externalFileAttributes & 0x0010 ? true : false;

        if(madeBy === MADE_BY_DOS) {
            // first 6 bits (0 to 5)
            this.dosPermissions = this.externalFileAttributes & 0x3F;
        }

        if(madeBy === MADE_BY_UNIX) {
            this.unixPermissions = (this.externalFileAttributes >> 16) & 0xFFFF;
            // the octal permissions are in (this.unixPermissions & 0x01FF).toString(8);
        }

        // fail safe : if the name ends with a / it probably means a folder
        if (!this.dir && this.fileNameStr.slice(-1) === '/') {
            this.dir = true;
        }
    },

    /**
     * Parse the ZIP64 extra field and merge the info in the current ZipEntry.
     * @param {DataReader} reader the reader to use.
     */
    parseZIP64ExtraField: function(reader) {

        if (!this.extraFields[0x0001]) {
            return;
        }

        // should be something, preparing the extra reader
        var extraReader = readerFor(this.extraFields[0x0001].value);

        // I really hope that these 64bits integer can fit in 32 bits integer, because js
        // won't let us have more.
        if (this.uncompressedSize === utils.MAX_VALUE_32BITS) {
            this.uncompressedSize = extraReader.readInt(8);
        }
        if (this.compressedSize === utils.MAX_VALUE_32BITS) {
            this.compressedSize = extraReader.readInt(8);
        }
        if (this.localHeaderOffset === utils.MAX_VALUE_32BITS) {
            this.localHeaderOffset = extraReader.readInt(8);
        }
        if (this.diskNumberStart === utils.MAX_VALUE_32BITS) {
            this.diskNumberStart = extraReader.readInt(4);
        }
    },
    /**
     * Read the central part of a zip file and add the info in this object.
     * @param {DataReader} reader the reader to use.
     */
    readExtraFields: function(reader) {
        var end = reader.index + this.extraFieldsLength,
            extraFieldId,
            extraFieldLength,
            extraFieldValue;

        if (!this.extraFields) {
            this.extraFields = {};
        }

        while (reader.index < end) {
            extraFieldId = reader.readInt(2);
            extraFieldLength = reader.readInt(2);
            extraFieldValue = reader.readData(extraFieldLength);

            this.extraFields[extraFieldId] = {
                id: extraFieldId,
                length: extraFieldLength,
                value: extraFieldValue
            };
        }
    },
    /**
     * Apply an UTF8 transformation if needed.
     */
    handleUTF8: function() {
        var decodeParamType = support.uint8array ? "uint8array" : "array";
        if (this.useUTF8()) {
            this.fileNameStr = utf8.utf8decode(this.fileName);
            this.fileCommentStr = utf8.utf8decode(this.fileComment);
        } else {
            var upath = this.findExtraFieldUnicodePath();
            if (upath !== null) {
                this.fileNameStr = upath;
            } else {
                // ASCII text or unsupported code page
                var fileNameByteArray =  utils.transformTo(decodeParamType, this.fileName);
                this.fileNameStr = this.loadOptions.decodeFileName(fileNameByteArray);
            }

            var ucomment = this.findExtraFieldUnicodeComment();
            if (ucomment !== null) {
                this.fileCommentStr = ucomment;
            } else {
                // ASCII text or unsupported code page
                var commentByteArray =  utils.transformTo(decodeParamType, this.fileComment);
                this.fileCommentStr = this.loadOptions.decodeFileName(commentByteArray);
            }
        }
    },

    /**
     * Find the unicode path declared in the extra field, if any.
     * @return {String} the unicode path, null otherwise.
     */
    findExtraFieldUnicodePath: function() {
        var upathField = this.extraFields[0x7075];
        if (upathField) {
            var extraReader = readerFor(upathField.value);

            // wrong version
            if (extraReader.readInt(1) !== 1) {
                return null;
            }

            // the crc of the filename changed, this field is out of date.
            if (crc32fn(this.fileName) !== extraReader.readInt(4)) {
                return null;
            }

            return utf8.utf8decode(extraReader.readData(upathField.length - 5));
        }
        return null;
    },

    /**
     * Find the unicode comment declared in the extra field, if any.
     * @return {String} the unicode comment, null otherwise.
     */
    findExtraFieldUnicodeComment: function() {
        var ucommentField = this.extraFields[0x6375];
        if (ucommentField) {
            var extraReader = readerFor(ucommentField.value);

            // wrong version
            if (extraReader.readInt(1) !== 1) {
                return null;
            }

            // the crc of the comment changed, this field is out of date.
            if (crc32fn(this.fileComment) !== extraReader.readInt(4)) {
                return null;
            }

            return utf8.utf8decode(extraReader.readData(ucommentField.length - 5));
        }
        return null;
    }
};
module.exports = ZipEntry;

},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":19,"./support":27,"./utf8":28,"./utils":29}],32:[function(require,module,exports){
'use strict';

var StreamHelper = require('./stream/StreamHelper');
var DataWorker = require('./stream/DataWorker');
var utf8 = require('./utf8');
var CompressedObject = require('./compressedObject');
var GenericWorker = require('./stream/GenericWorker');

/**
 * A simple object representing a file in the zip file.
 * @constructor
 * @param {string} name the name of the file
 * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data
 * @param {Object} options the options of the file
 */
var ZipObject = function(name, data, options) {
    this.name = name;
    this.dir = options.dir;
    this.date = options.date;
    this.comment = options.comment;
    this.unixPermissions = options.unixPermissions;
    this.dosPermissions = options.dosPermissions;

    this._data = data;
    this._dataBinary = options.binary;
    // keep only the compression
    this.options = {
        compression : options.compression,
        compressionOptions : options.compressionOptions
    };
};

ZipObject.prototype = {
    /**
     * Create an internal stream for the content of this object.
     * @param {String} type the type of each chunk.
     * @return StreamHelper the stream.
     */
    internalStream: function (type) {
        var outputType = type.toLowerCase();
        var askUnicodeString = outputType === "string" || outputType === "text";
        if (outputType === "binarystring" || outputType === "text") {
            outputType = "string";
        }
        var result = this._decompressWorker();

        var isUnicodeString = !this._dataBinary;

        if (isUnicodeString && !askUnicodeString) {
            result = result.pipe(new utf8.Utf8EncodeWorker());
        }
        if (!isUnicodeString && askUnicodeString) {
            result = result.pipe(new utf8.Utf8DecodeWorker());
        }

        return new StreamHelper(result, outputType, "");
    },

    /**
     * Prepare the content in the asked type.
     * @param {String} type the type of the result.
     * @param {Function} onUpdate a function to call on each internal update.
     * @return Promise the promise of the result.
     */
    async: function (type, onUpdate) {
        return this.internalStream(type).accumulate(onUpdate);
    },

    /**
     * Prepare the content as a nodejs stream.
     * @param {String} type the type of each chunk.
     * @param {Function} onUpdate a function to call on each internal update.
     * @return Stream the stream.
     */
    nodeStream: function (type, onUpdate) {
        return this.internalStream(type || "nodebuffer").toNodejsStream(onUpdate);
    },

    /**
     * Return a worker for the compressed content.
     * @private
     * @param {Object} compression the compression object to use.
     * @param {Object} compressionOptions the options to use when compressing.
     * @return Worker the worker.
     */
    _compressWorker: function (compression, compressionOptions) {
        if (
            this._data instanceof CompressedObject &&
            this._data.compression.magic === compression.magic
        ) {
            return this._data.getCompressedWorker();
        } else {
            var result = this._decompressWorker();
            if(!this._dataBinary) {
                result = result.pipe(new utf8.Utf8EncodeWorker());
            }
            return CompressedObject.createWorkerFrom(result, compression, compressionOptions);
        }
    },
    /**
     * Return a worker for the decompressed content.
     * @private
     * @return Worker the worker.
     */
    _decompressWorker : function () {
        if (this._data instanceof CompressedObject) {
            return this._data.getContentWorker();
        } else if (this._data instanceof GenericWorker) {
            return this._data;
        } else {
            return new DataWorker(this._data);
        }
    }
};

var removedMethods = ["asText", "asBinary", "asNodeBuffer", "asUint8Array", "asArrayBuffer"];
var removedFn = function () {
    throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.");
};

for(var i = 0; i < removedMethods.length; i++) {
    ZipObject.prototype[removedMethods[i]] = removedFn;
}
module.exports = ZipObject;

},{"./compressedObject":2,"./stream/DataWorker":24,"./stream/GenericWorker":25,"./stream/StreamHelper":26,"./utf8":28}],33:[function(require,module,exports){
"use strict";

// rawAsap provides everything we need except exception management.
var rawAsap = require("./raw");
// RawTasks are recycled to reduce GC churn.
var freeTasks = [];
// We queue errors to ensure they are thrown in right order (FIFO).
// Array-as-queue is good enough here, since we are just dealing with exceptions.
var pendingErrors = [];
var requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);

function throwFirstError() {
    if (pendingErrors.length) {
        throw pendingErrors.shift();
    }
}

/**
 * Calls a task as soon as possible after returning, in its own event, with priority
 * over other events like animation, reflow, and repaint. An error thrown from an
 * event will not interrupt, nor even substantially slow down the processing of
 * other events, but will be rather postponed to a lower priority event.
 * @param {{call}} task A callable object, typically a function that takes no
 * arguments.
 */
module.exports = asap;
function asap(task) {
    var rawTask;
    if (freeTasks.length) {
        rawTask = freeTasks.pop();
    } else {
        rawTask = new RawTask();
    }
    rawTask.task = task;
    rawAsap(rawTask);
}

// We wrap tasks with recyclable task objects.  A task object implements
// `call`, just like a function.
function RawTask() {
    this.task = null;
}

// The sole purpose of wrapping the task is to catch the exception and recycle
// the task object after its single use.
RawTask.prototype.call = function () {
    try {
        this.task.call();
    } catch (error) {
        if (asap.onerror) {
            // This hook exists purely for testing purposes.
            // Its name will be periodically randomized to break any code that
            // depends on its existence.
            asap.onerror(error);
        } else {
            // In a web browser, exceptions are not fatal. However, to avoid
            // slowing down the queue of pending tasks, we rethrow the error in a
            // lower priority turn.
            pendingErrors.push(error);
            requestErrorThrow();
        }
    } finally {
        this.task = null;
        freeTasks[freeTasks.length] = this;
    }
};

},{"./raw":34}],34:[function(require,module,exports){
(function (global){
"use strict";

// Use the fastest means possible to execute a task in its own turn, with
// priority over other events including IO, animation, reflow, and redraw
// events in browsers.
//
// An exception thrown by a task will permanently interrupt the processing of
// subsequent tasks. The higher level `asap` function ensures that if an
// exception is thrown by a task, that the task queue will continue flushing as
// soon as possible, but if you use `rawAsap` directly, you are responsible to
// either ensure that no exceptions are thrown from your task, or to manually
// call `rawAsap.requestFlush` if an exception is thrown.
module.exports = rawAsap;
function rawAsap(task) {
    if (!queue.length) {
        requestFlush();
        flushing = true;
    }
    // Equivalent to push, but avoids a function call.
    queue[queue.length] = task;
}

var queue = [];
// Once a flush has been requested, no further calls to `requestFlush` are
// necessary until the next `flush` completes.
var flushing = false;
// `requestFlush` is an implementation-specific method that attempts to kick
// off a `flush` event as quickly as possible. `flush` will attempt to exhaust
// the event queue before yielding to the browser's own event loop.
var requestFlush;
// The position of the next task to execute in the task queue. This is
// preserved between calls to `flush` so that it can be resumed if
// a task throws an exception.
var index = 0;
// If a task schedules additional tasks recursively, the task queue can grow
// unbounded. To prevent memory exhaustion, the task queue will periodically
// truncate already-completed tasks.
var capacity = 1024;

// The flush function processes all tasks that have been scheduled with
// `rawAsap` unless and until one of those tasks throws an exception.
// If a task throws an exception, `flush` ensures that its state will remain
// consistent and will resume where it left off when called again.
// However, `flush` does not make any arrangements to be called again if an
// exception is thrown.
function flush() {
    while (index < queue.length) {
        var currentIndex = index;
        // Advance the index before calling the task. This ensures that we will
        // begin flushing on the next task the task throws an error.
        index = index + 1;
        queue[currentIndex].call();
        // Prevent leaking memory for long chains of recursive calls to `asap`.
        // If we call `asap` within tasks scheduled by `asap`, the queue will
        // grow, but to avoid an O(n) walk for every task we execute, we don't
        // shift tasks off the queue after they have been executed.
        // Instead, we periodically shift 1024 tasks off the queue.
        if (index > capacity) {
            // Manually shift all values starting at the index back to the
            // beginning of the queue.
            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
                queue[scan] = queue[scan + index];
            }
            queue.length -= index;
            index = 0;
        }
    }
    queue.length = 0;
    index = 0;
    flushing = false;
}

// `requestFlush` is implemented using a strategy based on data collected from
// every available SauceLabs Selenium web driver worker at time of writing.
// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593

// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that
// have WebKitMutationObserver but not un-prefixed MutationObserver.
// Must use `global` instead of `window` to work in both frames and web
// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.
var BrowserMutationObserver = global.MutationObserver || global.WebKitMutationObserver;

// MutationObservers are desirable because they have high priority and work
// reliably everywhere they are implemented.
// They are implemented in all modern browsers.
//
// - Android 4-4.3
// - Chrome 26-34
// - Firefox 14-29
// - Internet Explorer 11
// - iPad Safari 6-7.1
// - iPhone Safari 7-7.1
// - Safari 6-7
if (typeof BrowserMutationObserver === "function") {
    requestFlush = makeRequestCallFromMutationObserver(flush);

// MessageChannels are desirable because they give direct access to the HTML
// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera
// 11-12, and in web workers in many engines.
// Although message channels yield to any queued rendering and IO tasks, they
// would be better than imposing the 4ms delay of timers.
// However, they do not work reliably in Internet Explorer or Safari.

// Internet Explorer 10 is the only browser that has setImmediate but does
// not have MutationObservers.
// Although setImmediate yields to the browser's renderer, it would be
// preferrable to falling back to setTimeout since it does not have
// the minimum 4ms penalty.
// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and
// Desktop to a lesser extent) that renders both setImmediate and
// MessageChannel useless for the purposes of ASAP.
// https://github.com/kriskowal/q/issues/396

// Timers are implemented universally.
// We fall back to timers in workers in most engines, and in foreground
// contexts in the following browsers.
// However, note that even this simple case requires nuances to operate in a
// broad spectrum of browsers.
//
// - Firefox 3-13
// - Internet Explorer 6-9
// - iPad Safari 4.3
// - Lynx 2.8.7
} else {
    requestFlush = makeRequestCallFromTimer(flush);
}

// `requestFlush` requests that the high priority event queue be flushed as
// soon as possible.
// This is useful to prevent an error thrown in a task from stalling the event
// queue if the exception handled by Node.js’s
// `process.on("uncaughtException")` or by a domain.
rawAsap.requestFlush = requestFlush;

// To request a high priority event, we induce a mutation observer by toggling
// the text of a text node between "1" and "-1".
function makeRequestCallFromMutationObserver(callback) {
    var toggle = 1;
    var observer = new BrowserMutationObserver(callback);
    var node = document.createTextNode("");
    observer.observe(node, {characterData: true});
    return function requestCall() {
        toggle = -toggle;
        node.data = toggle;
    };
}

// The message channel technique was discovered by Malte Ubl and was the
// original foundation for this library.
// http://www.nonblocking.io/2011/06/windownexttick.html

// Safari 6.0.5 (at least) intermittently fails to create message ports on a
// page's first load. Thankfully, this version of Safari supports
// MutationObservers, so we don't need to fall back in that case.

// function makeRequestCallFromMessageChannel(callback) {
//     var channel = new MessageChannel();
//     channel.port1.onmessage = callback;
//     return function requestCall() {
//         channel.port2.postMessage(0);
//     };
// }

// For reasons explained above, we are also unable to use `setImmediate`
// under any circumstances.
// Even if we were, there is another bug in Internet Explorer 10.
// It is not sufficient to assign `setImmediate` to `requestFlush` because
// `setImmediate` must be called *by name* and therefore must be wrapped in a
// closure.
// Never forget.

// function makeRequestCallFromSetImmediate(callback) {
//     return function requestCall() {
//         setImmediate(callback);
//     };
// }

// Safari 6.0 has a problem where timers will get lost while the user is
// scrolling. This problem does not impact ASAP because Safari 6.0 supports
// mutation observers, so that implementation is used instead.
// However, if we ever elect to use timers in Safari, the prevalent work-around
// is to add a scroll event listener that calls for a flush.

// `setTimeout` does not call the passed callback if the delay is less than
// approximately 7 in web workers in Firefox 8 through 18, and sometimes not
// even then.

function makeRequestCallFromTimer(callback) {
    return function requestCall() {
        // We dispatch a timeout with a specified delay of 0 for engines that
        // can reliably accommodate that request. This will usually be snapped
        // to a 4 milisecond delay, but once we're flushing, there's no delay
        // between events.
        var timeoutHandle = setTimeout(handleTimer, 0);
        // However, since this timer gets frequently dropped in Firefox
        // workers, we enlist an interval handle that will try to fire
        // an event 20 times per second until it succeeds.
        var intervalHandle = setInterval(handleTimer, 50);

        function handleTimer() {
            // Whichever timer succeeds will cancel both timers and
            // execute the callback.
            clearTimeout(timeoutHandle);
            clearInterval(intervalHandle);
            callback();
        }
    };
}

// This is for `asap.js` only.
// Its name will be periodically randomized to break any code that depends on
// its existence.
rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;

// ASAP was originally a nextTick shim included in Q. This was factored out
// into this ASAP package. It was later adapted to RSVP which made further
// amendments. These decisions, particularly to marginalize MessageChannel and
// to capture the MutationObserver implementation in a closure, were integrated
// back into ASAP proper.
// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],35:[function(require,module,exports){

},{}],36:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],37:[function(require,module,exports){
(function (process,global){
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE
 * @version   3.0.2
 */

(function() {
    "use strict";
    function lib$es6$promise$utils$$objectOrFunction(x) {
      return typeof x === 'function' || (typeof x === 'object' && x !== null);
    }

    function lib$es6$promise$utils$$isFunction(x) {
      return typeof x === 'function';
    }

    function lib$es6$promise$utils$$isMaybeThenable(x) {
      return typeof x === 'object' && x !== null;
    }

    var lib$es6$promise$utils$$_isArray;
    if (!Array.isArray) {
      lib$es6$promise$utils$$_isArray = function (x) {
        return Object.prototype.toString.call(x) === '[object Array]';
      };
    } else {
      lib$es6$promise$utils$$_isArray = Array.isArray;
    }

    var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;
    var lib$es6$promise$asap$$len = 0;
    var lib$es6$promise$asap$$toString = {}.toString;
    var lib$es6$promise$asap$$vertxNext;
    var lib$es6$promise$asap$$customSchedulerFn;

    var lib$es6$promise$asap$$asap = function asap(callback, arg) {
      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;
      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;
      lib$es6$promise$asap$$len += 2;
      if (lib$es6$promise$asap$$len === 2) {
        // If len is 2, that means that we need to schedule an async flush.
        // If additional callbacks are queued before the queue is flushed, they
        // will be processed by this flush that we are scheduling.
        if (lib$es6$promise$asap$$customSchedulerFn) {
          lib$es6$promise$asap$$customSchedulerFn(lib$es6$promise$asap$$flush);
        } else {
          lib$es6$promise$asap$$scheduleFlush();
        }
      }
    }

    function lib$es6$promise$asap$$setScheduler(scheduleFn) {
      lib$es6$promise$asap$$customSchedulerFn = scheduleFn;
    }

    function lib$es6$promise$asap$$setAsap(asapFn) {
      lib$es6$promise$asap$$asap = asapFn;
    }

    var lib$es6$promise$asap$$browserWindow = (typeof window !== 'undefined') ? window : undefined;
    var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};
    var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;
    var lib$es6$promise$asap$$isNode = typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

    // test for web worker but not in IE10
    var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&
      typeof importScripts !== 'undefined' &&
      typeof MessageChannel !== 'undefined';

    // node
    function lib$es6$promise$asap$$useNextTick() {
      // node version 0.10.x displays a deprecation warning when nextTick is used recursively
      // see https://github.com/cujojs/when/issues/410 for details
      return function() {
        process.nextTick(lib$es6$promise$asap$$flush);
      };
    }

    // vertx
    function lib$es6$promise$asap$$useVertxTimer() {
      return function() {
        lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);
      };
    }

    function lib$es6$promise$asap$$useMutationObserver() {
      var iterations = 0;
      var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);
      var node = document.createTextNode('');
      observer.observe(node, { characterData: true });

      return function() {
        node.data = (iterations = ++iterations % 2);
      };
    }

    // web worker
    function lib$es6$promise$asap$$useMessageChannel() {
      var channel = new MessageChannel();
      channel.port1.onmessage = lib$es6$promise$asap$$flush;
      return function () {
        channel.port2.postMessage(0);
      };
    }

    function lib$es6$promise$asap$$useSetTimeout() {
      return function() {
        setTimeout(lib$es6$promise$asap$$flush, 1);
      };
    }

    var lib$es6$promise$asap$$queue = new Array(1000);
    function lib$es6$promise$asap$$flush() {
      for (var i = 0; i < lib$es6$promise$asap$$len; i+=2) {
        var callback = lib$es6$promise$asap$$queue[i];
        var arg = lib$es6$promise$asap$$queue[i+1];

        callback(arg);

        lib$es6$promise$asap$$queue[i] = undefined;
        lib$es6$promise$asap$$queue[i+1] = undefined;
      }

      lib$es6$promise$asap$$len = 0;
    }

    function lib$es6$promise$asap$$attemptVertx() {
      try {
        var r = require;
        var vertx = r('vertx');
        lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;
        return lib$es6$promise$asap$$useVertxTimer();
      } catch(e) {
        return lib$es6$promise$asap$$useSetTimeout();
      }
    }

    var lib$es6$promise$asap$$scheduleFlush;
    // Decide what async method to use to triggering processing of queued callbacks:
    if (lib$es6$promise$asap$$isNode) {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();
    } else if (lib$es6$promise$asap$$BrowserMutationObserver) {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();
    } else if (lib$es6$promise$asap$$isWorker) {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();
    } else if (lib$es6$promise$asap$$browserWindow === undefined && typeof require === 'function') {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertx();
    } else {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();
    }

    function lib$es6$promise$$internal$$noop() {}

    var lib$es6$promise$$internal$$PENDING   = void 0;
    var lib$es6$promise$$internal$$FULFILLED = 1;
    var lib$es6$promise$$internal$$REJECTED  = 2;

    var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();

    function lib$es6$promise$$internal$$selfFulfillment() {
      return new TypeError("You cannot resolve a promise with itself");
    }

    function lib$es6$promise$$internal$$cannotReturnOwn() {
      return new TypeError('A promises callback cannot return that same promise.');
    }

    function lib$es6$promise$$internal$$getThen(promise) {
      try {
        return promise.then;
      } catch(error) {
        lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;
        return lib$es6$promise$$internal$$GET_THEN_ERROR;
      }
    }

    function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {
      try {
        then.call(value, fulfillmentHandler, rejectionHandler);
      } catch(e) {
        return e;
      }
    }

    function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {
       lib$es6$promise$asap$$asap(function(promise) {
        var sealed = false;
        var error = lib$es6$promise$$internal$$tryThen(then, thenable, function(value) {
          if (sealed) { return; }
          sealed = true;
          if (thenable !== value) {
            lib$es6$promise$$internal$$resolve(promise, value);
          } else {
            lib$es6$promise$$internal$$fulfill(promise, value);
          }
        }, function(reason) {
          if (sealed) { return; }
          sealed = true;

          lib$es6$promise$$internal$$reject(promise, reason);
        }, 'Settle: ' + (promise._label || ' unknown promise'));

        if (!sealed && error) {
          sealed = true;
          lib$es6$promise$$internal$$reject(promise, error);
        }
      }, promise);
    }

    function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {
      if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {
        lib$es6$promise$$internal$$fulfill(promise, thenable._result);
      } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {
        lib$es6$promise$$internal$$reject(promise, thenable._result);
      } else {
        lib$es6$promise$$internal$$subscribe(thenable, undefined, function(value) {
          lib$es6$promise$$internal$$resolve(promise, value);
        }, function(reason) {
          lib$es6$promise$$internal$$reject(promise, reason);
        });
      }
    }

    function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable) {
      if (maybeThenable.constructor === promise.constructor) {
        lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);
      } else {
        var then = lib$es6$promise$$internal$$getThen(maybeThenable);

        if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {
          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);
        } else if (then === undefined) {
          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
        } else if (lib$es6$promise$utils$$isFunction(then)) {
          lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);
        } else {
          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
        }
      }
    }

    function lib$es6$promise$$internal$$resolve(promise, value) {
      if (promise === value) {
        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFulfillment());
      } else if (lib$es6$promise$utils$$objectOrFunction(value)) {
        lib$es6$promise$$internal$$handleMaybeThenable(promise, value);
      } else {
        lib$es6$promise$$internal$$fulfill(promise, value);
      }
    }

    function lib$es6$promise$$internal$$publishRejection(promise) {
      if (promise._onerror) {
        promise._onerror(promise._result);
      }

      lib$es6$promise$$internal$$publish(promise);
    }

    function lib$es6$promise$$internal$$fulfill(promise, value) {
      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }

      promise._result = value;
      promise._state = lib$es6$promise$$internal$$FULFILLED;

      if (promise._subscribers.length !== 0) {
        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, promise);
      }
    }

    function lib$es6$promise$$internal$$reject(promise, reason) {
      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }
      promise._state = lib$es6$promise$$internal$$REJECTED;
      promise._result = reason;

      lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publishRejection, promise);
    }

    function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {
      var subscribers = parent._subscribers;
      var length = subscribers.length;

      parent._onerror = null;

      subscribers[length] = child;
      subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;
      subscribers[length + lib$es6$promise$$internal$$REJECTED]  = onRejection;

      if (length === 0 && parent._state) {
        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, parent);
      }
    }

    function lib$es6$promise$$internal$$publish(promise) {
      var subscribers = promise._subscribers;
      var settled = promise._state;

      if (subscribers.length === 0) { return; }

      var child, callback, detail = promise._result;

      for (var i = 0; i < subscribers.length; i += 3) {
        child = subscribers[i];
        callback = subscribers[i + settled];

        if (child) {
          lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);
        } else {
          callback(detail);
        }
      }

      promise._subscribers.length = 0;
    }

    function lib$es6$promise$$internal$$ErrorObject() {
      this.error = null;
    }

    var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();

    function lib$es6$promise$$internal$$tryCatch(callback, detail) {
      try {
        return callback(detail);
      } catch(e) {
        lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;
        return lib$es6$promise$$internal$$TRY_CATCH_ERROR;
      }
    }

    function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {
      var hasCallback = lib$es6$promise$utils$$isFunction(callback),
          value, error, succeeded, failed;

      if (hasCallback) {
        value = lib$es6$promise$$internal$$tryCatch(callback, detail);

        if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {
          failed = true;
          error = value.error;
          value = null;
        } else {
          succeeded = true;
        }

        if (promise === value) {
          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());
          return;
        }

      } else {
        value = detail;
        succeeded = true;
      }

      if (promise._state !== lib$es6$promise$$internal$$PENDING) {
        // noop
      } else if (hasCallback && succeeded) {
        lib$es6$promise$$internal$$resolve(promise, value);
      } else if (failed) {
        lib$es6$promise$$internal$$reject(promise, error);
      } else if (settled === lib$es6$promise$$internal$$FULFILLED) {
        lib$es6$promise$$internal$$fulfill(promise, value);
      } else if (settled === lib$es6$promise$$internal$$REJECTED) {
        lib$es6$promise$$internal$$reject(promise, value);
      }
    }

    function lib$es6$promise$$internal$$initializePromise(promise, resolver) {
      try {
        resolver(function resolvePromise(value){
          lib$es6$promise$$internal$$resolve(promise, value);
        }, function rejectPromise(reason) {
          lib$es6$promise$$internal$$reject(promise, reason);
        });
      } catch(e) {
        lib$es6$promise$$internal$$reject(promise, e);
      }
    }

    function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {
      var enumerator = this;

      enumerator._instanceConstructor = Constructor;
      enumerator.promise = new Constructor(lib$es6$promise$$internal$$noop);

      if (enumerator._validateInput(input)) {
        enumerator._input     = input;
        enumerator.length     = input.length;
        enumerator._remaining = input.length;

        enumerator._init();

        if (enumerator.length === 0) {
          lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
        } else {
          enumerator.length = enumerator.length || 0;
          enumerator._enumerate();
          if (enumerator._remaining === 0) {
            lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
          }
        }
      } else {
        lib$es6$promise$$internal$$reject(enumerator.promise, enumerator._validationError());
      }
    }

    lib$es6$promise$enumerator$$Enumerator.prototype._validateInput = function(input) {
      return lib$es6$promise$utils$$isArray(input);
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._validationError = function() {
      return new Error('Array Methods must be provided an Array');
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._init = function() {
      this._result = new Array(this.length);
    };

    var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;

    lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function() {
      var enumerator = this;

      var length  = enumerator.length;
      var promise = enumerator.promise;
      var input   = enumerator._input;

      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
        enumerator._eachEntry(input[i], i);
      }
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {
      var enumerator = this;
      var c = enumerator._instanceConstructor;

      if (lib$es6$promise$utils$$isMaybeThenable(entry)) {
        if (entry.constructor === c && entry._state !== lib$es6$promise$$internal$$PENDING) {
          entry._onerror = null;
          enumerator._settledAt(entry._state, i, entry._result);
        } else {
          enumerator._willSettleAt(c.resolve(entry), i);
        }
      } else {
        enumerator._remaining--;
        enumerator._result[i] = entry;
      }
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {
      var enumerator = this;
      var promise = enumerator.promise;

      if (promise._state === lib$es6$promise$$internal$$PENDING) {
        enumerator._remaining--;

        if (state === lib$es6$promise$$internal$$REJECTED) {
          lib$es6$promise$$internal$$reject(promise, value);
        } else {
          enumerator._result[i] = value;
        }
      }

      if (enumerator._remaining === 0) {
        lib$es6$promise$$internal$$fulfill(promise, enumerator._result);
      }
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {
      var enumerator = this;

      lib$es6$promise$$internal$$subscribe(promise, undefined, function(value) {
        enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);
      }, function(reason) {
        enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);
      });
    };
    function lib$es6$promise$promise$all$$all(entries) {
      return new lib$es6$promise$enumerator$$default(this, entries).promise;
    }
    var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;
    function lib$es6$promise$promise$race$$race(entries) {
      /*jshint validthis:true */
      var Constructor = this;

      var promise = new Constructor(lib$es6$promise$$internal$$noop);

      if (!lib$es6$promise$utils$$isArray(entries)) {
        lib$es6$promise$$internal$$reject(promise, new TypeError('You must pass an array to race.'));
        return promise;
      }

      var length = entries.length;

      function onFulfillment(value) {
        lib$es6$promise$$internal$$resolve(promise, value);
      }

      function onRejection(reason) {
        lib$es6$promise$$internal$$reject(promise, reason);
      }

      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
        lib$es6$promise$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);
      }

      return promise;
    }
    var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;
    function lib$es6$promise$promise$resolve$$resolve(object) {
      /*jshint validthis:true */
      var Constructor = this;

      if (object && typeof object === 'object' && object.constructor === Constructor) {
        return object;
      }

      var promise = new Constructor(lib$es6$promise$$internal$$noop);
      lib$es6$promise$$internal$$resolve(promise, object);
      return promise;
    }
    var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;
    function lib$es6$promise$promise$reject$$reject(reason) {
      /*jshint validthis:true */
      var Constructor = this;
      var promise = new Constructor(lib$es6$promise$$internal$$noop);
      lib$es6$promise$$internal$$reject(promise, reason);
      return promise;
    }
    var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;

    var lib$es6$promise$promise$$counter = 0;

    function lib$es6$promise$promise$$needsResolver() {
      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
    }

    function lib$es6$promise$promise$$needsNew() {
      throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
    }

    var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;
    /**
      Promise objects represent the eventual result of an asynchronous operation. The
      primary way of interacting with a promise is through its `then` method, which
      registers callbacks to receive either a promise's eventual value or the reason
      why the promise cannot be fulfilled.

      Terminology
      -----------

      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
      - `thenable` is an object or function that defines a `then` method.
      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
      - `exception` is a value that is thrown using the throw statement.
      - `reason` is a value that indicates why a promise was rejected.
      - `settled` the final resting state of a promise, fulfilled or rejected.

      A promise can be in one of three states: pending, fulfilled, or rejected.

      Promises that are fulfilled have a fulfillment value and are in the fulfilled
      state.  Promises that are rejected have a rejection reason and are in the
      rejected state.  A fulfillment value is never a thenable.

      Promises can also be said to *resolve* a value.  If this value is also a
      promise, then the original promise's settled state will match the value's
      settled state.  So a promise that *resolves* a promise that rejects will
      itself reject, and a promise that *resolves* a promise that fulfills will
      itself fulfill.


      Basic Usage:
      ------------

      ```js
      var promise = new Promise(function(resolve, reject) {
        // on success
        resolve(value);

        // on failure
        reject(reason);
      });

      promise.then(function(value) {
        // on fulfillment
      }, function(reason) {
        // on rejection
      });
      ```

      Advanced Usage:
      ---------------

      Promises shine when abstracting away asynchronous interactions such as
      `XMLHttpRequest`s.

      ```js
      function getJSON(url) {
        return new Promise(function(resolve, reject){
          var xhr = new XMLHttpRequest();

          xhr.open('GET', url);
          xhr.onreadystatechange = handler;
          xhr.responseType = 'json';
          xhr.setRequestHeader('Accept', 'application/json');
          xhr.send();

          function handler() {
            if (this.readyState === this.DONE) {
              if (this.status === 200) {
                resolve(this.response);
              } else {
                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
              }
            }
          };
        });
      }

      getJSON('/posts.json').then(function(json) {
        // on fulfillment
      }, function(reason) {
        // on rejection
      });
      ```

      Unlike callbacks, promises are great composable primitives.

      ```js
      Promise.all([
        getJSON('/posts'),
        getJSON('/comments')
      ]).then(function(values){
        values[0] // => postsJSON
        values[1] // => commentsJSON

        return values;
      });
      ```

      @class Promise
      @param {function} resolver
      Useful for tooling.
      @constructor
    */
    function lib$es6$promise$promise$$Promise(resolver) {
      this._id = lib$es6$promise$promise$$counter++;
      this._state = undefined;
      this._result = undefined;
      this._subscribers = [];

      if (lib$es6$promise$$internal$$noop !== resolver) {
        if (!lib$es6$promise$utils$$isFunction(resolver)) {
          lib$es6$promise$promise$$needsResolver();
        }

        if (!(this instanceof lib$es6$promise$promise$$Promise)) {
          lib$es6$promise$promise$$needsNew();
        }

        lib$es6$promise$$internal$$initializePromise(this, resolver);
      }
    }

    lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;
    lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;
    lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;
    lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;
    lib$es6$promise$promise$$Promise._setScheduler = lib$es6$promise$asap$$setScheduler;
    lib$es6$promise$promise$$Promise._setAsap = lib$es6$promise$asap$$setAsap;
    lib$es6$promise$promise$$Promise._asap = lib$es6$promise$asap$$asap;

    lib$es6$promise$promise$$Promise.prototype = {
      constructor: lib$es6$promise$promise$$Promise,

    /**
      The primary way of interacting with a promise is through its `then` method,
      which registers callbacks to receive either a promise's eventual value or the
      reason why the promise cannot be fulfilled.

      ```js
      findUser().then(function(user){
        // user is available
      }, function(reason){
        // user is unavailable, and you are given the reason why
      });
      ```

      Chaining
      --------

      The return value of `then` is itself a promise.  This second, 'downstream'
      promise is resolved with the return value of the first promise's fulfillment
      or rejection handler, or rejected if the handler throws an exception.

      ```js
      findUser().then(function (user) {
        return user.name;
      }, function (reason) {
        return 'default name';
      }).then(function (userName) {
        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
        // will be `'default name'`
      });

      findUser().then(function (user) {
        throw new Error('Found user, but still unhappy');
      }, function (reason) {
        throw new Error('`findUser` rejected and we're unhappy');
      }).then(function (value) {
        // never reached
      }, function (reason) {
        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
      });
      ```
      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.

      ```js
      findUser().then(function (user) {
        throw new PedagogicalException('Upstream error');
      }).then(function (value) {
        // never reached
      }).then(function (value) {
        // never reached
      }, function (reason) {
        // The `PedgagocialException` is propagated all the way down to here
      });
      ```

      Assimilation
      ------------

      Sometimes the value you want to propagate to a downstream promise can only be
      retrieved asynchronously. This can be achieved by returning a promise in the
      fulfillment or rejection handler. The downstream promise will then be pending
      until the returned promise is settled. This is called *assimilation*.

      ```js
      findUser().then(function (user) {
        return findCommentsByAuthor(user);
      }).then(function (comments) {
        // The user's comments are now available
      });
      ```

      If the assimliated promise rejects, then the downstream promise will also reject.

      ```js
      findUser().then(function (user) {
        return findCommentsByAuthor(user);
      }).then(function (comments) {
        // If `findCommentsByAuthor` fulfills, we'll have the value here
      }, function (reason) {
        // If `findCommentsByAuthor` rejects, we'll have the reason here
      });
      ```

      Simple Example
      --------------

      Synchronous Example

      ```javascript
      var result;

      try {
        result = findResult();
        // success
      } catch(reason) {
        // failure
      }
      ```

      Errback Example

      ```js
      findResult(function(result, err){
        if (err) {
          // failure
        } else {
          // success
        }
      });
      ```

      Promise Example;

      ```javascript
      findResult().then(function(result){
        // success
      }, function(reason){
        // failure
      });
      ```

      Advanced Example
      --------------

      Synchronous Example

      ```javascript
      var author, books;

      try {
        author = findAuthor();
        books  = findBooksByAuthor(author);
        // success
      } catch(reason) {
        // failure
      }
      ```

      Errback Example

      ```js

      function foundBooks(books) {

      }

      function failure(reason) {

      }

      findAuthor(function(author, err){
        if (err) {
          failure(err);
          // failure
        } else {
          try {
            findBoooksByAuthor(author, function(books, err) {
              if (err) {
                failure(err);
              } else {
                try {
                  foundBooks(books);
                } catch(reason) {
                  failure(reason);
                }
              }
            });
          } catch(error) {
            failure(err);
          }
          // success
        }
      });
      ```

      Promise Example;

      ```javascript
      findAuthor().
        then(findBooksByAuthor).
        then(function(books){
          // found books
      }).catch(function(reason){
        // something went wrong
      });
      ```

      @method then
      @param {Function} onFulfilled
      @param {Function} onRejected
      Useful for tooling.
      @return {Promise}
    */
      then: function(onFulfillment, onRejection) {
        var parent = this;
        var state = parent._state;

        if (state === lib$es6$promise$$internal$$FULFILLED && !onFulfillment || state === lib$es6$promise$$internal$$REJECTED && !onRejection) {
          return this;
        }

        var child = new this.constructor(lib$es6$promise$$internal$$noop);
        var result = parent._result;

        if (state) {
          var callback = arguments[state - 1];
          lib$es6$promise$asap$$asap(function(){
            lib$es6$promise$$internal$$invokeCallback(state, child, callback, result);
          });
        } else {
          lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);
        }

        return child;
      },

    /**
      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
      as the catch block of a try/catch statement.

      ```js
      function findAuthor(){
        throw new Error('couldn't find that author');
      }

      // synchronous
      try {
        findAuthor();
      } catch(reason) {
        // something went wrong
      }

      // async with promises
      findAuthor().catch(function(reason){
        // something went wrong
      });
      ```

      @method catch
      @param {Function} onRejection
      Useful for tooling.
      @return {Promise}
    */
      'catch': function(onRejection) {
        return this.then(null, onRejection);
      }
    };
    function lib$es6$promise$polyfill$$polyfill() {
      var local;

      if (typeof global !== 'undefined') {
          local = global;
      } else if (typeof self !== 'undefined') {
          local = self;
      } else {
          try {
              local = Function('return this')();
          } catch (e) {
              throw new Error('polyfill failed because global object is unavailable in this environment');
          }
      }

      var P = local.Promise;

      if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) {
        return;
      }

      local.Promise = lib$es6$promise$promise$$default;
    }
    var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;

    var lib$es6$promise$umd$$ES6Promise = {
      'Promise': lib$es6$promise$promise$$default,
      'polyfill': lib$es6$promise$polyfill$$default
    };

    /* global define:true module:true window: true */
    if (typeof define === 'function' && define['amd']) {
      define(function() { return lib$es6$promise$umd$$ES6Promise; });
    } else if (typeof module !== 'undefined' && module['exports']) {
      module['exports'] = lib$es6$promise$umd$$ES6Promise;
    } else if (typeof this !== 'undefined') {
      this['ES6Promise'] = lib$es6$promise$umd$$ES6Promise;
    }

    lib$es6$promise$polyfill$$default();
}).call(this);


}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":36}],38:[function(require,module,exports){
// Top level file is just a mixin of submodules & constants


var assign    = require('./lib/utils/common').assign;

var deflate   = require('./lib/deflate');
var inflate   = require('./lib/inflate');
var constants = require('./lib/zlib/constants');

var pako = {};

assign(pako, deflate, inflate, constants);

module.exports = pako;

},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(require,module,exports){
'use strict';


var zlib_deflate = require('./zlib/deflate');
var utils        = require('./utils/common');
var strings      = require('./utils/strings');
var msg          = require('./zlib/messages');
var ZStream      = require('./zlib/zstream');

var toString = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

var Z_NO_FLUSH      = 0;
var Z_FINISH        = 4;

var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_SYNC_FLUSH    = 2;

var Z_DEFAULT_COMPRESSION = -1;

var Z_DEFAULT_STRATEGY    = 0;

var Z_DEFLATED  = 8;

/* ===========================================================================*/


/**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/

/* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overriden.
 **/

/**
 * Deflate.result -> Uint8Array|Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you
 * push a chunk with explicit flush (call [[Deflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/

/**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/


/**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/
function Deflate(options) {
  if (!(this instanceof Deflate)) return new Deflate(options);

  this.options = utils.assign({
    level: Z_DEFAULT_COMPRESSION,
    method: Z_DEFLATED,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY,
    to: ''
  }, options || {});

  var opt = this.options;

  if (opt.raw && (opt.windowBits > 0)) {
    opt.windowBits = -opt.windowBits;
  }

  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
    opt.windowBits += 16;
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm = new ZStream();
  this.strm.avail_out = 0;

  var status = zlib_deflate.deflateInit2(
    this.strm,
    opt.level,
    opt.method,
    opt.windowBits,
    opt.memLevel,
    opt.strategy
  );

  if (status !== Z_OK) {
    throw new Error(msg[status]);
  }

  if (opt.header) {
    zlib_deflate.deflateSetHeader(this.strm, opt.header);
  }

  if (opt.dictionary) {
    var dict;
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      // If we need to compress text, change encoding to utf8.
      dict = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }

    status = zlib_deflate.deflateSetDictionary(this.strm, dict);

    if (status !== Z_OK) {
      throw new Error(msg[status]);
    }

    this._dict_set = true;
  }
}

/**
 * Deflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the compression context.
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * array format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Deflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var status, _mode;

  if (this.ended) { return false; }

  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // If we need to compress text, change encoding to utf8.
    strm.input = strings.string2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }
    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */

    if (status !== Z_STREAM_END && status !== Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }
    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {
      if (this.options.to === 'string') {
        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
      } else {
        this.onData(utils.shrinkBuf(strm.output, strm.next_out));
      }
    }
  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);

  // Finalize on the last chunk.
  if (_mode === Z_FINISH) {
    status = zlib_deflate.deflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === Z_SYNC_FLUSH) {
    this.onEnd(Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Deflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Deflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK) {
    if (this.options.to === 'string') {
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * deflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate algorithm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 * - dictionary
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/
function deflate(input, options) {
  var deflator = new Deflate(options);

  deflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (deflator.err) { throw deflator.msg; }

  return deflator.result;
}


/**
 * deflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function deflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return deflate(input, options);
}


/**
 * gzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/
function gzip(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate(input, options);
}


exports.Deflate = Deflate;
exports.deflate = deflate;
exports.deflateRaw = deflateRaw;
exports.gzip = gzip;

},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(require,module,exports){
'use strict';


var zlib_inflate = require('./zlib/inflate');
var utils        = require('./utils/common');
var strings      = require('./utils/strings');
var c            = require('./zlib/constants');
var msg          = require('./zlib/messages');
var ZStream      = require('./zlib/zstream');
var GZheader     = require('./zlib/gzheader');

var toString = Object.prototype.toString;

/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overriden.
 **/

/**
 * Inflate.result -> Uint8Array|Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
 * push a chunk with explicit flush (call [[Inflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/


/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/
function Inflate(options) {
  if (!(this instanceof Inflate)) return new Inflate(options);

  this.options = utils.assign({
    chunkSize: 16384,
    windowBits: 0,
    to: ''
  }, options || {});

  var opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) { opt.windowBits = -15; }
  }

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
      !(options && options.windowBits)) {
    opt.windowBits += 32;
  }

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }

  this.err    = 0;      // error code, if happens (0 = Z_OK)
  this.msg    = '';     // error message
  this.ended  = false;  // used to avoid multiple onEnd() calls
  this.chunks = [];     // chunks of compressed data

  this.strm   = new ZStream();
  this.strm.avail_out = 0;

  var status  = zlib_inflate.inflateInit2(
    this.strm,
    opt.windowBits
  );

  if (status !== c.Z_OK) {
    throw new Error(msg[status]);
  }

  this.header = new GZheader();

  zlib_inflate.inflateGetHeader(this.strm, this.header);
}

/**
 * Inflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var dictionary = this.options.dictionary;
  var status, _mode;
  var next_out_utf8, tail, utf8str;
  var dict;

  // Flag to properly process Z_BUF_ERROR on testing inflate call
  // when we check that all output data was flushed.
  var allowBufError = false;

  if (this.ended) { return false; }
  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);

  // Convert data if needed
  if (typeof data === 'string') {
    // Only binary strings can be decompressed on practice
    strm.input = strings.binstring2buf(data);
  } else if (toString.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new utils.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */

    if (status === c.Z_NEED_DICT && dictionary) {
      // Convert data if needed
      if (typeof dictionary === 'string') {
        dict = strings.string2buf(dictionary);
      } else if (toString.call(dictionary) === '[object ArrayBuffer]') {
        dict = new Uint8Array(dictionary);
      } else {
        dict = dictionary;
      }

      status = zlib_inflate.inflateSetDictionary(this.strm, dict);

    }

    if (status === c.Z_BUF_ERROR && allowBufError === true) {
      status = c.Z_OK;
      allowBufError = false;
    }

    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }

    if (strm.next_out) {
      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {

        if (this.options.to === 'string') {

          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

          tail = strm.next_out - next_out_utf8;
          utf8str = strings.buf2string(strm.output, next_out_utf8);

          // move tail
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }

          this.onData(utf8str);

        } else {
          this.onData(utils.shrinkBuf(strm.output, strm.next_out));
        }
      }
    }

    // When no more input data, we should check that internal inflate buffers
    // are flushed. The only way to do it when avail_out = 0 - run one more
    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
    // Here we set flag to process this error properly.
    //
    // NOTE. Deflate does not return error in this case and does not needs such
    // logic.
    if (strm.avail_in === 0 && strm.avail_out === 0) {
      allowBufError = true;
    }

  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);

  if (status === c.Z_STREAM_END) {
    _mode = c.Z_FINISH;
  }

  // Finalize on the last chunk.
  if (_mode === c.Z_FINISH) {
    status = zlib_inflate.inflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === c.Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === c.Z_SYNC_FLUSH) {
    this.onEnd(c.Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};


/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};


/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === c.Z_OK) {
    if (this.options.to === 'string') {
      // Glue & convert here, until we teach pako to send
      // utf8 alligned strings to onData
      this.result = this.chunks.join('');
    } else {
      this.result = utils.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};


/**
 * inflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
 *   , output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err)
 *   console.log(err);
 * }
 * ```
 **/
function inflate(input, options) {
  var inflator = new Inflate(options);

  inflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) { throw inflator.msg; }

  return inflator.result;
}


/**
 * inflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function inflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return inflate(input, options);
}


/**
 * ungzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/


exports.Inflate = Inflate;
exports.inflate = inflate;
exports.inflateRaw = inflateRaw;
exports.ungzip  = inflate;

},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(require,module,exports){
'use strict';


var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');


exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (source.hasOwnProperty(p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};


var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};

var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    return [].concat.apply([], chunks);
  }
};


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);

},{}],42:[function(require,module,exports){
// String encode/decode helpers



var utils = require('./common');


// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safary
//
var STR_APPLY_OK = true;
var STR_APPLY_UIA_OK = true;

try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }
try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
var _utf8len = new utils.Buf8(256);
for (var q = 0; q < 256; q++) {
  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
}
_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


// convert string to array (typed, when possible)
exports.string2buf = function (str) {
  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new utils.Buf8(buf_len);

  // convert
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | (c >>> 6);
      buf[i++] = 0x80 | (c & 0x3f);
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | (c >>> 12);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | (c >>> 18);
      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
      buf[i++] = 0x80 | (c & 0x3f);
    }
  }

  return buf;
};

// Helper (used in 2 places)
function buf2binstring(buf, len) {
  // use fallback for big arrays to avoid stack overflow
  if (len < 65537) {
    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
    }
  }

  var result = '';
  for (var i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
}


// Convert byte array to binary string
exports.buf2binstring = function (buf) {
  return buf2binstring(buf, buf.length);
};


// Convert binary string (typed, when possible)
exports.binstring2buf = function (str) {
  var buf = new utils.Buf8(str.length);
  for (var i = 0, len = buf.length; i < len; i++) {
    buf[i] = str.charCodeAt(i);
  }
  return buf;
};


// convert array to string
exports.buf2string = function (buf, max) {
  var i, out, c, c_len;
  var len = max || buf.length;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  var utf16buf = new Array(len * 2);

  for (out = 0, i = 0; i < len;) {
    c = buf[i++];
    // quick process ascii
    if (c < 0x80) { utf16buf[out++] = c; continue; }

    c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = (c << 6) | (buf[i++] & 0x3f);
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
    }
  }

  return buf2binstring(utf16buf, out);
};


// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
exports.utf8border = function (buf, max) {
  var pos;

  max = max || buf.length;
  if (max > buf.length) { max = buf.length; }

  // go back from last position, until start of sequence found
  pos = max - 1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

  // Fuckup - very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) { return max; }

  // If we came to start of buffer - that means vuffer is too small,
  // return max too.
  if (pos === 0) { return max; }

  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
};

},{"./common":41}],43:[function(require,module,exports){
'use strict';

// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It doesn't worth to make additional optimizationa as in original.
// Small size is preferable.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}


module.exports = adler32;

},{}],44:[function(require,module,exports){
'use strict';


module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};

},{}],45:[function(require,module,exports){
'use strict';

// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.


// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}


module.exports = crc32;

},{}],46:[function(require,module,exports){
'use strict';

var utils   = require('../utils/common');
var trees   = require('./trees');
var adler32 = require('./adler32');
var crc32   = require('./crc32');
var msg     = require('./messages');

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;


var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;


/* The deflate compression method */
var Z_DEFLATED  = 8;

/*============================================================================*/


var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;


var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}


function flush_block_only(s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}


function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

var configuration_table;

configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}


function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}


function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}


function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);

  s.d_buf = s.lit_bufsize >> 1;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}


function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
                );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  s = strm.state;
  wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    tmpDict = new utils.Buf8(s.w_size);
    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
}


exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/

},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(require,module,exports){
'use strict';


function GZheader() {
  /* true if compressed data believed to be text */
  this.text       = 0;
  /* modification time */
  this.time       = 0;
  /* extra flags (not used when writing a gzip file) */
  this.xflags     = 0;
  /* operating system */
  this.os         = 0;
  /* pointer to extra field or Z_NULL if none */
  this.extra      = null;
  /* extra field length (valid if extra != Z_NULL) */
  this.extra_len  = 0; // Actually, we don't need it in JS,
                       // but leave for few code modifications

  //
  // Setup limits is not necessary because in js we should not preallocate memory
  // for inflate use constant limit in 65536 bytes
  //

  /* space at extra (only when reading header) */
  // this.extra_max  = 0;
  /* pointer to zero-terminated file name or Z_NULL */
  this.name       = '';
  /* space at name (only when reading header) */
  // this.name_max   = 0;
  /* pointer to zero-terminated comment or Z_NULL */
  this.comment    = '';
  /* space at comment (only when reading header) */
  // this.comm_max   = 0;
  /* true if there was or will be a header crc */
  this.hcrc       = 0;
  /* true when done reading gzip header (not used when writing a gzip file) */
  this.done       = false;
}

module.exports = GZheader;

},{}],48:[function(require,module,exports){
'use strict';

// See state defs from inflate.js
var BAD = 30;       /* got a data error -- remain here until reset */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window;               /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};

},{}],49:[function(require,module,exports){
'use strict';


var utils         = require('../utils/common');
var adler32       = require('./adler32');
var crc32         = require('./crc32');
var inflate_fast  = require('./inffast');
var inflate_table = require('./inftrees');

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;


function zswap32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new utils.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
    case HEAD:
      if (state.wrap === 0) {
        state.mode = TYPEDO;
        break;
      }
      //=== NEEDBITS(16);
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//

        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = FLAGS;
        break;
      }
      state.flags = 0;           /* expect zlib header */
      if (state.head) {
        state.head.done = false;
      }
      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
        strm.msg = 'incorrect header check';
        state.mode = BAD;
        break;
      }
      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
      len = (hold & 0x0f)/*BITS(4)*/ + 8;
      if (state.wbits === 0) {
        state.wbits = len;
      }
      else if (len > state.wbits) {
        strm.msg = 'invalid window size';
        state.mode = BAD;
        break;
      }
      state.dmax = 1 << len;
      //Tracev((stderr, "inflate:   zlib header ok\n"));
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = hold & 0x200 ? DICTID : TYPE;
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      break;
    case FLAGS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.flags = hold;
      if ((state.flags & 0xff) !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      if (state.flags & 0xe000) {
        strm.msg = 'unknown header flags set';
        state.mode = BAD;
        break;
      }
      if (state.head) {
        state.head.text = ((hold >> 8) & 1);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = TIME;
      /* falls through */
    case TIME:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.time = hold;
      }
      if (state.flags & 0x0200) {
        //=== CRC4(state.check, hold)
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        hbuf[2] = (hold >>> 16) & 0xff;
        hbuf[3] = (hold >>> 24) & 0xff;
        state.check = crc32(state.check, hbuf, 4, 0);
        //===
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = OS;
      /* falls through */
    case OS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.xflags = (hold & 0xff);
        state.head.os = (hold >> 8);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = EXLEN;
      /* falls through */
    case EXLEN:
      if (state.flags & 0x0400) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length = hold;
        if (state.head) {
          state.head.extra_len = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      else if (state.head) {
        state.head.extra = null/*Z_NULL*/;
      }
      state.mode = EXTRA;
      /* falls through */
    case EXTRA:
      if (state.flags & 0x0400) {
        copy = state.length;
        if (copy > have) { copy = have; }
        if (copy) {
          if (state.head) {
            len = state.head.extra_len - state.length;
            if (!state.head.extra) {
              // Use untyped array for more conveniend processing later
              state.head.extra = new Array(state.head.extra_len);
            }
            utils.arraySet(
              state.head.extra,
              input,
              next,
              // extra field is limited to 65536 bytes
              // - no need for additional size check
              copy,
              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
              len
            );
            //zmemcpy(state.head.extra + len, next,
            //        len + copy > state.head.extra_max ?
            //        state.head.extra_max - len : copy);
          }
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          state.length -= copy;
        }
        if (state.length) { break inf_leave; }
      }
      state.length = 0;
      state.mode = NAME;
      /* falls through */
    case NAME:
      if (state.flags & 0x0800) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          // TODO: 2 or 1 bytes?
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.name_max*/)) {
            state.head.name += String.fromCharCode(len);
          }
        } while (len && copy < have);

        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.name = null;
      }
      state.length = 0;
      state.mode = COMMENT;
      /* falls through */
    case COMMENT:
      if (state.flags & 0x1000) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.comm_max*/)) {
            state.head.comment += String.fromCharCode(len);
          }
        } while (len && copy < have);
        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.comment = null;
      }
      state.mode = HCRC;
      /* falls through */
    case HCRC:
      if (state.flags & 0x0200) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.check & 0xffff)) {
          strm.msg = 'header crc mismatch';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      if (state.head) {
        state.head.hcrc = ((state.flags >> 9) & 1);
        state.head.done = true;
      }
      strm.adler = state.check = 0;
      state.mode = TYPE;
      break;
    case DICTID:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      strm.adler = state.check = zswap32(hold);
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = DICT;
      /* falls through */
    case DICT:
      if (state.havedict === 0) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        return Z_NEED_DICT;
      }
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = TYPE;
      /* falls through */
    case TYPE:
      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case TYPEDO:
      if (state.last) {
        //--- BYTEBITS() ---//
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        state.mode = CHECK;
        break;
      }
      //=== NEEDBITS(3); */
      while (bits < 3) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.last = (hold & 0x01)/*BITS(1)*/;
      //--- DROPBITS(1) ---//
      hold >>>= 1;
      bits -= 1;
      //---//

      switch ((hold & 0x03)/*BITS(2)*/) {
      case 0:                             /* stored block */
        //Tracev((stderr, "inflate:     stored block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = STORED;
        break;
      case 1:                             /* fixed block */
        fixedtables(state);
        //Tracev((stderr, "inflate:     fixed codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = LEN_;             /* decode codes */
        if (flush === Z_TREES) {
          //--- DROPBITS(2) ---//
          hold >>>= 2;
          bits -= 2;
          //---//
          break inf_leave;
        }
        break;
      case 2:                             /* dynamic block */
        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = TABLE;
        break;
      case 3:
        strm.msg = 'invalid block type';
        state.mode = BAD;
      }
      //--- DROPBITS(2) ---//
      hold >>>= 2;
      bits -= 2;
      //---//
      break;
    case STORED:
      //--- BYTEBITS() ---// /* go to byte boundary */
      hold >>>= bits & 7;
      bits -= bits & 7;
      //---//
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
        strm.msg = 'invalid stored block lengths';
        state.mode = BAD;
        break;
      }
      state.length = hold & 0xffff;
      //Tracev((stderr, "inflate:       stored length %u\n",
      //        state.length));
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = COPY_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case COPY_:
      state.mode = COPY;
      /* falls through */
    case COPY:
      copy = state.length;
      if (copy) {
        if (copy > have) { copy = have; }
        if (copy > left) { copy = left; }
        if (copy === 0) { break inf_leave; }
        //--- zmemcpy(put, next, copy); ---
        utils.arraySet(output, input, next, copy, put);
        //---//
        have -= copy;
        next += copy;
        left -= copy;
        put += copy;
        state.length -= copy;
        break;
      }
      //Tracev((stderr, "inflate:       stored end\n"));
      state.mode = TYPE;
      break;
    case TABLE:
      //=== NEEDBITS(14); */
      while (bits < 14) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
//#ifndef PKZIP_BUG_WORKAROUND
      if (state.nlen > 286 || state.ndist > 30) {
        strm.msg = 'too many length or distance symbols';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracev((stderr, "inflate:       table sizes ok\n"));
      state.have = 0;
      state.mode = LENLENS;
      /* falls through */
    case LENLENS:
      while (state.have < state.ncode) {
        //=== NEEDBITS(3);
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
        //--- DROPBITS(3) ---//
        hold >>>= 3;
        bits -= 3;
        //---//
      }
      while (state.have < 19) {
        state.lens[order[state.have++]] = 0;
      }
      // We have separate tables & no pointers. 2 commented lines below not needed.
      //state.next = state.codes;
      //state.lencode = state.next;
      // Switch to use dynamic table
      state.lencode = state.lendyn;
      state.lenbits = 7;

      opts = { bits: state.lenbits };
      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
      state.lenbits = opts.bits;

      if (ret) {
        strm.msg = 'invalid code lengths set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, "inflate:       code lengths ok\n"));
      state.have = 0;
      state.mode = CODELENS;
      /* falls through */
    case CODELENS:
      while (state.have < state.nlen + state.ndist) {
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_val < 16) {
          //--- DROPBITS(here.bits) ---//
          hold >>>= here_bits;
          bits -= here_bits;
          //---//
          state.lens[state.have++] = here_val;
        }
        else {
          if (here_val === 16) {
            //=== NEEDBITS(here.bits + 2);
            n = here_bits + 2;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            if (state.have === 0) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            len = state.lens[state.have - 1];
            copy = 3 + (hold & 0x03);//BITS(2);
            //--- DROPBITS(2) ---//
            hold >>>= 2;
            bits -= 2;
            //---//
          }
          else if (here_val === 17) {
            //=== NEEDBITS(here.bits + 3);
            n = here_bits + 3;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 3 + (hold & 0x07);//BITS(3);
            //--- DROPBITS(3) ---//
            hold >>>= 3;
            bits -= 3;
            //---//
          }
          else {
            //=== NEEDBITS(here.bits + 7);
            n = here_bits + 7;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 11 + (hold & 0x7f);//BITS(7);
            //--- DROPBITS(7) ---//
            hold >>>= 7;
            bits -= 7;
            //---//
          }
          if (state.have + copy > state.nlen + state.ndist) {
            strm.msg = 'invalid bit length repeat';
            state.mode = BAD;
            break;
          }
          while (copy--) {
            state.lens[state.have++] = len;
          }
        }
      }

      /* handle error breaks in while */
      if (state.mode === BAD) { break; }

      /* check for end-of-block code (better have one) */
      if (state.lens[256] === 0) {
        strm.msg = 'invalid code -- missing end-of-block';
        state.mode = BAD;
        break;
      }

      /* build code tables -- note: do not change the lenbits or distbits
         values here (9 and 6) without reading the comments in inftrees.h
         concerning the ENOUGH constants, which depend on those values */
      state.lenbits = 9;

      opts = { bits: state.lenbits };
      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.lenbits = opts.bits;
      // state.lencode = state.next;

      if (ret) {
        strm.msg = 'invalid literal/lengths set';
        state.mode = BAD;
        break;
      }

      state.distbits = 6;
      //state.distcode.copy(state.codes);
      // Switch to use dynamic table
      state.distcode = state.distdyn;
      opts = { bits: state.distbits };
      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.distbits = opts.bits;
      // state.distcode = state.next;

      if (ret) {
        strm.msg = 'invalid distances set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, 'inflate:       codes ok\n'));
      state.mode = LEN_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case LEN_:
      state.mode = LEN;
      /* falls through */
    case LEN:
      if (have >= 6 && left >= 258) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        inflate_fast(strm, _out);
        //--- LOAD() ---
        put = strm.next_out;
        output = strm.output;
        left = strm.avail_out;
        next = strm.next_in;
        input = strm.input;
        have = strm.avail_in;
        hold = state.hold;
        bits = state.bits;
        //---

        if (state.mode === TYPE) {
          state.back = -1;
        }
        break;
      }
      state.back = 0;
      for (;;) {
        here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if (here_bits <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if (here_op && (here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.lencode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      state.length = here_val;
      if (here_op === 0) {
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        state.mode = LIT;
        break;
      }
      if (here_op & 32) {
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.back = -1;
        state.mode = TYPE;
        break;
      }
      if (here_op & 64) {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break;
      }
      state.extra = here_op & 15;
      state.mode = LENEXT;
      /* falls through */
    case LENEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
      //Tracevv((stderr, "inflate:         length %u\n", state.length));
      state.was = state.length;
      state.mode = DIST;
      /* falls through */
    case DIST:
      for (;;) {
        here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if ((here_bits) <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if ((here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.distcode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      if (here_op & 64) {
        strm.msg = 'invalid distance code';
        state.mode = BAD;
        break;
      }
      state.offset = here_val;
      state.extra = (here_op) & 15;
      state.mode = DISTEXT;
      /* falls through */
    case DISTEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
//#ifdef INFLATE_STRICT
      if (state.offset > state.dmax) {
        strm.msg = 'invalid distance too far back';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
      state.mode = MATCH;
      /* falls through */
    case MATCH:
      if (left === 0) { break inf_leave; }
      copy = _out - left;
      if (state.offset > copy) {         /* copy from window */
        copy = state.offset - copy;
        if (copy > state.whave) {
          if (state.sane) {
            strm.msg = 'invalid distance too far back';
            state.mode = BAD;
            break;
          }
// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
        }
        if (copy > state.wnext) {
          copy -= state.wnext;
          from = state.wsize - copy;
        }
        else {
          from = state.wnext - copy;
        }
        if (copy > state.length) { copy = state.length; }
        from_source = state.window;
      }
      else {                              /* copy from output */
        from_source = output;
        from = put - state.offset;
        copy = state.length;
      }
      if (copy > left) { copy = left; }
      left -= copy;
      state.length -= copy;
      do {
        output[put++] = from_source[from++];
      } while (--copy);
      if (state.length === 0) { state.mode = LEN; }
      break;
    case LIT:
      if (left === 0) { break inf_leave; }
      output[put++] = state.length;
      left--;
      state.mode = LEN;
      break;
    case CHECK:
      if (state.wrap) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          // Use '|' insdead of '+' to make sure that result is signed
          hold |= input[next++] << bits;
          bits += 8;
        }
        //===//
        _out -= left;
        strm.total_out += _out;
        state.total += _out;
        if (_out) {
          strm.adler = state.check =
              /*UPDATE(state.check, put - _out, _out);*/
              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

        }
        _out = left;
        // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
        if ((state.flags ? hold : zswap32(hold)) !== state.check) {
          strm.msg = 'incorrect data check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   check matches trailer\n"));
      }
      state.mode = LENGTH;
      /* falls through */
    case LENGTH:
      if (state.wrap && state.flags) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.total & 0xffffffff)) {
          strm.msg = 'incorrect length check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   length matches trailer\n"));
      }
      state.mode = DONE;
      /* falls through */
    case DONE:
      ret = Z_STREAM_END;
      break inf_leave;
    case BAD:
      ret = Z_DATA_ERROR;
      break inf_leave;
    case MEM:
      return Z_MEM_ERROR;
    case SYNC:
      /* falls through */
    default:
      return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}

function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var state;
  var dictid;
  var ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
}

exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/

},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(require,module,exports){
'use strict';


var utils = require('../utils/common');

var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  var i = 0;
  /* process all codes and make table entries */
  for (;;) {
    i++;
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};

},{"../utils/common":41}],51:[function(require,module,exports){
'use strict';

module.exports = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};

},{}],52:[function(require,module,exports){
'use strict';


var utils = require('../utils/common');

/* Public constants ==========================================================*/
/* ===========================================================================*/


//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */

var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS      = 256;
/* number of literal bytes 0..255 */

var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES       = 30;
/* number of distance codes */

var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK   = 256;
/* end of block literal code */

var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


var static_l_desc;
var static_d_desc;
var static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short(s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}


function send_code(s, c, tree) {
  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
}


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    var len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
}


/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}


// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}


var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}


/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize - 1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;

},{"../utils/common":41}],53:[function(require,module,exports){
'use strict';


function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;

},{}]},{},[10])(10)
});
define('Atem-IO/tools/zipUtil',[
    'obtain/obtain'
  , 'path'
  , 'jszip'
  , './readDirRecursive'
  , 'Atem-IO/errors'
], function(
    obtain
  , path
  , JSZip
  , readDirRecursive
  , errors
) {
    "use strict";

    var NotImplementedError = errors.NotImplemented
      , assert = errors.assert
      ;

    function _unpack(async/*boolean!*/, zip, io, targetPath) {
        if(!async)
            throw new NotImplementedError('Synchronous ZIP reading is '
                            + 'no longer supported by the jszip library.');
        var files = zip.files
          , filename
          , file
          , filePath
          , separator
          , promises = []
          , dir
          , writeFile
          ;

        for (filename in files) {
            file = files[filename];
            separator = targetPath.slice(-1) === '/'  ? '' : '/';
            filePath = [targetPath, file.name].join(separator);
            if (file.dir)
                promises.push(io.ensureDirs(async, filePath));
            else {
                writeFile = io.writeFile.bind(io, async, filePath /*, data */);
                dir = path.dirname(filePath);
                if(async)
                    promises.push(io.ensureDirs(true, dir)
                        .then(file.async.bind(file, 'binarystring'))
                        .then(writeFile)
                );
                else {
                    // synchronous
                    io.ensureDirs(false, dir);
                    writeFile(file.sync('binarystring'));
                }
            }
        }
        if(!async)
            return;
        if(promises.length)
            return Promise.all(promises);
        // There was nothing to unpack
        return Promise.resolve();
    }

    var unpack = obtain.factory(
        {
            zip: [function () {
                throw new NotImplementedError('Synchronous ZIP unpack is '
                            + 'no longer supported by the jszip library.');
            }]
            // Putting this here in case jszip adds back sync unzipping.
          , unpacked: [false, 'zip', 'io', 'targetPath', _unpack]
        }
      , {
            zip: ['zipData', function (zipData) {
                return new JSZip().loadAsync(zipData);
            }]
          , unpacked: [true, 'zip', 'io', 'targetPath', _unpack]
        }
      , ['zipData', 'io', 'targetPath']
      , function (obtain) { return obtain('unpacked'); }
    );

    function _readFiles (async/*boolean!*/, io, files) {
        var i, l, data = [];
        for(i=0,l=files.length;i<l;i++)
            data.push(io.readFile(async, files[i]));
        if(!async)
            return data;
        if(data.length)
            return Promise.all(data);
        // empty data, proper async answer
        return Promise.resolve([]);
    }

    var pack = obtain.factory(
        {
            files: [false, 'io', 'sourcePath', readDirRecursive]
          , data: [false, 'io', 'files', _readFiles]
            // Maybe this changes again.
          , generate: [function () {
                 throw new NotImplementedError('Synchronous ZIP generation is '
                                + 'no longer supported by the jszip library.');
            }]
          , zip: ['files', 'data', function (files, data) {
                var zip = new JSZip()
                  , i, l
                  ;
                assert(files.length === data.length, 'files and data must '
                                                + 'have the same length');
                for(i=0,l=files.length;i<l;i++)
                    zip.file(files[i], data[i], {binary:true});
                return zip;
            }]
        }
      , {
            files: [true, 'io', 'sourcePath', readDirRecursive]
          , data: [true, 'io', 'files', _readFiles]
          , generate: ['zip', 'dataType', function (zip, dataType) {
                var options = {
                    type: dataType || 'base64'
                };
                return zip.generateAsync(options);
            }]
        }
      , ['io', 'sourcePath', 'dataType']
      , function (obtain) { return obtain('generate'); }
    );

    return {
        unpack: unpack,
        pack: pack,
        // deprecated:
        encode: pack
    };
});

/**
 * This describes the API that is expected of all I/O modules.
 *
 * It makes heavy use of obtainJS.
 *
 * You can and should use this module as prototype for your implementation
 * (if there is inheritance). We might use that as a base for unit-testing,
 * however ufoJS will use ducktyping and just expect your implementation
 * to work.
 *
 * All methods raise errors.NotImplemented
 *
 * This API is by no means fixed! It's still in exploring state, AFAIK
 * there is no good cross platform solution for I/O. So we move slowly and
 * see what we need to do.
 */
define('Atem-IO/io/_base',[
    'Atem-IO/errors'
  , 'obtain/obtain'

], function(
    errors
  , obtain
) {
    "use strict";
    //jshint unused: false
    var NotImplementedError = errors.NotImplemented
      , IOError = errors.IO
      , Parent = Object
      ;

    function io() {
        /*jshint validthis:true */
        Parent.call(this);
    }

    var _p = io.prototype = Object.create(Parent.prototype);


    /**
     * when name ends with a slash it is a directory name
     */
    _p.isDirName = function (name) {
        return name.slice(-1) === '/';
    };

    /**
     * raises IONoEntry when path is not found.
     */
    _p.readFile = obtain.factory(
        {
            readFile:['path', function(path) {
                throw new NotImplementedError('readFile');
            }]
        }
      , {/* no need for async here */}
      , ['path']
      , function(obtain){ return obtain('readFile'); }
    );

    /**
     * raises IONoEntry when points to a non-existent directory
     */
    _p.writeFile = obtain.factory(
        {
            writeFile:['path', 'data', function(path, data) {
                throw new NotImplementedError('writeFile');
            }]
        }
      , {/* no need for async here */}
      , ['path', 'data']
      , function(obtain){ return obtain('writeFile'); }
    );

    /**
     * raises IONoEntry when points to a non-existent directory
     */
    _p.appendFile = obtain.factory(
        {
            appendFile:['path', 'data', function(path, data) {
                throw new NotImplementedError('appendFile');
            }]
        }
      , {/* no need for async here */}
      , ['path', 'data']
      , function(obtain){ return obtain('appendFile'); }
    );

    /**
     * raises IONoEntry when path is not found.
     */
    _p.unlink = obtain.factory(
        {
            unlink:['filename', function(filename) {
                throw new NotImplementedError('unlink');
            }]
        }
      , {/* no need for async here */}
      , ['filename']
      , function(obtain){ return obtain('unlink'); }
    );

    _p.readBytes = obtain.factory(
        {
            readBytes:['path', 'bytes', function(path, bytes) {
                throw new NotImplementedError('readBytes');
            }]
        }
      , {/* no need for async here */}
      , ['path', 'bytes']
      , function(obtain){ return obtain('readBytes'); }
    );

    /**
     * raises IONoEntry when path is not found.
     */
    _p.stat = obtain.factory(
        {
            stat:['path', function(path) {
                throw new NotImplementedError('stat');
            }]
        }
      , {/* no need for async here */}
      , ['path']
      , function(obtain){ return obtain('stat'); }
    );

    /**
     * Don't use this method to check whether something exists before doing
     * an operation on it, that only creates a race condition.
     */
    _p.pathExists = obtain.factory(
        {
            pathExists:['path', function(path) {
                throw new NotImplementedError('pathExists');
            }]
        }
      , {/* no need for async here */}
      , ['path']
      , function(obtain){ return obtain('pathExists'); }
    );

    /**
     * raises IONoEntry when path is not found.
     */
    _p.getMtime = obtain.factory(
        {
            getMtime:['path', function(path) {
                throw new NotImplementedError('getMtime');
            }]
        }
      , {/* no need for async here */}
      , ['path']
      , function(obtain){ return obtain('getMtime'); }
    );

    _p.setMtime = obtain.factory(
        {
            setMtime:['path', function(path) {
                throw new NotImplementedError('setMtime');
            }]
        }
      , {/* no need for async here */}
      , ['path']
      , function(obtain){ return obtain('setMtime'); }
    );

    /**
     * Returns a list of file-names and directory-names.
     * Directory-names must end with a slash, while file-names must not.
     *
     * Raises IOError if dir doesn't exist
     */
    _p.readDir = obtain.factory(
        {
            readDir:['path', function(path) {
                throw new NotImplementedError('readDir');
            }]
        }
      , {/* no need for async here */}
      , ['path']
      , function(obtain){ return obtain('readDir'); }
    );

    /**
     * raises IOError if dir can't be created, or already exists
     */
    _p.mkDir = obtain.factory(
        {
            mkDir:['path', function(path) {
                throw new NotImplementedError('mkDir');
            }]
        }
      , {/* no need for async here */}
      , ['path']
      , function(obtain){ return obtain('mkDir'); }
    );

    /**
     * raises IOError if dir can't be created.
     *
     * Note that you can't rely on the directory actually existing after a
     * successful call: it may have been removed by the time you try to use
     * it.
     */
    _p.ensureDir = obtain.factory(
        {
            ensureDir:['path', function(path) {
                throw new NotImplementedError('ensureDir');
            }]
        }
      , {/* no need for async here */}
      , ['path']
      , function(obtain){ return obtain('ensureDir'); }
    );

    /**
     * raises IOError if dir can't be deleted
     */
    _p.rmDir = obtain.factory(
        {
            rmDir:['path', function(path) {
                throw new NotImplementedError('rmDir');
            }]
        }
      , {/* no need for async here */}
      , ['path']
      , function(obtain){ return obtain('rmDir'); }
    );

    /**
     * Just like nodes fs.remame.
     *
     * Should somehow call http://man7.org/linux/man-pages/man2/rename.2.html
     * Especially to make this true:
     *    " [...] If newpath already exists, it will be atomically replaced [...]"
     *
     * returns undefined
     */
    _p.rename = obtain.factory(
        {
            rename:['oldPath', 'newPath', function(oldPath, newPath) {
                throw new NotImplementedError('rmDir');
            }]
        }
      , {/* no need for async here */}
      , ['oldPath', 'newPath']
      , function(obtain){ return obtain('rename'); }
    );

    /**
     * Implemented in terms of other io methods
     */
    _p.rmDirRecursive = obtain.factory(
        {
            rmDirRecursive:['dir', function(dir) {
                var objs = this.readDir(false, dir)
                  , name, path
                  ;
                for(var i = 0; i < objs.length; i++) {
                    name = objs[i];
                    path = [dir, name].join('/');
                    this[this.isDirName(name)
                                ? 'rmDirRecursive'
                                : 'unlink'](false, path);
                }
                this.rmDir(false, dir);
            }]
        }
      , {
            contents: ['dir', function(dir) {
                return this.readDir(true, dir);
            }]
          , rmDirRecursive: ['dir', 'contents', '_callback', '_errback',
            function(dir, contents, callback, errback) {
                var i, l, name, path
                  , jobs = 0
                  , errors = []
                  , onSuccess
                  ;

                function reportErrors() {
                    // Just use the first
                    var error = new IOError('rmDirRecursive '
                            +'failed with the following collected Errors:\n'
                            + errors.join('\n'), errors[0].stack);
                    errback(error);
                }

                function onError(e) {
                    jobs -= 1;
                    errors.push(e);
                    if(jobs !== 0)
                        return;
                    reportErrors();
                }

                onSuccess = (function () {
                    // jshint validthis: true
                    jobs -= 1;
                    if(jobs !== 0)
                        return;
                    if(!errors.length)
                        // finalize
                        this.rmDir(true, dir).then(callback, errback);
                    else
                        reportErrors();
                }).bind(this);

                for(i=0,l=contents.length;i<l;i++) {
                    name = contents[i];
                    path = [dir, name].join('/');
                    this[this.isDirName(name)
                            ? 'rmDirRecursive'
                            : 'unlink'](true, path)
                        .then(onSuccess, onError);
                    jobs += 1;
                }
            }]

        }
      , ['dir']
      , function(obtain){ return obtain('rmDirRecursive'); }
    );

    _p.copyRecursive = obtain.factory(
        {
            names: ['sourcePath', function(path) {
                return this.readDir(false, path);
            }]
          , copyDir: ['names', 'targetIO', 'targetPath', 'sourcePath',
            function(names, targetIO, targetPath, sourcePath) {
                var i
                  , name
                  , fullTargetPath
                  , fullSourcePath
                  , data
                  ;
                for(i=0;i<names.length;i++) {
                    name = names[i];
                    fullTargetPath = [targetPath, name].join('/');
                    fullSourcePath = [sourcePath, name].join('/');
                    // FIXME: alternatively readFile(); should fail with
                    // IOIsDir if we don't use trailing slashes for directory
                    // names in readDir
                    if(this.isDirName(name)) {
                        targetIO.mkDir(false, fullTargetPath);
                        this.copyRecursive(false, fullSourcePath.slice(0, -1)
                                           , targetIO, fullTargetPath.slice(0, -1));
                    }
                    else {
                        data = this.readFile(false, fullSourcePath);
                        targetIO.writeFile(false, fullTargetPath, data);
                    }
                }
                return true;
            }]
        }
      , {
            names: ['sourcePath', function(path) {
                return this.readDir(true, path);
            }]
          , copyDir: ['names', 'targetIO', 'targetPath', 'sourcePath' , '_callback',
            function(names, targetIO, targetPath, sourcePath , callback) {
                var i
                  , name
                  , loaded = 0
                  , fullTargetPath
                  , fullSourcePath
                  , failed = false
                  , promise
                  ;
                function finalize() {
                    if(failed) return;
                    loaded++;
                    if(loaded === names.length)
                        callback(null, true);
                }
                function fail(error) {
                    failed = true;
                    callback(error, null);
                }
                if(!names.length) {
                    /* global  setTimeout: true */
                    setTimeout(callback, 0, null, true);
                    return;
                }
                for(i=0;i<names.length;i++) {
                    name = names[i];
                    fullTargetPath = [targetPath, name].join('/');
                    fullSourcePath = [sourcePath, name].join('/');
                    if(this.isDirName(name))
                        promise = targetIO.mkDir(true, fullTargetPath)
                        .then(this.copyRecursive.bind(this, true
                            , fullSourcePath.slice(0, -1)
                            , targetIO, fullTargetPath.slice(0, -1)));
                    else
                        promise = this.readFile(true, fullSourcePath)
                        .then(targetIO.writeFile.bind(targetIO, true
                                , fullTargetPath /*data is inserted by the promise*/));
                    promise.then(finalize, fail);
                }
            }]
        }
      , ['sourcePath', 'targetIO', 'targetPath']
      , function(obtain){return obtain('copyDir');}
    );

    /**
     * much like GNU `mkdir --parents my/shiny/new/path`
     */
    _p.ensureDirs = obtain.factory(
        {
            dirs: ['path', function(path) {
                var parts = path.split('/')
                  , i, l
                  ;
                for(i=1,l=parts.length;i<=l;i++)
                    this.ensureDir(false, parts.slice(0, i).join('/'));
            }]
        }
      , {
            dirs: ['path', '_callback', '_errback',
            function(path, callback, errback) {
                var parts = path.split('/')
                  , i=1, l=parts.length
                  , next
                  ;
                next = (function () {
                    // jshint validthis:true
                    if(i<=l) {
                        this.ensureDir(true, parts.slice(0, i).join('/'))
                            .then(next, errback);
                        i++;
                    }
                    else
                        // finished
                        callback();
                }).bind(this);
                // run
                next();
            }]
        }
      , ['path']
      , function(obtain){obtain('dirs');}
    );

    return io;
});

define('Atem-IO/io/helpers/Path',[
    'Atem-IO/errors'
  , 'path'
], function(
    errors
  , path
) {
    "use strict";

    function Path(pathStr_) {
        var _path, pathStr = pathStr_ || '';
        this.normalPath = path.normalize(pathStr);
        this.rawPath = pathStr;
        if(this.normalPath[0] === '/')
            this.normalPath = this.normalPath.slice(1);

        if(this.normalPath.slice(-1) === '/')
            this.normalPath = this.normalPath.slice(0,-1);

        this.basename = path.basename(this.normalPath);

        _path = (this.normalPath !== "")
                    ? path.dirname(this.normalPath).split('/')
                    : []
                    ;
        if(this.basename !== '')
            _path.push(this.basename);

        if(_path[0] === '.')
            _path.shift();
        if(_path[0] === '..')
            throw new TypeError('Path "' + this.normalPath +'" is above root.');

        Object.defineProperty(this, 'path'
                        , {get: Array.prototype.slice.bind(_path)});
        Object.defineProperty(this, 'directory'
                        , {get: Array.prototype.slice.bind(_path, 0, -1)});
        Object.seal(this);
    }
    Path.Factory = function(pathString){ return new Path(pathString); };

    return Path;
});

(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define('EventEmitter',[], function () {
      return (root.returnExportsGlobal = factory());
    });
  } else if (typeof exports === 'object') {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like enviroments that support module.exports,
    // like Node.
    module.exports = factory();
  } else {
    root['EventEmitter'] = factory();
  }
}(this, function () {

/*!
 * event-emitter.js
 * 
 * Copyright (c) 2014
 */
var eventEmitter;
eventEmitter = function () {
  /* -----------------------------------------------------------------------------
   * scope
   * ---------------------------------------------------------------------------*/
  var root = this;
  /* -----------------------------------------------------------------------------
   * EventEmitter
   * ---------------------------------------------------------------------------*/
  /**
   * Lightweight EventEmitter Class.
   *
   * @example
   * var emitter = new EventEmitter(settings);
   *
   * @public
   * @constructor
   */
  var EventEmitter = function () {
    this.events = {};
  };
  /**
   * Add event listener and handler to emitter isntance.
   *
   * @example
   * emitter.on('event', this.doSomething, this);
   *
   * @public
   *
   * @param {string} name - Name of event to listen for.
   * @param {function} handler - Function to call when event is triggered.
   * @param {object} context - Context in which to execute handler. 
   *
   * @returns emitter instance (allows chaining).
   */
  EventEmitter.prototype.on = function (name, handler, context) {
    (this.events[name] = this.events[name] || []).unshift({
      fn: handler,
      context: context || root
    });
    return this;
  };
  /**
   * Remove event lister from instance. If no arguments are passed,
   * all events will be remove from the instance. If only name is
   * passed, all handlers will be remove from the specified event.
   * If name and handler are passed, only the handler will be
   * removed from the specified event.
   *
   * @example
   * emitter.off('event');
   * // removes all handlers from `event`
   *
   * @public
   *
   * @param {string} name - Name of event to remove listener from.
   * @param {function} handler - Function handler to remove from event.
   *
   * @returns emitter instance (allows chaining).
   */
  EventEmitter.prototype.off = function (name, handler) {
    var subscribers = this.events[name] || [];
    var l = subscribers.length;
    // Remove all events
    if (!name) {
      this.events = {};
    } else if (!handler) {
      delete this.events[name];
    } else {
      while (l--) {
        if (subscribers[l].fn === handler) {
          subscribers.splice(l, 1);
        }
      }
    }
    return this;
  };
  /**
   * Calls handler for all event subscribers.
   *
   * @example
   * emitter.trigger('event');
   * // removes all handlers from `event`
   *
   * @public
   *
   * @param {string} name - Name of event to remove listener from.
   *
   * @returns emitter instance (allows chaining).
   */
  EventEmitter.prototype.trigger = function (name) {
    var args = Array.prototype.slice.call(arguments, 1);
    var subscribers = this.events[name] || [];
    var l = subscribers.length;
    // fixes bug where handler could be called twice when handler
    // is responsible for moving event handlers. Now all handlers will
    // execute, regardless if they are removed during another handler.
    var copy = [];
    for (var i = 0; i < l; i++) {
      copy.push(subscribers[i]);
    }
    while (l--) {
      copy[l].fn.apply(copy[l].context, args);
    }
    return this;
  };
  /* -----------------------------------------------------------------------------
   * export
   * ---------------------------------------------------------------------------*/
  return EventEmitter;
}();

return eventEmitter;


}));
define('Atem-IO/io/InMemory',[
    'Atem-IO/errors'
  , './_base'
  , 'obtain/obtain'
  , './helpers/Path'
  , 'EventEmitter'
], function(
    errors
  , Parent
  , obtain
  , Path
  , EventEmitter
) {
    "use strict";

    /*global process: true*/
    /*global setTimeout: true*/

    var NotImplementedError = errors.NotImplemented
      , IOError = errors.IO
      , IONotDirError = errors.IONotDir // node error: ENOTDIR
      , IOIsDirError = errors.IOIsDir // node error: EISDIR
      , IONoEntryError = errors.IONoEntry // node error: ENOENT
      , IOEntryExistsError = errors.IOEntryExists // node error: EEXIST
      , IONotEmptyError = errors.IONotEmpty // ENOTEMPTY
      , assert = errors.assert
      , Argument = obtain.Argument
      ;
    /*** lower level ***/

    var next = (typeof process !== 'undefined' && typeof process.nextTick === 'function')
            ?   process.nextTick.bind(process)
            :   function(cb){ setTimeout(cb, 0); }
            ;

    function Node (mtime) {
        this.modified(undefined, mtime);
    }
    Node.prototype = Object.create(null);

    Node.prototype.modified = function(event, mtime) {
        this.mtime = mtime || new Date();
        this._parent = undefined;
    };
    Node.prototype.setParent = function(parent) {
        assert(!this._parent, 'Node has a parent.');
        assert(parent instanceof Directory, '"parent" must be a Directory');
        assert(parent.isChild(this), 'This is not child of "parent".');
        this._parent = parent;
    };
    Node.prototype.unsetParent = function() {
        if(!this._parent) return;
        assert(!this._parent.isChild(this), 'This is still a child of "parent".');
        this._parent = undefined;
    };
    Node.prototype.hasParent = function() {
        return !!this._parent;
    };

    function File(content, mtime) {
        Node.call(this, mtime);
        this._content = content || "";
    }
    File.prototype = Object.create(Node.prototype);

    Object.defineProperty(File.prototype, 'content', {
        set: function(content) {
            this._content = content;
            this.modified();
        }
      , get: function() {
            return this._content;
        }
    });

    function Directory(mtime) {
        Node.call(this, mtime);
        this._content = Object.create(null);
        this._index = new Map();
    }
    Directory.prototype = Object.create(Node.prototype);

    Directory.prototype.lookup = function (/* names */) {
        var names = Array.prototype.slice.call(arguments, 1)
          , name = arguments[0]
          , item
          , relatives = {'.': this, '..': this._parent}
          ;
        if(arguments.length === 0)
            return this;

        if(typeof name !== 'string' || name === '')
            throw new TypeError('A name must be a none empty string, '
                                                +'but it is: "'+name+'"');

        if(relatives.hasOwnProperty(name))
            item = relatives[name];
        else if(name in this._content)
            item = this._content[name];
        // If relatives this._parent is not set, item is also undefined.
        // Thus, this MUST NOT be an `else` clause.
        if(!item)
            throw new IONoEntryError(name);

        if(item instanceof Directory)
            return item.lookup.apply(item, names);

        if (names.length)
            throw new IONotDirError(name);

        return item;
    };

    Directory.prototype.getItem = function(type, names) {
        var item = this.lookup.apply(this, names);
        if(type === Directory && !(item instanceof Directory))
            throw new IONotDirError('"' +names.join('/') + '" is not a directory');
        else if(type === File && (item instanceof Directory))
            throw new IOIsDirError('"' +names.join('/') + '" is not a file');
        else if(type && !(item instanceof type))
            throw new IOError('"' +names.join('/') + '" is not a type of: ' + type);
        return item;
    };

    Directory.prototype.isChild = function(item) {
        return this._index.has(item);
    };

    Directory.prototype.setItem = function(name, item) {
        var target;
        if(!(item instanceof Node))
            throw new TypeError('"item" must be an Node');

        target = this._content[name];
        if(target instanceof Directory){
            if(item instanceof File)
                throw new IOIsDirError('"'+name+'" is a directory');
            throw new IOEntryExistsError('directory "'+name+'" exists');
        }
        else if (target instanceof File && item instanceof Directory)
            throw new IOEntryExistsError('file "'+name+'" exists');
        else if(item.hasParent())
            throw new IOError('item "'+name+'" has a parent already');
        else if(item === this)
            throw new IOError('item is this directory');

        this._content[name] = item;
        this._index.set(item, name);
        item.setParent(this);
        this.modified();
    };

    Directory.prototype.isEmpty = function() {
        // this._index.size is not yet supported in in Node v0.10.25 with --harmony
        for(var k in this._content) return false;
        return true;
    };

    Directory.prototype.removeItem = function(type, name) {
        var item = this.getItem(type, [name]);
        if(item instanceof Directory && !item.isEmpty())
            throw new IONotEmptyError(' "'+ name +'" directory is not empty');

        if(!this.isChild(item))
            throw new IOError(' "'+ name +'" is not a child.');
        delete this._content[name];
        this._index['delete'](item);
        item.unsetParent(this);
        this.modified();
    };

    Object.defineProperty(Directory.prototype, 'entries', {
        get: function() {
            var k, results = [];
             for(k in this._content)
                 results.push(this._content[k] instanceof Directory ? k+'/' : k);
            return results;
        }
    });

    /*** higher level ***/
    function InMemory() {
        Parent.call(this);
        this._root = new Directory();
        this._events = new EventEmitter();
    }

    var _p = InMemory.prototype = Object.create(Parent.prototype);

    _p.on = function() {
        this._events.on.apply(this._events, arguments);
    };
    _p.off = function() {
        this._events.off.apply(this._events, arguments);
    };

    _p._emit = function(name, data /* , more, data, ... */) {
        // don't do this synchronously. So anyone can finish their current business
        var args = [this._events], func;
        Array.prototype.push.apply(args, arguments);
        func = Function.prototype.bind.apply(this._events.trigger, args);
        next(func);
    };

    _p._trigger = function(name, path) {
        this._emit(name, path);
        this._emit('all', Object.freeze({event: name, path: path}));
    };

    _p._getItem = function(path, type, property) {
        var item = this._root.getItem(type || Node, path.path);
        return (property === undefined ? item : item[property]);
    };

    _p._writeFile = function(path, content, append) {
        var dir = this._root.getItem(Directory, path.directory)
          , file;
        try {
            file = dir.getItem(File, [path.basename]);
            if(append)
                file.content += content;
            else
                file.content = content;
            this._trigger('change', path.normalPath);
        }
        catch(error) {
            if(!(error instanceof IONoEntryError))
                throw error;
            file = new File(content);
            dir.setItem(path.basename, new File(content));
            this._trigger('add', path.normalPath);
        }
    };

    _p._delete = function(path, type) {
        var dir = this._root.getItem(Directory, path.directory);
        dir.removeItem(type, path.basename);
        this._trigger('unlink' + (type === Directory ? 'Dir' : ''), path.normalPath);
    };

    _p._pathExists = function(path) {
        try {
            return !!this._getItem(path);
        }
        catch(error) {
            if(!(error instanceof IONoEntryError))
                throw error;
        }
        return false;
    };
    _p._mkDir = function(path) {
        var dir = this._root.getItem(Directory, path.directory);
        dir.setItem(path.basename, new Directory());
        this._trigger('addDir', path.normalPath);
    };

    function _obtainRequestFactory(extraAPI, request) {
        var api = ['pathString'];
        if(extraAPI)
            Array.prototype.push.apply(api,
                        extraAPI instanceof Array ? extraAPI : [extraAPI]);
        return obtain.factory(
            {
                path: ['pathString', Path.Factory]
              , request: request
            }
          , {}
          , api
          , function(obtain){ return obtain('request'); }
        );
    }

    _p.readFile = _obtainRequestFactory(undefined, ['path', File, new Argument('content'), _p._getItem]);
    _p.getMtime = _obtainRequestFactory(undefined, ['path', undefined, new Argument('mtime'), _p._getItem]);
    _p.readDir = _obtainRequestFactory(undefined, ['path', Directory, new Argument('entries'), _p._getItem]);
    _p.pathExists = _obtainRequestFactory(undefined, ['path', _p._pathExists]);

    _p.writeFile = _obtainRequestFactory('data', ['path', 'data', false, _p._writeFile]);
    _p.appendFile = _obtainRequestFactory('data', ['path', 'data', true, _p._writeFile]);
    _p.unlink = _obtainRequestFactory(undefined, ['path', File, _p._delete]);
    _p.rmDir = _obtainRequestFactory(undefined, ['path', Directory, _p._delete]);
    // `readBytes` is not implemented
    _p.mkDir = _obtainRequestFactory(undefined, ['path', _p._mkDir]);
    _p.ensureDir = _obtainRequestFactory(undefined, ['path', function(path) {
        try {
            return this._mkDir(path);
        }
        catch(error) {
            if(!(error instanceof IOEntryExistsError))
                throw error;
            return 0;
        }
    }]);

    return InMemory;
});

define('Atem-IO/io/Mounting',[
    'Atem-IO/errors'
  , './_base'
  , 'obtain/obtain'
  , './helpers/Path'
  , 'EventEmitter'
], function(
    errors
  , Parent
  , obtain
  , Path
  , EventEmitter
) {
    "use strict";

    var IOEntryExistsError = errors.IOEntryExists
      , IONotDirError = errors.IONotDir
      , IONoEntryError = errors.IONoEntry
      , assert = errors.assert
      , Argument = obtain.Argument
      ;

    function Mounting(baseIo) {
        Parent.call(this);
        this._baseIo = baseIo;

        this._mounted = Object.create(null);
        // path length is number of segments/path parts not number of characters
        this._mountPointsByPathLength = Object.create(null);
        this._longestMountPoint = 0;
    }
    var _p = Mounting.prototype = Object.create(Parent.prototype);
    _p.constructor = Mounting;

    /**
     * One would think that mountPoint must exist in this._baseIo and
     * that it must be a directory. However, this creates big problems
     * in here. E.g. we can't prevent that the directory is removed by
     * using baseIo directly.
     * Thus, what we do is just creating a mapping and if there is
     * no path to the mapping, some things won't work out as expected.
     * However, readDir returns virtual directories for parts of mount
     * point paths and rmDir will raise IONotDirError when trying to delete
     * a mount point.
     * I'm guessing there are lots of corner cases that we still need to cover.
     *
     * FIXME: add "writeProtected" argument: bolean, default: false
     * if true, the mountPoint won't allow writes/deletes, just reading.
     */
    _p.mount = function (io, mountPoint, pathOffset) {
        var mountPointPath = Path.Factory(mountPoint)
          , pathOffsetPath
          , len
          , byPathLen
          ;
        if(mountPointPath.normalPath in this._mounted)
            throw new IOEntryExistsError('Mount Point "' + IOEntryExistsError + '" is already in use');

        pathOffsetPath = Path.Factory(pathOffset || '');
        this._mounted[mountPointPath.normalPath] = [io, pathOffsetPath.normalPath];
        len = mountPointPath.path.length;
        byPathLen = this._mountPointsByPathLength[len];
        if(!byPathLen) {
            this._mountPointsByPathLength[len] = byPathLen = Object.create([]);
            // This must be a collision free key (possible?)
            Object.defineProperty(byPathLen, '..../length', {
                value: 0
              , writable: true
            });
        }
        byPathLen['..../length'] +=1;
        byPathLen[mountPointPath.normalPath] = true;
        if(len > this._longestMountPoint)
            this._longestMountPoint = len;
    };

    _p.isMountPoint = function(path) {
        var normal = (new Path(path)).normalPath;
        if(normal in this._mounted)
            return false;
    };

    _p.umount = function (mountPoint) {
        // If mountPoint does not exist, this does not change anything.
        var mountPointPath = Path.Factory(mountPoint)
          , len = mountPointPath.path.length
          , byPathLen = this._mountPointsByPathLength[len]
          ;
        delete this._mounted[mountPointPath.normalPath];
        if(!byPathLen)
            return;

        byPathLen['..../length'] -=1;
        if(byPathLen['..../length'] === 0) {
            delete this._mountPointsByPathLength[len];
            // we just deleted the last of the longest mount points
            if(this._longestMountPoint === len)
                // need to find the next longest mountpoint
                this._longestMountPoint = Math.max.apply(null,
                                Object.keys(this._mountPointsByPathLength)
                                      .map(Number)
                                      .filter(isFinite)
                );
        }
        else
            delete byPathLen[mountPointPath.normalPath];
    };

    /**
     * To get a path (for read, write whatever) we should
     * A) normalize the path.
     * B) traverse a list of mountpoints (shortest to longest in terms of
     *    directory segements) and pick the first matching one.
     * C) if there is a matching mountpoint, dispatch to the mouned io
     *    take offset + rest of original path and go.
     * D) if there is no matching mountpoint, dispatch to baseIo
     */
    _p._dispatchTarget = function (path) {
        // find a mountpoint:
        var requestPath = Path.Factory(path)
          , parts = requestPath.path
          , i, l, pathLen, sub = ''
          , byPathLen
          , dispatchPath = path
          , mountPoint
          ;

        //This  supports also a zero length mountpoint.
        i=-1;l=parts.length;pathLen= i+1;
        do {
            if(pathLen > this._longestMountPoint)
                // no need to look further
                break;
            // first iteration: zero length mountpoint check
            byPathLen = this._mountPointsByPathLength[pathLen];
            if(!byPathLen || (!(sub in byPathLen))) {
                // iterate
                i += 1;
                pathLen = i+1;
                sub = (i===0)
                    ? parts[i]
                    : [sub, parts[i]].join('/')
                    ;
                continue;
            }
            // got a match!
            mountPoint = this._mounted[sub];
            dispatchPath = [mountPoint[1]].concat(parts.slice(pathLen)).join('/');

            return [mountPoint[0], dispatchPath];
        } while(i<l);

        // it's not within a mountpoint, so it must be in this._baseIo
        // NOTE: we could add a baseIO offset here an create a second handy
        // use for this module.
        // That can be done with a zero length mountPoint as well though!
        return [this._baseIo, dispatchPath];
    };

    function _dispatch(async, dispatchTarget, funcName, args_) {
        var io = dispatchTarget[0]
          , path = dispatchTarget[1]
          , args = [async, path]
          ;
        Array.prototype.push.apply(args, args_);
        return io[funcName].apply(io, args);
    }

    function _getArgs(len /* l arguments */){
        var i, args =[];
        assert(len === arguments.length -1, 'Wrong amount of arguments. '
                    + 'Expected ' + len + ' but got ' + arguments.length);
        // i is 1 to exclude len itself
        // note that i = len is expected index
        for(i=1;i<=len;i++)
            args.push(arguments[i]);
        return args;
    }

    /**
     * This expects 'async' to be the first argument and  'path' to be the
     * second argument of `funcName`. This is ubiquitous in the io API.
     *
     * extraArgs_ is an array of argument names (strings) of anything that
     * is expected after 'path', may be empty.
     * If it is falsy, no arguments other than `async` and `path` will be
     * injected into the dispatched call.
     */
    function _obtainRequestFactory(funcName_, extraArgs_) {
        var funcName = new Argument(funcName_)
          , api = ['path']
          , extraArgs = !!extraArgs_
                    ? (extraArgs_ instanceof Array ? extraArgs_ : [extraArgs_])
                    : []
          , argsGetter
          ;
        argsGetter = [extraArgs.length];
        Array.prototype.push.apply(argsGetter, extraArgs);
        argsGetter.push(_getArgs);

        Array.prototype.push.apply(api, extraArgs);

        return obtain.factory(
            {
                dispatchTarget: ['path', _p._dispatchTarget]
              , dispatch: [false, 'dispatchTarget', funcName, 'args', _dispatch]
              , args: argsGetter
            }
          , {
                dispatch: [true,  'dispatchTarget', funcName, 'args', _dispatch]
            }
          , api
          , function(obtain){ return obtain('dispatch'); }
        );
    }

    (function(target, factory, apiDefinition){
        var k;
        for(k in apiDefinition)
            target[k] = factory.apply(null, apiDefinition[k]);
    })( _p, _obtainRequestFactory, {
        readFile: ['readFile', undefined]
      , writeFile: ['writeFile', ['data']]
      , appendFile: ['appendFile', ['data']]
      , unlink: ['unlink', undefined]
      , readBytes: ['readBytes', ['bytes']]
      , stat: ['stat', undefined]
      , pathExists: ['pathExists', undefined]
      , getMtime: ['getMtime', undefined]
      , _readDir: ['readDir', undefined]
      , mkDir: ['mkDir', undefined]
      , ensureDir: ['ensureDir', undefined]
      , _rmDir: ['rmDir', undefined]
    });

    // This also has to run when the original readir throws an
    // IONotDirError or IONoEntryError
    _p._augmentDirectoryListing = function(path, listing) {
        // If the path is an ancestor of one of the mount points
        // and the listing contains no hints of a physical mount point path
        // OR it contains contradicting information, like a file, where
        // a mount point implies a directory
        // Then we should add/override the missing information
        var requestPath = Path.Factory(path)
            // mount points that are 1 segment longer than requestPath are
            // possible direct children
          , pathLen = requestPath.path.length
          , searchToken = requestPath.normalPath + '/'
          , children = [], i, l
          , setOfNames = Object.create(null)
          , result
          , k
          ;
        // First we need all mount points that are subpaths of path or
        // contained in subpaths of path.
        function filterNonChildren (p){
            // must begin with requestPath.normalPath + '/' or it is not contained
            return p.indexOf(searchToken) === 0;
        }
        function getDirectChildName (p) {
            // + '/' => mark as a directory
            return p.split('/').slice(pathLen, pathLen+1) + '/';
        }

        for(k in this._mountPointsByPathLength) {
            // skip paths with less segements
            if(parseInt(k, 10) <= pathLen)
                continue;
            // add all direct child directories to the children array.
            Array.prototype.push.apply(children ,
                Object.keys(this._mountPointsByPathLength[k])
                    // remove everything that is not a sub directory path
                    .filter(filterNonChildren)
                    // get only the direct child directory name
                    .map(getDirectChildName)
            );
        }

        for(i=0,l=children.length;i<l;i++)
            setOfNames[children[i]] = true;

        for(i=0,l=listing.length;i<l;i++) {
            // add all items of listing except if they are files and
            // there is already a path of that name registered.
            if(listing[i] + '/' in setOfNames)
                // There is a directory of this name, that directory
                // is part of the path to a mount point.
                continue;
            setOfNames[listing[i]] = true;
        }
        // sort?
        return Object.keys(setOfNames);
    };

    _p.readDir = obtain.factory(
        {
            readDirResult: ['path', function(path) {
                var listing
                  , result = {
                        error: null
                      , data: null
                    }
                  ;
                try {
                    result.data = this._readDir(false, path);
                }
                catch(error) {
                    if( !(error instanceof IONoEntryError)
                                    && !(error instanceof IONotDirError))
                        throw error;
                    result.error = error;
                }
                return result;
            }]
          , listing: ['path', 'readDirResult', function(path, readDirResult) {
                var listing = this._augmentDirectoryListing(path, readDirResult.data || []);
                if(!listing.length && readDirResult.error)
                    throw readDirResult.error;
                return listing;
            }]
        }
      , {
            readDirResult: ['path', function(path) {
                var result = {
                    error: null
                  , data: null
                };
                function callback(data) {
                    result.data = data;
                    return result;
                }
                function errback(error) {
                    if(!(error instanceof IONoEntryError)
                                        && !(error instanceof IONotDirError))
                        throw error;
                    result.error = error;
                    return result;
                }
                return this._readDir(true, path).then(callback, errback);
            }]
        }
      , ['path']
      , function job(obtain) {
            return obtain('listing');
        }
    );

    _p.rmDir = obtain.factory(
        {
            isMountPoint: ['path', _p.isMountPoint]
          , rmDir: [false, 'path', _p._rmDir]
        }
      , {
            rmDir: [true, 'path', _p._rmDir]
        }
      , ['path']
      , function job(obtain, path) {
            if(obtain('isMountPoint'))
                throw new IONotDirError('You can\'t rmDir(path) "'+path+'", '
                            + ' it is a mount point. Use io.umount(path) instead.');
            return obtain('rmDir');
        }
    );

    return Mounting;
});

/*!
 * mustache.js - Logic-less {{mustache}} templates with JavaScript
 * http://github.com/janl/mustache.js
 */

/*global define: false Mustache: true*/

(function defineMustache (global, factory) {
  if (typeof exports === 'object' && exports && typeof exports.nodeName !== 'string') {
    factory(exports); // CommonJS
  } else if (typeof define === 'function' && define.amd) {
    define('mustache',['exports'], factory); // AMD
  } else {
    global.Mustache = {};
    factory(global.Mustache); // script, wsh, asp
  }
}(this, function mustacheFactory (mustache) {

  var objectToString = Object.prototype.toString;
  var isArray = Array.isArray || function isArrayPolyfill (object) {
    return objectToString.call(object) === '[object Array]';
  };

  function isFunction (object) {
    return typeof object === 'function';
  }

  /**
   * More correct typeof string handling array
   * which normally returns typeof 'object'
   */
  function typeStr (obj) {
    return isArray(obj) ? 'array' : typeof obj;
  }

  function escapeRegExp (string) {
    return string.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
  }

  /**
   * Null safe way of checking whether or not an object,
   * including its prototype, has a given property
   */
  function hasProperty (obj, propName) {
    return obj != null && typeof obj === 'object' && (propName in obj);
  }

  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577
  // See https://github.com/janl/mustache.js/issues/189
  var regExpTest = RegExp.prototype.test;
  function testRegExp (re, string) {
    return regExpTest.call(re, string);
  }

  var nonSpaceRe = /\S/;
  function isWhitespace (string) {
    return !testRegExp(nonSpaceRe, string);
  }

  var entityMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '/': '&#x2F;',
    '`': '&#x60;',
    '=': '&#x3D;'
  };

  function escapeHtml (string) {
    return String(string).replace(/[&<>"'`=\/]/g, function fromEntityMap (s) {
      return entityMap[s];
    });
  }

  var whiteRe = /\s*/;
  var spaceRe = /\s+/;
  var equalsRe = /\s*=/;
  var curlyRe = /\s*\}/;
  var tagRe = /#|\^|\/|>|\{|&|=|!/;

  /**
   * Breaks up the given `template` string into a tree of tokens. If the `tags`
   * argument is given here it must be an array with two string values: the
   * opening and closing tags used in the template (e.g. [ "<%", "%>" ]). Of
   * course, the default is to use mustaches (i.e. mustache.tags).
   *
   * A token is an array with at least 4 elements. The first element is the
   * mustache symbol that was used inside the tag, e.g. "#" or "&". If the tag
   * did not contain a symbol (i.e. {{myValue}}) this element is "name". For
   * all text that appears outside a symbol this element is "text".
   *
   * The second element of a token is its "value". For mustache tags this is
   * whatever else was inside the tag besides the opening symbol. For text tokens
   * this is the text itself.
   *
   * The third and fourth elements of the token are the start and end indices,
   * respectively, of the token in the original template.
   *
   * Tokens that are the root node of a subtree contain two more elements: 1) an
   * array of tokens in the subtree and 2) the index in the original template at
   * which the closing tag for that section begins.
   */
  function parseTemplate (template, tags) {
    if (!template)
      return [];

    var sections = [];     // Stack to hold section tokens
    var tokens = [];       // Buffer to hold the tokens
    var spaces = [];       // Indices of whitespace tokens on the current line
    var hasTag = false;    // Is there a {{tag}} on the current line?
    var nonSpace = false;  // Is there a non-space char on the current line?

    // Strips all whitespace tokens array for the current line
    // if there was a {{#tag}} on it and otherwise only space.
    function stripSpace () {
      if (hasTag && !nonSpace) {
        while (spaces.length)
          delete tokens[spaces.pop()];
      } else {
        spaces = [];
      }

      hasTag = false;
      nonSpace = false;
    }

    var openingTagRe, closingTagRe, closingCurlyRe;
    function compileTags (tagsToCompile) {
      if (typeof tagsToCompile === 'string')
        tagsToCompile = tagsToCompile.split(spaceRe, 2);

      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)
        throw new Error('Invalid tags: ' + tagsToCompile);

      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\s*');
      closingTagRe = new RegExp('\\s*' + escapeRegExp(tagsToCompile[1]));
      closingCurlyRe = new RegExp('\\s*' + escapeRegExp('}' + tagsToCompile[1]));
    }

    compileTags(tags || mustache.tags);

    var scanner = new Scanner(template);

    var start, type, value, chr, token, openSection;
    while (!scanner.eos()) {
      start = scanner.pos;

      // Match any text between tags.
      value = scanner.scanUntil(openingTagRe);

      if (value) {
        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {
          chr = value.charAt(i);

          if (isWhitespace(chr)) {
            spaces.push(tokens.length);
          } else {
            nonSpace = true;
          }

          tokens.push([ 'text', chr, start, start + 1 ]);
          start += 1;

          // Check for whitespace on the current line.
          if (chr === '\n')
            stripSpace();
        }
      }

      // Match the opening tag.
      if (!scanner.scan(openingTagRe))
        break;

      hasTag = true;

      // Get the tag type.
      type = scanner.scan(tagRe) || 'name';
      scanner.scan(whiteRe);

      // Get the tag value.
      if (type === '=') {
        value = scanner.scanUntil(equalsRe);
        scanner.scan(equalsRe);
        scanner.scanUntil(closingTagRe);
      } else if (type === '{') {
        value = scanner.scanUntil(closingCurlyRe);
        scanner.scan(curlyRe);
        scanner.scanUntil(closingTagRe);
        type = '&';
      } else {
        value = scanner.scanUntil(closingTagRe);
      }

      // Match the closing tag.
      if (!scanner.scan(closingTagRe))
        throw new Error('Unclosed tag at ' + scanner.pos);

      token = [ type, value, start, scanner.pos ];
      tokens.push(token);

      if (type === '#' || type === '^') {
        sections.push(token);
      } else if (type === '/') {
        // Check section nesting.
        openSection = sections.pop();

        if (!openSection)
          throw new Error('Unopened section "' + value + '" at ' + start);

        if (openSection[1] !== value)
          throw new Error('Unclosed section "' + openSection[1] + '" at ' + start);
      } else if (type === 'name' || type === '{' || type === '&') {
        nonSpace = true;
      } else if (type === '=') {
        // Set the tags for the next time around.
        compileTags(value);
      }
    }

    // Make sure there are no open sections when we're done.
    openSection = sections.pop();

    if (openSection)
      throw new Error('Unclosed section "' + openSection[1] + '" at ' + scanner.pos);

    return nestTokens(squashTokens(tokens));
  }

  /**
   * Combines the values of consecutive text tokens in the given `tokens` array
   * to a single token.
   */
  function squashTokens (tokens) {
    var squashedTokens = [];

    var token, lastToken;
    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
      token = tokens[i];

      if (token) {
        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {
          lastToken[1] += token[1];
          lastToken[3] = token[3];
        } else {
          squashedTokens.push(token);
          lastToken = token;
        }
      }
    }

    return squashedTokens;
  }

  /**
   * Forms the given array of `tokens` into a nested tree structure where
   * tokens that represent a section have two additional items: 1) an array of
   * all tokens that appear in that section and 2) the index in the original
   * template that represents the end of that section.
   */
  function nestTokens (tokens) {
    var nestedTokens = [];
    var collector = nestedTokens;
    var sections = [];

    var token, section;
    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
      token = tokens[i];

      switch (token[0]) {
        case '#':
        case '^':
          collector.push(token);
          sections.push(token);
          collector = token[4] = [];
          break;
        case '/':
          section = sections.pop();
          section[5] = token[2];
          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;
          break;
        default:
          collector.push(token);
      }
    }

    return nestedTokens;
  }

  /**
   * A simple string scanner that is used by the template parser to find
   * tokens in template strings.
   */
  function Scanner (string) {
    this.string = string;
    this.tail = string;
    this.pos = 0;
  }

  /**
   * Returns `true` if the tail is empty (end of string).
   */
  Scanner.prototype.eos = function eos () {
    return this.tail === '';
  };

  /**
   * Tries to match the given regular expression at the current position.
   * Returns the matched text if it can match, the empty string otherwise.
   */
  Scanner.prototype.scan = function scan (re) {
    var match = this.tail.match(re);

    if (!match || match.index !== 0)
      return '';

    var string = match[0];

    this.tail = this.tail.substring(string.length);
    this.pos += string.length;

    return string;
  };

  /**
   * Skips all text until the given regular expression can be matched. Returns
   * the skipped string, which is the entire tail if no match can be made.
   */
  Scanner.prototype.scanUntil = function scanUntil (re) {
    var index = this.tail.search(re), match;

    switch (index) {
      case -1:
        match = this.tail;
        this.tail = '';
        break;
      case 0:
        match = '';
        break;
      default:
        match = this.tail.substring(0, index);
        this.tail = this.tail.substring(index);
    }

    this.pos += match.length;

    return match;
  };

  /**
   * Represents a rendering context by wrapping a view object and
   * maintaining a reference to the parent context.
   */
  function Context (view, parentContext) {
    this.view = view;
    this.cache = { '.': this.view };
    this.parent = parentContext;
  }

  /**
   * Creates a new context using the given view with this context
   * as the parent.
   */
  Context.prototype.push = function push (view) {
    return new Context(view, this);
  };

  /**
   * Returns the value of the given name in this context, traversing
   * up the context hierarchy if the value is absent in this context's view.
   */
  Context.prototype.lookup = function lookup (name) {
    var cache = this.cache;

    var value;
    if (cache.hasOwnProperty(name)) {
      value = cache[name];
    } else {
      var context = this, names, index, lookupHit = false;

      while (context) {
        if (name.indexOf('.') > 0) {
          value = context.view;
          names = name.split('.');
          index = 0;

          /**
           * Using the dot notion path in `name`, we descend through the
           * nested objects.
           *
           * To be certain that the lookup has been successful, we have to
           * check if the last object in the path actually has the property
           * we are looking for. We store the result in `lookupHit`.
           *
           * This is specially necessary for when the value has been set to
           * `undefined` and we want to avoid looking up parent contexts.
           **/
          while (value != null && index < names.length) {
            if (index === names.length - 1)
              lookupHit = hasProperty(value, names[index]);

            value = value[names[index++]];
          }
        } else {
          value = context.view[name];
          lookupHit = hasProperty(context.view, name);
        }

        if (lookupHit)
          break;

        context = context.parent;
      }

      cache[name] = value;
    }

    if (isFunction(value))
      value = value.call(this.view);

    return value;
  };

  /**
   * A Writer knows how to take a stream of tokens and render them to a
   * string, given a context. It also maintains a cache of templates to
   * avoid the need to parse the same template twice.
   */
  function Writer () {
    this.cache = {};
  }

  /**
   * Clears all cached templates in this writer.
   */
  Writer.prototype.clearCache = function clearCache () {
    this.cache = {};
  };

  /**
   * Parses and caches the given `template` and returns the array of tokens
   * that is generated from the parse.
   */
  Writer.prototype.parse = function parse (template, tags) {
    var cache = this.cache;
    var tokens = cache[template];

    if (tokens == null)
      tokens = cache[template] = parseTemplate(template, tags);

    return tokens;
  };

  /**
   * High-level method that is used to render the given `template` with
   * the given `view`.
   *
   * The optional `partials` argument may be an object that contains the
   * names and templates of partials that are used in the template. It may
   * also be a function that is used to load partial templates on the fly
   * that takes a single argument: the name of the partial.
   */
  Writer.prototype.render = function render (template, view, partials) {
    var tokens = this.parse(template);
    var context = (view instanceof Context) ? view : new Context(view);
    return this.renderTokens(tokens, context, partials, template);
  };

  /**
   * Low-level method that renders the given array of `tokens` using
   * the given `context` and `partials`.
   *
   * Note: The `originalTemplate` is only ever used to extract the portion
   * of the original template that was contained in a higher-order section.
   * If the template doesn't use higher-order sections, this argument may
   * be omitted.
   */
  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate) {
    var buffer = '';

    var token, symbol, value;
    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
      value = undefined;
      token = tokens[i];
      symbol = token[0];

      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);
      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);
      else if (symbol === '>') value = this.renderPartial(token, context, partials, originalTemplate);
      else if (symbol === '&') value = this.unescapedValue(token, context);
      else if (symbol === 'name') value = this.escapedValue(token, context);
      else if (symbol === 'text') value = this.rawValue(token);

      if (value !== undefined)
        buffer += value;
    }

    return buffer;
  };

  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate) {
    var self = this;
    var buffer = '';
    var value = context.lookup(token[1]);

    // This function is used to render an arbitrary template
    // in the current context by higher-order sections.
    function subRender (template) {
      return self.render(template, context, partials);
    }

    if (!value) return;

    if (isArray(value)) {
      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {
        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);
      }
    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {
      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);
    } else if (isFunction(value)) {
      if (typeof originalTemplate !== 'string')
        throw new Error('Cannot use higher-order sections without the original template');

      // Extract the portion of the original template that the section contains.
      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);

      if (value != null)
        buffer += value;
    } else {
      buffer += this.renderTokens(token[4], context, partials, originalTemplate);
    }
    return buffer;
  };

  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate) {
    var value = context.lookup(token[1]);

    // Use JavaScript's definition of falsy. Include empty arrays.
    // See https://github.com/janl/mustache.js/issues/186
    if (!value || (isArray(value) && value.length === 0))
      return this.renderTokens(token[4], context, partials, originalTemplate);
  };

  Writer.prototype.renderPartial = function renderPartial (token, context, partials) {
    if (!partials) return;

    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];
    if (value != null)
      return this.renderTokens(this.parse(value), context, partials, value);
  };

  Writer.prototype.unescapedValue = function unescapedValue (token, context) {
    var value = context.lookup(token[1]);
    if (value != null)
      return value;
  };

  Writer.prototype.escapedValue = function escapedValue (token, context) {
    var value = context.lookup(token[1]);
    if (value != null)
      return mustache.escape(value);
  };

  Writer.prototype.rawValue = function rawValue (token) {
    return token[1];
  };

  mustache.name = 'mustache.js';
  mustache.version = '2.2.1';
  mustache.tags = [ '{{', '}}' ];

  // All high-level mustache.* functions use this writer.
  var defaultWriter = new Writer();

  /**
   * Clears all cached templates in the default writer.
   */
  mustache.clearCache = function clearCache () {
    return defaultWriter.clearCache();
  };

  /**
   * Parses and caches the given template in the default writer and returns the
   * array of tokens it contains. Doing this ahead of time avoids the need to
   * parse templates on the fly as they are rendered.
   */
  mustache.parse = function parse (template, tags) {
    return defaultWriter.parse(template, tags);
  };

  /**
   * Renders the `template` with the given `view` and `partials` using the
   * default writer.
   */
  mustache.render = function render (template, view, partials) {
    if (typeof template !== 'string') {
      throw new TypeError('Invalid template! Template should be a "string" ' +
                          'but "' + typeStr(template) + '" was given as the first ' +
                          'argument for mustache#render(template, view, partials)');
    }

    return defaultWriter.render(template, view, partials);
  };

  // This is here for backwards compatibility with 0.4.x.,
  /*eslint-disable */ // eslint wants camel cased function name
  mustache.to_html = function to_html (template, view, partials, send) {
    /*eslint-enable*/

    var result = mustache.render(template, view, partials);

    if (isFunction(send)) {
      send(result);
    } else {
      return result;
    }
  };

  // Export the escaping function so that the user may override it.
  // See https://github.com/janl/mustache.js/issues/244
  mustache.escape = escapeHtml;

  // Export these mainly for testing, but also for advanced usage.
  mustache.Scanner = Scanner;
  mustache.Context = Context;
  mustache.Writer = Writer;

}));

/**
 * @license text 2.0.15 Copyright jQuery Foundation and other contributors.
 * Released under MIT license, http://github.com/requirejs/text/LICENSE
 */
/*jslint regexp: true */
/*global require, XMLHttpRequest, ActiveXObject,
  define, window, process, Packages,
  java, location, Components, FileUtils */

define('require/text',['module'], function (module) {
    'use strict';

    var text, fs, Cc, Ci, xpcIsWindows,
        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],
        xmlRegExp = /^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im,
        bodyRegExp = /<body[^>]*>\s*([\s\S]+)\s*<\/body>/im,
        hasLocation = typeof location !== 'undefined' && location.href,
        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\:/, ''),
        defaultHostName = hasLocation && location.hostname,
        defaultPort = hasLocation && (location.port || undefined),
        buildMap = {},
        masterConfig = (module.config && module.config()) || {};

    function useDefault(value, defaultValue) {
        return value === undefined || value === '' ? defaultValue : value;
    }

    //Allow for default ports for http and https.
    function isSamePort(protocol1, port1, protocol2, port2) {
        if (port1 === port2) {
            return true;
        } else if (protocol1 === protocol2) {
            if (protocol1 === 'http') {
                return useDefault(port1, '80') === useDefault(port2, '80');
            } else if (protocol1 === 'https') {
                return useDefault(port1, '443') === useDefault(port2, '443');
            }
        }
        return false;
    }

    text = {
        version: '2.0.15',

        strip: function (content) {
            //Strips <?xml ...?> declarations so that external SVG and XML
            //documents can be added to a document without worry. Also, if the string
            //is an HTML document, only the part inside the body tag is returned.
            if (content) {
                content = content.replace(xmlRegExp, "");
                var matches = content.match(bodyRegExp);
                if (matches) {
                    content = matches[1];
                }
            } else {
                content = "";
            }
            return content;
        },

        jsEscape: function (content) {
            return content.replace(/(['\\])/g, '\\$1')
                .replace(/[\f]/g, "\\f")
                .replace(/[\b]/g, "\\b")
                .replace(/[\n]/g, "\\n")
                .replace(/[\t]/g, "\\t")
                .replace(/[\r]/g, "\\r")
                .replace(/[\u2028]/g, "\\u2028")
                .replace(/[\u2029]/g, "\\u2029");
        },

        createXhr: masterConfig.createXhr || function () {
            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.
            var xhr, i, progId;
            if (typeof XMLHttpRequest !== "undefined") {
                return new XMLHttpRequest();
            } else if (typeof ActiveXObject !== "undefined") {
                for (i = 0; i < 3; i += 1) {
                    progId = progIds[i];
                    try {
                        xhr = new ActiveXObject(progId);
                    } catch (e) {}

                    if (xhr) {
                        progIds = [progId];  // so faster next time
                        break;
                    }
                }
            }

            return xhr;
        },

        /**
         * Parses a resource name into its component parts. Resource names
         * look like: module/name.ext!strip, where the !strip part is
         * optional.
         * @param {String} name the resource name
         * @returns {Object} with properties "moduleName", "ext" and "strip"
         * where strip is a boolean.
         */
        parseName: function (name) {
            var modName, ext, temp,
                strip = false,
                index = name.lastIndexOf("."),
                isRelative = name.indexOf('./') === 0 ||
                             name.indexOf('../') === 0;

            if (index !== -1 && (!isRelative || index > 1)) {
                modName = name.substring(0, index);
                ext = name.substring(index + 1);
            } else {
                modName = name;
            }

            temp = ext || modName;
            index = temp.indexOf("!");
            if (index !== -1) {
                //Pull off the strip arg.
                strip = temp.substring(index + 1) === "strip";
                temp = temp.substring(0, index);
                if (ext) {
                    ext = temp;
                } else {
                    modName = temp;
                }
            }

            return {
                moduleName: modName,
                ext: ext,
                strip: strip
            };
        },

        xdRegExp: /^((\w+)\:)?\/\/([^\/\\]+)/,

        /**
         * Is an URL on another domain. Only works for browser use, returns
         * false in non-browser environments. Only used to know if an
         * optimized .js version of a text resource should be loaded
         * instead.
         * @param {String} url
         * @returns Boolean
         */
        useXhr: function (url, protocol, hostname, port) {
            var uProtocol, uHostName, uPort,
                match = text.xdRegExp.exec(url);
            if (!match) {
                return true;
            }
            uProtocol = match[2];
            uHostName = match[3];

            uHostName = uHostName.split(':');
            uPort = uHostName[1];
            uHostName = uHostName[0];

            return (!uProtocol || uProtocol === protocol) &&
                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&
                   ((!uPort && !uHostName) || isSamePort(uProtocol, uPort, protocol, port));
        },

        finishLoad: function (name, strip, content, onLoad) {
            content = strip ? text.strip(content) : content;
            if (masterConfig.isBuild) {
                buildMap[name] = content;
            }
            onLoad(content);
        },

        load: function (name, req, onLoad, config) {
            //Name has format: some.module.filext!strip
            //The strip part is optional.
            //if strip is present, then that means only get the string contents
            //inside a body tag in an HTML string. For XML/SVG content it means
            //removing the <?xml ...?> declarations so the content can be inserted
            //into the current doc without problems.

            // Do not bother with the work if a build and text will
            // not be inlined.
            if (config && config.isBuild && !config.inlineText) {
                onLoad();
                return;
            }

            masterConfig.isBuild = config && config.isBuild;

            var parsed = text.parseName(name),
                nonStripName = parsed.moduleName +
                    (parsed.ext ? '.' + parsed.ext : ''),
                url = req.toUrl(nonStripName),
                useXhr = (masterConfig.useXhr) ||
                         text.useXhr;

            // Do not load if it is an empty: url
            if (url.indexOf('empty:') === 0) {
                onLoad();
                return;
            }

            //Load the text. Use XHR if possible and in a browser.
            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {
                text.get(url, function (content) {
                    text.finishLoad(name, parsed.strip, content, onLoad);
                }, function (err) {
                    if (onLoad.error) {
                        onLoad.error(err);
                    }
                });
            } else {
                //Need to fetch the resource across domains. Assume
                //the resource has been optimized into a JS module. Fetch
                //by the module name + extension, but do not include the
                //!strip part to avoid file system issues.
                req([nonStripName], function (content) {
                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,
                                    parsed.strip, content, onLoad);
                });
            }
        },

        write: function (pluginName, moduleName, write, config) {
            if (buildMap.hasOwnProperty(moduleName)) {
                var content = text.jsEscape(buildMap[moduleName]);
                write.asModule(pluginName + "!" + moduleName,
                               "define(function () { return '" +
                                   content +
                               "';});\n");
            }
        },

        writeFile: function (pluginName, moduleName, req, write, config) {
            var parsed = text.parseName(moduleName),
                extPart = parsed.ext ? '.' + parsed.ext : '',
                nonStripName = parsed.moduleName + extPart,
                //Use a '.js' file name so that it indicates it is a
                //script that can be loaded across domains.
                fileName = req.toUrl(parsed.moduleName + extPart) + '.js';

            //Leverage own load() method to load plugin value, but only
            //write out values that do not have the strip argument,
            //to avoid any potential issues with ! in file names.
            text.load(nonStripName, req, function (value) {
                //Use own write() method to construct full module value.
                //But need to create shell that translates writeFile's
                //write() to the right interface.
                var textWrite = function (contents) {
                    return write(fileName, contents);
                };
                textWrite.asModule = function (moduleName, contents) {
                    return write.asModule(moduleName, fileName, contents);
                };

                text.write(pluginName, nonStripName, textWrite, config);
            }, config);
        }
    };

    if (masterConfig.env === 'node' || (!masterConfig.env &&
            typeof process !== "undefined" &&
            process.versions &&
            !!process.versions.node &&
            !process.versions['node-webkit'] &&
            !process.versions['atom-shell'])) {
        //Using special require.nodeRequire, something added by r.js.
        fs = require.nodeRequire('fs');

        text.get = function (url, callback, errback) {
            try {
                var file = fs.readFileSync(url, 'utf8');
                //Remove BOM (Byte Mark Order) from utf8 files if it is there.
                if (file[0] === '\uFEFF') {
                    file = file.substring(1);
                }
                callback(file);
            } catch (e) {
                if (errback) {
                    errback(e);
                }
            }
        };
    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&
            text.createXhr())) {
        text.get = function (url, callback, errback, headers) {
            var xhr = text.createXhr(), header;
            xhr.open('GET', url, true);

            //Allow plugins direct access to xhr headers
            if (headers) {
                for (header in headers) {
                    if (headers.hasOwnProperty(header)) {
                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);
                    }
                }
            }

            //Allow overrides specified in config
            if (masterConfig.onXhr) {
                masterConfig.onXhr(xhr, url);
            }

            xhr.onreadystatechange = function (evt) {
                var status, err;
                //Do not explicitly handle errors, those should be
                //visible via console output in the browser.
                if (xhr.readyState === 4) {
                    status = xhr.status || 0;
                    if (status > 399 && status < 600) {
                        //An http 4xx or 5xx error. Signal an error.
                        err = new Error(url + ' HTTP status: ' + status);
                        err.xhr = xhr;
                        if (errback) {
                            errback(err);
                        }
                    } else {
                        callback(xhr.responseText);
                    }

                    if (masterConfig.onXhrComplete) {
                        masterConfig.onXhrComplete(xhr, url);
                    }
                }
            };
            xhr.send(null);
        };
    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&
            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {
        //Why Java, why is this so awkward?
        text.get = function (url, callback) {
            var stringBuffer, line,
                encoding = "utf-8",
                file = new java.io.File(url),
                lineSeparator = java.lang.System.getProperty("line.separator"),
                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),
                content = '';
            try {
                stringBuffer = new java.lang.StringBuffer();
                line = input.readLine();

                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324
                // http://www.unicode.org/faq/utf_bom.html

                // Note that when we use utf-8, the BOM should appear as "EF BB BF", but it doesn't due to this bug in the JDK:
                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058
                if (line && line.length() && line.charAt(0) === 0xfeff) {
                    // Eat the BOM, since we've already found the encoding on this file,
                    // and we plan to concatenating this buffer with others; the BOM should
                    // only appear at the top of a file.
                    line = line.substring(1);
                }

                if (line !== null) {
                    stringBuffer.append(line);
                }

                while ((line = input.readLine()) !== null) {
                    stringBuffer.append(lineSeparator);
                    stringBuffer.append(line);
                }
                //Make sure we return a JavaScript string and not a Java string.
                content = String(stringBuffer.toString()); //String
            } finally {
                input.close();
            }
            callback(content);
        };
    } else if (masterConfig.env === 'xpconnect' || (!masterConfig.env &&
            typeof Components !== 'undefined' && Components.classes &&
            Components.interfaces)) {
        //Avert your gaze!
        Cc = Components.classes;
        Ci = Components.interfaces;
        Components.utils['import']('resource://gre/modules/FileUtils.jsm');
        xpcIsWindows = ('@mozilla.org/windows-registry-key;1' in Cc);

        text.get = function (url, callback) {
            var inStream, convertStream, fileObj,
                readData = {};

            if (xpcIsWindows) {
                url = url.replace(/\//g, '\\');
            }

            fileObj = new FileUtils.File(url);

            //XPCOM, you so crazy
            try {
                inStream = Cc['@mozilla.org/network/file-input-stream;1']
                           .createInstance(Ci.nsIFileInputStream);
                inStream.init(fileObj, 1, 0, false);

                convertStream = Cc['@mozilla.org/intl/converter-input-stream;1']
                                .createInstance(Ci.nsIConverterInputStream);
                convertStream.init(inStream, "utf-8", inStream.available(),
                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);

                convertStream.readString(inStream.available(), readData);
                convertStream.close();
                inStream.close();
                callback(readData.value);
            } catch (e) {
                throw new Error((fileObj && fileObj.path || '') + ': ' + e);
            }
        };
    }
    return text;
});


define('require/text!Atem-MOM/cpsGenerators/interpolation.tpl',[],function () { return 'glyph {\n{{#n}}\n    base{{.}}: baseMaster{{.}}[Selector "glyph#" + this:id];\n{{/n}}\n}\n\ncontour > p {\n    indexContour: parent:index;\n{{#n}}\n    base{{.}}: parent:parent:base{{.}}\n        :children[indexContour]\n        :children[index]\n        ;\n{{/n}}\n}\n\ncenter {\n    indexPenstroke: parent:index;\n{{#n}}\n    base{{.}}: parent:parent:base{{.}}\n        :children[indexPenstroke]\n        :children[index]\n        ;\n{{/n}}\n}\n\ncenter > * {\n    indexPenstroke: parent:parent:index;\n    indexCenter: parent:index;\n{{#n}}\n    base{{.}}: parent:parent:parent:base{{.}}\n        :children[indexPenstroke]\n        :children[indexCenter]\n        :children[index]\n        ;\n{{/n}}\n}\n\n* {\n    /* Ensure that the used proportions sum up to 1.\n     * Any other value produces usually unwanted effects.\n     * If you don\'t want this in your master redefine it as\n     * interpolationUnit: 1;\n     */\n    interpolationUnit: 1/(0{{#n}}\n        + proportion{{.}}{{/n}});\n{{#n}}\n    _p{{.}}: proportion{{.}} * interpolationUnit;\n{{/n}}\n}\n\nglyph {\n    width: 0{{#n}}\n        + base{{.}}:width * _p{{.}}{{/n}};\n    height: 0{{#n}}\n        + base{{.}}:height * _p{{.}}{{/n}};\n}\n\ncenter,\ncenter > left,\ncenter > right,\ncontour > p {\n    on: Vector 0 0{{#n}}\n        + base{{.}}:on * _p{{.}}{{/n}};\n    in: Vector 0 0{{#n}}\n        + base{{.}}:in * _p{{.}}{{/n}};\n    out: Vector 0 0{{#n}}\n        + base{{.}}:out * _p{{.}}{{/n}};\n}\n\ncomponent {\n    baseGlyphName: baseNode:baseGlyphName;\n    /* FIXME: there\'s currently no way of interpolating transformation matrixes\nsee: https://github.com/graphicore/Atem-Property-Language/issues/1\n    */\n    transformation: baseNode:transformation;\n{{#n}}\n    base{{.}}: parent:base{{.}}\n        :children[index]\n        ;\n{{/n}}\n}\n\nmaster * {\n{{#n}}\n    baseMaster{{.}}: master:baseMaster{{.}};\n{{/n}}\n{{#n}}\n    proportion{{.}}: master:proportion{{.}};\n{{/n}}\n}\n\n/****\n * set up the baseMasters and the proportions of the <MOM Master>:\n\n* {\n{{#n}}\n    baseMaster{{.}}: S"master#anyName_{{.}}";\n{{/n}}\n{{#n}}\n    proportion{{.}}: 1;\n{{/n}}\n}\n\n****/\n';});

define('Atem-MOM/cpsGenerators/interpolation',[
    'mustache'
  , 'require/text!./interpolation.tpl'
], function(
    mustache
  , template
) {
    return function(masterCount) {
        var n
          , view = {}
          , masterNs = view.n = [] // [0,1,2,3] when masterCount = 4
          ;
        for(n=0;n<masterCount;n++)
            masterNs.push(n);
        return mustache.render(template, view);
    };
});



define('require/text!Atem-MOM/cpsGenerators/metapolation.tpl',[],function () { return '@import \'lib/MOM/primary.cps\';\n\nglyph {\n{{#n}}\n    base{{.}}: baseMaster{{.}}[Selector "glyph#" + this:id];\n{{/n}}\n}\n\n\ncomponent {\n    baseGlyphName: baseNode:baseGlyphName;\n    /* FIXME: there\'s currently no way of interpolating transformation matrixes\nsee: https://github.com/graphicore/Atem-Property-Language/issues/1\n    */\n    transformation: baseNode:transformation;\n{{#n}}\n    base{{.}}: parent:base{{.}}\n        :children[index]\n        ;\n{{/n}}\n}\n\ncontour > p {\n    indexContour: parent:index;\n{{#n}}\n    base{{.}}: parent:parent:base{{.}}\n        :children[indexContour]\n        :children[index]\n        ;\n{{/n}}\n}\n\ncenter {\n    indexPenstroke: parent:index;\n{{#n}}\n    base{{.}}: parent:parent:base{{.}}\n        :children[indexPenstroke]\n        :children[index]\n        ;\n{{/n}}\n}\n\ncenter > * {\n    indexPenstroke: parent:parent:index;\n    indexCenter: parent:index;\n{{#n}}\n    base{{.}}: parent:parent:parent:base{{.}}\n        :children[indexPenstroke]\n        :children[indexCenter]\n        :children[index]\n        ;\n{{/n}}\n}\n\n* {\n    /* Ensure that the used proportions sum up to 1.\n     * Any other value produces usually unwanted effects.\n     * If you don\'t want this in your master redefine it as\n     * interpolationUnit: 1;\n     */\n    interpolationUnit: 1/(0{{#n}}\n        + proportion{{.}}{{/n}});\n{{#n}}\n    _p{{.}}: proportion{{.}} * interpolationUnit;\n{{/n}}\n}\n\nglyph {\n    width: 0{{#n}}\n        + base{{.}}:width * _p{{.}}{{/n}};\n    height: 0{{#n}}\n        + base{{.}}:height * _p{{.}}{{/n}};\n}\n\ncenter, center > * {\n    inLength: 0{{#n}}\n        + base{{.}}:inLength * _p{{.}}{{/n}};\n    outLength: 0{{#n}}\n        + base{{.}}:outLength * _p{{.}}{{/n}};\n    /* This transforms tensions of Infinity to 10000. Then we can interpolate\n     * without creating NaN values.\n     *\n     * NaN is produced when a tension is Infinity and a proportion is zero:\n     * Infinity * 0 => NaN.\n     * AFAIK this behavior is mathematically correct.\n     * But in that case we clearly want a 0 as result, because a proportion\n     * of 0 means we don\'t want to include the master into the Interpolation.\n     *\n     * 10000 will set the control point very very close to the on-curve\n     * point.\n     * FIXME: it would be better to keep the Infinity value when all\n     * `base*:**Tension` values are Infinity. But I think there is no way\n     * to do this right now.\n     * something like:\n     * ifelse (isInfinity base1:inTension and _p1 equals 0) 0 (base1:inTension * _p1)\n     * but that would require the new operators `ifelse` `isInfinity` `equals` `and`\n     * and that would require the booleans `true` and `false` also, consequently\n     * we\'d like also to introduce `not` `or` `isNaN`\n     * But we are holding off conditional execution at the moment, because\n     * we don\'t want to introduce to much power/complexity in CPS.\n     *\n     * (base1:inTension * _p1) elseif (isInfinity base1:inTension and _p1 equals 0) 0\n     *\n     * In another situation we may wan\'t to `grow` a control point in\n     * an interpolation. For better control, the master `not` having that\n     * control point can set the tension value to some big value itself.\n     * This is really the workaround for the missing `ifelse` etc.\n     * What a good value is must be determined in the case itself. I think\n     * it\'s likely that it would be well under 50 then.\n     * FIXME: Thus it may better here to go with a lower replacement value\n     * for Infinity, e.g. 10 or 100?\n     */\n    inTension: 0{{#n}}\n        + (min 1000 base{{.}}:inTension * _p{{.}}){{/n}};\n    outTension: 0{{#n}}\n        + (min 1000 base{{.}}:outTension * _p{{.}}){{/n}};\n    inDirIntrinsic: ((Vector 0 0){{#n}}\n        + (Polar 1 base{{.}}:inDirIntrinsic) * _p{{.}}{{/n}}\n        ):angle;\n    outDirIntrinsic: ((Vector 0 0){{#n}}\n        + (Polar 1 base{{.}}:outDirIntrinsic) * _p{{.}}{{/n}}\n        ):angle;\n}\n\ncontour > p {\n    on: Vector 0 0{{#n}}\n        + base{{.}}:on * _p{{.}}{{/n}};\n    inDir: ((Vector 0 0){{#n}}\n        + (Polar 1  base{{.}}:inDir) * _p{{.}}{{/n}}\n        ):angle;\n    outDir: ((Vector 0 0){{#n}}\n        + (Polar 1  base{{.}}:outDir) * _p{{.}}{{/n}}\n        ):angle;\n    inTension: 0{{#n}}\n        + (min 10000 base{{.}}:inTension) * _p{{.}}{{/n}};\n    outTension: 0{{#n}}\n        + (min 10000 base{{.}}:outTension) * _p{{.}}{{/n}};\n}\n\ncenter > left, center > right {\n    onDir: ((Vector 0 0){{#n}}\n        + (Polar 1 base{{.}}:onDir) * _p{{.}}{{/n}}\n        ):angle;\n    onLength: 0{{#n}}\n        + base{{.}}:onLength * _p{{.}}{{/n}};\n}\n\ncenter {\n    on: Vector 0 0{{#n}}\n        + base{{.}}:on * _p{{.}}{{/n}};\n    in: Vector 0 0{{#n}}\n        + base{{.}}:in * _p{{.}}{{/n}};\n    out: Vector 0 0{{#n}}\n        + base{{.}}:out * _p{{.}}{{/n}};\n}\n\n/* terminals overide of skeleton2outline */\ncenter:i(0) > left,\ncenter:i(0) > right {\n    inDir: ((Vector 0 0){{#n}}\n        + (Polar 1  base{{.}}:inDir) * _p{{.}}{{/n}}\n        ):angle;\n}\n\ncenter:i(-1) > right,\ncenter:i(-1) > left {\n    outDir: ((Vector 0 0){{#n}}\n        + (Polar 1  base{{.}}:outDir) * _p{{.}}{{/n}}\n        ):angle;\n}\n\nmaster * {\n{{#n}}\n    baseMaster{{.}}: master:baseMaster{{.}};\n{{/n}}\n{{#n}}\n    proportion{{.}}: master:proportion{{.}};\n{{/n}}\n}\n\n/****\n * set up the baseMasters and the proportions of the <MOM Master>:\n\n master {\n{{#n}}\n    baseMaster{{.}}: S"master#anyName_{{.}}";\n{{/n}}\n{{#n}}\n    proportion{{.}}: 1;\n{{/n}}\n}\n\n****/\n';});

define('Atem-MOM/cpsGenerators/metapolation',[
    'mustache'
  , 'require/text!./metapolation.tpl'
], function(
    mustache
  , template
) {
    return function(masterCount) {
        var n
          , view = {}
          , masterNs = view.n = [] // [0,1,2,3] when masterCount = 4
          ;
        for(n=0;n<masterCount;n++)
            masterNs.push(n);
        return mustache.render(template, view);
    };
});



define('Atem-MOM/project/Project',[
    'Atem-MOM/errors'
  , 'Atem-IO/errors'
  , 'obtain/obtain'

  , './IOProjectPersistence'

  , 'Atem-Logging/Logger'
  , 'Atem-Logging/Level'
  , 'Atem-Logging/ConsoleHandler'
  , 'Atem-Logging/YAMLFormatter'
  , 'Atem-Logging/CallbackHandler'
  , 'Atem-Logging/logRecordFromObject'

  , 'Atem-CPS/CPS/RuleController'
  , 'Atem-CPS/CPS/SelectorEngine'

  , 'Atem-MOM/Controller'
  , 'Atem-MOM/cpsTools'
  , 'Atem-MOM/MOM/Multivers'
  , 'Atem-MOM/MOM/Univers'
  , 'Atem-MOM/MOM/Master'

  , 'Atem-MOM/import/UFOImporter'
  , 'Atem-MOM/export/UFOExporter'
  , 'Atem-MOM/export/OTFExporter'

  , 'Atem-IO/tools/zipUtil'
  , 'Atem-IO/io/InMemory'
  , 'Atem-IO/io/Mounting'
  , 'yaml'
  , 'ufojs/ufoLib/UFOWriter'
  , 'ufojs/ufoLib/UFOReader'

  , 'Atem-MOM/cpsGenerators/interpolation'
  , 'Atem-MOM/cpsGenerators/metapolation'

], function(
    errors
  , ioErrors
  , obtain

  , IOProjectPersistence

  , Logger
  , Level
  , ConsoleHandler
  , YAMLFormatter
  , CallbackHandler
  , logRecordFromObject

  , RuleController
  , SelectorEngine

  , Controller
  , cpsTools
  , Multivers
  , Univers
  , Master

  , UFOImporter
  , UFOExporter
  , OTFExporter

  , zipUtil
  , InMemory
  , MountingIO
  , yaml
  , UFOWriter
  , UFOReader

  , interpolationGenerator
  , metapolationGenerator
) {
    "use strict";
    /*globals setTimeout*/
    var NotImplementedError = errors.NotImplemented
      , DeprecatedError = errors.Deprecated
      , IONoEntryError = ioErrors.IONoEntry
      , assert = errors.assert
      ;

    /**
     * TODO: this is very handy! Could be a helper attached to obtain itself.
     * obtain.callProxy
     * Even better, if the last argument of an obtain-getter dependecy
     * Array is not a function but an array, it is interpreted as argument
     * to callProxy.
     */
     function callProxy(callTarget /*, args , ... */) {
        /*jshint validthis:true*/
        var args = [], i, l
          , target = this[callTarget[0]]
          , method = target[callTarget[1]]
          ;
        for(i=1,l=arguments.length;i<l;i++)
            args.push(arguments[i]);
        return method.apply(target, args);
    }

    function multiversFactory(controller) {
        return new Multivers(controller);
    }

    // High level application controller of a metapolator project
    // An additionial persistence layer should take care of reading/writing
    // stuff to disk. call it Model.js or ProjectModel or something like that
    // ProjectPersistance ...

    function Project(io, baseDir, fsEvents, cpsLibIoMounts) {
        // FIXME/TODO:
        // this._io may become a MountingIO that has some limitations (Bug or Feature?)
        // This is used in the export function, where i.e. writing above
        // the root level raises errors like:
        // TypeError: Path "../Canola-full/canolaSource.ufo/metainfo.plist" is above root.
        // The this._plainIO will behave naturall like the io given.
        // I'm not sure yet if the MountingIO error is good or bad.
        // maybe that path above check is just too paranoid.
        this._plainIO = io;
        this._persistedMasters = null;

        this._cache = {
            glyphGroups: null
          , fontInfo: null
        };

        this.baseDir = baseDir || '.';

        this._io = cpsLibIoMounts ? new MountingIO(io) : io;

        // This is not fully ready yet! You need to run this.init or this.load
        // to finish the initialization of this._persistence.
        this._persistence = new IOProjectPersistence(this._io, this.baseDir);

        if(cpsLibIoMounts) {
            // I'm keeping the conditional here, so that the project can bring
            // it's own cps/lib. However, this is just a temporary backwards
            // compatibility thing. A project should rather not use the
            // cps/lib directory.
            // NOTE: the mount call completeley hides everything that would
            // be at project/data/ ... /cps/lib otherwise.

            var i,l;
            for(i=0,l=cpsLibIoMounts.length;i<l;i++) {
                // no two mountpoints may be the same!
                this._io.mount(
                        // just a kind of a hard link in the second case
                        cpsLibIoMounts[i].io || io
                        // the default is lib, and a "lib/" should be the beginning
                        // of a configured mountPoint as well. Otherwise
                        // Project may start to write to the cpsLibIo
                        // (There's a write protection open to be implemented …)
                      , [this._persistence.cpsDir, cpsLibIoMounts[i].mountPoint || 'lib'].join('/')
                        // the default is ''
                      , cpsLibIoMounts[i].pathOffset
                      , cpsLibIoMounts[i].allowAboveRoot
                );
            }
        }

        this._fsEvents = fsEvents;

        // FIXME: I'm suspending this for now. The reason is that we'll
        // have unintentional feedback in RuleController with this enabled
        // when having an interactive session. It's, as of now not, possible
        // to save a rule without invalidating it in the memory representation
        // save -> triggers '_fileChangeHandler' -> invalidates rules
        // We need a better way to do this, if we want to have both:
        // interactive changing AND changing from the filesystem.
        // Until then, we could make this file system monitoring optionial
        // for specific applications. It's not a high priority for now
        // but it would be easy to do. Maybe when there is an application
        // for that, like a Metapolator-Update-Monitor, that updates its
        // view when a file on disk is changed.
        // this._updateChangedRuleHandlers = null;
        // if(this._fsEvents) {
        //     this._fsEvents.on('change', this._fileChangeHandler.bind(this));
        //     // setting the defaults
        //     this.setUpdateChangedRuleHandlers();
        // }

        this._selectorEngine = new SelectorEngine();
        Object.defineProperty(this, 'ruleController', {
            value: new RuleController( this._io
                                     , this._persistence.cpsDir
                                     , cpsTools.initializePropertyValue
                                     , this._selectorEngine)
        });

        // Maybe we want these configurable/injectible in the future, just
        // like the `cpsLibIoMounts`. However, now there are just these cps
        // generators;
        this.ruleController.registerCPSGenerator('interpolation', interpolationGenerator);
        this.ruleController.registerCPSGenerator('metapolation', metapolationGenerator);

        this._controller = new Controller( this.ruleController
                                         , multiversFactory
                                         , this._selectorEngine);

        this._log = new Logger().setLevel(Level.DEBUG);
        this._log.addHandler(new ConsoleHandler());
    }

    var _p = Project.prototype;
    _p.constructor = Project;

    // a default baseMaster cps could be part of project
    // For now we just use {cpsLib}/MOM/primary.cps directly.
    // Can be configured later...
    Object.defineProperty(_p, 'baseMasterCPSFile', {value: 'lib/MOM/primary.cps'});


    // cps/oma controller
    Object.defineProperty(_p, 'controller', {
        get: function(){ return this._controller; }
    });

    Object.defineProperty(_p, '_univers', {
        get: function() { return this._controller.rootNode.getChild(0); }
    });

    /**
     * See the FIXME in the constructor.
     *
     * TODO:
     * We'll need a better strategy for events like this. A classical
     * subscription interface probably.
     *
     * This event is fired when a changed file triggered a call to
     * `this.controller.updateChangedRule` see `_p._fileChangeHandler below`
     *
     * This function is a very simple interface, to unset handlers, call it
     * without arguments. It is not possible to set multiple handlers.
     *
     */
    _p.setUpdateChangedRuleHandlers = function(callback, errback) {
        this._updateChangedRuleHandlers = [
            callback || null
          , errback || errors.unhandledPromise
        ];
    };

    _p._fileChangeHandler = function (path) {
        var match = path.indexOf(this._persistence.cpsDir)
          , sourceName
          ;
        if(match !== 0)
            return;
        // +1 to remove the leading slash
        sourceName = path.slice(this._persistence.cpsDir.length + 1);
        try {
            // FIXME: this does just: this._ruleController.reloadRule(async, ruleKey);
            // we can call it directly on ruleController and remove the updateChangedRule
            // method from this.controller
            this.controller.updateChangedRule(true, sourceName)
                .then(this._updateChangedRuleHandlers[0], this._updateChangedRuleHandlers[1]);
        }
        catch(error) {
            // KeyError will be thrown by RuleController.replaceRule if
            // sourceName is unknown, which is expected at this point,
            // because that means that sourceName is unused.
            // NOTE: the KeyError is always thrown synchronously before any io happens
            if(!(error instanceof errors.Key))
                throw error;
        }
    };

    _p._getPersistedMasters = function(async) {
        var data = this._persistence.listMOMItems(async);
        function onData(names) {
            var masterNames = [], i, l, name, pos, suffix = '.master';
            for(i=0,l=names.length;i<l;i++) {
                name = names[i];
                pos = name.lastIndexOf(suffix);
                if(pos !== -1)
                    masterNames.push(name.slice(0, pos));
            }
            return masterNames;
        }
        if(async)
            return data.then(onData);
        return onData(data);
    };

    _p._initLogging = function(logRecords) {
        // Reload any saved log entries before adding CallbackHandler for new entries
        if(logRecords) {
            logRecords.forEach(function (obj) {
                this._log.relog(logRecordFromObject(obj));
            }, this);
        }

        // Add CallbackHandler to log to add new entries to the log file
        var fh = new CallbackHandler(this._persistence.appendLog
                                         .bind(this._persistence, true));
        fh.setLevel(Level.INFO);
        fh.setFormatter(new YAMLFormatter());
        this._log.addHandler(fh);
    };

    _p._getFreshProject = function() {
        return {
            session: {
                masters: []
            }
        };
    };

    /**
     * Save the project file and the multivers.
     *
     * Saves the active session. (there's no more in the project file yet)
     */
    _p._saveProject = function(async) {
        // Safe the multivers and its univers children but not the masters
        var data = this._controller.rootNode.dumpWithoutMasters();
        this._persistence.writeMOMData(async, 'multivers', data);
        this._persistence.writeProject(async, this._project);
    };

    /**
     * Use to intialize a bare, new .mp (ufo3) project dir and
     * leave MetapolatorProject in ready to use state.
     *
     * FIXME: This is a bigger problem! For these adhoc obtain.js api
     * methods we loose a lot of the semantics of the "async" argument.
     * It can be more than a boolean and contain callbacks, maybe even
     * more in the future.
     * The elsewhere conceive obtain.sheath decorator will have to take
     * care of this! This is a big problem in a lot of the code written
     * more recently.
     */
    _p.init = function(async) {
        this._log.debug('Initializing new project at ' + this.baseDir);
        this._project = this._getFreshProject();
        this._persistedMasters = [];
        if(async)
            return this._persistence.init(true)
                .then(this._saveProject.bind(this, true))
                .then(this._initLogging.bind(this))
                ;
        // sync
        this._persistence.init(false);
        // We should play a "big bang" sound each time this is executed:
        this._controller.rootNode.add(new Univers());
        this._saveProject(false);
        this._initLogging();
    };

    /**
     * Load the project file and the multivers.
     */
    _p._loadProject = function(async) {
        var data = [
                this._persistence.readProject(!!async)
              , this._persistence.readMOMData(!!async, 'multivers')
            ]
          , onData = function (data) {
                this._project = data[0];
                this._controller.rootNode.loadTree(data[1]);
            }.bind(this)
          ;

        if(async)
            return Promise.all(data).then(onData);
        return onData(data);
    };

    /**
     * Use to load an existing .mp (ufo3) project dir and
     * leave MetapolatorProject in ready to use state.
     *
     * Does not load any masters. Maybe "openSession" is what you need
     * otherwise you can open masters with "openMaster" which also recursively
     * opens all dependency master proclaimed by the opened master(s).
     */
    _p.load = function(async) {
        // the files created in _p.init need to exist
        // however, we try to load only
        // this.baseDir+'/data/com.metapolator/project.yaml' as an indicator
        this._log.debug('Loading project');

        function getData(async) {
            //jshint validthis:true
            var data = [ this._getPersistedMasters(async)
                       , this._persistence.readLog(async)
                       ];
            if(async)
                return Promise.all(data);
            return data;
        }

        function onData(data) {
            //jshint validthis:true
            this._persistedMasters = data[0];
            this._initLogging(data[1]);
        }

        if(async)
            return this._persistence.open(true)
                       .then(this._loadProject.bind(this, true))
                       .then(getData.bind(this, true))
                       .then(onData.bind(this))
                       ;
        // fail when basedir is not ufo enough
        this._persistence.open(false);
        // fail if there's no project.yaml or multivers.yaml
        this._loadProject(false);
        onData.call(this, getData.call(this, false));
    };

    /**
     * The master will be opened by openSession.
     *
     * This is a tool for user interfaces mainly.
     */
    _p.addMasterToSession = function(masterName) {
        if(this._project.session.masters.indexOf(masterName) === -1)
            this._project.session.masters.push(masterName);
    };

    /**
     * Open all masters in the session and dependencies.
     *
     * This is a tool for user interfaces mainly.
     *
     * TODO: Make named sessions! Could be a great way to work on
     * big projects. I.E. just load the "arabic" session or just load the
     * "hangul" session.
     */
    _p.openSession = function(async) {
        if(async)
            throw new NotImplementedError('openSession currently only supports '
                                                +'synchronous execution.');
        var masters = this._project.session.masters
          , i, l
          , result = []
          , loaded = []
          ;
        for(i=0,l=masters.length;i<l;i++)
            try {
                result.push(this.openMaster(async, masters[i], true));
                loaded.push(masters[i]);
            }
            catch(error) {
                if(error instanceof IONoEntryError)
                    // Tolerate if master is not available on disk.
                    this._log.info('Session contained master #' + masters[i]
                                + ' to load but it was not found on disk.');
                else
                    // Don't tolerate erroneous masters.
                    throw error;
            }
        this._project.session.masters = loaded;
        return result;
    };

    _p.saveMaster = obtain.factory(
        {
            momData: ['master', function(master) {
                var momData;
                if(master.hasBaseNode())
                    // if this has a base master it is saved as a "derived master"
                    momData = {
                        base: master.baseNode.id
                      , data: master.dumpDataToDict()
                    };
                else
                    momData = master.dumpTree();
                return momData;
            }]
          , cpsFile: ['master', function(master){ return master.getAttachment('cpsFile'); }]
          , fileName: ['master', function(master){ return master.id + '.master'; }]
          , setPersisted: ['master', 'saveMOM', function(master) {
                // book keeping
                if(this._persistedMasters.indexOf(master.id) === -1)
                    this._persistedMasters.push(master.id);
            }]
          , saveMOM: [['_persistence', 'writeMOMData'], false, 'fileName', 'momData', callProxy]
          , saveCPS: [['ruleController', 'saveRuleIfChanged'], false, 'cpsFile', callProxy]
          , job: ['setPersisted', 'saveCPS', function(){}]
        }
      , {
            saveMOM: [['_persistence', 'writeMOMData'], true, 'fileName', 'momData', callProxy]
          , saveCPS: [['ruleController', 'saveRuleIfChanged'], false, 'cpsFile', callProxy]
        }
      , ['master']
      , function (obtain) { return obtain('job'); }
    );

    /**
     * Save the complete state:
     * All of the MOM (multivers and masters)
     * All of CPS (all changed, mutable files)
     * The Project-file/Session (yet only explicitly opened masters)
     */
    _p.save = function(async) {
        var masters = this._univers.children
          , i, l;

        this._saveProject(async);

        // safe all open masters
        for(i=0,l=masters.length;i<l;i++)
            this.saveMaster(async, masters[i]);

        // FIXME: TODO: make write protected PropertyCollections!
        // I leave this for another iteration: Library PropertyCollections
        // should not be writable by the user/via the UI. I.e. The user
        // can't change these files, because they are authored upstream.
        // So, we shouldn't ever have to save changed PropertyCollections
        // from library directories. I'll throw an error here when trying
        // to save to one of these places, however, in the end, the error
        // should not occur, because the user is not enabled to change the
        // property collections in the first place!
        // ALSO: A nice way to throw that error would be a readOnly switch
        // for the IO-API. (Maybe a readOnly Adapter?)
        // HMM, as an additional bonbon, a change coming from IO via a
        // file system event should still be possible. Also, maybe a ui-side
        // switch for library developers ...
        // But under default circumstances, the user shouldn't be able to
        // write library files.

        // safe all dirty user-space(mutable) cps-files ()
        this.ruleController.saveChangedRules(async);
    };

    _p.hasMaster = function(masterName) {
        // It is important that the _persistedMasters list is
        // kept up to date. Not persisted and persisted masters are true
        // if they are in this._univers at the moment.
        return !!(this._univers.getById(masterName)
                    || this._persistedMasters.indexOf(masterName) !== -1);
    };

    // returns a list of master names
    Object.defineProperty(_p, 'masters', {
        get: function() {
            var names = Object.create(null), i, l
              , masters = this._univers.children
              ;
            for(i=0,l=masters.length;i<l;i++)
                names[masters[i].id] = true;

            masters = this._persistedMasters;
            for(i=0,l=masters.length;i<l;i++)
                names[masters[i]] = true;
            return Object.keys(names);
        }
    });

    _p._initDerivedMaster = function(async, masterName, data) {
        var baseMaster = this._openMaster(async, data.base);
        function onData(baseMaster) {
                //id (1) classes (2) + setBaseNode (0x10)
            var momMaster = baseMaster.clone(1 | 2 | 0x10);
            momMaster.loadDataFromDict(data.data);
            momMaster.id = masterName;
            return momMaster;
        }
        if(async)
            return baseMaster.then(onData);
        return onData(baseMaster);
    };

    _p._initBaseMaster = function(masterName, data) {
        var momMaster = new Master();

        momMaster.loadTree(data);
        if(momMaster.id !== masterName) {
            // This could also be raised as an error, but I think this
            // maybe happens when someone was hand editing the source
            // files. So, just setting the actually used masterName
            // as id is a nice move to handle this gracefully.
            // Also, one could argue that the id should not be
            // persisted in the first place, in this case, because
            // the filename is the single source of the id and having
            // it in the file is redundant. However, I think a master
            // may be used in other contexts as in MOM-Project, and there
            // maybe it is useful. Also, it's very convenient to serialize
            // all nodes in a tree the same way, making an exception because
            // it's redundant in one file format is a bit overdoing it.
            // Important is, in here, the filename wins!
            // Report if this causes trouble!
            this._log.info('Auto corrected id. Loaded master as #' + masterName
                    + ' but it came with the id #' + momMaster.id + '.');
            momMaster.id = masterName;
        }
        return momMaster;
    };

    /**
     * Load a momMaster from disk and return it.
     * Does not load dependency masters, just the simplest thing possible.
     */
    _p._openMaster = obtain.factory(
        {
            momFileName: ['masterName', function(masterName){
                                        return masterName + '.master';}]
          , data: [['_persistence','readMOMData'], false, 'momFileName', callProxy]
          , baseMaster: ['masterName', 'data', _p._initBaseMaster]
          , derivedMaster: [false, 'masterName', 'data', _p._initDerivedMaster]
        }
      , {
            data: [['_persistence','readMOMData'], true, 'masterName', callProxy]
          , derivedMaster: [true, 'masterName', 'data', _p._initDerivedMaster]
        }
      , ['masterName']
      , function(obtain, masterName) {
            var momMaster = this._univers.getById(masterName);
            if(momMaster)
                return momMaster;
            var data = obtain('data');
            momMaster= obtain(data.base ? 'derivedMaster' : 'baseMaster');
            this._univers.add(momMaster);
            return momMaster;
        }
    );

    /**
     * Open master and return it.
     * By default or when "openRequiredMasters" is trueish try to open all
     * dependency masters stated in the requiredMasters attachment of master.
     * Then the master should be ready for reading from its CPS after this,
     * all dependencies loaded.
     *
     * If a required masters in the dependency chain can't be opened, a
     * warning will be printed.
     *
     * To get a list of dependencies that failed to open
     * you can add a third argument 'failedMastersReturn' which should be
     * an Array and which will be filled with names of failed masters,
     * using its `push` method. Keep a reference of 'failedMastersReturn'
     * to check it after openMaster has finished.
     *
     * The reason for not throwing an error here, when a dependency can't
     * be loaded is that it may be OK not to have the dependency, depending
     * on how master is going to be used. The 'requiredMasters' attachment
     * is like a very rough recommendation, not as a hard dependency. Hard
     * dependencies are made within CPS rules, but it's also hard to track
     * them there (at the moment).
     */
    _p.openMaster = obtain.factory(
        {
            originMaster: [false, 'masterName', _p._openMaster]
          , requiredMasters: ['originMaster', 'failedMastersReturn',
            function(originMaster, failedMastersReturn) {
                var opened = new Set()
                  , requiredMasters = originMaster.getAttachment('requiredMasters') || []
                  , masterName, master
                  ;
                opened.add(originMaster.id);
                while((masterName = requiredMasters.pop())) {
                    if(opened.has(masterName))
                        continue;
                    opened.add(masterName);
                    try {
                        // open master may just get masterName from univers
                        // if it is already there
                        master = this._openMaster(false, masterName);
                    }
                    catch(error) {
                        if(failedMastersReturn) failedMastersReturn.push(masterName);
                        if(error instanceof IONoEntryError) {
                            // log, but silence the error
                            // The dependency does not originate from having
                            // a master name in the requiredMasters attachment,
                            // but from the references used in the CPS of the
                            // master. Thus, it may be totally fine and the
                            // dependency stated in requiredMasters was wrong,
                            // outdated or just not applying for what we do with
                            // the master. We don't know, but if there is a
                            // problem from this, the hint is in the logs.
                            this._log.warning('Dependency master #'
                                    + masterName + '" of #' + originMaster.id
                                    + ' does not exist on disk. ' + error);
                        }
                        else
                            // Don't accept erroneous masters.
                            throw error;
                    }
                    Array.prototype.push.apply(requiredMasters, master.getAttachment('requiredMasters') || []);
                }
            }]
        }
      , {
            originMaster: [true, 'masterName', _p._openMaster]
          , requiredMasters: ['originMaster', 'failedMastersReturn', '_callback', '_errback',
            function(originMaster, failedMastersReturn, callback, errback) {
                //jshint unused:vars
                var jobs = 0
                  , opened = new Set()
                  , onError = (function (masterName, error) {
                        // jshint validthis:true
                        jobs -= 1;
                        if(failedMastersReturn) failedMastersReturn.push(masterName);

                        if(error instanceof IONoEntryError)
                            // log, but silence the error.
                            // An explanation is in the catch of the synchronous
                            // execution path.
                            this._log.warning('Dependency master #'
                                    + masterName + '" of #' + originMaster.id
                                    + ' does not exist on disk. ' + error);
                        else
                            // Don't accept erroneous masters.
                            throw error;
                        if(jobs === 0)
                            callback(originMaster);
                    }).bind(this)
                  , onOpen = (function (master) {
                        // jshint validthis:true
                        var i, l, requiredMasters, masterName;
                        jobs -= 1;
                        requiredMasters = master.getAttachment('requiredMasters') || [];
                        for(i=0,l=requiredMasters.length;i<l;i++) {
                            masterName = requiredMasters[i];
                            if(opened.has(masterName))
                                continue;
                            opened.add(masterName);
                            jobs += 1;
                            // open master may just get masterName from univers
                            // if it is already there
                            this._openMaster(true, masterName)
                                .then(onOpen, onError.bind(null, masterName));
                        }
                        if(jobs === 0)
                            callback(originMaster);
                    }).bind(this)
                  ;
                opened.add(originMaster.id);
                // prevent callback from being called immediately if there are
                // no further dependencies.
                setTimeout(onOpen, 0, originMaster);
            }]
        }
      , ['masterName', 'openRequiredMasters', 'failedMastersReturn']
      , function(obtain, masterName, openRequiredMasters) {
            var master = obtain('originMaster');
            if(openRequiredMasters !== undefined || openRequiredMasters)
                obtain('requiredMasters');
            return master;
        }
    );

    _p.getMOMMaster = function() {
        throw new DeprecatedError('"getMOMMaster" is deprecated, use "open" instead.');
    };

    _p._cloneMaster = obtain.factory(
        {
            momMaster: ['masterName', 'sourceMOM', 'cloneArgs',
            function(masterName, sourceMOM, cloneArgs) {
                var momMaster = sourceMOM.clone.apply(sourceMOM, cloneArgs)
                  , id = this._getUniqueMasterName(masterName)
                  , cpsFile = id + '.master.cps'
                  ;
                momMaster.attachData('cpsFile', cpsFile);
                momMaster.id = id;
                return momMaster;
            }]
          , cpsFile: ['momMaster', function(momMaster) {
                            return momMaster.getAttachment('cpsFile');}]
          , sourceMOM: [false, 'sourceMasterName', _p._openMaster]
          , saveCPS: [['_persistence', 'writeCPSFile'], false, 'cpsFile', 'cpsString', callProxy]
        }
      , {
            sourceMOM: [true, 'sourceMasterName', _p._openMaster]
          , saveCPS: [['_persistence', 'writeCPSFile'], true, 'cpsFile', 'cpsString', callProxy]
        }
      , ['sourceMasterName', 'masterName', 'cpsString', 'cloneArgs']
      , function (obtain) {
            obtain('saveCPS');
            var momMaster = obtain('momMaster');
            this._univers.add(momMaster);
            return momMaster;
        }
    );

   /**
    * Create a new derived master.
    *
    *
    * Used for "master-" and "instance-" masters etc.
    * FIXME: these notations of master types should maybe not be done by
    * Metapolator. Not necessarily in here either, though.
    *
    * Setting "requiredMasters" should be done by the caller.
    * Also, if used in CPS, set the baseMaster to "requiredMasters" as well.
    * Otherwise, it is not loaded deeply, including it's own "requiredMasters",
    * when opening this master.
    *
    * baseMasterName: We need an essence donor, which we clone including
    * ids and classes excluding attachments and properties. The baseMaster
    * will be the "baseNode" of the new master and all descendants of
    * baseMaster will be the baseNode of their respective node.
    *
    * derivedMasterName: the name of the new masters, may get altered to be unique!
    *
    * cpsString: contents of the new masters cps file
    */
    _p.createDerivedMaster = function (async, baseMasterName, derivedMasterName, cpsString) {
        // id(1) + classes (2) + setBaseNode (0x10)
        // Attachments are not copied because we can read them form the
        // baseNodes chain, where it matters.
        // Properties are not copied because that's the very reason
        // why we want to have a new master like this: to get rid of
        // the ultra-specific element.properties
        var cloneArgs = [1 | 2 | 0x10];
        return this._cloneMaster(async, baseMasterName, derivedMasterName
                                                 , cpsString, cloneArgs);
    };

    /**
     * Make a new master by cloning it.
     *
     * The result is similar to what this.import does.
     *
     * The cloned CPS file is saved to io, because RuleController needs it
     * like that (FIXME: RuleController should just take
     * a Name + PropertyCollection and mark that as "dirty", so we can
     * save it explicitly, just like the master created her must be saved
     * explicitly.).
     *
     */
    _p.cloneMaster = obtain.factory(
        {
            cloneArgs: [function() {
                // this clone contains:
                // ids (1), classes (2), properties (4), attachments (8)
                // cloneBaseNode (if any) (0x20)
                return [1 | 2 | 4 | 8 | 0x20];
            }]
          , sourceMOM: [false, 'sourceMasterName', _p._openMaster]
          , sourceCPSFile: ['sourceMOM', function(sourceMOM) {
                return sourceMOM.getAttachment('cpsFile');
            }]
          , cpsRule: [['ruleController', 'getRule'], false ,'sourceCPSFile', callProxy]
          , cpsString: ['cpsRule', function(cpsRule) {
                // serialize the loaded rule to string
                return cpsRule + '';
            }]
          , clone: [false, 'sourceMasterName', 'masterName', 'cpsString'
                                            , 'cloneArgs', _p._cloneMaster]
        }
      , {
            sourceMOM: [true, 'sourceMasterName', _p._openMaster]
          , cpsRule: [['ruleController', 'getRule'], true ,'sourceCPSFile', callProxy]
          , clone: [true, 'sourceMasterName', 'masterName', 'cpsString'
                                            , 'cloneArgs', _p._cloneMaster]
        }
      , ['sourceMasterName', 'masterName']
      , function(obtain){ return obtain('clone'); }
    );

    /**
     * Check if this master is the `baseMaster` of another master
     * or of the master.id is in the `requiredMasters` attachment
     * array of another master.
     *
     * Dependencies that arise purely from CPS can't be tracked easily,
     * hence we use the "requiredMasters" attachment, which the application
     * must manage. This may be solved in the future though.
     */
    _p._masterHasDependants = function(master) {
        var i, l, other, requiredMasters;
        for(i=0,l=this._univers.childrenLength;i<l;i++) {
            other = this._univers.getChild(i);
            if(other.hasBaseNode() && other.baseNode === master)
                return true;
            requiredMasters = other.getAttachment('requiredMasters') || [];
            if(requiredMasters.indexOf(master.id) !== -1)
                return true;
        }
        return false;
    };

    /**
     * Delete a master entry for this masterName.
     *
     *
     * - delete MOMData: masterName + '.master.yaml'
     * - delete CPSFile: masterName + '.master.cps';
     * - remove master from this._univers
     * - remove masterName from this._persistedMasters
     * - remove masterName from this._project.session.masters
     * - purge the ParameterCollection of CPSFile from RuleController if present.
     *
     * This does not save the session/project file.
     *
     * Use deleteBaseChain is truish the base master and the base masters
     * base master etc. are also tried to delete.
     *
     * If force is not truish no master that has dependants will be deleted,
     * see the implementation of _masterHasDependants.
     *
     * If force is truish the master and if deleteBaseChain is true, all
     * masters in the baseMaster chains are deleted regardless if they
     * leave dependant masters behind.
     *
     * CAUTION with using `force = true` can create quite a mess.
     *
     * That's not the job of Project though.
     */
    _p.deleteMaster = function(async, masterName, deleteBaseChain, force) {
            // If there is a CPS file with this name it is owned by this
            // master and thus can go. The master may be using another CPS
            // file, but we wouldn't delete it.
        var ownCPSFile = masterName + '.master.cps'
          , ownMOMDataName = masterName + '.master'
          , momMaster = this._univers.getById(masterName)
          , deletions
          , onDelete
          , promise
          ;
        function filterMasterName(name){ return name !== masterName; }
        function fail() {
            if(!async) return false;
            return Promise.resolve(false);
        }

        if(momMaster) {
            if(!force && this._masterHasDependants(momMaster))
                return fail();
            this._univers.remove(momMaster);
            if(deleteBaseChain && momMaster.hasBaseNode())
                // Don't force deleting the
                promise = this.deleteMaster(!!async, momMaster.baseNode
                                           , deleteBaseChain, force);
        }

        onDelete = function (ownCPSFile) {
            //jshint validthis:true
            this.ruleController.purgeRule(ownCPSFile);
            return true;
        }.bind(this, ownCPSFile);

        this._persistedMasters = this._persistedMasters
                                     .filter(filterMasterName);
        this._project.session.masters = this._project.session.masters
                                     .filter(filterMasterName);

        deletions = [
            this._persistence.deleteMOMData(async, ownMOMDataName, true)
          , this._persistence.deleteCPSFile(async, ownCPSFile, true)
          , promise // Promise.all can handle it if this is not a promise.
        ];

        if(async)
            return Promise.all(deletions).then( onDelete );
        return onDelete();
    };

    _p._getUniqueMasterName = function(masterName) {
        var result
          , separator = '_'
          , num , base
          , pos = masterName.lastIndexOf(separator)
          ;
        // shortcut
        if(!this.hasMaster(masterName))
            return masterName;

        if(pos !== -1) {
            num = masterName.slice(pos + 1);
            if(/^[0-9]+$/.test(num)) {
                num = parseInt(num, 10);
                base = masterName.slice(0, pos);
            }
        }
        if(base === undefined) {
            num = 0;
            base = masterName;
        }
        do {
           result = [base, num++].join(separator);
        } while(this.hasMaster(result));
        return result;
    };

    _p._getGlyphGroups = obtain.factory(
        {
            groups: [['_persistence', 'readGroups'], false, callProxy]
        }
      , {
            groups: [['_persistence', 'readGroups'], true, callProxy]
        }
      , []
      , function(obtain) {
            var groups = this._cache.glyphGroups;
            if(!groups)
                groups = this._cache.glyphGroups = obtain('groups');
            return groups;
        }
    );

    _p._getFontInfo = obtain.factory(
        {
            fontInfo: [['_persistence', 'readFontInfo'], false, callProxy]
        }
      , {
            fontInfo: [['_persistence', 'readFontInfo'], true, callProxy]
        }
      , []
      , function(obtain) {
            var fontInfo = this._cache.fontInfo;
            if(!fontInfo)
                fontInfo = this._cache.fontInfo = obtain('fontInfo');
            return fontInfo;
        }
    );

    // IMPORT/EXPORT //  Can there be a better place to put these?

    _p.ufoImporterFactory = function (async, sourceUFODir, io, log) {
        if(async)
            throw new NotImplementedError('ufoImporterFactory currently only '
                                         + 'supports synchronous execution.');

        var ufoReader
          , logger = log || this._log
          , glyphGroups = this._getGlyphGroups(async)
          , options = {classes: glyphGroups}
          ;
        try {
            ufoReader = UFOReader.factory(async, io || this._plainIO, sourceUFODir);
        }
        catch(error) {
            logger.warning(error);
            return false;
        }
        glyphGroups = this._getGlyphGroups(async)
        options = {classes: glyphGroups}
        return UFOImporter.factory(async, logger, ufoReader, options);
    };

    _p.initializeImportedMaster = function(momMaster, masterName) {
        // finalizing/initializing
        var name = this._getUniqueMasterName(masterName);
        momMaster.id = name;
        momMaster.attachData('cpsFile', this.baseMasterCPSFile);// MOM/primary.cps
        this._univers.add(momMaster);
        return momMaster;
    };

    /**
     * It's MOM convention that masterName should be prefixed with
     * "base-" here.
     *
     * This does not persist the imported master in any way.
     * Need a project.save or so.
     *
     * We should make a way for re-imports, which we don't do at
     * the moment. But, it should be possible! I suggest to replace the
     * existing master with the new master completely.
     * ALSO, the masers that inherit/depend on this master will break then!
     *
     */
    _p.import = function(async, masterName, sourceUFODir, glyphs, io) {
        if(async)
            throw new NotImplementedError('import currently only supports '
                                                +'synchronous execution.');
        var importer = this.ufoImporterFactory(async, sourceUFODir, io)
          , momMaster
          ;
        momMaster = importer.doImport(async, glyphs);
        return this.initializeImportedMaster(momMaster, masterName);
    };

    /**
     * Import UFO-data into the project UFO-3 file.
     *
     * currently: fontInfo.plist, groups.plist
     *
     * Prunes the caches of the UFO data.
     *
     * Proxies IOProjectPersistence.importUFOData, see that for method
     * argument signature.
     *
     * This data has currently only little defined use, like providing
     * default values at different occasions, groups are used to define
     * css classes for glyphs. But, it will become much more important
     * when the project grows.
     * It's likely that we'll have to improve all of this. Consider
     * this as a stub and vastly underdefined. If you need to get more
     * out of fontinfo and friends you just found yourself a really big job!
     */
     // async, io, sourceUFODir, override, fontinfo/*boolean*/, groups/*boolean*/
    _p.importUFOData = function(/* the args of IOProjectPersistence.importUFOData */) {
        var args = [], i,l;
        this._cache.glyphGroups = null;
        this._cache.fontInfo = null;
        for(i=0,l=arguments.length;i<l;i++) args.push(arguments[i]);
        return this._persistence.importUFOData.apply(this._persistence, args);
    };


    /**
     * Returns a Promise
     */
    _p._unpackZippedUFOMasters = function(mem_io, logger) {
        // We'll list all entries from the top-level dir
        var entries = mem_io.readDir(false, "/")
          , i, l, suffix, name, another_blob
          , promise, promises = []
          , log = logger || this._log
          , logError = function(file, error) {
                log.warning(error, 'File: "'+ file +'"');
            }

          ;
        // And we'll look for zipped ufo files for decompression:
        for (i=0, l=entries.length; i<l; i++) {
            suffix = ".ufo.zip";
            name = entries[i];
            //if the filename ends with the .ufo.zip suffix:
            if (name.slice(-suffix.length) === suffix) {
                //Here we decompress the data of the ufo.zip file we found:
                another_blob = mem_io.readFile(false, name);
                mem_io.unlink(false, name);
                // FIXME: what if the name is already there?
                // I doubt zipUtil handles that well!
                // Don't fail, just log it away and go on
                promise = zipUtil.unpack(true, another_blob, mem_io, '/')
                                 .then(null, logError.bind(null, name));
                promises.push(promise);
            }
        }
        if(promises.length)
            return Promise.all(promises);
        return Promise.resolve([]);
    };

    /**
     * List all io top level UFO directory entries and a provisional
     * master name created from the dir name and masterNamePrefix.
     *
     * The master name is provisional because it must be made unique
     * before it can be used.
     *
     * For an (from UFO) imported (Base-)master the convention for
     *  masterNamePrefix is "base-"
     */
    _p._getUFOToNameMap = function(async, io, masterNamePrefix) {
        var entries = io.readDir(async, "/");
        function onData(entries) {
            var suffix = '.ufo/'
              , i, l, name, masterName, sourceUFODir
              , result = []
              ;
            for (i=0, l=entries.length; i<l; i++) {
                name = entries[i];
                // Identify entries as an UFO dir
                if (name.slice(-suffix.length) !== suffix)
                    continue;
                sourceUFODir = name.slice(0, -1);
                // Atem-CPS/CPS/elements/SimpleSelector does now some
                // basic escaping and that works so far. If it is not enough
                // work should be done starting from there.
                masterName = (masterNamePrefix + name).split(suffix)[0];
                result.push([sourceUFODir, masterName]);
            }
            return result;
        }
        if(async)
            return entries.then(onData);
        return onData(entries);
    };

    _p._importUFOMastersFromIO = function(async, mem_io, masterNamePrefix) {
        if(async)
            throw new NotImplementedError('Async path is not implemented');

        var entries = this._getUFOToNameMap(async, mem_io, masterNamePrefix)
          , i, l, sourceUFODir, masterName, glyphs, master
          , importedMasters = []
          ;

        for (i=0, l=entries.length; i<l; i++) {
            sourceUFODir = entries[i][0];
            masterName = entries[i][1];
            glyphs = undefined;
            // TODO: On a memory io it's not bad at all to do sync io.
            // HOWEVER, io on this._io is also invoked by this.import
            // and that may be a blocking io backend.
            master = this.import(false, masterName, sourceUFODir, glyphs, mem_io);
            importedMasters.push(master);
        }

        return importedMasters;
    };

    /**
     * The blob parameter must be data representing a file containing one or more
     * UFOs encoded with the following packaging scheme:
     *
     * Returns a Promise that resolves to a list of imported MOM-Masters.
     *
     * upload.zip
     *     ├── master1.ufo.zip
     *     │    └── master1.ufo
     *     ├── master2.ufo.zip
     *     │    └── master2.ufo
     *     └── master3.ufo.zip
     *          └── master3.ufo
     */
    _p.importZippedUFOMasters = function(async, blob, masterNamePrefix) {
        if(!async)
            throw new NotImplementedError('Sync path is not implemented');
        assert(async === true, 'This is not (yet) a complete obtain API');

        // First step is to instantiate an InMemory I/O module:
        var mem_io = new InMemory();

        // Then we unpack there the original blob:
        return zipUtil.unpack(true, blob, mem_io, '')
                      .then(this._unpackZippedUFOMasters.bind(this, mem_io))
                      .then(this._importUFOMastersFromIO.bind(this, false, mem_io, masterNamePrefix))
                      ;
    };

    _p.unpackImportBlob = function (blob, masterNamePrefix, log) {
        var memIo = new InMemory();
        return zipUtil.unpack(true, blob, memIo, '')
                      .then(this._unpackZippedUFOMasters.bind(this, memIo, log))
                      .then(this._getUFOToNameMap.bind(this, true, memIo, masterNamePrefix))
                      .then(function(ufo2name){return [memIo, ufo2name];});
    };

    // this is public, because the ui uses this to display a progress bar
    _p.getUFOExportGenerator = function (async, masterName, dirName
                                            , formatVersion, precision) {
        var io = new InMemory()
          , ufoExporter = this._getUFOExporter(false, io, masterName
                                    , dirName, formatVersion, precision)
          ;
        function onExporter(ufoExporter) {
            return [ufoExporter.exportGenerator(), io];
        }
        if(async)
            return ufoExporter.then(onExporter);
        return onExporter(ufoExporter);
    };

    _p._getUFOExporter = obtain.factory(
        {
            master:[false, 'masterName', _p.openMaster]
          , ufoWriter: [false, 'io', 'targetDirName',  'formatVersion', UFOWriter.factory]
          , ufoExporter: ['ufoWriter', 'master', 'precision',
            function(ufoWriter, master, precision) {
                return new UFOExporter(this._log, ufoWriter, master, undefined, true, precision);
            }]
        }
      , {
            master:[true, 'masterName', _p.openMaster]
          , ufoWriter: [true, 'io', 'targetDirName', UFOWriter.factory]
        }
      , ['io', 'masterName', 'targetDirName', 'formatVersion', 'precision']
      , function(obtain){return obtain('ufoExporter');}
    );

    _p._getOTFExporter = function(async, masterName, io, targetName) {
        var data = [
                  this.openMaster(async, masterName)
                , this._getFontInfo(async)
            ]
          , onData = function(data) {
                var master = data[0]
                  , fontinfo = master.getAttachment('fontinfo') || data[1]
                  ;
                return new OTFExporter(this._log, master, fontinfo, io, targetName);
            }.bind(this)
          ;

        if(async)
            return Promise.all(data).then(onData);
        return onData(data);
    };

    // this is public, because the ui uses this to display a progress bar
    _p.getOTFExportGenerator = function (async, masterName, targetName) {
        var io = new InMemory()
          , otfExporter = this._getOTFExporter(async, masterName, io, targetName)
          ;
        function onData(otfExporter) {
            return [otfExporter.exportGenerator(), io];
        }
        if(async)
            return otfExporter.then(onData);
        return onData(otfExporter);
    };

    _p.exportInstance = function(masterName, targetFileName, precision) {
        if (targetFileName.slice(-8) === '.ufo.zip') {
            var zipped = this.getZippedInstance(masterName, targetFileName.slice(0,-4), precision, 'nodebuffer');
            this._plainIO.writeFile(false, targetFileName, zipped);
        } else if (targetFileName.slice(-4) === '.otf'){
            var otf = this.getOTFInstance(masterName);
            this._plainIO.writeFile(false, targetFileName, otf);
        } else {
            this.exportUFOInstance(masterName, targetFileName, precision);
        }
    };

    _p.exportUFOInstance = function(async, masterName, targetFileName
                                            , formatVersion, precision) {
        var ufoExporter = this._getUFOExporter(false, this._plainIO, masterName
                    , targetFileName, formatVersion, formatVersion, precision);
        function onExporter(ufoExporter) {
            ufoExporter.doExport();
        }
        if(async)
            return ufoExporter.then(onExporter);
        return onExporter(ufoExporter);
    };


    /**
     * WARNING: Only the async path works at the moment!
     */
    _p.getZippedInstance = obtain.factory(
        {
            io: [function () {return new InMemory(); }]
          , ufoExporter: [false, 'io', 'masterName', 'targetDirName'
                    , 'formatVersion', 'precision', _p._getUFOExporter]
          , exportedIo: ['ufoExporter', 'io', function(ufoExporter, io) {
                ufoExporter.doExport();
                return io;
            }]
            // WARNING: this fails currently because jszip removed its sync API
          , zip: [false, 'exportedIo', 'targetDirName', 'dataType', zipUtil.pack]
        }
      , {
            ufoExporter: [true, 'io', 'masterName', 'targetDirName'
                        , 'formatVersion', 'precision', _p._getUFOExporter]
          , zip: [true, 'exportedIo', 'targetDirName', 'dataType', zipUtil.pack]

        }
      , ['masterName', 'targetDirName', 'formatVersion', 'precision', 'dataType']
      , function (obtain) { return obtain('zip'); }
    );

    _p.getZipFromIo = zipUtil.pack;

    _p.getOTFInstance = function(async, masterName) {
        var otfExporter = this._getOTFExporter(async, masterName);
        function onData(otfExporter) {
            return otfExporter.do_export();
        }
        if(async)
            return otfExporter.then(onData);
        return onData(otfExporter);
    };

    return Project;
});

/**
 * This is a REST implementation of io/_base.
 */
define('Atem-IO/io/staticBrowserREST',[
    'Atem-IO/errors'
  , 'obtain/obtain'
  , './_base'
], function(
    errors
  , obtain
  , Parent
) {
    "use strict";
    /*global XMLHttpRequest: true*/
    /*global ArrayBuffer: true*/
    /*global Uint8Array: true*/

    var IOError = errors.IO
      , IONoEntry = errors.IONoEntry
      , IOEntryExists = errors.IOEntryExists
      ;

    function Io() {
        Parent.call(this);
    }

    var _p = Io.prototype = Object.create(Parent.prototype);


    // Utility functions to build the file methods

    var _errorMessageFromRequest = function(request) {
        return ['Status', request.status, request.statusText].join(' ');
    };

    // Don't use this method for non-error statuses!
    var _errorFromRequest = function(request) {
        var message = _errorMessageFromRequest(request);
        var err;
        if(request.status === 404)
            err = new IONoEntry(message);
        else
            err = new IOError(message);
        err.request = request;
        return err;
    };

    var _path2uri = function(path) {
        return path.split('/').map(encodeURIComponent).join('/');
    };

    // We signal a directory to the REST endpoint by adding a / suffix
    var _dirify = function (f) {
        function decorate (path){return path + (path.slice(-1) !== '/' ? '/' : '');}
        return function (async, path /*, data? ... */) {
            var args = Array.prototype.slice.call(arguments);
            // decorate path
            args[1] = decorate(args[1]);
            return f.apply(this, args);
        };
    };

    // Perform a synchronous or asynchronous request
    // FIXME: once ES6 arrives, use separate resolve/reject handlers
    // instead of resultFilter
    var _obtainRequestFactory = function (method, responseType, okStatus
                                    , resultFilter, resultFilterArgs) {
        var dataArg = (method in {'PUT': true, 'POST': true}) ? 'data': undefined
          , api = ['path']
          ;
        resultFilter = resultFilter || function (err, request) { return [err, !!err]; };
        okStatus = okStatus || {200: true};
        if(dataArg)
            api.push(dataArg);
        resultFilterArgs = resultFilterArgs || [];
        Array.prototype.push.apply(api, resultFilterArgs);

        // return the send request (with response available)
        // do it async if callback is present, otherwise return directly
        function doRequest(path, data, callback) {
            var request = new XMLHttpRequest();
            request.open(method, _path2uri(path), !!callback);
            if(callback) {
                // Firefox: Use of XMLHttpRequest's responseType attribute
                // is no longer supported in the synchronous mode in window
                // context
                if(responseType)
                    request.responseType = responseType;
                request.onreadystatechange = function (aEvt) {
                    if (request.readyState != 4 /*DONE*/)
                        return;
                    callback(null, request);
                };
            }
            else {
                // because setting response type is not possible in sync mode
                // we have to add a workaround by hand:
                if(responseType === 'arraybuffer')
                    // so there is no conversion by the browser
                    request.overrideMimeType('text/plain; charset=x-user-defined');
            }
            request.send(data);
            if(!callback)
                return request;
        }

        function job(obtain/*, [api ...] */) {
            var request = obtain('request')
                , error
                , result
                , callFilterArgs
                ;
            if(!(request.status in okStatus))
                error = _errorFromRequest(request);
            callFilterArgs = [error, request];
            Array.prototype.push.apply(callFilterArgs,
                // extract the resultFilterArgs from this method's arguments
                Array.prototype.slice.call(arguments, -resultFilterArgs.length));
            result = resultFilter.apply(null, callFilterArgs);
            if(result[0])
                throw result[0];
            return result[1];
        }

        return obtain.factory(
            {request: ['path', dataArg, doRequest]}
          , {request: ['path', dataArg, '_callback', doRequest]}
          , api
          , job
        );
    };

    // The file methods
    _p.readFile = _obtainRequestFactory('GET', undefined, undefined, function(error, request) {
        var result = !error ? request.responseText : undefined;
        return [error, result];
    });

    _p.writeFile = _obtainRequestFactory('PUT', undefined, {200: true, 204: true});

    // We don't read the LOCATION headers of the response, as the expected
    // behavior of the server is to create or to append to the effective
    // request URI.
    _p.appendFile = _obtainRequestFactory('POST', undefined, undefined);

    _p.unlink = _obtainRequestFactory('DELETE', undefined, {200: true, 204: true});

    // takes as a seccond argument "bytes" which is the amount of bytes to read!
    _p.readBytes = _obtainRequestFactory('GET', 'arraybuffer', undefined, function (error, request, bytes) {
        var result, chunk, rawChunk;
        if(error){}// pass
        // synchronous requests can't set request.responseType = 'arraybuffer'
        else if(request.response instanceof ArrayBuffer)
            chunk = new Uint8Array(request.response, 0, bytes);
        else {
            rawChunk = request.response.slice(0, bytes),
            chunk = new Uint8Array(bytes);
            // throw away high-order bytes (F7)
            for(var i=0; i<rawChunk.length; i++)
                chunk[i] = rawChunk.charCodeAt(i);
        }
        if(!error)
            result = String.fromCharCode.apply(null, chunk);
        return [error, result];
    }, ['bytes']);

    _p.fileExists = _obtainRequestFactory('HEAD', undefined, undefined, function (error, request) {
        return [(error instanceof IONoEntry) ? null : error, !(error instanceof IONoEntry)];
    });
    _p.dirExists = _dirify(_p.fileExists);
    _p.pathExists = _p.fileExists; // DEPRECATED: use dirExists or fileExists

    _p.getMtime = _obtainRequestFactory('HEAD', undefined, undefined, function (error, request) {
        var result = !error ? new Date(request.getResponseHeader('Last-Modified')) : undefined;
        return [error, result];
    });

    _p.readDir = _dirify(_obtainRequestFactory('GET', undefined, undefined, function (error, request) {
        var result = !error ? request.responseText.split('\n').filter(function(line){return !!line;}) : undefined;
        return [error, result];
    }));

    _p.mkDir = _dirify(_obtainRequestFactory('PUT', undefined, {200: true, 201: true, 204: true}, function (error, result) {
        if (result.status == 405)
            error = new IOEntryExists(_errorMessageFromRequest(result));
        return [error, !!error];
    }));

    _p.ensureDir = _dirify(_obtainRequestFactory('PUT', undefined, {200: true, 201: true, 204: true, 405: true}));

    _p.rmDir = _dirify(_p.unlink);

    return new Io(); // Single instance of static type
});

define('Atem-CPS-Toolkit/dataTransformationCaches/_DataTransformationCache',[
    'Atem-Errors/errors'
  , 'Atem-CPS/emitterMixin'
], function(
    errors
  , emitterMixin
) {
    "use strict";

    var NotImplementedError = errors.NotImplemented
      , KeyError = errors.Key
      , emitterMixinSetup = {
            stateProperty: '_channel'
          , onAPI: '_on'
          , offAPI: '_off'
          , triggerAPI: '_trigger'
        }
      ;

    /**
     * ReturnValue
     *
     * This contains the value and the API to remove the reference
     * to value again
     *
     * var item = myMOMTransformationCache.get(momNode [, callback, subscriberData])
     *
     * // use, e.g.
     * someElement.appendChild(item.value);
     *
     * // when not used anymore:
     * someElement.removeChild(item.value);
     * item.destroy();
     *
     */
    var ReturnValue = (function() {
        function ReturnValue(value, destroy) {
            Object.defineProperties(this, {
                value: {
                    value: value
                  , enumerable: true
                }
              , destroy: {
                    value: destroy
                  , enumerable: true
                }
            });
        }
        return ReturnValue;
    })();

    /**
     * This is a base class to implement data transformations from the MOM
     * to other formats e.g. the pen protocol.
     *
     * Sometimes Subclasses of this will depend on other subclasses of this.
     *
     * This also implements a caching mechanism between the MOM and its
     * transformed data. The basic assumption is that it is slower to read
     * from the MOM and it's StyleDicts repeatedly the same data than
     * to cache the result once and replay it in a faster way.
     * So, when we need the outline of a glyph multiple times, to render
     * several layers of an editing window, we create it once from the
     * MOM and then use it multiple times from here.
     *
     * You would not `subscribeToMOM` as an implementor of a subclass who
     * will take care of that yourself.
     */
    function _DataTransformationCache(subscribeToMOM /* default true */) {
        /*jshint validthis:true*/
        this._items = new Map();
        this.__update = this._update.bind(this);

        this._subscribeToMOM = subscribeToMOM === undefined ? true : !!subscribeToMOM;

        // A small number in ms, to allow pending changes to come in.
        // However, we don't want to wait `long`, because this will be
        // perceived as pure waiting time and new events will reset the
        // timer.
        // Change this value via subclasses.
        this._schedulingTimeout = 0;
        emitterMixin.init(this, emitterMixinSetup);
    }

    var _p = _DataTransformationCache.prototype;
    _p.constructor = _DataTransformationCache;
    _DataTransformationCache.ReturnValue  = ReturnValue;

    emitterMixin(_p, emitterMixinSetup);

    /**
     * Return an object with one public method `update` which is called
     * when the momNode triggers its "CPS-change" event.
     *
     * If the update returns a value that is not `undefined` the change
     * handlers of the users are called (if they gave any) with the return
     * value as eventData.
     * see _p.get
     */
    _p._itemFactory = function (momNode) {
        //jshint unused:vars
        throw new NotImplementedError('_itemFactory needs to implemented by a subclass!');
    };

    /**
     * Clean up all the state that _itemFactory or the operation of the item created.
     * The item will be deleted and not be called again;
     */
    _p._destroyItem = function (item) {
        //jshint unused:vars
        throw new NotImplementedError('_destroyItem needs to implemented by a subclass!');
    };

    /**
     * Return an object upon which a user of this service will base it's operation;
     * see _p.get
     */
    _p._getUserItem = function(item) {
        //jshint unused:vars
        throw new NotImplementedError('_getUserItem needs to implemented by a subclass!');
    };

    _p._makeItem = function(momNode) {
        var data = {
                timeoutId: null
              , referenceCount: 0
              , mom: momNode
              , item: this._itemFactory(momNode)
              , subscriptionId: null
              , channel: momNode.nodeID
              , userSubscriptions: []
            };

        if(this._subscribeToMOM)
            data.subscriptionId = data.mom.on('CPS-change', [this, '_onItemChangeHandler'], data);
        return data;
    };

    /**
     * schedule an update
     */
    _p._onItemChangeHandler = function(data, _channelKey, _eventData) {
        //jshint unused:vars
        /*global clearTimeout, setTimeout*/
        if(data.timeoutId)
            clearTimeout(data.timeoutId);
        data.timeoutId = setTimeout(this.__update, this._schedulingTimeout, data);
    };

    /**
     * To be used from Subclasses when triggering an update becomes necessary
     */
    _p._requestUpdate = function(momItem) {
        var data = this._items.get(momItem);
        if(!data) {
            throw new KeyError('momItem ' + momItem + ' (' + momItem.nodeID
                    + ' '+ momItem.particulars + ') is not registered! [in '
                    + this.constructor.name +'].');
        }

        this._onItemChangeHandler(data);
    };

    _p._update = function(data) {
        /* global clearTimeout */
        if(data.timeoutId) {
            clearTimeout(data.timeoutId);
            data.timeoutId = null;
        }

        var eventData = data.item.update();
        if(eventData !== undefined)
            this._trigger(data.channel, eventData);
    };

    _p._revoke = function(momItem) {
        var data = this._items.get(momItem)
          , i, l, subscriptions
          ;
        if(!data)
            return 0;

        data.referenceCount -= 1;
        if(data.referenceCount > 0)
            return data.referenceCount;

        // this was the last reference, clean up:
        this._items.delete(momItem);
        if(data.timeoutId)
            clearTimeout(data.timeoutId);

        if(data.subscriptionId)
            data.mom.off(data.subscriptionId);

        subscriptions=data.userSubscriptions;
        for(i=0,l=subscriptions.length;i<l;i++)
            this._off(subscriptions[i]);

        this._destroyItem(data.item);
        return 0;
    };

    // AKA _unsubscribeOne
    _p._userItemOff = function(data, subscriptionId) {
        var i,subscriptions=data.userSubscriptions;
        for(i=subscriptions.length-1;i>=0;i--) {
            if(subscriptions[i] === subscriptionId) {
                subscriptions.splice(i, 1);
                this._off(subscriptionId);
                break;
            }
        }
    };

    _p._userItemOn = function(data, callback, subscriberData) {
        var subscriptionId = this._on(data.channel, callback, subscriberData);
        data.userSubscriptions.push(subscriptionId);
        return subscriptionId;
    };

    _p._userItemDestroy = function(data, state) {
        if(state.destroyed)
            throw new Error('The instance was already destroyed.');
        state.destroyed = true;
        if(state.subscriptionID)
            this._userItemOff(data, state.subscriptionID);
        return this._revoke(data.mom);
    };

    _p._getItem = function(momItem) {
        var data = this._items.get(momItem);
        if(!data) {
            data = this._makeItem(momItem);
            this._items.set(momItem, data);
            this._onItemChangeHandler(data);
        }
        return data;
    };

    /**
     * Returns an "instance" of the requested data. That instance is
     * an object of ReturnValue, with the API:
     *
     * item.value // Whatever the service provides
     * item.destroy // decrease the reference count and unsubscribe if subscribe via get
     *
     * Callback will be fired whenever an update to the (returned)
     * value happened. I.e. When the value represented by the returned item
     * changed. It may be that the glyph/node changed, but the data that is
     * represented here did not change, then no callback may be triggered.
     * It also may be that the callback is called even though the value
     * has not changed; in some cases it may be cheaper (computation time
     * or much rather developer time) to run the callbacks than to check
     * if there was change.
     *
     */
    _p.get = function(momNode, callback, subscriberData) {
        var data = this._getItem(momNode)
          , value
          , instanceState = {
                destroyed: false
              , subscriptionID: null
            }
          , destroyFunc
          ;
        data.referenceCount += 1;
        value = this._getUserItem(data.item);
        destroyFunc = this._userItemDestroy.bind(this, data, instanceState);
        if(callback)
            instanceState.subscriptionID = this._userItemOn(data, callback, subscriberData);
        return new ReturnValue(value, destroyFunc);
    };

    return _DataTransformationCache;
});

define('Atem-Pen-Case/pens/RecordingPointPen',[
    './AbstractPointPen'
 ], function(
    Parent
) {
    "use strict";

    function RecordingPointPen() {
        Parent.call(this);
        this._commands = [];
    }
    var _p = RecordingPointPen.prototype = Object.create(Parent.prototype);

    _p._addCommand = function (name, args) {
        this._commands.push([name, args]);
    };

    _p.drawPoints = function(pen) {
        var i,l, command,commands = this._commands;
        for(i=0,l=commands.length;i<l;i++) {
            command = commands[i];
            pen[command[0]].apply(pen, command[1]);
        }
    };

    /**
     * Start a new sub path.
     */
    _p.beginPath = function(kwargs/*optional, dict*/) {
        this._addCommand('beginPath', [kwargs || {}]);
    };

    /**
     * End the current sub path.
     */
    _p.endPath = function() {
        this._addCommand('endPath', []);
    };

    /**
     * Add a point to the current sub path.
     */
    _p.addPoint = function(
        pt,
        segmentType /* default null */,
        smooth /* default false */,
        name /* default null */,
        kwargs /* default an object, javascript has no **kwargs syntax */
    ) {
        segmentType = (segmentType === undefined) ? null : segmentType;
        smooth = (smooth || false);
        name = (name === undefined) ? null : name;
        kwargs = (kwargs || {});//an "options" object
        this._addCommand('addPoint', [pt, segmentType, smooth, name, kwargs]);
    };

    /**
     * Add a sub glyph.
     */
    _p.addComponent = function(baseGlyphName, transformation) {
        this._addCommand('addComponent', [baseGlyphName, transformation]);
    };

    return RecordingPointPen;
});

define('Atem-Pen-Case/pens/RecordingAndComparingPointPen',[
    './RecordingPointPen'
], function(
    Parent
) {
    "use strict";

    function RecordingAndComparingPointPen(compareCommands) {
        Parent.call(this);
        this._compareCommands = compareCommands || [];
        this._commands = [];
        this.changed = false;
    }

    var _p = RecordingAndComparingPointPen.prototype = Object.create(Parent.prototype);

    _p.getCommands = function() {
        return this._commands;
    };

    _p._hasChanged = function(command) {
        var other = this._compareCommands[this._commands.length]
          , data, otherData
          ;
        if(!other)
            return true;
        if(command[0] !== other[0])
            return true;
        // this is not going to happen, because RecordingPointPen
        // normalizes this
        // if(command[1].length !== other[1].length) return true;
        data = command[1];
        otherData = other[1];
        switch(command[0]){
            //case ('beginPath') :
                // I don't compare kwargs here yet. a probably easy
                // to do thing would be to compare JSON.stringfy here.
                // my focus is however to detect outline changes, not
                // identifier or name changes etc.
                // skips data[0] === kwargs
            //case ('endPath') :
                // nothing to compare
            //    break;
            case ('addComponent'):
                if(data[0] !== otherData[0])
                    return true;
                if(Array.prototype.join(data[1],',') !== Array.prototype.join(otherData[1],','))
                    return true;
                break;
            case ('addPoint'):
                if(Array.prototype.join.call(data[0],',') !== Array.prototype.join.call(otherData[0],','))
                    return true;
                if(data[1] !== otherData[1])
                    return true;
                if(data[2] !== otherData[2])
                    return true;
                // skips data[3] === name and data[4] === kwargs
        }
        return false;
    };

    _p._addCommand = function(name, args) {
        var command = [name, args];
        // once changed we don't compare any further!
        if(!this.changed)
            this.changed = this._hasChanged(command);
        this._commands.push(command);
    };
    return RecordingAndComparingPointPen;
});

define('Atem-Pen-Case/pens/TransformPointPen',[
    './AbstractPointPen'
  , 'Atem-Math-Tools/transform'
], function(
    Parent
  , transform
) {
    "use strict";
    var Transform = transform.Transform;
    /**
     * PointPen that transforms all coordinates using a Affine transformation,
     * and passes them to another pen.
     */

    /*constructor*/
    /**
     * The 'outPen' argument is another PointPen object. It will receive the
     * transformed coordinates. The 'transformation' argument can either
     * be a six-element Array, or a tools.misc.transform.Transform object.
     */
    function TransformPointPen(outPen, transformation) {
        Parent.call(this);
        if( transformation instanceof Array)
            transformation = new Transform(transformation);
        this._transformation = transformation;

        this._outPen = outPen;
    }

    /*inheritance*/
    var _p = TransformPointPen.prototype = Object.create(Parent.prototype);
    _p.constructor = TransformPointPen;

    /*definition*/
    _p._transformPoint = function( pt ) {
        return this._transformation.transformPoint(pt);
    };

    _p.beginPath = function( kwargs/*optional, dict*/ ) {
        this._outPen.beginPath(kwargs);
    };

    _p.endPath = function() {
        this._outPen.endPath();
    };

    _p.addPoint = function( pt, segmentType, smooth, name, kwargs ) {
        this._outPen.addPoint(this._transformPoint(pt), segmentType, smooth, name, kwargs);
    };

    _p.addComponent = function(glyphName, transformation) {
        transformation = this._transformation.transform(transformation);
        this._outPen.addComponent(glyphName, transformation);
    };

    return TransformPointPen;
});

define('Atem-MOM-Toolkit/dataTransformationCaches/DrawPointsProvider',[
    'Atem-Errors/errors'
  , 'Atem-CPS-Toolkit/dataTransformationCaches/_DataTransformationCache'
  , 'Atem-Pen-Case/pens/RecordingAndComparingPointPen'
  , 'Atem-Pen-Case/pens/TransformPointPen'
  , 'Atem-Pen-Case/pens/PointToSegmentPen'
  , 'Atem-MOM/rendering/basics'
], function(
    errors
  , Parent
  , RecordingAndComparingPointPen
  , TransformPointPen
  , PointToSegmentPen
  , renderingBasics
) {
    "use strict";
    var ValueError = errors.Value
      , KeyError = errors.Key
      , applyGlyph = renderingBasics.applyGlyph
      ;

    /**
     * The methods of renderer should have the signature: (momGlyph, pointPen);
     * The results of rendering are cached in a RecordingAndComparingPointPen
     *
     * Note that `glyph` and `component` are not rendered by renderer
     * even if renderer defines them
     *
     * var item = myDrawPointsProvider.get(momNode [, callback, firstArgOfCallback])
     * var pointPen = MyCoolPointPen()
     *
     * item.value.drawPoints(pointPen);
     *
     * // When the path changes callback will be called:
     * callback(firstArgOfCallback, _channel, eventData);
     * // you can ignore _channel, eventData is probably always: {type: 'points-changed'}
     * // so when this event fires it's good when you have `item` around
     * // the you can draw it again
     * item.value.drawPoints(pointPen);
     *
     * // when done, do this:
     * item.destroy()
     */
    function DrawPointsProvider(renderer) {
        Parent.call(this);
        this._renderer = renderer;
        this._schedulingTimeout = 5;
    }

    var _p = DrawPointsProvider.prototype = Object.create(Parent.prototype);
    _p.constructor = DrawPointsProvider;

    _p.supports = function(type) {
        return type === 'glyph' || type === 'component' || type in this._renderer;
    };

    _p._drawPointsGlyphChild = function (item, pen) {
        item.recorder.drawPoints(pen);
    };

    _p._drawPointsComponent = function (item, pen) {
        var tPen = new TransformPointPen(pen, item.transformation);
        item.subscription.value.drawPoints(tPen);
    };

    _p._drawPointsGlyph = function (item, pen) {
        var subscriptions = item.subscriptions
          , i, l
          ;
        for(i=0,l=subscriptions.length;i<l;i++)
            subscriptions[i].value.drawPoints(pen);
    };

    /**
     * Used for both glyph and component, because they use this service
     * recursiveley.
     */
    _p._childUpdated = function(item, _channel, _eventData) {
        //jshint unused:vars
        item.childUpdated = true;
        this._requestUpdate(item.mom);
    };

    _p._revokeItems = function(items) {
        var i,l;
        for(i=0,l=items.length;i<l;i++)
            items[i].destroy();
    };

    _p._componentUpdate = function(item) {
        var oldTransformation = item.transformation
          , changed, componentGlyph
          ;
        item.transformation = item.mom.getComputedStyle().get( 'transformation' );
                  // If child updated this changed in any case
        changed = item.childUpdated
                    || !oldTransformation // only initially
                    || !item.transformation.cmp(oldTransformation);

        // reset the flag
        item.childUpdated = false;

        // Currently we won't get noticed when baseGlyphName changed.
        // Another case woll be when componentGlyph ccan cease to
        // exist, which is leagal for a component, to reference a
        // non existant glyph.
        if(item.glyphName !== item.mom.baseGlyphName) {
            // so this happens yet only initially once
            item.glyphName = item.mom.baseGlyphName;
            changed = true;
            if(item.subscription)
                item.subscription.destroy();
            item.subscription = null;
            // may not exist (that's legal in UFO)
            componentGlyph = item.mom.master.query('glyph#' + item.glyphName);
            if(componentGlyph) {
                item.subscription = this.get(componentGlyph, [this, '_childUpdated'], item);
            }
        }
        if(changed)
            return {type: 'points-changed'};
    };

    _p._glyphUpdate = function(item) {
        // If a child updated this changed in any case
        var changed = item.childUpdated;
        item.childUpdated = false;
        // No need to update on glyph "CPS-change", because
        // all the influences that change outlines are covered by the
        // child element listeners. The glyph itself does not draw
        // anything to the canvas.
        if(changed)
            return {type: 'points-changed'};
    };

    _p._glyphChildUpdate = function(item) {
        var oldCommands = item.recorder ? item.recorder.getCommands() : false
          , rollbackRecorder = item.recorder
          ;
        item.recorder = new RecordingAndComparingPointPen(oldCommands || []);

        try {
            // duck typing a "glyph" for the standard drawing function
            // NOTE: if item.mom.type is not registered there,
            // nothing will be drawn!
            // drawPoints ...
            applyGlyph(this._renderer, {children: [item.mom]}, item.recorder);
        }
        catch(e) {
            // FIXME:
            console.warn('Drawing MOM Node', item.mom.particulars, 'failed with ' + e, e.stack);
            if(e instanceof KeyError)
                console.info('KeyError means usually that a property definition in the CPS is missing');
            console.info('The user should get informed by the UI!');

            // attempt to fail gracefully
            item.recorder = rollbackRecorder || new RecordingAndComparingPointPen([]);
            item.recorder.changed = false;
        }

        if(item.recorder.changed || !oldCommands)
            // if not this.recorder.changed we still want to create
            // the event if this was the first run of update. This means
            // the item is 'empty' To enable proper initialization.
            return {type: 'points-changed'};
    };

    _p._initComponent = function(item) {
        item.glyphName = null;
        item.subscription = null;
        item.transformation = null;
        item.childUpdated = false;
        item.drawPointsExport = this._drawPointsComponent.bind(this, item);
        item.update = this._componentUpdate.bind(this, item);
    };

    _p._initGlyph = function(item) {
        var children = item.mom.children
          , child, i, l
          , subscription, subscriptions
          ;
        item.subscriptions = subscriptions = [];
        item.childUpdated = false;

        // TODO: (when we do MOM manipulation)
        // ComponentGlyph.on('mom-change') ... is not yet available.
        // Things that don't happen yet but will happen in the future:
        // Need to update if glyph ceases to exist.
        // Need to update if glyph changes it's contents,
        // i.e. more or less penstrokes etc.
        for(i=0,l=children.length;i<l;i++) {
            child = children[i];
            if(!this.supports(child.type))
                continue;
            subscription = this.get(child, [this, '_childUpdated'], item);
            item.subscriptions.push(subscription);
        }
        item.drawPointsExport = this._drawPointsGlyph.bind(this, item);
        item.update = this._glyphUpdate.bind(this, item);
    };

    _p._initGlyphChild = function(item) {
        item.recorder = null;
        item.drawPointsExport = this._drawPointsGlyphChild.bind(this, item);
        item.update = this._glyphChildUpdate.bind(this, item);
    };

    /**
     * Return an object with one public method `update` which is called
     * when the momNode triggers its "CPS-change" event.
     */
    _p._itemFactory = function (momNode) {
        if(!this.supports(momNode.type))
            throw new ValueError('Node type not supported :' + momNode);


        var item = {
            mom: momNode
          , drawPointsExport: null
          , update: null
        };

        if(momNode.type === 'glyph')
            this._initGlyph(item);
        else if(momNode.type === 'component')
            this._initComponent(item);
        else
            this._initGlyphChild(item);

        // initialize
        item.update();
        return item;
    };

    /**
     * Clean up all the state that _itemFactory or the operation of the item created.
     * The item will be deleted and not be called again;
     */
    _p._destroyItem = function (item) {
        if(item.subscription)
            item.subscription.destroy();
        if(item.subscriptions)
             this._revokeItems(item.subscriptions);
        // nothing else to do: the MOM Node subscription will be
        // destroyed by the super class
    };

    /**
     * Return an object upon which a user of this service will base it's operation;
     * see _p.get
     */
    _p._getUserItem = function(item) {
        // we really need only this method to be exported
        return {
            drawPoints: item.drawPointsExport
        };
    };

    return DrawPointsProvider;
});

/**
 * Copyright (c) 2011, Lasse Fister lasse@graphicore.de, http://graphicore.de
 *
 * You should have received a copy of the MIT License along with this program.
 * If not, see http://www.opensource.org/licenses/mit-license.php
 *
 * This pen draws path data to a SVG path element. It inherts from BasePen.
 *
 * Noteable documents:
 *    http://www.w3.org/TR/SVG/paths.html#InterfaceSVGPathSegList
 *    http://www.w3.org/TR/SVG/paths.html#InterfaceSVGPathElement
 */

define('Atem-Pen-Case/pens/SVGPen',[
    './BasePen'
], function(
    Parent
) {
    "use strict";

    /*constructor*/
    function SVGPen(path, glyphSet) {
        Parent.call(this, glyphSet);
        this.path = path;
    }

    /*inheritance*/
    var _p = SVGPen.prototype = Object.create(Parent.prototype);
    _p.constructor = SVGPen;

    /*definition*/
        _p._addSegment = function(segment)
        {
            var d = this.path.getAttribute('d');
            this.path.setAttribute('d', (d ? d + ' ' : '') + segment);
        };

        _p._moveTo = function(pt)
        {
            this._addSegment(['M',pt[0],pt[1]].join(' '));
        };

        _p._lineTo = function(pt)
        {
            this._addSegment(['L',pt[0],pt[1]].join(' '));
        };

        _p._curveToOne = function(pt1, pt2, pt3)
        {
            this._addSegment(['C', pt1[0], pt1[1], pt2[0], pt2[1]
                                            , pt3[0], pt3[1],].join(' '));
        };

        _p._closePath = function()
        {
            this._addSegment('z');
        };
        /**
         * Delete all segments from path
         */
        _p.clear = function()
        {
            this.path.setAttribute('d', '');
        };

    return SVGPen;
});

define('main',[
    'Atem-MOM/project/Project'
  , 'Atem-IO/io/staticBrowserREST'
  , 'Atem-IO/io/InMemory'

  , 'Atem-MOM/rendering/basics'
  , 'Atem-MOM-Toolkit/dataTransformationCaches/DrawPointsProvider'

  , 'Atem-Pen-Case/pens/PointToSegmentPen'
  , 'Atem-Pen-Case/pens/SVGPen'
  , 'Atem-Pen-Case/pens/RecordingPointPen'
  , 'Atem-Pen-Case/pens/BoundsPen'
  , 'Atem-MOM/MOM/Glyph'
],
function (
    Project
  , ioREST
  , InMemory

  , renderingBasics
  , DrawPointsProvider

  , PointToSegmentPen
  , SVGPen
  , RecordingPointPen
  , BoundsPen
  , Glyph
) {
    "use strict";
    function main(exports) {

        var projectDir = 'project'
          , drawPointsOutlineProvider = new DrawPointsProvider(renderingBasics.outlinesRenderer)
          , io = new InMemory()
          // InMemory is its own event emitter
          //, fsEvents = io
          // BUT, we don't use fsEvents currently (see also MOM/project/Project)
          , cpsLibIoMounts = [
                // add more of these configuration objects to include more
                // libraries each object yields in a call to MountingIO.mount
                // the keys correlate with the argument names of MountingIO
                // however, Project does some augmentation.
                {
                    io: ioREST
                  , mountPoint: 'lib/MOM'
                  , pathOffset: 'lib/bower_components/Atem-MOM/lib/cpsLib'
                }
              , {
                    io: ioREST
                  , mountPoint: 'lib/metapolator'
                  , pathOffset: 'lib/bower_components/metapolator-cpsLib/lib'
                }
            ]
          , project = new Project(io, projectDir, undefined, cpsLibIoMounts)
          ;

        // We load a boilerplate project that can be used to bring
        // cutom CPS and also other presets into the environment.
        io.mkDir(false, 'project');
        // Doing this all sync for this case, because its ease. We may
        // change that when we know more about the interaction with our
        // environment.
        ioREST.copyRecursive(false, 'project', io, projectDir);
        project.load(false);
        project.openSession(false);

        // TODO: the API should eventually be defined in its own module.
        /**
         * This is basically the identity function, no outline transformation
         * will happen.
         */
        function drawGlyph(json, pen) {
            var data = JSON.parse(json)
              , pointPen = pen.addPoint && typeof pen.addPoint === 'function'
                                ? pen
                                : new PointToSegmentPen(pen)
              , glyph = new Glyph()
              , outlineProvider
              , univers = project.controller.rootNode.getChild(0)
              , master = univers.getById('base-default')
              ;

            glyph.loadTree(data);
            master.add(glyph);

            // could use callback to get notified when the outline changed
            outlineProvider = drawPointsOutlineProvider.get(glyph);//  , callback, firstArgOfCallback);
            outlineProvider.value.drawPoints(pointPen);
            // cleanup again
            // NOTE: we could also keep the state across several requests
            // it would involve more book keeping by Glyphs though. But then
            // Glyphs could for example have its own sliders etc. directly
            // linked to an existing state.

            outlineProvider.destroy();
            master.remove(glyph);
        }

        /**
         * This is meant for debugging/adhoc testing. In a browser console
         * this can be called and an SVG will be appended to the body.
         * It has no direct use for Glyphs!
         */
        function drawGlyphToDocument(json) {
            /* global document:true */
            var svgns = 'http://www.w3.org/2000/svg'
              , path = document.createElementNS(svgns, 'path')
              , pen = new RecordingPointPen()
              , svgPen = new SVGPen(path, {})
              , boundsPen = new BoundsPen({})
              , svg, bounds
              ;
            drawGlyph(json, pen);
            pen.drawPoints(new PointToSegmentPen(svgPen));
            pen.drawPoints(new PointToSegmentPen(boundsPen));
            bounds = boundsPen.getBounds();
            // >>>  [9.999999999999998, -9, 528, 670]
            svg = document.createElementNS(svgns, 'svg');
            svg.setAttribute('viewBox', [0, 0, bounds[2], bounds[3]].join(' '))
            svg.style.overflow = 'visible';
            svg.style.width = '50%';
            svg.style.margin = '5%';
            path.setAttribute('transform', 'scale(1, -1) translate(0, '+(-bounds[3])+')');
            svg.appendChild(path);
            document.body.appendChild(svg);
        }

        // export
        exports.drawGlyph = drawGlyph;
        exports.drawGlyphToDocument = drawGlyphToDocument;

        return true;
    }
    return main;
});

