#!/bin/sh
SOURCE="$(dirname $0)/..";
APP="MOM Developer Tool"
PROJECT=$1
TARGET=$2


if test "$1" = '--help' || test "$1" = '-h' || test "$1" = ''; then
    echo "Usage: $(basename $0) PROJECTDIR TARGETDIR\n"
    echo 'Build an instance of a Metapolator build as a HTML website to be served (statically) from any simple HTTP file server.\n'

    # echo 'APPLICATION: the Metapolator application to be exported, choices are:'
    # echo '\t * metapolator'
    # echo '\t * red-pill'
    # echo '\t * slider-demo'
    # echo '\t * stand-alone'
    # echo '\t * --help: displays this page'

    echo 'PROJECTDIR: a Metapolator project directory.'

    echo 'TARGETDIR: the target directory of this operation.'

    exit 0;
fi

#
lessfile=0

mainfile=main
# lessfile=$SOURCE/app/lib/main.less
assetsrootdir=0

echo "Exporting $APP"

mkdir "$TARGET" \
    && rsync -vvap "$PROJECT/" "$TARGET/project/" \
    && mkdir -p "$TARGET/lib" \
    && mkdir -p "$TARGET/lib/bower_components/Atem-MOM/lib/cpsLib" \
    && mkdir -p "$TARGET/lib/bower_components/metapolator-cpsLib" \
    && rsync -vvap "$SOURCE/app/lib/bower_components/Atem-MOM/lib/cpsLib" "$TARGET/lib/bower_components/Atem-MOM/lib" \
    && rsync -vvap "$SOURCE/app/lib/bower_components/metapolator-cpsLib/lib" "$TARGET/lib/bower_components/metapolator-cpsLib"\
    && cp "$SOURCE/README.md" "$TARGET" \
    && cp "$SOURCE/LICENSE" "$TARGET"\
    && cp "$SOURCE/AUTHORS" "$TARGET"\
    && cp "$SOURCE/CONTRIBUTORS" "$TARGET"

if [ $? != 0 ]; then
    echo "ERROR: failed copying resources."
    exit 1
fi;



if test $lessfile != 0; then
    # build the less to css
    node $SOURCE/node_modules/.bin/lessc \
        --include-path="$SOURCE" \
        --strict-imports $lessfile \
        --rootpath="$assetsrootdir/" \
        "$TARGET/main.css";
fi


if test $assetsrootdir != 0; then
    test -d "$TARGET/$assetsrootdir/app" || mkdir -p "$TARGET/$assetsrootdir/app";
    cp -R $SOURCE/app/$assetsrootdir/app/assets $TARGET/$assetsrootdir/app/assets;
fi


# copy files not suited for the optimizer
ATEM_MOM="lib/bower_components/Atem-MOM/lib"
# The optimizer fails on Harmony generators
MODULE_1="$ATEM_MOM/rendering/basics.es6.js"
MODULE_2="$ATEM_MOM/export/UFOExporter.es6.js"
MODULE_3="$ATEM_MOM/export/OTFExporter.es6.js"
MODULE_4="$ATEM_MOM/import/UFOImporter.es6.js"
# We have a feature detection in the main file, if generators
# are not supported, these files needs to be present
MODULE_5="$ATEM_MOM/rendering/basics.js"
MODULE_6="$ATEM_MOM/export/UFOExporter.js"
MODULE_7="$ATEM_MOM/export/OTFExporter.js"
MODULE_8="$ATEM_MOM/import/UFOImporter.js"
MODULES="$MODULE_1 $MODULE_2 $MODULE_3 $MODULE_4 $MODULE_5 $MODULE_6 $MODULE_7 $MODULE_8"
for module in $MODULES; do
    mkdir -p "$(dirname $TARGET/$module)" && cp "$SOURCE/app/$module" "$TARGET/$module";
done

$(dirname $0)/momglyphs-build $SOURCE "$TARGET/$mainfile"".js";

cp $SOURCE/app/index.html $TARGET/index.html;

for line in $(find $TARGET -maxdepth 1 -name "*.html" -type f); do
  echo "activating production <header> of $line";
  mv $line "$line~";
  sed s":<!-- development -->:<!-- development:" "$line~" | \
      sed s":<!-- production:<!-- production -->:" > "$line";
  unlink "$line~";
done


# make a directory listing at index.html in $TARGET for every directory recursively

# There is a HTTP HEAD request to test whether a dir exists.
# git-hub pages does not return a directory listing, so we trick it
# into returning a HTTP 200 status code
# To read the dir, our file system abstraction would expect a \n separated list of
# directory contents, where directories end with a slash "/"

AUGMENTIOREST="$TARGET/project
        $TARGET/lib/bower_components/Atem-MOM/lib/cpsLib
        $TARGET/lib/bower_components/metapolator-cpsLib"

for TARGETPROJECT in $AUGMENTIOREST; do
    echo augmenting for RESTful Atem-IO: $TARGETPROJECT;
    for line in $(find $TARGETPROJECT -type d); do
        touch "$line/index.html";
        if [ "$line" = "$TARGETPROJECT" ]; then
            continue;
        fi
        echo "$(basename $line)/" >> "$(dirname $line)/index.html";
    done
    echo "----------------------";
    for line in $(find $TARGETPROJECT -type f); do
        if [ "$(basename $line)" = 'index.html' ]; then
            continue;
        fi
        echo "$(basename $line)" >> "$(dirname $line)/index.html";
    done
done


